Array	A			classes							Arrays are ordered, integer-indexed collections of any object.<br>Array indexing starts at 0, as in C or Java. A negative index is assumed to be relative to the end of the array---that is, an index of -1 indicates the last element of the array, -2 is the next to last element in the array, and so on.	http://ruby-doc.org/core/Array.html
Array::[]	A			class methods							Returns a new array populated with the given objects.<pre><code>Array.[]( 1, 'a', /^A/ ) # => [1, "a", /^A/]\nArray[ 1, 'a', /^A/ ]    # => [1, "a", /^A/]\n[ 1, 'a', /^A/ ]         # => [1, "a", /^A/]\n</code></pre>	http://ruby-doc.org/core/Array.html#method-c-5B-5D
Array::new	A			class methods							<pre><code>new(size=0, default=nil)\nnew(array)\nnew(size) {|index| block }</code></pre>Returns a new array.<br>In the first form, if no arguments are sent, the new array will be empty. When a size and an optional default are sent, an array is created with size copies of default. Take notice that all elements will reference the same object default.<br>The second form creates a copy of the array passed as a parameter (the array is generated by calling #to_ary on the parameter).<pre><code>first_array = ["Matz", "Guido"]\n\nsecond_array = Array.new(first_array) #=> ["Matz", "Guido"]\n\nfirst_array.equal? second_array       #=> false\n</code></pre>In the last form, an array of the given size is created. Each element in this array is created by passing the element’s index to the given block and storing the return value.<pre><code>Array.new(3){ |index| index ** 2 }\n# => [0, 1, 4]\n</code></pre>	http://ruby-doc.org/core/Array.html#method-c-new
Array::try_convert	A			class methods							<pre><code>try_convert(obj) → array or nil</code></pre>Tries to convert obj into an array, using to_ary method. Returns the converted array or nil if obj cannot be converted for any reason. This method can be used to check if an argument is an array.<pre><code>Array.try_convert([1])   #=> [1]\nArray.try_convert("1")   #=> nil\n\nif tmp = Array.try_convert(arg)\n  # the argument is an array\nelsif tmp = String.try_convert(arg)\n  # the argument is a string\nend\n</code></pre>	http://ruby-doc.org/core/Array.html#method-c-try_convert
Array#&	A			instance methods							<pre><code>ary & other_ary      → new_ary</code></pre>Set Intersection — Returns a new array containing elements common to the two arrays, excluding any duplicates. The order is preserved from the original array.<br>It compares elements using their hash and eql? methods for efficiency.<pre><code>[ 1, 1, 3, 5 ] & [ 1, 2, 3 ]                 #=> [ 1, 3 ]\n[ 'a', 'b', 'b', 'z' ] & [ 'a', 'b', 'c' ]   #=> [ 'a', 'b' ]\n</code></pre>See also #uniq.	http://ruby-doc.org/core/Array.html#method-i-26
Array#*	A			instance methods							<pre><code>ary * int     → new_ary\nary * str     → new_string</code></pre>Repetition — With a String argument, equivalent to ary.join(str).<br>Otherwise, returns a new array built by concatenating the int copies of self.<pre><code>[ 1, 2, 3 ] * 3    #=> [ 1, 2, 3, 1, 2, 3, 1, 2, 3 ]\n[ 1, 2, 3 ] * ","  #=> "1,2,3"\n</code></pre>	http://ruby-doc.org/core/Array.html#method-i-2A
Array#+	A			instance methods							<pre><code>ary + other_ary   → new_ary</code></pre>Concatenation — Returns a new array built by concatenating the two arrays together to produce a third array.<pre><code>[ 1, 2, 3 ] + [ 4, 5 ]    #=> [ 1, 2, 3, 4, 5 ]\na = [ "a", "b", "c" ]\nc = a + [ "d", "e", "f" ]\nc                         #=> [ "a", "b", "c", "d", "e", "f" ]\na                         #=> [ "a", "b", "c" ]\n</code></pre>Note that<pre><code>x += y\n</code></pre>is the same as<pre><code>x = x + y\n</code></pre>This means that it produces a new array. As a consequence, repeated use of += on arrays can be quite inefficient.<br>See also #concat.	http://ruby-doc.org/core/Array.html#method-i-2B
Array#-	A			instance methods							<pre><code>ary - other_ary    → new_ary</code></pre>Array Difference<br>Returns a new array that is a copy of the original array, removing any items that also appear in other_ary. The order is preserved from the original array.<br>It compares elements using their hash and eql? methods for efficiency.<pre><code>[ 1, 1, 2, 2, 3, 3, 4, 5 ] - [ 1, 2, 4 ]  #=>  [ 3, 3, 5 ]\n</code></pre>If you need set-like behavior, see the library class Set.	http://ruby-doc.org/core/Array.html#method-i-2D
Array#<<	A			instance methods							<pre><code>ary << obj            → ary</code></pre>Append—Pushes the given object on to the end of this array. This expression returns the array itself, so several appends may be chained together.<pre><code>[ 1, 2 ] << "c" << "d" << [ 3, 4 ]\n        #=>  [ 1, 2, "c", "d", [ 3, 4 ] ]\n</code></pre>	http://ruby-doc.org/core/Array.html#method-i-3C-3C
Array#<=>	A			instance methods							<pre><code>ary <=> other_ary   →  -1, 0, +1 or nil</code></pre>Comparison — Returns an integer (-1, 0, or +1) if this array is less than, equal to, or greater than other_ary.<br>Each object in each array is compared (using the <=> operator).<br>Arrays are compared in an “element-wise” manner; the first element of ary is compared with the first one of other_ary using the <=> operator, then each of the second elements, etc… As soon as the result of any such comparison is non zero (i.e. the two corresponding elements are not equal), that result is returned for the whole array comparison.<br>If all the elements are equal, then the result is based on a comparison of the array lengths. Thus, two arrays are “equal” according to Array#<=> if, and only if, they have the same length and the value of each element is equal to the value of the corresponding element in the other array.<br>nil is returned if the other_ary is not an array or if the comparison of two elements returned nil.<pre><code>[ "a", "a", "c" ]    <=> [ "a", "b", "c" ]   #=> -1\n[ 1, 2, 3, 4, 5, 6 ] <=> [ 1, 2 ]            #=> +1\n[ 1, 2 ]             <=> [ 1, :two ]         #=> nil\n</code></pre>	http://ruby-doc.org/core/Array.html#method-i-3C-3D-3E
Array#==	A			instance methods							<pre><code>ary == other_ary   →   bool</code></pre>Equality — Two arrays are equal if they contain the same number of elements and if each element is equal to (according to Object#==) the corresponding element in other_ary.<pre><code>[ "a", "c" ]    == [ "a", "c", 7 ]     #=> false\n[ "a", "c", 7 ] == [ "a", "c", 7 ]     #=> true\n[ "a", "c", 7 ] == [ "a", "d", "f" ]   #=> false\n</code></pre>	http://ruby-doc.org/core/Array.html#method-i-3D-3D
Array#[]	A			instance methods							<pre><code>ary[index]                → obj     or nil\nary[start, length]        → new_ary or nil\nary[range]                → new_ary or nil\nslice(index)          → obj     or nil\nslice(start, length)  → new_ary or nil\nslice(range)          → new_ary or nil</code></pre>Element Reference — Returns the element at index, or returns a subarray starting at the start index and continuing for length elements, or returns a subarray specified by range of indices.<br>Negative indices count backward from the end of the array (-1 is the last element). For start and range cases the starting index is just before an element. Additionally, an empty array is returned when the starting index for an element range is at the end of the array.<br>Returns nil if the index (or starting index) are out of range.<pre><code>a = [ "a", "b", "c", "d", "e" ]\na[2] +  a[0] + a[1]    #=> "cab"\na[6]                   #=> nil\na[1, 2]                #=> [ "b", "c" ]\na[1..3]                #=> [ "b", "c", "d" ]\na[4..7]                #=> [ "e" ]\na[6..10]               #=> nil\na[-3, 3]               #=> [ "c", "d", "e" ]\n# special cases\na[5]                   #=> nil\na[6, 1]                #=> nil\na[5, 1]                #=> []\na[5..10]               #=> []\n</code></pre>	http://ruby-doc.org/core/Array.html#method-i-5B-5D
Array#[]=	A			instance methods							<pre><code>ary[index]         = obj                      →  obj\nary[start, length] = obj or other_ary or nil  →  obj or other_ary or nil\nary[range]         = obj or other_ary or nil  →  obj or other_ary or nil</code></pre>Element Assignment — Sets the element at index, or replaces a subarray from the start index for length elements, or replaces a subarray specified by the range of indices.<br>If indices are greater than the current capacity of the array, the array grows automatically. Elements are inserted into the array at start if length is zero.<br>Negative indices will count backward from the end of the array. For start and range cases the starting index is just before an element.<br>An IndexError is raised if a negative index points past the beginning of the array.<br>See also #push, and #unshift.<pre><code>a = Array.new\na[4] = "4";                 #=> [nil, nil, nil, nil, "4"]\na[0, 3] = [ 'a', 'b', 'c' ] #=> ["a", "b", "c", nil, "4"]\na[1..2] = [ 1, 2 ]          #=> ["a", 1, 2, nil, "4"]\na[0, 2] = "?"               #=> ["?", 2, nil, "4"]\na[0..2] = "A"               #=> ["A", "4"]\na[-1]   = "Z"               #=> ["A", "Z"]\na[1..-1] = nil              #=> ["A", nil]\na[1..-1] = []               #=> ["A"]\na[0, 0] = [ 1, 2 ]          #=> [1, 2, "A"]\na[3, 0] = "B"               #=> [1, 2, "A", "B"]\n</code></pre>	http://ruby-doc.org/core/Array.html#method-i-5B-5D-3D
Array#any?	A			instance methods							<pre><code>any? [{ |obj| block }]   → true or false</code></pre>See also Enumerable#any?	http://ruby-doc.org/core/Array.html#method-i-any-3F
Array#assoc	A			instance methods							<pre><code>assoc(obj)   → element_ary  or  nil</code></pre>Searches through an array whose elements are also arrays comparing obj with the first element of each contained array using obj.==.<br>Returns the first contained array that matches (that is, the first associated array), or nil if no match is found.<br>See also #rassoc<pre><code>s1 = [ "colors", "red", "blue", "green" ]\ns2 = [ "letters", "a", "b", "c" ]\ns3 = "foo"\na  = [ s1, s2, s3 ]\na.assoc("letters")  #=> [ "letters", "a", "b", "c" ]\na.assoc("foo")      #=> nil\n</code></pre>	http://ruby-doc.org/core/Array.html#method-i-assoc
Array#at	A			instance methods							<pre><code>at(index)   →   obj  or nil</code></pre>Returns the element at index. A negative index counts from the end of self. Returns nil if the index is out of range. See also #[].<pre><code>a = [ "a", "b", "c", "d", "e" ]\na.at(0)     #=> "a"\na.at(-1)    #=> "e"\n</code></pre>	http://ruby-doc.org/core/Array.html#method-i-at
Array#bsearch	A			instance methods							<pre><code>bsearch {|x| block }  → elem</code></pre>By using binary search, finds a value from this array which meets the given condition in O(log n) where n is the size of the array.<br>You can use this method in two use cases: a find-minimum mode and a find-any mode. In either case, the elements of the array must be monotone (or sorted) with respect to the block.<br>In find-minimum mode (this is a good choice for typical use case), the block must return true or false, and there must be an index i (0 <= i <= ary.size) so that:<br>the block returns false for any element whose index is less than i, and<br>the block returns true for any element whose index is greater than or equal to i.<br>This method returns the i-th element. If i is equal to ary.size, it returns nil.<pre><code>ary = [0, 4, 7, 10, 12]\nary.bsearch {|x| x >=   4 } #=> 4\nary.bsearch {|x| x >=   6 } #=> 7\nary.bsearch {|x| x >=  -1 } #=> 0\nary.bsearch {|x| x >= 100 } #=> nil\n</code></pre>In find-any mode (this behaves like libc’s bsearch(3)), the block must return a number, and there must be two indices i and j (0 <= i <= j <= ary.size) so that:<br>the block returns a positive number for ary if 0 <= k < i,<br>the block returns zero for ary if i <= k < j, and<br>the block returns a negative number for ary if j <= k < ary.size.<br>Under this condition, this method returns any element whose index is within i…j. If i is equal to j (i.e., there is no element that satisfies the block), this method returns nil.<pre><code>ary = [0, 4, 7, 10, 12]\n# try to find v such that 4 <= v < 8\nary.bsearch {|x| 1 - x / 4 } #=> 4 or 7\n# try to find v such that 8 <= v < 10\nary.bsearch {|x| 4 - x / 2 } #=> nil\n</code></pre>You must not mix the two modes at a time; the block must always return either true/false, or always return a number. It is undefined which value is actually picked up at each iteration.	http://ruby-doc.org/core/Array.html#method-i-bsearch
Array#bsearch_index	A			instance methods							<pre><code>bsearch_index {|x| block }  → int or nil</code></pre>By using binary search, finds an index of a value from this array which meets the given condition in O(log n) where n is the size of the array.<br>It supports two modes, depending on the nature of the block and they are exactly the same as in the case of bsearch method with the only difference being that this method returns the index of the element instead of the element itself. For more details consult the documentation for bsearch.	http://ruby-doc.org/core/Array.html#method-i-bsearch_index
Array#clear	A			instance methods							<pre><code>clear    → ary</code></pre>Removes all elements from self.<pre><code>a = [ "a", "b", "c", "d", "e" ]\na.clear    #=> [ ]\n</code></pre>	http://ruby-doc.org/core/Array.html#method-i-clear
Array#collect	A			instance methods							<pre><code>collect { |item| block }  → new_ary\ncollect                   → Enumerator</code></pre>Invokes the given block once for each element of self.<br>Creates a new array containing the values returned by the block.<br>See also Enumerable#collect.<br>If no block is given, an Enumerator is returned instead.<pre><code>a = [ "a", "b", "c", "d" ]\na.collect { |x| x + "!" }         #=> ["a!", "b!", "c!", "d!"]\na.map.with_index { |x, i| x * i } #=> ["", "b", "cc", "ddd"]\na                                 #=> ["a", "b", "c", "d"]\n</code></pre>	http://ruby-doc.org/core/Array.html#method-i-collect
Array#collect!	A			instance methods							<pre><code>collect! {|item| block }   → ary\ncollect!                   → Enumerator</code></pre>Invokes the given block once for each element of self, replacing the element with the value returned by the block.<br>See also Enumerable#collect.<br>If no block is given, an Enumerator is returned instead.<pre><code>a = [ "a", "b", "c", "d" ]\na.map! {|x| x + "!" }\na #=>  [ "a!", "b!", "c!", "d!" ]\na.collect!.with_index {|x, i| x[0...i] }\na #=>  ["", "b", "c!", "d!"]\n</code></pre>	http://ruby-doc.org/core/Array.html#method-i-collect-21
Array#combination	A			instance methods							<pre><code>combination(n) { |c| block }    → ary\ncombination(n)                  → Enumerator</code></pre>When invoked with a block, yields all combinations of length n of elements from the array and then returns the array itself.<br>The implementation makes no guarantees about the order in which the combinations are yielded.<br>If no block is given, an Enumerator is returned instead.<br>Examples:<pre><code>a = [1, 2, 3, 4]\na.combination(1).to_a  #=> [[1],[2],[3],[4]]\na.combination(2).to_a  #=> [[1,2],[1,3],[1,4],[2,3],[2,4],[3,4]]\na.combination(3).to_a  #=> [[1,2,3],[1,2,4],[1,3,4],[2,3,4]]\na.combination(4).to_a  #=> [[1,2,3,4]]\na.combination(0).to_a  #=> [[]] # one combination of length 0\na.combination(5).to_a  #=> []   # no combinations of length 5\n</code></pre>	http://ruby-doc.org/core/Array.html#method-i-combination
Array#compact	A			instance methods							<pre><code>compact     → new_ary</code></pre>Returns a copy of self with all nil elements removed.<pre><code>[ "a", nil, "b", nil, "c", nil ].compact\n                  #=> [ "a", "b", "c" ]\n</code></pre>	http://ruby-doc.org/core/Array.html#method-i-compact
Array#compact!	A			instance methods							<pre><code>compact!    → ary  or  nil</code></pre>Removes nil elements from the array.<br>Returns nil if no changes were made, otherwise returns the array.<pre><code>[ "a", nil, "b", nil, "c" ].compact! #=> [ "a", "b", "c" ]\n[ "a", "b", "c" ].compact!           #=> nil\n</code></pre>	http://ruby-doc.org/core/Array.html#method-i-compact-21
Array#concat	A			instance methods							<pre><code>concat(other_ary)   → ary</code></pre>Appends the elements of other_ary to self.<pre><code>[ "a", "b" ].concat( ["c", "d"] ) #=> [ "a", "b", "c", "d" ]\na = [ 1, 2, 3 ]\na.concat( [ 4, 5 ] )\na                                 #=> [ 1, 2, 3, 4, 5 ]\n</code></pre>See also Array#+.	http://ruby-doc.org/core/Array.html#method-i-concat
Array#count	A			instance methods							<pre><code>count                   → int\ncount(obj)              → int\ncount { |item| block }  → int</code></pre>Returns the number of elements.<br>If an argument is given, counts the number of elements which equal obj using ==.<br>If a block is given, counts the number of elements for which the block returns a true value.<pre><code>ary = [1, 2, 4, 2]\nary.count                  #=> 4\nary.count(2)               #=> 2\nary.count { |x| x%2 == 0 } #=> 3\n</code></pre>	http://ruby-doc.org/core/Array.html#method-i-count
Array#cycle	A			instance methods							<pre><code>cycle(n=nil) { |obj| block }  → nil\ncycle(n=nil)                  → Enumerator</code></pre>Calls the given block for each element n times or forever if nil is given.<br>Does nothing if a non-positive number is given or the array is empty.<br>Returns nil if the loop has finished without getting interrupted.<br>If no block is given, an Enumerator is returned instead.<pre><code>a = ["a", "b", "c"]\na.cycle { |x| puts x }     # print, a, b, c, a, b, c,.. forever.\na.cycle(2) { |x| puts x }  # print, a, b, c, a, b, c.\n</code></pre>	http://ruby-doc.org/core/Array.html#method-i-cycle
Array#delete	A			instance methods							<pre><code>delete(obj)            → item or nil\ndelete(obj) { block }  → item or result of block</code></pre>Deletes all items from self that are equal to obj.<br>Returns the last deleted item, or nil if no matching item is found.<br>If the optional code block is given, the result of the block is returned if the item is not found. (To remove nil elements and get an informative return value, use #compact!)<pre><code>a = [ "a", "b", "b", "b", "c" ]\na.delete("b")                   #=> "b"\na                               #=> ["a", "c"]\na.delete("z")                   #=> nil\na.delete("z") { "not found" }   #=> "not found"\n</code></pre>	http://ruby-doc.org/core/Array.html#method-i-delete
Array#delete_at	A			instance methods							<pre><code>delete_at(index)  → obj or nil</code></pre>Deletes the element at the specified index, returning that element, or nil if the index is out of range.<br>See also #slice!<pre><code>a = ["ant", "bat", "cat", "dog"]\na.delete_at(2)    #=> "cat"\na                 #=> ["ant", "bat", "dog"]\na.delete_at(99)   #=> nil\n</code></pre>	http://ruby-doc.org/core/Array.html#method-i-delete_at
Array#delete_if	A			instance methods							<pre><code>delete_if { |item| block }  → ary\ndelete_if                   → Enumerator</code></pre>Deletes every element of self for which block evaluates to true.<br>The array is changed instantly every time the block is called, not after the iteration is over.<br>See also #reject!<br>If no block is given, an Enumerator is returned instead.<pre><code>scores = [ 97, 42, 75 ]\nscores.delete_if {|score| score < 80 }   #=> [97]\n</code></pre>	http://ruby-doc.org/core/Array.html#method-i-delete_if
Array#dig	A			instance methods							<pre><code>dig(idx, ...)                 → object</code></pre>Extracts the nested value specified by the sequence of idx objects by calling dig at each step, returning nil if any intermediate step is nil.<pre><code>a = [[1, [2, 3]]]\n\na.dig(0, 1, 1)                    #=> 3\na.dig(1, 2, 3)                    #=> nil\na.dig(0, 0, 0)                    #=> NoMethodError, undefined method `dig' for 1:Fixnum\n[42, {foo: :bar}].dig(1, :foo)    #=> :bar\n</code></pre>	http://ruby-doc.org/core/Array.html#method-i-dig
Array#drop	A			instance methods							<pre><code>drop(n)               → new_ary</code></pre>Drops first n elements from ary and returns the rest of the elements in an array.<br>If a negative number is given, raises an ArgumentError.<br>See also #take<pre><code>a = [1, 2, 3, 4, 5, 0]\na.drop(3)             #=> [4, 5, 0]\n</code></pre>	http://ruby-doc.org/core/Array.html#method-i-drop
Array#drop_while	A			instance methods							<pre><code>drop_while { |obj| block }   → new_ary\ndrop_while                  → Enumerator</code></pre>Drops elements up to, but not including, the first element for which the block returns nil or false and returns an array containing the remaining elements.<br>If no block is given, an Enumerator is returned instead.<br>See also #take_while<pre><code>a = [1, 2, 3, 4, 5, 0]\na.drop_while {|i| i < 3 }   #=> [3, 4, 5, 0]\n</code></pre>	http://ruby-doc.org/core/Array.html#method-i-drop_while
Array#each	A			instance methods							<pre><code>each { |item| block }  → ary\neach                   → Enumerator</code></pre>Calls the given block once for each element in self, passing that element as a parameter. Returns the array itself.<br>If no block is given, an Enumerator is returned.<pre><code>a = [ "a", "b", "c" ]\na.each {|x| print x, " -- " }\n</code></pre>produces:	http://ruby-doc.org/core/Array.html#method-i-each
Array#each_index	A			instance methods							<pre><code>each_index { |index| block }  → ary\neach_index                    → Enumerator</code></pre>Same as #each, but passes the index of the element instead of the element itself.<br>An Enumerator is returned if no block is given.<pre><code>a = [ "a", "b", "c" ]\na.each_index {|x| print x, " -- " }\n</code></pre>produces:	http://ruby-doc.org/core/Array.html#method-i-each_index
Array#empty?	A			instance methods							<pre><code>empty?   → true or false</code></pre>Returns true if self contains no elements.<pre><code>[].empty?   #=> true\n</code></pre>	http://ruby-doc.org/core/Array.html#method-i-empty-3F
Array#eql?	A			instance methods							<pre><code>eql?(other)  → true or false</code></pre>Returns true if self and other are the same object, or are both arrays with the same content (according to Object#eql?).	http://ruby-doc.org/core/Array.html#method-i-eql-3F
Array#fetch	A			instance methods							<pre><code>fetch(index)                    → obj\nfetch(index, default)           → obj\nfetch(index) { |index| block }  → obj</code></pre>Tries to return the element at position index, but throws an IndexError exception if the referenced index lies outside of the array bounds. This error can be prevented by supplying a second argument, which will act as a default value.<br>Alternatively, if a block is given it will only be executed when an invalid index is referenced. Negative values of index count from the end of the array.<pre><code>a = [ 11, 22, 33, 44 ]\na.fetch(1)               #=> 22\na.fetch(-1)              #=> 44\na.fetch(4, 'cat')        #=> "cat"\na.fetch(100) { |i| puts "#{i} is out of bounds" }\n                         #=> "100 is out of bounds"\n</code></pre>	http://ruby-doc.org/core/Array.html#method-i-fetch
Array#fill	A			instance methods							<pre><code>fill(obj)                                 → ary\nfill(obj, start [, length])               → ary\nfill(obj, range )                         → ary\nfill { |index| block }                    → ary\nfill(start [, length] ) { |index| block } → ary\nfill(range) { |index| block }             → ary</code></pre>The first three forms set the selected elements of self (which may be the entire array) to obj.<br>A start of nil is equivalent to zero.<br>A length of nil is equivalent to the length of the array.<br>The last three forms fill the array with the value of the given block, which is passed the absolute index of each element to be filled.<br>Negative values of start count from the end of the array, where -1 is the last element.<pre><code>a = [ "a", "b", "c", "d" ]\na.fill("x")              #=> ["x", "x", "x", "x"]\na.fill("z", 2, 2)        #=> ["x", "x", "z", "z"]\na.fill("y", 0..1)        #=> ["y", "y", "z", "z"]\na.fill { |i| i*i }       #=> [0, 1, 4, 9]\na.fill(-2) { |i| i*i*i } #=> [0, 1, 8, 27]\n</code></pre>	http://ruby-doc.org/core/Array.html#method-i-fill
Array#find_index	A			instance methods							<pre><code>find_index(obj)             →  int or nil\nfind_index { |item| block } →  int or nil\nfind_index                  →  Enumerator</code></pre>Returns the index of the first object in ary such that the object is == to obj.<br>If a block is given instead of an argument, returns the index of the first object for which the block returns true. Returns nil if no match is found.<br>See also #rindex.<br>An Enumerator is returned if neither a block nor argument is given.<pre><code>a = [ "a", "b", "c" ]\na.index("b")              #=> 1\na.index("z")              #=> nil\na.index { |x| x == "b" }  #=> 1\n</code></pre>	http://ruby-doc.org/core/Array.html#method-i-find_index
Array#first	A			instance methods							<pre><code>first     →   obj or nil\nfirst(n)  →   new_ary</code></pre>Returns the first element, or the first n elements, of the array. If the array is empty, the first form returns nil, and the second form returns an empty array. See also #last for the opposite effect.<pre><code>a = [ "q", "r", "s", "t" ]\na.first     #=> "q"\na.first(2)  #=> ["q", "r"]\n</code></pre>	http://ruby-doc.org/core/Array.html#method-i-first
Array#flatten	A			instance methods							<pre><code>flatten → new_ary\nflatten(level) → new_ary</code></pre>Returns a new array that is a one-dimensional flattening of self (recursively).<br>That is, for every element that is an array, extract its elements into the new array.<br>The optional level argument determines the level of recursion to flatten.<pre><code>s = [ 1, 2, 3 ]           #=> [1, 2, 3]\nt = [ 4, 5, 6, [7, 8] ]   #=> [4, 5, 6, [7, 8]]\na = [ s, t, 9, 10 ]       #=> [[1, 2, 3], [4, 5, 6, [7, 8]], 9, 10]\na.flatten                 #=> [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\na = [ 1, 2, [3, [4, 5] ] ]\na.flatten(1)              #=> [1, 2, 3, [4, 5]]\n</code></pre>	http://ruby-doc.org/core/Array.html#method-i-flatten
Array#flatten!	A			instance methods							<pre><code>flatten!        → ary or nil\nflatten!(level) → ary or nil</code></pre>Flattens self in place.<br>Returns nil if no modifications were made (i.e., the array contains no subarrays.)<br>The optional level argument determines the level of recursion to flatten.<pre><code>a = [ 1, 2, [3, [4, 5] ] ]\na.flatten!   #=> [1, 2, 3, 4, 5]\na.flatten!   #=> nil\na            #=> [1, 2, 3, 4, 5]\na = [ 1, 2, [3, [4, 5] ] ]\na.flatten!(1) #=> [1, 2, 3, [4, 5]]\n</code></pre>	http://ruby-doc.org/core/Array.html#method-i-flatten-21
Array#frozen?	A			instance methods							<pre><code>frozen?  → true or false</code></pre>Return true if this array is frozen (or temporarily frozen while being sorted). See also Object#frozen?	http://ruby-doc.org/core/Array.html#method-i-frozen-3F
Array#hash	A			instance methods							<pre><code>hash   → fixnum</code></pre>Compute a hash-code for this array.<br>Two arrays with the same content will have the same hash code (and will compare using eql?).<br>See also Object#hash.	http://ruby-doc.org/core/Array.html#method-i-hash
Array#include?	A			instance methods							<pre><code>include?(object)   → true or false</code></pre>Returns true if the given object is present in self (that is, if any element == object), otherwise returns false.<pre><code>a = [ "a", "b", "c" ]\na.include?("b")   #=> true\na.include?("z")   #=> false\n</code></pre>	http://ruby-doc.org/core/Array.html#method-i-include-3F
Array#index	A			instance methods							<pre><code>index(obj)             →  int or nil\nindex { |item| block } →  int or nil\nindex                  →  Enumerator</code></pre>Returns the index of the first object in ary such that the object is == to obj.<br>If a block is given instead of an argument, returns the index of the first object for which the block returns true. Returns nil if no match is found.<br>See also #rindex.<br>An Enumerator is returned if neither a block nor argument is given.<pre><code>a = [ "a", "b", "c" ]\na.index("b")              #=> 1\na.index("z")              #=> nil\na.index { |x| x == "b" }  #=> 1\n</code></pre>	http://ruby-doc.org/core/Array.html#method-i-index
Array#initialize_copy	A			instance methods							<pre><code>initialize_copy(other_ary)   → ary</code></pre>Replaces the contents of self with the contents of other_ary, truncating or expanding if necessary.<pre><code>a = [ "a", "b", "c", "d", "e" ]\na.replace([ "x", "y", "z" ])   #=> ["x", "y", "z"]\na                              #=> ["x", "y", "z"]\n</code></pre>	http://ruby-doc.org/core/Array.html#method-i-initialize_copy
Array#insert	A			instance methods							<pre><code>insert(index, obj...)  → ary</code></pre>Inserts the given values before the element with the given index.<br>Negative indices count backwards from the end of the array, where -1 is the last element. If a negative index is used, the given values will be inserted after that element, so using an index of -1 will insert the values at the end of the array.<pre><code>a = %w{ a b c d }\na.insert(2, 99)         #=> ["a", "b", 99, "c", "d"]\na.insert(-2, 1, 2, 3)   #=> ["a", "b", 99, "c", 1, 2, 3, "d"]\n</code></pre>	http://ruby-doc.org/core/Array.html#method-i-insert
Array#inspect	A			instance methods							<pre><code>inspect  → string\nto_s     → string</code></pre>Creates a string representation of self.<pre><code>[ "a", "b", "c" ].to_s     #=> "[\"a\", \"b\", \"c\"]"\n</code></pre>	http://ruby-doc.org/core/Array.html#method-i-inspect
Array#join	A			instance methods							<pre><code>join(separator=$,)    → str</code></pre>Returns a string created by converting each element of the array to a string, separated by the given separator. If the separator is nil, it uses current $,. If both the separator and $, are nil, it uses empty string.<pre><code>[ "a", "b", "c" ].join        #=> "abc"\n[ "a", "b", "c" ].join("-")   #=> "a-b-c"\n</code></pre>	http://ruby-doc.org/core/Array.html#method-i-join
Array#keep_if	A			instance methods							<pre><code>keep_if { |item| block } → ary\nkeep_if                  → Enumerator</code></pre>Deletes every element of self for which the given block evaluates to false.<br>See also #select!<br>If no block is given, an Enumerator is returned instead.<pre><code>a = %w{ a b c d e f }\na.keep_if { |v| v =~ /[aeiou]/ }  #=> ["a", "e"]\n</code></pre>	http://ruby-doc.org/core/Array.html#method-i-keep_if
Array#last	A			instance methods							<pre><code>last     →  obj or nil\nlast(n)  →  new_ary</code></pre>Returns the last element(s) of self. If the array is empty, the first form returns nil.<br>See also #first for the opposite effect.<pre><code>a = [ "w", "x", "y", "z" ]\na.last     #=> "z"\na.last(2)  #=> ["y", "z"]\n</code></pre>	http://ruby-doc.org/core/Array.html#method-i-last
Array#length	A			instance methods							<pre><code>length → int</code></pre>Returns the number of elements in self. May be zero.<pre><code>[ 1, 2, 3, 4, 5 ].length   #=> 5\n[].length                  #=> 0\n</code></pre>	http://ruby-doc.org/core/Array.html#method-i-length
Array#map	A			instance methods							<pre><code>map     { |item| block }  → new_ary\nmap                       → Enumerator</code></pre>Invokes the given block once for each element of self.<br>Creates a new array containing the values returned by the block.<br>See also Enumerable#collect.<br>If no block is given, an Enumerator is returned instead.<pre><code>a = [ "a", "b", "c", "d" ]\na.collect { |x| x + "!" }         #=> ["a!", "b!", "c!", "d!"]\na.map.with_index { |x, i| x * i } #=> ["", "b", "cc", "ddd"]\na                                 #=> ["a", "b", "c", "d"]\n</code></pre>	http://ruby-doc.org/core/Array.html#method-i-map
Array#map!	A			instance methods							<pre><code>map!     {|item| block }   → ary\nmap!                       → Enumerator</code></pre>Invokes the given block once for each element of self, replacing the element with the value returned by the block.<br>See also Enumerable#collect.<br>If no block is given, an Enumerator is returned instead.<pre><code>a = [ "a", "b", "c", "d" ]\na.map! {|x| x + "!" }\na #=>  [ "a!", "b!", "c!", "d!" ]\na.collect!.with_index {|x, i| x[0...i] }\na #=>  ["", "b", "c!", "d!"]\n</code></pre>	http://ruby-doc.org/core/Array.html#method-i-map-21
Array#pack	A			instance methods							<pre><code>pack ( aTemplateString ) → aBinaryString</code></pre>Packs the contents of arr into a binary sequence according to the directives in aTemplateString (see the table below) Directives “A,” “a,” and “Z” may be followed by a count, which gives the width of the resulting field. The remaining directives also may take a count, indicating the number of array elements to convert. If the count is an asterisk (“*”), all remaining array elements will be converted. Any of the directives “sSiIlL” may be followed by an underscore (“_”) or exclamation mark (“!”) to use the underlying platform’s native size for the specified type; otherwise, they use a platform-independent size. Spaces are ignored in the template string. See also String#unpack.<pre><code>a = [ "a", "b", "c" ]\nn = [ 65, 66, 67 ]\na.pack("A3A3A3")   #=> "a  b  c  "\na.pack("a3a3a3")   #=> "a\000\000b\000\000c\000\000"\nn.pack("ccc")      #=> "ABC"\n</code></pre>Directives for pack.	http://ruby-doc.org/core/Array.html#method-i-pack
Array#permutation	A			instance methods							<pre><code>permutation { |p| block }          → ary\npermutation                        → Enumerator\npermutation(n) { |p| block }       → ary\npermutation(n)                     → Enumerator</code></pre>When invoked with a block, yield all permutations of length n of the elements of the array, then return the array itself.<br>If n is not specified, yield all permutations of all elements.<br>The implementation makes no guarantees about the order in which the permutations are yielded.<br>If no block is given, an Enumerator is returned instead.<br>Examples:<pre><code>a = [1, 2, 3]\na.permutation.to_a    #=> [[1,2,3],[1,3,2],[2,1,3],[2,3,1],[3,1,2],[3,2,1]]\na.permutation(1).to_a #=> [[1],[2],[3]]\na.permutation(2).to_a #=> [[1,2],[1,3],[2,1],[2,3],[3,1],[3,2]]\na.permutation(3).to_a #=> [[1,2,3],[1,3,2],[2,1,3],[2,3,1],[3,1,2],[3,2,1]]\na.permutation(0).to_a #=> [[]] # one permutation of length 0\na.permutation(4).to_a #=> []   # no permutations of length 4\n</code></pre>	http://ruby-doc.org/core/Array.html#method-i-permutation
Array#pop	A			instance methods							<pre><code>pop    → obj or nil\npop(n) → new_ary</code></pre>Removes the last element from self and returns it, or nil if the array is empty.<br>If a number n is given, returns an array of the last n elements (or less) just like array.slice!(-n, n) does. See also #push for the opposite effect.<pre><code>a = [ "a", "b", "c", "d" ]\na.pop     #=> "d"\na.pop(2)  #=> ["b", "c"]\na         #=> ["a"]\n</code></pre>	http://ruby-doc.org/core/Array.html#method-i-pop
Array#product	A			instance methods							<pre><code>product(other_ary, ...)                → new_ary\nproduct(other_ary, ...) { |p| block }  → ary</code></pre>Returns an array of all combinations of elements from all arrays.<br>The length of the returned array is the product of the length of self and the argument arrays.<br>If given a block, product will yield all combinations and return self instead.<pre><code>[1,2,3].product([4,5])     #=> [[1,4],[1,5],[2,4],[2,5],[3,4],[3,5]]\n[1,2].product([1,2])       #=> [[1,1],[1,2],[2,1],[2,2]]\n[1,2].product([3,4],[5,6]) #=> [[1,3,5],[1,3,6],[1,4,5],[1,4,6],\n                           #     [2,3,5],[2,3,6],[2,4,5],[2,4,6]]\n[1,2].product()            #=> [[1],[2]]\n[1,2].product([])          #=> []\n</code></pre>	http://ruby-doc.org/core/Array.html#method-i-product
Array#push	A			instance methods							<pre><code>push(obj, ... )   → ary</code></pre>Append — Pushes the given object(s) on to the end of this array. This expression returns the array itself, so several appends may be chained together. See also #pop for the opposite effect.<pre><code>a = [ "a", "b", "c" ]\na.push("d", "e", "f")\n        #=> ["a", "b", "c", "d", "e", "f"]\n[1, 2, 3,].push(4).push(5)\n        #=> [1, 2, 3, 4, 5]\n</code></pre>	http://ruby-doc.org/core/Array.html#method-i-push
Array#rassoc	A			instance methods							<pre><code>rassoc(obj) → element_ary or nil</code></pre>Searches through the array whose elements are also arrays.<br>Compares obj with the second element of each contained array using obj.==.<br>Returns the first contained array that matches obj.<br>See also #assoc.<pre><code>a = [ [ 1, "one"], [2, "two"], [3, "three"], ["ii", "two"] ]\na.rassoc("two")    #=> [2, "two"]\na.rassoc("four")   #=> nil\n</code></pre>	http://ruby-doc.org/core/Array.html#method-i-rassoc
Array#reject	A			instance methods							<pre><code>reject  {|item| block }  → new_ary\nreject                   → Enumerator</code></pre>Returns a new array containing the items in self for which the given block is not true. The ordering of non-rejected elements is maintained.<br>See also #delete_if<br>If no block is given, an Enumerator is returned instead.	http://ruby-doc.org/core/Array.html#method-i-reject
Array#reject!	A			instance methods							<pre><code>reject! { |item| block }  → ary or nil\nreject!                   → Enumerator</code></pre>Deletes every element of self for which the block evaluates to true, if no changes were made returns nil.<br>The array may not be changed instantly every time the block is called.<br>See also Enumerable#reject and #delete_if.<br>If no block is given, an Enumerator is returned instead.	http://ruby-doc.org/core/Array.html#method-i-reject-21
Array#repeated_combination	A			instance methods							<pre><code>repeated_combination(n) { |c| block } → ary\nrepeated_combination(n)               → Enumerator</code></pre>When invoked with a block, yields all repeated combinations of length n of elements from the array and then returns the array itself.<br>The implementation makes no guarantees about the order in which the repeated combinations are yielded.<br>If no block is given, an Enumerator is returned instead.<br>Examples:<pre><code>a = [1, 2, 3]\na.repeated_combination(1).to_a  #=> [[1], [2], [3]]\na.repeated_combination(2).to_a  #=> [[1,1],[1,2],[1,3],[2,2],[2,3],[3,3]]\na.repeated_combination(3).to_a  #=> [[1,1,1],[1,1,2],[1,1,3],[1,2,2],[1,2,3],\n                                #    [1,3,3],[2,2,2],[2,2,3],[2,3,3],[3,3,3]]\na.repeated_combination(4).to_a  #=> [[1,1,1,1],[1,1,1,2],[1,1,1,3],[1,1,2,2],[1,1,2,3],\n                                #    [1,1,3,3],[1,2,2,2],[1,2,2,3],[1,2,3,3],[1,3,3,3],\n                                #    [2,2,2,2],[2,2,2,3],[2,2,3,3],[2,3,3,3],[3,3,3,3]]\na.repeated_combination(0).to_a  #=> [[]] # one combination of length 0\n</code></pre>	http://ruby-doc.org/core/Array.html#method-i-repeated_combination
Array#repeated_permutation	A			instance methods							<pre><code>repeated_permutation(n) { |p| block } → ary\nrepeated_permutation(n)               → Enumerator</code></pre>When invoked with a block, yield all repeated permutations of length n of the elements of the array, then return the array itself.<br>The implementation makes no guarantees about the order in which the repeated permutations are yielded.<br>If no block is given, an Enumerator is returned instead.<br>Examples:<pre><code>a = [1, 2]\na.repeated_permutation(1).to_a  #=> [[1], [2]]\na.repeated_permutation(2).to_a  #=> [[1,1],[1,2],[2,1],[2,2]]\na.repeated_permutation(3).to_a  #=> [[1,1,1],[1,1,2],[1,2,1],[1,2,2],\n                                #    [2,1,1],[2,1,2],[2,2,1],[2,2,2]]\na.repeated_permutation(0).to_a  #=> [[]] # one permutation of length 0\n</code></pre>	http://ruby-doc.org/core/Array.html#method-i-repeated_permutation
Array#replace	A			instance methods							<pre><code>replace(other_ary)  → ary</code></pre>Replaces the contents of self with the contents of other_ary, truncating or expanding if necessary.<pre><code>a = [ "a", "b", "c", "d", "e" ]\na.replace([ "x", "y", "z" ])   #=> ["x", "y", "z"]\na                              #=> ["x", "y", "z"]\n</code></pre>	http://ruby-doc.org/core/Array.html#method-i-replace
Array#reverse	A			instance methods							<pre><code>reverse    → new_ary</code></pre>Returns a new array containing self‘s elements in reverse order.<pre><code>[ "a", "b", "c" ].reverse   #=> ["c", "b", "a"]\n[ 1 ].reverse               #=> [1]\n</code></pre>	http://ruby-doc.org/core/Array.html#method-i-reverse
Array#reverse!	A			instance methods							<pre><code>reverse!   → ary</code></pre>Reverses self in place.<pre><code>a = [ "a", "b", "c" ]\na.reverse!       #=> ["c", "b", "a"]\na                #=> ["c", "b", "a"]\n</code></pre>	http://ruby-doc.org/core/Array.html#method-i-reverse-21
Array#reverse_each	A			instance methods							<pre><code>reverse_each { |item| block }  → ary\nreverse_each                   → Enumerator</code></pre>Same as #each, but traverses self in reverse order.<pre><code>a = [ "a", "b", "c" ]\na.reverse_each {|x| print x, " " }\n</code></pre>produces:<pre><code>c b a\n</code></pre>	http://ruby-doc.org/core/Array.html#method-i-reverse_each
Array#rindex	A			instance methods							<pre><code>rindex(obj)             →  int or nil\nrindex { |item| block } →  int or nil\nrindex                  →  Enumerator</code></pre>Returns the index of the last object in self == to obj.<br>If a block is given instead of an argument, returns the index of the first object for which the block returns true, starting from the last object.<br>Returns nil if no match is found.<br>See also #index.<br>If neither block nor argument is given, an Enumerator is returned instead.<pre><code>a = [ "a", "b", "b", "b", "c" ]\na.rindex("b")             #=> 3\na.rindex("z")             #=> nil\na.rindex { |x| x == "b" } #=> 3\n</code></pre>	http://ruby-doc.org/core/Array.html#method-i-rindex
Array#rotate	A			instance methods							<pre><code>rotate(count=1)    → new_ary</code></pre>Returns a new array by rotating self so that the element at count is the first element of the new array.<br>If count is negative then it rotates in the opposite direction, starting from the end of self where -1 is the last element.<pre><code>a = [ "a", "b", "c", "d" ]\na.rotate         #=> ["b", "c", "d", "a"]\na                #=> ["a", "b", "c", "d"]\na.rotate(2)      #=> ["c", "d", "a", "b"]\na.rotate(-3)     #=> ["b", "c", "d", "a"]\n</code></pre>	http://ruby-doc.org/core/Array.html#method-i-rotate
Array#rotate!	A			instance methods							<pre><code>rotate!(count=1)   → ary</code></pre>Rotates self in place so that the element at count comes first, and returns self.<br>If count is negative then it rotates in the opposite direction, starting from the end of the array where -1 is the last element.<pre><code>a = [ "a", "b", "c", "d" ]\na.rotate!        #=> ["b", "c", "d", "a"]\na                #=> ["b", "c", "d", "a"]\na.rotate!(2)     #=> ["d", "a", "b", "c"]\na.rotate!(-3)    #=> ["a", "b", "c", "d"]\n</code></pre>	http://ruby-doc.org/core/Array.html#method-i-rotate-21
Array#sample	A			instance methods							<pre><code>sample                  → obj\nsample(random: rng)     → obj\nsample(n)               → new_ary\nsample(n, random: rng)  → new_ary</code></pre>Choose a random element or n random elements from the array.<br>The elements are chosen by using random and unique indices into the array in order to ensure that an element doesn’t repeat itself unless the array already contained duplicate elements.<br>If the array is empty the first form returns nil and the second form returns an empty array.<br>The optional rng argument will be used as the random number generator.<pre><code>a = [ 1, 2, 3, 4, 5, 6, 7, 8, 9, 10 ]\na.sample         #=> 7\na.sample(4)      #=> [6, 4, 2, 5]\n</code></pre>	http://ruby-doc.org/core/Array.html#method-i-sample
Array#select	A			instance methods							<pre><code>select { |item| block } → new_ary\nselect                  → Enumerator</code></pre>Returns a new array containing all elements of ary for which the given block returns a true value.<br>If no block is given, an Enumerator is returned instead.<pre><code>[1,2,3,4,5].select { |num|  num.even?  }   #=> [2, 4]\n\na = %w{ a b c d e f }\na.select { |v| v =~ /[aeiou]/ }  #=> ["a", "e"]\n</code></pre>See also Enumerable#select.	http://ruby-doc.org/core/Array.html#method-i-select
Array#select!	A			instance methods							<pre><code>select!  {|item| block } → ary or nil\nselect!                  → Enumerator</code></pre>Invokes the given block passing in successive elements from self, deleting elements for which the block returns a false value.<br>The array may not be changed instantly every time the block is called.<br>If changes were made, it will return self, otherwise it returns nil.<br>See also #keep_if<br>If no block is given, an Enumerator is returned instead.	http://ruby-doc.org/core/Array.html#method-i-select-21
Array#shift	A			instance methods							<pre><code>shift    → obj or nil\nshift(n) → new_ary</code></pre>Removes the first element of self and returns it (shifting all other elements down by one). Returns nil if the array is empty.<br>If a number n is given, returns an array of the first n elements (or less) just like array.slice!(0, n) does. With ary containing only the remainder elements, not including what was shifted to new_ary. See also #unshift for the opposite effect.<pre><code>args = [ "-m", "-q", "filename" ]\nargs.shift     #=> "-m"\nargs           #=> ["-q", "filename"]\n\nargs = [ "-m", "-q", "filename" ]\nargs.shift(2)  #=> ["-m", "-q"]\nargs           #=> ["filename"]\n</code></pre>	http://ruby-doc.org/core/Array.html#method-i-shift
Array#shuffle	A			instance methods							<pre><code>shuffle              → new_ary\nshuffle(random: rng) → new_ary</code></pre>Returns a new array with elements of self shuffled.<pre><code>a = [ 1, 2, 3 ]           #=> [1, 2, 3]\na.shuffle                 #=> [2, 3, 1]\na                         #=> [1, 2, 3]\n</code></pre>The optional rng argument will be used as the random number generator.<pre><code>a.shuffle(random: Random.new(1))  #=> [1, 3, 2]\n</code></pre>	http://ruby-doc.org/core/Array.html#method-i-shuffle
Array#shuffle!	A			instance methods							<pre><code>shuffle!              → ary\nshuffle!(random: rng) → ary</code></pre>Shuffles elements in self in place.<pre><code>a = [ 1, 2, 3 ]           #=> [1, 2, 3]\na.shuffle!                #=> [2, 3, 1]\na                         #=> [2, 3, 1]\n</code></pre>The optional rng argument will be used as the random number generator.<pre><code>a.shuffle!(random: Random.new(1))  #=> [1, 3, 2]\n</code></pre>	http://ruby-doc.org/core/Array.html#method-i-shuffle-21
Array#size	A			instance methods								http://ruby-doc.org/core/Array.html#method-i-size
Array#slice	A			instance methods							<pre><code>slice(index)          → obj     or nil\nslice(start, length)  → new_ary or nil\nslice(range)          → new_ary or nil</code></pre>Element Reference — Returns the element at index, or returns a subarray starting at the start index and continuing for length elements, or returns a subarray specified by range of indices.<br>Negative indices count backward from the end of the array (-1 is the last element). For start and range cases the starting index is just before an element. Additionally, an empty array is returned when the starting index for an element range is at the end of the array.<br>Returns nil if the index (or starting index) are out of range.<pre><code>a = [ "a", "b", "c", "d", "e" ]\na[2] +  a[0] + a[1]    #=> "cab"\na[6]                   #=> nil\na[1, 2]                #=> [ "b", "c" ]\na[1..3]                #=> [ "b", "c", "d" ]\na[4..7]                #=> [ "e" ]\na[6..10]               #=> nil\na[-3, 3]               #=> [ "c", "d", "e" ]\n# special cases\na[5]                   #=> nil\na[6, 1]                #=> nil\na[5, 1]                #=> []\na[5..10]               #=> []\n</code></pre>	http://ruby-doc.org/core/Array.html#method-i-slice
Array#slice!	A			instance methods							<pre><code>slice!(index)         → obj or nil\nslice!(start, length) → new_ary or nil\nslice!(range)         → new_ary or nil</code></pre>Deletes the element(s) given by an index (optionally up to length elements) or by a range.<br>Returns the deleted object (or objects), or nil if the index is out of range.<pre><code>a = [ "a", "b", "c" ]\na.slice!(1)     #=> "b"\na               #=> ["a", "c"]\na.slice!(-1)    #=> "c"\na               #=> ["a"]\na.slice!(100)   #=> nil\na               #=> ["a"]\n</code></pre>	http://ruby-doc.org/core/Array.html#method-i-slice-21
Array#sort	A			instance methods							<pre><code>sort                   → new_ary\nsort { |a, b| block }  → new_ary</code></pre>Returns a new array created by sorting self.<br>Comparisons for the sort will be done using the <=> operator or using an optional code block.<br>The block must implement a comparison between a and b and return an integer less than 0 when b follows a, 0 when a and b are equivalent, or an integer greater than 0 when a follows b.<br>See also Enumerable#sort_by.<pre><code>a = [ "d", "a", "e", "c", "b" ]\na.sort                    #=> ["a", "b", "c", "d", "e"]\na.sort { |x,y| y <=> x }  #=> ["e", "d", "c", "b", "a"]\n</code></pre>	http://ruby-doc.org/core/Array.html#method-i-sort
Array#sort!	A			instance methods							<pre><code>sort!                   → ary\nsort! { |a, b| block }  → ary</code></pre>Sorts self in place.<br>Comparisons for the sort will be done using the <=> operator or using an optional code block.<br>The block must implement a comparison between a and b and return an integer less than 0 when b follows a, 0 when a and b are equivalent, or an integer greater than 0 when a follows b.<br>See also Enumerable#sort_by.<pre><code>a = [ "d", "a", "e", "c", "b" ]\na.sort!                    #=> ["a", "b", "c", "d", "e"]\na.sort! { |x,y| y <=> x }  #=> ["e", "d", "c", "b", "a"]\n</code></pre>	http://ruby-doc.org/core/Array.html#method-i-sort-21
Array#sort_by!	A			instance methods							<pre><code>sort_by! { |obj| block }    → ary\nsort_by!                    → Enumerator</code></pre>Sorts self in place using a set of keys generated by mapping the values in self through the given block.<br>If no block is given, an Enumerator is returned instead.	http://ruby-doc.org/core/Array.html#method-i-sort_by-21
Array#take	A			instance methods							<pre><code>take(n)               → new_ary</code></pre>Returns first n elements from the array.<br>If a negative number is given, raises an ArgumentError.<br>See also #drop<pre><code>a = [1, 2, 3, 4, 5, 0]\na.take(3)             #=> [1, 2, 3]\n</code></pre>	http://ruby-doc.org/core/Array.html#method-i-take
Array#take_while	A			instance methods							<pre><code>take_while { |obj| block }  → new_ary\ntake_while                  → Enumerator</code></pre>Passes elements to the block until the block returns nil or false, then stops iterating and returns an array of all prior elements.<br>If no block is given, an Enumerator is returned instead.<br>See also #drop_while<pre><code>a = [1, 2, 3, 4, 5, 0]\na.take_while { |i| i < 3 }  #=> [1, 2]\n</code></pre>	http://ruby-doc.org/core/Array.html#method-i-take_while
Array#to_a	A			instance methods							<pre><code>to_a     → ary</code></pre>Returns self.<br>If called on a subclass of Array, converts the receiver to an Array object.	http://ruby-doc.org/core/Array.html#method-i-to_a
Array#to_ary	A			instance methods							<pre><code>to_ary → ary</code></pre>Returns self.	http://ruby-doc.org/core/Array.html#method-i-to_ary
Array#to_h	A			instance methods							<pre><code>to_h     → hash</code></pre>Returns the result of interpreting ary as an array of [key, value] pairs.<pre><code>[[:foo, :bar], [1, 2]].to_h\n  # => {:foo => :bar, 1 => 2}\n</code></pre>	http://ruby-doc.org/core/Array.html#method-i-to_h
Array#to_s	A			instance methods								http://ruby-doc.org/core/Array.html#method-i-to_s
Array#transpose	A			instance methods							<pre><code>transpose → new_ary</code></pre>Assumes that self is an array of arrays and transposes the rows and columns.<pre><code>a = [[1,2], [3,4], [5,6]]\na.transpose   #=> [[1, 3, 5], [2, 4, 6]]\n</code></pre>If the length of the subarrays don’t match, an IndexError is raised.	http://ruby-doc.org/core/Array.html#method-i-transpose
Array#uniq	A			instance methods							<pre><code>uniq                → new_ary\nuniq { |item| ... } → new_ary</code></pre>Returns a new array by removing duplicate values in self.<br>If a block is given, it will use the return value of the block for comparison.<br>It compares values using their hash and eql? methods for efficiency.<br>self is traversed in order, and the first occurrence is kept.<pre><code>a = [ "a", "a", "b", "b", "c" ]\na.uniq   # => ["a", "b", "c"]\n\nb = [["student","sam"], ["student","george"], ["teacher","matz"]]\nb.uniq { |s| s.first } # => [["student", "sam"], ["teacher", "matz"]]\n</code></pre>	http://ruby-doc.org/core/Array.html#method-i-uniq
Array#uniq!	A			instance methods							<pre><code>uniq!                → ary or nil\nuniq! { |item| ... } → ary or nil</code></pre>Removes duplicate elements from self.<br>If a block is given, it will use the return value of the block for comparison.<br>It compares values using their hash and eql? methods for efficiency.<br>self is traversed in order, and the first occurrence is kept.<br>Returns nil if no changes are made (that is, no duplicates are found).<pre><code>a = [ "a", "a", "b", "b", "c" ]\na.uniq!   # => ["a", "b", "c"]\n\nb = [ "a", "b", "c" ]\nb.uniq!   # => nil\n\nc = [["student","sam"], ["student","george"], ["teacher","matz"]]\nc.uniq! { |s| s.first } # => [["student", "sam"], ["teacher", "matz"]]\n</code></pre>	http://ruby-doc.org/core/Array.html#method-i-uniq-21
Array#unshift	A			instance methods							<pre><code>unshift(obj, ...)  → ary</code></pre>Prepends objects to the front of self, moving other elements upwards. See also #shift for the opposite effect.<pre><code>a = [ "b", "c", "d" ]\na.unshift("a")   #=> ["a", "b", "c", "d"]\na.unshift(1, 2)  #=> [ 1, 2, "a", "b", "c", "d"]\n</code></pre>	http://ruby-doc.org/core/Array.html#method-i-unshift
Array#values_at	A			instance methods							<pre><code>values_at(selector, ...)  → new_ary</code></pre>Returns an array containing the elements in self corresponding to the given selector(s).<br>The selectors may be either integer indices or ranges.<br>See also #select.<pre><code>a = %w{ a b c d e f }\na.values_at(1, 3, 5)          # => ["b", "d", "f"]\na.values_at(1, 3, 5, 7)       # => ["b", "d", "f", nil]\na.values_at(-1, -2, -2, -7)   # => ["f", "e", "e", nil]\na.values_at(4..6, 3...6)      # => ["e", "f", nil, "d", "e", "f"]\n</code></pre>	http://ruby-doc.org/core/Array.html#method-i-values_at
Array#zip	A			instance methods							<pre><code>zip(arg, ...)                  → new_ary\nzip(arg, ...) { |arr| block }  → nil</code></pre>Converts any arguments to arrays, then merges elements of self with corresponding elements from each argument.<br>This generates a sequence of ary.size n-element arrays, where n is one more than the count of arguments.<br>If the size of any argument is less than the size of the initial array, nil values are supplied.<br>If a block is given, it is invoked for each output array, otherwise an array of arrays is returned.<pre><code>a = [ 4, 5, 6 ]\nb = [ 7, 8, 9 ]\n[1, 2, 3].zip(a, b)   #=> [[1, 4, 7], [2, 5, 8], [3, 6, 9]]\n[1, 2].zip(a, b)      #=> [[1, 4, 7], [2, 5, 8]]\na.zip([1, 2], [8])    #=> [[4, 1, 8], [5, 2, nil], [6, nil, nil]]\n</code></pre>	http://ruby-doc.org/core/Array.html#method-i-zip
Array#|	A			instance methods							<pre><code>ary | other_ary     → new_ary</code></pre>Set Union — Returns a new array by joining ary with other_ary, excluding any duplicates and preserving the order from the original array.<br>It compares elements using their hash and eql? methods for efficiency.<pre><code>[ "a", "b", "c" ] | [ "c", "d", "a" ]    #=> [ "a", "b", "c", "d" ]\n</code></pre>See also #uniq.	http://ruby-doc.org/core/Array.html#method-i-7C
Bignum	A			classes							Bignum objects hold integers outside the range of Fixnum. Bignum objects are created automatically when integer calculations would otherwise overflow a Fixnum. When a calculation involving Bignum objects returns a result that will fit in a Fixnum, the result is automatically converted.<br>For the purposes of the bitwise operations and [], a Bignum is treated as if it were an infinite-length bitstring with 2’s complement representation.<br>While Fixnum values are immediate, Bignum objects are not—assignment and parameter passing work with references to objects, not the objects themselves.	http://ruby-doc.org/core/Bignum.html
Bignum#%	A			instance methods							<pre><code>big % other         → Numeric</code></pre>Returns big modulo other. See Numeric#divmod for more information.	http://ruby-doc.org/core/Bignum.html#method-i-25
Bignum#&	A			instance methods							<pre><code>big & numeric   →  integer</code></pre>Performs bitwise and between big and numeric.	http://ruby-doc.org/core/Bignum.html#method-i-26
Bignum#*	A			instance methods							<pre><code>big * other  → Numeric</code></pre>Multiplies big and other, returning the result.	http://ruby-doc.org/core/Bignum.html#method-i-2A
Bignum#**	A			instance methods							<pre><code>big ** exponent   → numeric</code></pre>Raises big to the exponent power (which may be an integer, float, or anything that will coerce to a number). The result may be a Fixnum, Bignum, or Float<pre><code>123456789 ** 2      #=> 15241578750190521\n123456789 ** 1.2    #=> 5126464716.09932\n123456789 ** -2     #=> 6.5610001194102e-17\n</code></pre>	http://ruby-doc.org/core/Bignum.html#method-i-2A-2A
Bignum#+	A			instance methods							<pre><code>big + other  → Numeric</code></pre>Adds big and other, returning the result.	http://ruby-doc.org/core/Bignum.html#method-i-2B
Bignum#-	A			instance methods							<pre><code>big - other  → Numeric</code></pre>Subtracts other from big, returning the result.	http://ruby-doc.org/core/Bignum.html#method-i-2D
Bignum#-@	A			instance methods							<pre><code>-big   →  integer</code></pre>Unary minus (returns an integer whose value is 0-big)	http://ruby-doc.org/core/Bignum.html#method-i-2D-40
Bignum#/	A			instance methods							<pre><code>big / other     → Numeric</code></pre>Performs division: the class of the resulting object depends on the class of numeric and on the magnitude of the result.	http://ruby-doc.org/core/Bignum.html#method-i-2F
Bignum#<	A			instance methods							<pre><code>big < real  →  true or false</code></pre>Returns true if the value of big is less than that of real.	http://ruby-doc.org/core/Bignum.html#method-i-3C
Bignum#<<	A			instance methods							<pre><code>big << numeric   →  integer</code></pre>Shifts big left numeric positions (right if numeric is negative).	http://ruby-doc.org/core/Bignum.html#method-i-3C-3C
Bignum#<=	A			instance methods							<pre><code>big <= real  →  true or false</code></pre>Returns true if the value of big is less than or equal to that of real.	http://ruby-doc.org/core/Bignum.html#method-i-3C-3D
Bignum#<=>	A			instance methods							<pre><code>big <=> numeric   → -1, 0, +1 or nil</code></pre>Comparison—Returns -1, 0, or +1 depending on whether big is less than, equal to, or greater than numeric. This is the basis for the tests in Comparable.<br>nil is returned if the two values are incomparable.	http://ruby-doc.org/core/Bignum.html#method-i-3C-3D-3E
Bignum#==	A			instance methods							<pre><code>big == obj  → true or false</code></pre>Returns true only if obj has the same value as big. Contrast this with Bignum#eql?, which requires obj to be a Bignum.<pre><code>68719476736 == 68719476736.0   #=> true\n</code></pre>	http://ruby-doc.org/core/Bignum.html#method-i-3D-3D
Bignum#===	A			instance methods							<pre><code>big == obj  → true or false</code></pre>Returns true only if obj has the same value as big. Contrast this with Bignum#eql?, which requires obj to be a Bignum.<pre><code>68719476736 == 68719476736.0   #=> true\n</code></pre>	http://ruby-doc.org/core/Bignum.html#method-i-3D-3D-3D
Bignum#>	A			instance methods							<pre><code>big > real  →  true or false</code></pre>Returns true if the value of big is greater than that of real.	http://ruby-doc.org/core/Bignum.html#method-i-3E
Bignum#>=	A			instance methods							<pre><code>big >= real  →  true or false</code></pre>Returns true if the value of big is greater than or equal to that of real.	http://ruby-doc.org/core/Bignum.html#method-i-3E-3D
Bignum#>>	A			instance methods							<pre><code>big >> numeric   →  integer</code></pre>Shifts big right numeric positions (left if numeric is negative).	http://ruby-doc.org/core/Bignum.html#method-i-3E-3E
Bignum#[]	A			instance methods							<pre><code>big[n] → 0, 1</code></pre>Bit Reference—Returns the nth bit in the (assumed) binary representation of big, where big is the least significant bit.<pre><code>a = 9**15\n50.downto(0) do |n|\n  print a[n]\nend\n</code></pre>produces:<pre><code>000101110110100000111000011110010100111100010111001\n</code></pre>	http://ruby-doc.org/core/Bignum.html#method-i-5B-5D
Bignum#^	A			instance methods							<pre><code>big ^ numeric   →  integer</code></pre>Performs bitwise +exclusive or+ between big and numeric.	http://ruby-doc.org/core/Bignum.html#method-i-5E
Bignum#abs	A			instance methods							<pre><code>abs → aBignum</code></pre>Returns the absolute value of big.<pre><code>-1234567890987654321.abs   #=> 1234567890987654321\n</code></pre>	http://ruby-doc.org/core/Bignum.html#method-i-abs
Bignum#bit_length	A			instance methods							<pre><code>bit_length → integer</code></pre>Returns the number of bits of the value of int.<br>“the number of bits” means that the bit position of the highest bit which is different to the sign bit. (The bit position of the bit 2**n is n+1.) If there is no such bit (zero or minus one), zero is returned.<br>I.e. This method returns ceil(log2(int < 0 ? -int : int+1)).<pre><code>(-2**10000-1).bit_length  #=> 10001\n(-2**10000).bit_length    #=> 10000\n(-2**10000+1).bit_length  #=> 10000\n\n(-2**1000-1).bit_length   #=> 1001\n(-2**1000).bit_length     #=> 1000\n(-2**1000+1).bit_length   #=> 1000\n\n(2**1000-1).bit_length    #=> 1000\n(2**1000).bit_length      #=> 1001\n(2**1000+1).bit_length    #=> 1001\n\n(2**10000-1).bit_length   #=> 10000\n(2**10000).bit_length     #=> 10001\n(2**10000+1).bit_length   #=> 10001\n</code></pre>This method can be used to detect overflow in Array#pack as follows.<pre><code>if n.bit_length < 32\n  [n].pack("l") # no overflow\nelse\n  raise "overflow"\nend\n</code></pre>	http://ruby-doc.org/core/Bignum.html#method-i-bit_length
Bignum#coerce	A			instance methods							<pre><code>coerce(numeric)  →  array</code></pre>Returns an array with both a numeric and a big represented as Bignum objects.<br>This is achieved by converting numeric to a Bignum.<br>A TypeError is raised if the numeric is not a Fixnum or Bignum type.<pre><code>(0x3FFFFFFFFFFFFFFF+1).coerce(42)   #=> [42, 4611686018427387904]\n</code></pre>	http://ruby-doc.org/core/Bignum.html#method-i-coerce
Bignum#div	A			instance methods							<pre><code>div(other)  → integer</code></pre>Performs integer division: returns integer value.	http://ruby-doc.org/core/Bignum.html#method-i-div
Bignum#divmod	A			instance methods							<pre><code>divmod(numeric)   → array</code></pre>See Numeric#divmod.	http://ruby-doc.org/core/Bignum.html#method-i-divmod
Bignum#eql?	A			instance methods							<pre><code>eql?(obj)   → true or false</code></pre>Returns true only if obj is a Bignum with the same value as big. Contrast this with Bignum#==, which performs type conversions.<pre><code>68719476736.eql?(68719476736.0)   #=> false\n</code></pre>	http://ruby-doc.org/core/Bignum.html#method-i-eql-3F
Bignum#even?	A			instance methods							<pre><code>even? → true or false</code></pre>Returns true if big is an even number.	http://ruby-doc.org/core/Bignum.html#method-i-even-3F
Bignum#fdiv	A			instance methods							<pre><code>fdiv(numeric) → float</code></pre>Returns the floating point result of dividing big by numeric.<pre><code>-1234567890987654321.fdiv(13731)      #=> -89910996357705.5\n-1234567890987654321.fdiv(13731.24)   #=> -89909424858035.7\n</code></pre>	http://ruby-doc.org/core/Bignum.html#method-i-fdiv
Bignum#hash	A			instance methods							<pre><code>hash   → fixnum</code></pre>Compute a hash based on the value of big.<br>See also Object#hash.	http://ruby-doc.org/core/Bignum.html#method-i-hash
Bignum#inspect	A			instance methods								http://ruby-doc.org/core/Bignum.html#method-i-inspect
Bignum#magnitude	A			instance methods							<pre><code>magnitude → aBignum</code></pre>Returns the absolute value of big.<pre><code>-1234567890987654321.abs   #=> 1234567890987654321\n</code></pre>	http://ruby-doc.org/core/Bignum.html#method-i-magnitude
Bignum#modulo	A			instance methods							<pre><code>modulo(other)   → Numeric</code></pre>Returns big modulo other. See Numeric#divmod for more information.	http://ruby-doc.org/core/Bignum.html#method-i-modulo
Bignum#odd?	A			instance methods							<pre><code>odd? → true or false</code></pre>Returns true if big is an odd number.	http://ruby-doc.org/core/Bignum.html#method-i-odd-3F
Bignum#remainder	A			instance methods							<pre><code>remainder(numeric)    → number</code></pre>Returns the remainder after dividing big by numeric.<pre><code>-1234567890987654321.remainder(13731)      #=> -6966\n-1234567890987654321.remainder(13731.24)   #=> -9906.22531493148\n</code></pre>	http://ruby-doc.org/core/Bignum.html#method-i-remainder
Bignum#size	A			instance methods							<pre><code>size → integer</code></pre>Returns the number of bytes in the machine representation of big.<pre><code>(256**10 - 1).size   #=> 12\n(256**20 - 1).size   #=> 20\n(256**40 - 1).size   #=> 40\n</code></pre>	http://ruby-doc.org/core/Bignum.html#method-i-size
Bignum#to_f	A			instance methods							<pre><code>to_f → float</code></pre>Converts big to a Float. If big doesn’t fit in a Float, the result is infinity.	http://ruby-doc.org/core/Bignum.html#method-i-to_f
Bignum#to_s	A			instance methods							<pre><code>to_s(base=10)   →  string</code></pre>Returns a string containing the representation of big radix base (2 through 36).<pre><code>12345654321.to_s         #=> "12345654321"\n12345654321.to_s(2)      #=> "1011011111110110111011110000110001"\n12345654321.to_s(8)      #=> "133766736061"\n12345654321.to_s(16)     #=> "2dfdbbc31"\n78546939656932.to_s(36)  #=> "rubyrules"\n</code></pre>	http://ruby-doc.org/core/Bignum.html#method-i-to_s
Bignum#|	A			instance methods							<pre><code>big | numeric   →  integer</code></pre>Performs bitwise or between big and numeric.	http://ruby-doc.org/core/Bignum.html#method-i-7C
Bignum#~	A			instance methods							<pre><code>~big  →  integer</code></pre>Inverts the bits in big. As Bignums are conceptually infinite length, the result acts as if it had an infinite number of one bits to the left. In hex representations, this is displayed as two periods to the left of the digits.<pre><code>sprintf("%X", ~0x1122334455)    #=> "..FEEDDCCBBAA"\n</code></pre>	http://ruby-doc.org/core/Bignum.html#method-i-7E
BasicObject	A			classes							BasicObject is the parent class of all classes in Ruby. It's an explicit blank class.<br>BasicObject can be used for creating object hierarchies independent of Ruby's object hierarchy, proxy objects like the Delegator class, or other uses where namespace pollution from Ruby's methods and classes must be avoided.<br>To avoid polluting BasicObject for other users an appropriately named subclass of BasicObject should be created instead of directly modifying BasicObject:<pre><code>class MyObjectSystem < BasicObject\nend\n</code></pre>BasicObject does not include Kernel (for methods like puts) and BasicObject is outside of the namespace of the standard library so common classes will not be found without using a full class path.<br>A variety of strategies can be used to provide useful portions of the standard library to subclasses of BasicObject. A subclass could include Kernel to obtain puts, exit, etc. A custom Kernel-like module could be created and included or delegation can be used via method_missing:<pre><code>class MyObjectSystem < BasicObject\n  DELEGATE = [:puts, :p]\n\n  def method_missing(name, *args, &block)\n    super unless DELEGATE.include? name\n    ::Kernel.send(name, *args, &block)\n  end\n\n  def respond_to_missing?(name, include_private = false)\n    DELEGATE.include?(name) or super\n  end\nend\n</code></pre>Access to classes and modules from the Ruby standard library can be obtained in a BasicObject subclass by referencing the desired constant from the root like ::File or ::Enumerator. Like method_missing, const_missing can be used to delegate constant lookup to Object:<pre><code>class MyObjectSystem < BasicObject\n  def self.const_missing(name)\n    ::Object.const_get(name)\n  end\nend\n</code></pre>	http://ruby-doc.org/core/BasicObject.html
BasicObject::new	A			class methods							Not documented	http://ruby-doc.org/core/BasicObject.html#method-c-new
BasicObject#!	A			instance methods							<pre><code>!obj    → true or false</code></pre>Boolean negate.	http://ruby-doc.org/core/BasicObject.html#method-i-21
BasicObject#!=	A			instance methods							<pre><code>obj != other        → true or false</code></pre>Returns true if two objects are not-equal, otherwise false.	http://ruby-doc.org/core/BasicObject.html#method-i-21-3D
BasicObject#==	A			instance methods							<pre><code>obj == other        → true or false</code></pre>Equality — At the Object level, == returns true only if obj and other are the same object. Typically, this method is overridden in descendant classes to provide class-specific meaning.<br>Unlike ==, the equal? method should never be overridden by subclasses as it is used to determine object identity (that is, a.equal?(b) if and only if a is the same object as b):<pre><code>obj = "a"\nother = obj.dup\n\nobj == other      #=> true\nobj.equal? other  #=> false\nobj.equal? obj    #=> true\n</code></pre>The eql? method returns true if obj and other refer to the same hash key. This is used by Hash to test members for equality. For objects of class Object, eql? is synonymous with ==. Subclasses normally continue this tradition by aliasing eql? to their overridden == method, but there are exceptions. Numeric types, for example, perform type conversion across ==, but not across eql?, so:<pre><code>1 == 1.0     #=> true\n1.eql? 1.0   #=> false\n</code></pre>	http://ruby-doc.org/core/BasicObject.html#method-i-3D-3D
BasicObject#__id__	A			instance methods							<pre><code>__id__       → integer\nobject_id    → integer</code></pre>Returns an integer identifier for obj.<br>The same number will be returned on all calls to object_id for a given object, and no two active objects will share an id.<br>Note: that some objects of builtin classes are reused for optimization. This is the case for immediate values and frozen string literals.<br>Immediate values are not passed by reference but are passed by value: nil, true, false, Fixnums, Symbols, and some Floats.<pre><code>Object.new.object_id  == Object.new.object_id  # => false\n(21 * 2).object_id    == (21 * 2).object_id    # => true\n"hello".object_id     == "hello".object_id     # => false\n"hi".freeze.object_id == "hi".freeze.object_id # => true\n</code></pre>	http://ruby-doc.org/core/BasicObject.html#method-i-__id__
BasicObject#__send__	A			instance methods							<pre><code>send(symbol [, args...])       → obj\n__send__(symbol [, args...])   → obj\nsend(string [, args...])       → obj\n__send__(string [, args...])   → obj</code></pre>Invokes the method identified by symbol, passing it any arguments specified. You can use __send__ if the name send clashes with an existing method in obj. When the method is identified by a string, the string is converted to a symbol.<pre><code>class Klass\n  def hello(*args)\n    "Hello " + args.join(' ')\n  end\nend\nk = Klass.new\nk.send :hello, "gentle", "readers"   #=> "Hello gentle readers"\n</code></pre>	http://ruby-doc.org/core/BasicObject.html#method-i-__send__
BasicObject#equal?	A			instance methods							<pre><code>equal?(other)   → true or false</code></pre>Equality — At the Object level, == returns true only if obj and other are the same object. Typically, this method is overridden in descendant classes to provide class-specific meaning.<br>Unlike ==, the equal? method should never be overridden by subclasses as it is used to determine object identity (that is, a.equal?(b) if and only if a is the same object as b):<pre><code>obj = "a"\nother = obj.dup\n\nobj == other      #=> true\nobj.equal? other  #=> false\nobj.equal? obj    #=> true\n</code></pre>The eql? method returns true if obj and other refer to the same hash key. This is used by Hash to test members for equality. For objects of class Object, eql? is synonymous with ==. Subclasses normally continue this tradition by aliasing eql? to their overridden == method, but there are exceptions. Numeric types, for example, perform type conversion across ==, but not across eql?, so:<pre><code>1 == 1.0     #=> true\n1.eql? 1.0   #=> false\n</code></pre>	http://ruby-doc.org/core/BasicObject.html#method-i-equal-3F
BasicObject#instance_eval	A			instance methods							<pre><code>instance_eval(string [, filename [, lineno]] )   → obj\ninstance_eval {|obj| block }                     → obj</code></pre>Evaluates a string containing Ruby source code, or the given block, within the context of the receiver (obj). In order to set the context, the variable self is set to obj while the code is executing, giving the code access to obj’s instance variables and private methods.<br>When instance_eval is given a block, obj is also passed in as the block’s only argument.<br>When instance_eval is given a String, the optional second and third parameters supply a filename and starting line number that are used when reporting compilation errors.<pre><code>class KlassWithSecret\n  def initialize\n    @secret = 99\n  end\n  private\n  def the_secret\n    "Ssssh! The secret is #{@secret}."\n  end\nend\nk = KlassWithSecret.new\nk.instance_eval { @secret }          #=> 99\nk.instance_eval { the_secret }       #=> "Ssssh! The secret is 99."\nk.instance_eval {|obj| obj == self } #=> true\n</code></pre>	http://ruby-doc.org/core/BasicObject.html#method-i-instance_eval
BasicObject#instance_exec	A			instance methods							<pre><code>instance_exec(arg...) {|var...| block }                       → obj</code></pre>Executes the given block within the context of the receiver (obj). In order to set the context, the variable self is set to obj while the code is executing, giving the code access to obj’s instance variables. Arguments are passed as block parameters.<pre><code>class KlassWithSecret\n  def initialize\n    @secret = 99\n  end\nend\nk = KlassWithSecret.new\nk.instance_exec(5) {|x| @secret+x }   #=> 104\n</code></pre>	http://ruby-doc.org/core/BasicObject.html#method-i-instance_exec
BasicObject#method_missing	A			instance methods							<pre><code>method_missing(symbol [, *args] )   → result</code></pre>Invoked by Ruby when obj is sent a message it cannot handle. symbol is the symbol for the method called, and args are any arguments that were passed to it. By default, the interpreter raises an error when this method is called. However, it is possible to override the method to provide more dynamic behavior. If it is decided that a particular method should not be handled, then super should be called, so that ancestors can pick up the missing method. The example below creates a class Roman, which responds to methods with names consisting of roman numerals, returning the corresponding integer values.<pre><code>class Roman\n  def roman_to_int(str)\n    # ...\n  end\n  def method_missing(methId)\n    str = methId.id2name\n    roman_to_int(str)\n  end\nend\n\nr = Roman.new\nr.iv      #=> 4\nr.xxiii   #=> 23\nr.mm      #=> 2000\n</code></pre>	http://ruby-doc.org/core/BasicObject.html#method-i-method_missing
BasicObject#singleton_method_added	A			instance methods							<pre><code>singleton_method_added(symbol)</code></pre>Invoked as a callback whenever a singleton method is added to the receiver.<pre><code>module Chatty\n  def Chatty.singleton_method_added(id)\n    puts "Adding #{id.id2name}"\n  end\n  def self.one()     end\n  def two()          end\n  def Chatty.three() end\nend\n</code></pre>produces:<pre><code>Adding singleton_method_added\nAdding one\nAdding three\n</code></pre>	http://ruby-doc.org/core/BasicObject.html#method-i-singleton_method_added
BasicObject#singleton_method_removed	A			instance methods							<pre><code>singleton_method_removed(symbol)</code></pre>Invoked as a callback whenever a singleton method is removed from the receiver.<pre><code>module Chatty\n  def Chatty.singleton_method_removed(id)\n    puts "Removing #{id.id2name}"\n  end\n  def self.one()     end\n  def two()          end\n  def Chatty.three() end\n  class << self\n    remove_method :three\n    remove_method :one\n  end\nend\n</code></pre>produces:<pre><code>Removing three\nRemoving one\n</code></pre>	http://ruby-doc.org/core/BasicObject.html#method-i-singleton_method_removed
BasicObject#singleton_method_undefined	A			instance methods							<pre><code>singleton_method_undefined(symbol)</code></pre>Invoked as a callback whenever a singleton method is undefined in the receiver.<pre><code>module Chatty\n  def Chatty.singleton_method_undefined(id)\n    puts "Undefining #{id.id2name}"\n  end\n  def Chatty.one()   end\n  class << self\n     undef_method(:one)\n  end\nend\n</code></pre>produces:<pre><code>Undefining one\n</code></pre>	http://ruby-doc.org/core/BasicObject.html#method-i-singleton_method_undefined
Object	A			classes							Object is the default root of all Ruby objects. Object inherits from BasicObject which allows creating alternate object hierarchies. Methods on Object are available to all classes unless explicitly overridden.<br>Object mixes in the Kernel module, making the built-in kernel functions globally accessible. Although the instance methods of Object are defined by the Kernel module, we have chosen to document them here for clarity.<br>When referencing constants in classes inheriting from Object you do not need to use the full namespace. For example, referencing File inside YourClass will find the top-level File class.<br>In the descriptions of Object's methods, the parameter symbol refers to a symbol, which is either a quoted string or a Symbol (such as :name).	http://ruby-doc.org/core/Object.html
Object#!~	A			instance methods							<pre><code>obj !~ other  → true or false</code></pre>Returns true if two objects do not match (using the =~ method), otherwise false.	http://ruby-doc.org/core/Object.html#method-i-21-7E
Object#<=>	A			instance methods							<pre><code>obj <=> other → 0 or nil</code></pre>Returns 0 if obj and other are the same object or obj == other, otherwise nil.<br>The <=> is used by various methods to compare objects, for example Enumerable#sort, Enumerable#max etc.<br>Your implementation of <=> should return one of the following values: -1, 0, 1 or nil. -1 means self is smaller than other. 0 means self is equal to other. 1 means self is bigger than other. Nil means the two values could not be compared.<br>When you define <=>, you can include Comparable to gain the methods <=, <, ==, >=, > and between?.	http://ruby-doc.org/core/Object.html#method-i-3C-3D-3E
Object#===	A			instance methods							<pre><code>obj === other   → true or false</code></pre>Case Equality – For class Object, effectively the same as calling #==, but typically overridden by descendants to provide meaningful semantics in case statements.	http://ruby-doc.org/core/Object.html#method-i-3D-3D-3D
Object#=~	A			instance methods							<pre><code>obj =~ other  → nil</code></pre>Pattern Match—Overridden by descendants (notably Regexp and String) to provide meaningful pattern-match semantics.	http://ruby-doc.org/core/Object.html#method-i-3D-7E
Object#class	A			instance methods							<pre><code>class    → class</code></pre>Returns the class of obj. This method must always be called with an explicit receiver, as class is also a reserved word in Ruby.<pre><code>1.class      #=> Fixnum\nself.class   #=> Object\n</code></pre>	http://ruby-doc.org/core/Object.html#method-i-class
Object#clone	A			instance methods							<pre><code>clone → an_object</code></pre>Produces a shallow copy of obj—the instance variables of obj are copied, but not the objects they reference. clone copies the frozen and tainted state of obj. See also the discussion under Object#dup.<pre><code>class Klass\n   attr_accessor :str\nend\ns1 = Klass.new      #=> #<Klass:0x401b3a38>\ns1.str = "Hello"    #=> "Hello"\ns2 = s1.clone       #=> #<Klass:0x401b3998 @str="Hello">\ns2.str[1,4] = "i"   #=> "i"\ns1.inspect          #=> "#<Klass:0x401b3a38 @str=\"Hi\">"\ns2.inspect          #=> "#<Klass:0x401b3998 @str=\"Hi\">"\n</code></pre>This method may have class-specific behavior. If so, that behavior will be documented under the #initialize_copy method of the class.	http://ruby-doc.org/core/Object.html#method-i-clone
Object#define_singleton_method	A			instance methods							<pre><code>define_singleton_method(symbol, method) → new_method\ndefine_singleton_method(symbol) { block } → proc</code></pre>Defines a singleton method in the receiver. The method parameter can be a Proc, a Method or an UnboundMethod object. If a block is specified, it is used as the method body.<pre><code>class A\n  class << self\n    def class_name\n      to_s\n    end\n  end\nend\nA.define_singleton_method(:who_am_i) do\n  "I am: #{class_name}"\nend\nA.who_am_i   # ==> "I am: A"\n\nguy = "Bob"\nguy.define_singleton_method(:hello) { "#{self}: Hello there!" }\nguy.hello    #=>  "Bob: Hello there!"\n</code></pre>	http://ruby-doc.org/core/Object.html#method-i-define_singleton_method
Object#display	A			instance methods							<pre><code>display(port=$>)    → nil</code></pre>Prints obj on the given port (default $>). Equivalent to:<pre><code>def display(port=$>)\n  port.write self\nend\n</code></pre>For example:<pre><code>1.display\n"cat".display\n[ 4, 5, 6 ].display\nputs\n</code></pre>produces:	http://ruby-doc.org/core/Object.html#method-i-display
Object#dup	A			instance methods							<pre><code>dup → an_object</code></pre>Produces a shallow copy of obj—the instance variables of obj are copied, but not the objects they reference. dup copies the tainted state of obj.<br>This method may have class-specific behavior. If so, that behavior will be documented under the #initialize_copy method of the class.<br>In general, clone and dup may have different semantics in descendant classes. While clone is used to duplicate an object, including its internal state, dup typically uses the class of the descendant object to create the new instance.<br>When using dup, any modules that the object has been extended with will not be copied.<pre><code>class Klass\n  attr_accessor :str\nend\n\nmodule Foo\n  def foo; 'foo'; end\nend\n\ns1 = Klass.new #=> #<Klass:0x401b3a38>\ns1.extend(Foo) #=> #<Klass:0x401b3a38>\ns1.foo #=> "foo"\n\ns2 = s1.clone #=> #<Klass:0x401b3a38>\ns2.foo #=> "foo"\n\ns3 = s1.dup #=> #<Klass:0x401b3a38>\ns3.foo #=> NoMethodError: undefined method `foo' for #<Klass:0x401b3a38>\n</code></pre>	http://ruby-doc.org/core/Object.html#method-i-dup
Object#enum_for	A			instance methods							<pre><code>enum_for(method = :each, *args)                → enum\nenum_for(method = :each, *args){|*args| block} → enum</code></pre>Creates a new Enumerator which will enumerate by calling method on obj, passing args if any.<br>If a block is given, it will be used to calculate the size of the enumerator without the need to iterate it (see Enumerator#size).<pre><code>str = "xyz"\n\nenum = str.enum_for(:each_byte)\nenum.each { |b| puts b }\n# => 120\n# => 121\n# => 122\n\n# protect an array from being modified by some_method\na = [1, 2, 3]\nsome_method(a.to_enum)\n</code></pre>It is typical to call #to_enum when defining methods for a generic Enumerable, in case no block is passed.<br>Here is such an example, with parameter passing and a sizing block:	http://ruby-doc.org/core/Object.html#method-i-enum_for
Object#eql?	A			instance methods							<pre><code>obj == other        → true or false\nequal?(other)   → true or false\neql?(other)     → true or false</code></pre>Equality — At the Object level, == returns true only if obj and other are the same object. Typically, this method is overridden in descendant classes to provide class-specific meaning.<br>Unlike ==, the equal? method should never be overridden by subclasses as it is used to determine object identity (that is, a.equal?(b) if and only if a is the same object as b):<pre><code>obj = "a"\nother = obj.dup\n\nobj == other      #=> true\nobj.equal? other  #=> false\nobj.equal? obj    #=> true\n</code></pre>The eql? method returns true if obj and other refer to the same hash key. This is used by Hash to test members for equality. For objects of class Object, eql? is synonymous with ==. Subclasses normally continue this tradition by aliasing eql? to their overridden == method, but there are exceptions. Numeric types, for example, perform type conversion across ==, but not across eql?, so:<pre><code>1 == 1.0     #=> true\n1.eql? 1.0   #=> false\n</code></pre>	http://ruby-doc.org/core/Object.html#method-i-eql-3F
Object#extend	A			instance methods							<pre><code>extend(module, ...)    → obj</code></pre>Adds to obj the instance methods from each module given as a parameter.<pre><code>module Mod\n  def hello\n    "Hello from Mod.\n"\n  end\nend\n\nclass Klass\n  def hello\n    "Hello from Klass.\n"\n  end\nend\n\nk = Klass.new\nk.hello         #=> "Hello from Klass.\n"\nk.extend(Mod)   #=> #<Klass:0x401b3bc8>\nk.hello         #=> "Hello from Mod.\n"\n</code></pre>	http://ruby-doc.org/core/Object.html#method-i-extend
Object#freeze	A			instance methods							<pre><code>freeze    → obj</code></pre>Prevents further modifications to obj. A RuntimeError will be raised if modification is attempted. There is no way to unfreeze a frozen object. See also Object#frozen?.<br>This method returns self.<pre><code>a = [ "a", "b", "c" ]\na.freeze\na << "z"\n</code></pre>produces:<br>Objects of the following classes are always frozen: Fixnum, Bignum, Float, Symbol.	http://ruby-doc.org/core/Object.html#method-i-freeze
Object#frozen?	A			instance methods							<pre><code>frozen?    → true or false</code></pre>Returns the freeze status of obj.<pre><code>a = [ "a", "b", "c" ]\na.freeze    #=> ["a", "b", "c"]\na.frozen?   #=> true\n</code></pre>	http://ruby-doc.org/core/Object.html#method-i-frozen-3F
Object#hash	A			instance methods							<pre><code>hash    → fixnum</code></pre>Generates a Fixnum hash value for this object. This function must have the property that a.eql?(b) implies a.hash == b.hash.<br>The hash value is used along with eql? by the Hash class to determine if two objects reference the same hash key. Any hash value that exceeds the capacity of a Fixnum will be truncated before being used.<br>The hash value for an object may not be identical across invocations or implementations of Ruby. If you need a stable identifier across Ruby invocations and implementations you will need to generate one with a custom method.	http://ruby-doc.org/core/Object.html#method-i-hash
Object#inspect	A			instance methods							<pre><code>inspect   → string</code></pre>Returns a string containing a human-readable representation of obj. The default inspect shows the object’s class name, an encoding of the object id, and a list of the instance variables and their values (by calling inspect on each of them). User defined classes should override this method to provide a better representation of obj. When overriding this method, it should return a string whose encoding is compatible with the default external encoding.<pre><code>[ 1, 2, 3..4, 'five' ].inspect   #=> "[1, 2, 3..4, \"five\"]"\nTime.new.inspect                 #=> "2008-03-08 19:43:39 +0900"\n\nclass Foo\nend\nFoo.new.inspect                  #=> "#<Foo:0x0300c868>"\n\nclass Bar\n  def initialize\n    @bar = 1\n  end\nend\nBar.new.inspect                  #=> "#<Bar:0x0300c868 @bar=1>"\n</code></pre>	http://ruby-doc.org/core/Object.html#method-i-inspect
Object#instance_of?	A			instance methods							<pre><code>instance_of?(class)    → true or false</code></pre>Returns true if obj is an instance of the given class. See also Object#kind_of?.<pre><code>class A;     end\nclass B < A; end\nclass C < B; end\n\nb = B.new\nb.instance_of? A   #=> false\nb.instance_of? B   #=> true\nb.instance_of? C   #=> false\n</code></pre>	http://ruby-doc.org/core/Object.html#method-i-instance_of-3F
Object#instance_variable_defined?	A			instance methods							<pre><code>instance_variable_defined?(symbol)    → true or false\ninstance_variable_defined?(string)    → true or false</code></pre>Returns true if the given instance variable is defined in obj. String arguments are converted to symbols.<pre><code>class Fred\n  def initialize(p1, p2)\n    @a, @b = p1, p2\n  end\nend\nfred = Fred.new('cat', 99)\nfred.instance_variable_defined?(:@a)    #=> true\nfred.instance_variable_defined?("@b")   #=> true\nfred.instance_variable_defined?("@c")   #=> false\n</code></pre>	http://ruby-doc.org/core/Object.html#method-i-instance_variable_defined-3F
Object#instance_variable_get	A			instance methods							<pre><code>instance_variable_get(symbol)    → obj\ninstance_variable_get(string)    → obj</code></pre>Returns the value of the given instance variable, or nil if the instance variable is not set. The @ part of the variable name should be included for regular instance variables. Throws a NameError exception if the supplied symbol is not valid as an instance variable name. String arguments are converted to symbols.<pre><code>class Fred\n  def initialize(p1, p2)\n    @a, @b = p1, p2\n  end\nend\nfred = Fred.new('cat', 99)\nfred.instance_variable_get(:@a)    #=> "cat"\nfred.instance_variable_get("@b")   #=> 99\n</code></pre>	http://ruby-doc.org/core/Object.html#method-i-instance_variable_get
Object#instance_variable_set	A			instance methods							<pre><code>instance_variable_set(symbol, obj)    → obj\ninstance_variable_set(string, obj)    → obj</code></pre>Sets the instance variable named by symbol to the given object, thereby frustrating the efforts of the class’s author to attempt to provide proper encapsulation. The variable does not have to exist prior to this call. If the instance variable name is passed as a string, that string is converted to a symbol.<pre><code>class Fred\n  def initialize(p1, p2)\n    @a, @b = p1, p2\n  end\nend\nfred = Fred.new('cat', 99)\nfred.instance_variable_set(:@a, 'dog')   #=> "dog"\nfred.instance_variable_set(:@c, 'cat')   #=> "cat"\nfred.inspect                             #=> "#<Fred:0x401b3da8 @a=\"dog\", @b=99, @c=\"cat\">"\n</code></pre>	http://ruby-doc.org/core/Object.html#method-i-instance_variable_set
Object#instance_variables	A			instance methods							<pre><code>instance_variables    → array</code></pre>Returns an array of instance variable names for the receiver. Note that simply defining an accessor does not create the corresponding instance variable.<pre><code>class Fred\n  attr_accessor :a1\n  def initialize\n    @iv = 3\n  end\nend\nFred.new.instance_variables   #=> [:@iv]\n</code></pre>	http://ruby-doc.org/core/Object.html#method-i-instance_variables
Object#is_a?	A			instance methods							<pre><code>is_a?(class)       → true or false</code></pre>Returns true if class is the class of obj, or if class is one of the superclasses of obj or modules included in obj.<pre><code>module M;    end\nclass A\n  include M\nend\nclass B < A; end\nclass C < B; end\n\nb = B.new\nb.is_a? A          #=> true\nb.is_a? B          #=> true\nb.is_a? C          #=> false\nb.is_a? M          #=> true\n\nb.kind_of? A       #=> true\nb.kind_of? B       #=> true\nb.kind_of? C       #=> false\nb.kind_of? M       #=> true\n</code></pre>	http://ruby-doc.org/core/Object.html#method-i-is_a-3F
Object#itself	A			instance methods							<pre><code>itself → an_object</code></pre>Returns obj.<pre><code>string = 'my string' #=> "my string"\nstring.itself.object_id == string.object_id #=> true\n</code></pre>	http://ruby-doc.org/core/Object.html#method-i-itself
Object#kind_of?	A			instance methods							<pre><code>kind_of?(class)    → true or false</code></pre>Returns true if class is the class of obj, or if class is one of the superclasses of obj or modules included in obj.<pre><code>module M;    end\nclass A\n  include M\nend\nclass B < A; end\nclass C < B; end\n\nb = B.new\nb.is_a? A          #=> true\nb.is_a? B          #=> true\nb.is_a? C          #=> false\nb.is_a? M          #=> true\n\nb.kind_of? A       #=> true\nb.kind_of? B       #=> true\nb.kind_of? C       #=> false\nb.kind_of? M       #=> true\n</code></pre>	http://ruby-doc.org/core/Object.html#method-i-kind_of-3F
Object#method	A			instance methods							<pre><code>method(sym)    → method</code></pre>Looks up the named method as a receiver in obj, returning a Method object (or raising NameError). The Method object acts as a closure in obj’s object instance, so instance variables and the value of self remain available.<pre><code>class Demo\n  def initialize(n)\n    @iv = n\n  end\n  def hello()\n    "Hello, @iv = #{@iv}"\n  end\nend\n\nk = Demo.new(99)\nm = k.method(:hello)\nm.call   #=> "Hello, @iv = 99"\n\nl = Demo.new('Fred')\nm = l.method("hello")\nm.call   #=> "Hello, @iv = Fred"\n</code></pre>	http://ruby-doc.org/core/Object.html#method-i-method
Object#methods	A			instance methods							<pre><code>methods(regular=true)    → array</code></pre>Returns a list of the names of public and protected methods of obj. This will include all the methods accessible in obj's ancestors. If the optional parameter is false, it returns an array of obj<i>'s public and protected singleton methods, the array will not include methods in modules included in <i>obj.<pre><code>class Klass\n  def klass_method()\n  end\nend\nk = Klass.new\nk.methods[0..9]    #=> [:klass_method, :nil?, :===,\n                   #    :==~, :!, :eql?\n                   #    :hash, :<=>, :class, :singleton_class]\nk.methods.length   #=> 56\n\nk.methods(false)   #=> []\ndef k.singleton_method; end\nk.methods(false)   #=> [:singleton_method]\n\nmodule M123; def m123; end end\nk.extend M123\nk.methods(false)   #=> [:singleton_method]\n</code></pre>	http://ruby-doc.org/core/Object.html#method-i-methods
Object#nil?	A			instance methods							<pre><code>nil?               → true or false</code></pre>Only the object nil responds true to nil?.<pre><code>Object.new.nil?   #=> false\nnil.nil?          #=> true\n</code></pre>	http://ruby-doc.org/core/Object.html#method-i-nil-3F
Object#object_id	A			instance methods							<pre><code>__id__       → integer\nobject_id    → integer</code></pre>Returns an integer identifier for obj.<br>The same number will be returned on all calls to object_id for a given object, and no two active objects will share an id.<br>Note: that some objects of builtin classes are reused for optimization. This is the case for immediate values and frozen string literals.<br>Immediate values are not passed by reference but are passed by value: nil, true, false, Fixnums, Symbols, and some Floats.<pre><code>Object.new.object_id  == Object.new.object_id  # => false\n(21 * 2).object_id    == (21 * 2).object_id    # => true\n"hello".object_id     == "hello".object_id     # => false\n"hi".freeze.object_id == "hi".freeze.object_id # => true\n</code></pre>	http://ruby-doc.org/core/Object.html#method-i-object_id
Object#private_methods	A			instance methods							<pre><code>private_methods(all=true)   → array</code></pre>Returns the list of private methods accessible to obj. If the all parameter is set to false, only those methods in the receiver will be listed.	http://ruby-doc.org/core/Object.html#method-i-private_methods
Object#protected_methods	A			instance methods							<pre><code>protected_methods(all=true)   → array</code></pre>Returns the list of protected methods accessible to obj. If the all parameter is set to false, only those methods in the receiver will be listed.	http://ruby-doc.org/core/Object.html#method-i-protected_methods
Object#public_method	A			instance methods							<pre><code>public_method(sym)    → method</code></pre>Similar to method, searches public method only.	http://ruby-doc.org/core/Object.html#method-i-public_method
Object#public_methods	A			instance methods							<pre><code>public_methods(all=true)   → array</code></pre>Returns the list of public methods accessible to obj. If the all parameter is set to false, only those methods in the receiver will be listed.	http://ruby-doc.org/core/Object.html#method-i-public_methods
Object#public_send	A			instance methods							<pre><code>public_send(symbol [, args...])  → obj\npublic_send(string [, args...])  → obj</code></pre>Invokes the method identified by symbol, passing it any arguments specified. Unlike send, #public_send calls public methods only. When the method is identified by a string, the string is converted to a symbol.<pre><code>1.public_send(:puts, "hello")  # causes NoMethodError\n</code></pre>	http://ruby-doc.org/core/Object.html#method-i-public_send
Object#remove_instance_variable	A			instance methods							<pre><code>remove_instance_variable(symbol)    → obj</code></pre>Removes the named instance variable from obj, returning that variable's value.<pre><code>class Dummy\n  attr_reader :var\n  def initialize\n    @var = 99\n  end\n  def remove\n    remove_instance_variable(:@var)\n  end\nend\nd = Dummy.new\nd.var      #=> 99\nd.remove   #=> 99\nd.var      #=> nil\n</code></pre>	http://ruby-doc.org/core/Object.html#method-i-remove_instance_variable
Object#respond_to?	A			instance methods							<pre><code>respond_to?(symbol, include_all=false) → true or false\nrespond_to?(string, include_all=false) → true or false</code></pre>Returns true if obj responds to the given method. Private and protected methods are included in the search only if the optional second parameter evaluates to true.<br>If the method is not implemented, as Process.fork on Windows, File.lchmod on GNU/Linux, etc., false is returned.<br>If the method is not defined, respond_to_missing? method is called and the result is returned.<br>When the method name parameter is given as a string, the string is converted to a symbol.	http://ruby-doc.org/core/Object.html#method-i-respond_to-3F
Object#respond_to_missing?	A			instance methods							<pre><code>respond_to_missing?(symbol, include_all) → true or false\nrespond_to_missing?(string, include_all) → true or false</code></pre>DO NOT USE THIS DIRECTLY.<br>Hook method to return whether the obj can respond to id method or not.<br>When the method name parameter is given as a string, the string is converted to a symbol.<br>See respond_to?, and the example of BasicObject.	http://ruby-doc.org/core/Object.html#method-i-respond_to_missing-3F
Object#send	A			instance methods							<pre><code>send(symbol [, args...])       → obj\n__send__(symbol [, args...])   → obj\nsend(string [, args...])       → obj\n__send__(string [, args...])   → obj</code></pre>Invokes the method identified by symbol, passing it any arguments specified. You can use __send__ if the name send clashes with an existing method in obj. When the method is identified by a string, the string is converted to a symbol.<pre><code>class Klass\n  def hello(*args)\n    "Hello " + args.join(' ')\n  end\nend\nk = Klass.new\nk.send :hello, "gentle", "readers"   #=> "Hello gentle readers"\n</code></pre>	http://ruby-doc.org/core/Object.html#method-i-send
Object#singleton_class	A			instance methods							<pre><code>singleton_class    → class</code></pre>Returns the singleton class of obj. This method creates a new singleton class if obj does not have one.<br>If obj is nil, true, or false, it returns NilClass, TrueClass, or FalseClass, respectively. If obj is a Fixnum or a Symbol, it raises a TypeError.<pre><code>Object.new.singleton_class  #=> #<Class:#<Object:0xb7ce1e24>>\nString.singleton_class      #=> #<Class:String>\nnil.singleton_class         #=> NilClass\n</code></pre>	http://ruby-doc.org/core/Object.html#method-i-singleton_class
Object#singleton_method	A			instance methods							<pre><code>singleton_method(sym)    → method</code></pre>Similar to method, searches singleton method only.<pre><code>class Demo\n  def initialize(n)\n    @iv = n\n  end\n  def hello()\n    "Hello, @iv = #{@iv}"\n  end\nend\n\nk = Demo.new(99)\ndef k.hi\n  "Hi, @iv = #{@iv}"\nend\nm = k.singleton_method(:hi)\nm.call   #=> "Hi, @iv = 99"\nm = k.singleton_method(:hello) #=> NameError\n</code></pre>	http://ruby-doc.org/core/Object.html#method-i-singleton_method
Object#singleton_methods	A			instance methods							<pre><code>singleton_methods(all=true)    → array</code></pre>Returns an array of the names of singleton methods for obj. If the optional all parameter is true, the list will include methods in modules included in obj. Only public and protected singleton methods are returned.<pre><code>module Other\n  def three() end\nend\n\nclass Single\n  def Single.four() end\nend\n\na = Single.new\n\ndef a.one()\nend\n\nclass << a\n  include Other\n  def two()\n  end\nend\n\nSingle.singleton_methods    #=> [:four]\na.singleton_methods(false)  #=> [:two, :one]\na.singleton_methods         #=> [:two, :one, :three]\n</code></pre>	http://ruby-doc.org/core/Object.html#method-i-singleton_methods
Object#taint	A			instance methods							<pre><code>taint → obj</code></pre>Mark the object as tainted.<br>Objects that are marked as tainted will be restricted from various built-in methods. This is to prevent insecure data, such as command-line arguments or strings read from Kernel#gets, from inadvertently compromising the user’s system.<br>To check whether an object is tainted, use tainted?.<br>You should only untaint a tainted object if your code has inspected it and determined that it is safe. To do so use untaint.	http://ruby-doc.org/core/Object.html#method-i-taint
Object#tainted?	A			instance methods							<pre><code>tainted?    → true or false</code></pre>Returns true if the object is tainted.<br>See taint for more information.	http://ruby-doc.org/core/Object.html#method-i-tainted-3F
Object#tap	A			instance methods							<pre><code>tap{|x|...}    → obj</code></pre>Yields self to the block, and then returns self. The primary purpose of this method is to “tap into” a method chain, in order to perform operations on intermediate results within the chain.<pre><code>(1..10)                .tap {|x| puts "original: #{x.inspect}"}\n  .to_a                .tap {|x| puts "array: #{x.inspect}"}\n  .select {|x| x%2==0} .tap {|x| puts "evens: #{x.inspect}"}\n  .map {|x| x*x}       .tap {|x| puts "squares: #{x.inspect}"}\n</code></pre>	http://ruby-doc.org/core/Object.html#method-i-tap
Object#to_enum	A			instance methods							<pre><code>to_enum(method = :each, *args)                 → enum\nto_enum(method = :each, *args) {|*args| block} → enum</code></pre>Creates a new Enumerator which will enumerate by calling method on obj, passing args if any.<br>If a block is given, it will be used to calculate the size of the enumerator without the need to iterate it (see Enumerator#size).<pre><code>str = "xyz"\n\nenum = str.enum_for(:each_byte)\nenum.each { |b| puts b }\n# => 120\n# => 121\n# => 122\n\n# protect an array from being modified by some_method\na = [1, 2, 3]\nsome_method(a.to_enum)\n</code></pre>It is typical to call #to_enum when defining methods for a generic Enumerable, in case no block is passed.<br>Here is such an example, with parameter passing and a sizing block:	http://ruby-doc.org/core/Object.html#method-i-to_enum
Object#to_s	A			instance methods							<pre><code>to_s    → string</code></pre>Returns a string representing obj. The default to_s prints the object’s class and an encoding of the object id. As a special case, the top-level object that is the initial execution context of Ruby programs returns “main”.	http://ruby-doc.org/core/Object.html#method-i-to_s
Object#trust	A			instance methods							<pre><code>trust    → obj</code></pre>Deprecated method that is equivalent to untaint.	http://ruby-doc.org/core/Object.html#method-i-trust
Object#untaint	A			instance methods							<pre><code>untaint    → obj</code></pre>Removes the tainted mark from the object.<br>See taint for more information.	http://ruby-doc.org/core/Object.html#method-i-untaint
Object#untrust	A			instance methods							<pre><code>untrust → obj</code></pre>Deprecated method that is equivalent to taint.	http://ruby-doc.org/core/Object.html#method-i-untrust
Object#untrusted?	A			instance methods							<pre><code>untrusted?    → true or false</code></pre>Deprecated method that is equivalent to tainted?.	http://ruby-doc.org/core/Object.html#method-i-untrusted-3F
Module	A			classes							A Module is a collection of methods and constants. The methods in a module may be instance methods or module methods. Instance methods appear as methods in a class when the module is included, module methods do not. Conversely, module methods may be called without creating an encapsulating object, while instance methods may not. (See Module#module_function.)<br>In the descriptions that follow, the parameter sym refers to a symbol, which is either a quoted string or a Symbol (such as :name).<pre><code>module Mod\n  include Math\n  CONST = 1\n  def meth\n    #  ...\n  end\nend\nMod.class              #=> Module\nMod.constants          #=> [:CONST, :PI, :E]\nMod.instance_methods   #=> [:meth]\n</code></pre>	http://ruby-doc.org/core/Module.html
Module::constants	A			class methods							<pre><code>constants   → array\nconstants(inherited)   → array</code></pre>In the first form, returns an array of the names of all constants accessible from the point of call. This list includes the names of all modules and classes defined in the global scope.<pre><code>Module.constants.first(4)\n   # => [:ARGF, :ARGV, :ArgumentError, :Array]\n\nModule.constants.include?(:SEEK_SET)   # => false\n\nclass IO\n  Module.constants.include?(:SEEK_SET) # => true\nend\n</code></pre>The second form calls the instance method constants.	http://ruby-doc.org/core/Module.html#method-c-constants
Module::nesting	A			class methods							<pre><code>nesting    → array</code></pre>Returns the list of Modules nested at the point of call.<pre><code>module M1\n  module M2\n    $a = Module.nesting\n  end\nend\n$a           #=> [M1::M2, M1]\n$a[0].name   #=> "M1::M2"\n</code></pre>	http://ruby-doc.org/core/Module.html#method-c-nesting
Module::new	A			class methods							<pre><code>new                  → mod\nnew {|mod| block }   → mod</code></pre>Creates a new anonymous module. If a block is given, it is passed the module object, and the block is evaluated in the context of this module using module_eval.<pre><code>fred = Module.new do\n  def meth1\n    "hello"\n  end\n  def meth2\n    "bye"\n  end\nend\na = "my string"\na.extend(fred)   #=> "my string"\na.meth1          #=> "hello"\na.meth2          #=> "bye"\n</code></pre>Assign the module to a constant (name starting uppercase) if you want to treat it like a regular module.	http://ruby-doc.org/core/Module.html#method-c-new
Module#<	A			instance methods							<pre><code>mod < other   →  true, false, or nil</code></pre>Returns true if mod is a subclass of other. Returns nil if there’s no relationship between the two. (Think of the relationship in terms of the class definition: “class A<B” implies “A<B”.)	http://ruby-doc.org/core/Module.html#method-i-3C
Module#<=	A			instance methods							<pre><code>mod <= other   →  true, false, or nil</code></pre>Returns true if mod is a subclass of other or is the same as other. Returns nil if there’s no relationship between the two. (Think of the relationship in terms of the class definition: “class A<B” implies “A<B”.)	http://ruby-doc.org/core/Module.html#method-i-3C-3D
Module#<=>	A			instance methods							<pre><code>module <=> other_module   → -1, 0, +1, or nil</code></pre>Comparison—Returns -1, 0, +1 or nil depending on whether module includes other_module, they are the same, or if module is included by other_module.<br>Returns nil if module has no relationship with other_module, if other_module is not a module, or if the two values are incomparable.	http://ruby-doc.org/core/Module.html#method-i-3C-3D-3E
Module#==	A			instance methods							<pre><code>obj == other        → true or false\nequal?(other)   → true or false\neql?(other)     → true or false</code></pre>Equality — At the Object level, == returns true only if obj and other are the same object. Typically, this method is overridden in descendant classes to provide class-specific meaning.<br>Unlike ==, the equal? method should never be overridden by subclasses as it is used to determine object identity (that is, a.equal?(b) if and only if a is the same object as b):<pre><code>obj = "a"\nother = obj.dup\n\nobj == other      #=> true\nobj.equal? other  #=> false\nobj.equal? obj    #=> true\n</code></pre>The eql? method returns true if obj and other refer to the same hash key. This is used by Hash to test members for equality. For objects of class Object, eql? is synonymous with ==. Subclasses normally continue this tradition by aliasing eql? to their overridden == method, but there are exceptions. Numeric types, for example, perform type conversion across ==, but not across eql?, so:<pre><code>1 == 1.0     #=> true\n1.eql? 1.0   #=> false\n</code></pre>	http://ruby-doc.org/core/Module.html#method-i-3D-3D
Module#===	A			instance methods							<pre><code>mod === obj    → true or false</code></pre>Case Equality—Returns true if obj is an instance of mod or and instance of one of mod’s descendants. Of limited use for modules, but can be used in case statements to classify objects by class.	http://ruby-doc.org/core/Module.html#method-i-3D-3D-3D
Module#>	A			instance methods							<pre><code>mod > other   →  true, false, or nil</code></pre>Returns true if mod is an ancestor of other. Returns nil if there’s no relationship between the two. (Think of the relationship in terms of the class definition: “class A<B” implies “B>A”.)	http://ruby-doc.org/core/Module.html#method-i-3E
Module#>=	A			instance methods							<pre><code>mod >= other   →  true, false, or nil</code></pre>Returns true if mod is an ancestor of other, or the two modules are the same. Returns nil if there’s no relationship between the two. (Think of the relationship in terms of the class definition: “class A<B” implies “B>A”.)	http://ruby-doc.org/core/Module.html#method-i-3E-3D
Module#alias_method	A			instance methods							<pre><code>alias_method(new_name, old_name)   → self</code></pre>Makes new_name a new copy of the method old_name. This can be used to retain access to methods that are overridden.<pre><code>module Mod\n  alias_method :orig_exit, :exit\n  def exit(code=0)\n    puts "Exiting with code #{code}"\n    orig_exit(code)\n  end\nend\ninclude Mod\nexit(99)\n</code></pre>produces:<pre><code>Exiting with code 99\n</code></pre>	http://ruby-doc.org/core/Module.html#method-i-alias_method
Module#ancestors	A			instance methods							<pre><code>ancestors → array</code></pre>Returns a list of modules included/prepended in mod (including mod itself).<pre><code>module Mod\n  include Math\n  include Comparable\n  prepend Enumerable\nend\n\nMod.ancestors        #=> [Enumerable, Mod, Comparable, Math]\nMath.ancestors       #=> [Math]\nEnumerable.ancestors #=> [Enumerable]\n</code></pre>	http://ruby-doc.org/core/Module.html#method-i-ancestors
Module#append_features	A			instance methods							<pre><code>append_features(mod)   → mod</code></pre>When this module is included in another, Ruby calls append_features in this module, passing it the receiving module in mod. Ruby’s default implementation is to add the constants, methods, and module variables of this module to mod if this module has not already been added to mod or one of its ancestors. See also Module#include.	http://ruby-doc.org/core/Module.html#method-i-append_features
Module#attr	A			instance methods								http://ruby-doc.org/core/Module.html#method-i-attr
Module#attr_accessor	A			instance methods							<pre><code>attr_accessor(symbol, ...)    → nil\nattr_accessor(string, ...)    → nil</code></pre>Defines a named attribute for this module, where the name is symbol.id2name, creating an instance variable (@name) and a corresponding access method to read it. Also creates a method called name= to set the attribute. String arguments are converted to symbols.<pre><code>module Mod\n  attr_accessor(:one, :two)\nend\nMod.instance_methods.sort   #=> [:one, :one=, :two, :two=]\n</code></pre>	http://ruby-doc.org/core/Module.html#method-i-attr_accessor
Module#attr_reader	A			instance methods							<pre><code>attr_reader(symbol, ...)  → nil\nattr(symbol, ...)         → nil\nattr_reader(string, ...)  → nil\nattr(string, ...)         → nil</code></pre>Creates instance variables and corresponding methods that return the value of each instance variable. Equivalent to calling “attr:name” on each name in turn. String arguments are converted to symbols.	http://ruby-doc.org/core/Module.html#method-i-attr_reader
Module#attr_writer	A			instance methods							<pre><code>attr_writer(symbol, ...)    → nil\nattr_writer(string, ...)    → nil</code></pre>Creates an accessor method to allow assignment to the attribute symbol.id2name. String arguments are converted to symbols.	http://ruby-doc.org/core/Module.html#method-i-attr_writer
Module#autoload	A			instance methods							<pre><code>autoload(module, filename)   → nil</code></pre>Registers filename to be loaded (using Kernel::require) the first time that module (which may be a String or a symbol) is accessed in the namespace of mod.<pre><code>module A\nend\nA.autoload(:B, "b")\nA::B.doit            # autoloads "b"\n</code></pre>	http://ruby-doc.org/core/Module.html#method-i-autoload
Module#autoload?	A			instance methods							<pre><code>autoload?(name)   → String or nil</code></pre>Returns filename to be loaded if name is registered as autoload in the namespace of mod.<pre><code>module A\nend\nA.autoload(:B, "b")\nA.autoload?(:B)            #=> "b"\n</code></pre>	http://ruby-doc.org/core/Module.html#method-i-autoload-3F
Module#class_eval	A			instance methods							<pre><code>class_eval(string [, filename [, lineno]])  → obj</code></pre>Evaluates the string or block in the context of mod, except that when a block is given, constant/class variable lookup is not affected. This can be used to add methods to a class. module_eval returns the result of evaluating its argument. The optional filename and lineno parameters set the text for error messages.<pre><code>class Thing\nend\na = %q{def hello() "Hello there!" end}\nThing.module_eval(a)\nputs Thing.new.hello()\nThing.module_eval("invalid code", "dummy", 123)\n</code></pre>produces:	http://ruby-doc.org/core/Module.html#method-i-class_eval
Module#class_exec	A			instance methods							<pre><code>class_exec(arg...) {|var...| block }        → obj</code></pre>Evaluates the given block in the context of the class/module. The method defined in the block will belong to the receiver. Any arguments passed to the method will be passed to the block. This can be used if the block needs to access instance variables.<pre><code>class Thing\nend\nThing.class_exec{\n  def hello() "Hello there!" end\n}\nputs Thing.new.hello()\n</code></pre>produces:<pre><code>Hello there!\n</code></pre>	http://ruby-doc.org/core/Module.html#method-i-class_exec
Module#class_variable_defined?	A			instance methods							<pre><code>class_variable_defined?(symbol)    → true or false\nclass_variable_defined?(string)    → true or false</code></pre>Returns true if the given class variable is defined in obj. String arguments are converted to symbols.<pre><code>class Fred\n  @@foo = 99\nend\nFred.class_variable_defined?(:@@foo)    #=> true\nFred.class_variable_defined?(:@@bar)    #=> false\n</code></pre>	http://ruby-doc.org/core/Module.html#method-i-class_variable_defined-3F
Module#class_variable_get	A			instance methods							<pre><code>class_variable_get(symbol)    → obj\nclass_variable_get(string)    → obj</code></pre>Returns the value of the given class variable (or throws a NameError exception). The @@ part of the variable name should be included for regular class variables. String arguments are converted to symbols.<pre><code>class Fred\n  @@foo = 99\nend\nFred.class_variable_get(:@@foo)     #=> 99\n</code></pre>	http://ruby-doc.org/core/Module.html#method-i-class_variable_get
Module#class_variable_set	A			instance methods							<pre><code>class_variable_set(symbol, obj)    → obj\nclass_variable_set(string, obj)    → obj</code></pre>Sets the class variable named by symbol to the given object. If the class variable name is passed as a string, that string is converted to a symbol.<pre><code>class Fred\n  @@foo = 99\n  def foo\n    @@foo\n  end\nend\nFred.class_variable_set(:@@foo, 101)     #=> 101\nFred.new.foo                             #=> 101\n</code></pre>	http://ruby-doc.org/core/Module.html#method-i-class_variable_set
Module#class_variables	A			instance methods							<pre><code>class_variables(inherit=true)    → array</code></pre>Returns an array of the names of class variables in mod. This includes the names of class variables in any included modules, unless the inherit parameter is set to false.<pre><code>class One\n  @@var1 = 1\nend\nclass Two < One\n  @@var2 = 2\nend\nOne.class_variables          #=> [:@@var1]\nTwo.class_variables          #=> [:@@var2, :@@var1]\nTwo.class_variables(false)   #=> [:@@var2]\n</code></pre>	http://ruby-doc.org/core/Module.html#method-i-class_variables
Module#const_defined?	A			instance methods							<pre><code>const_defined?(sym, inherit=true)   → true or false\nconst_defined?(str, inherit=true)   → true or false</code></pre>Says whether mod or its ancestors have a constant with the given name:<pre><code>Float.const_defined?(:EPSILON)      #=> true, found in Float itself\nFloat.const_defined?("String")      #=> true, found in Object (ancestor)\nBasicObject.const_defined?(:Hash)   #=> false\n</code></pre>If mod is a Module, additionally Object and its ancestors are checked:<pre><code>Math.const_defined?(:String)   #=> true, found in Object\n</code></pre>In each of the checked classes or modules, if the constant is not present but there is an autoload for it, true is returned directly without autoloading:<pre><code>module Admin\n  autoload :User, 'admin/user'\nend\nAdmin.const_defined?(:User)   #=> true\n</code></pre>If the constant is not found the callback const_missing is not called and the method returns false.<br>If inherit is false, the lookup only checks the constants in the receiver:<pre><code>IO.const_defined?(:SYNC)          #=> true, found in File::Constants (ancestor)\nIO.const_defined?(:SYNC, false)   #=> false, not found in IO itself\n</code></pre>In this case, the same logic for autoloading applies.<br>If the argument is not a valid constant name a NameError is raised with the message “wrong constant name name”:<pre><code>Hash.const_defined? 'foobar'   #=> NameError: wrong constant name foobar\n</code></pre>	http://ruby-doc.org/core/Module.html#method-i-const_defined-3F
Module#const_get	A			instance methods							<pre><code>const_get(sym, inherit=true)    → obj\nconst_get(str, inherit=true)    → obj</code></pre>Checks for a constant with the given name in mod. If inherit is set, the lookup will also search the ancestors (and Object if mod is a Module).<br>The value of the constant is returned if a definition is found, otherwise a NameError is raised.<pre><code>Math.const_get(:PI)   #=> 3.14159265358979\n</code></pre>This method will recursively look up constant names if a namespaced class name is provided. For example:<pre><code>module Foo; class Bar; end end\nObject.const_get 'Foo::Bar'\n</code></pre>The inherit flag is respected on each lookup. For example:<pre><code>module Foo\n  class Bar\n    VAL = 10\n  end\n\n  class Baz < Bar; end\nend\n\nObject.const_get 'Foo::Baz::VAL'         # => 10\nObject.const_get 'Foo::Baz::VAL', false  # => NameError\n</code></pre>If the argument is not a valid constant name a NameError will be raised with a warning “wrong constant name”.<pre><code>Object.const_get 'foobar' #=> NameError: wrong constant name foobar\n</code></pre>	http://ruby-doc.org/core/Module.html#method-i-const_get
Module#const_missing	A			instance methods							<pre><code>const_missing(sym)    → obj</code></pre>Invoked when a reference is made to an undefined constant in mod. It is passed a symbol for the undefined constant, and returns a value to be used for that constant. The following code is an example of the same:<pre><code>def Foo.const_missing(name)\n  name # return the constant name as Symbol\nend\n\nFoo::UNDEFINED_CONST    #=> :UNDEFINED_CONST: symbol returned\n</code></pre>In the next example when a reference is made to an undefined constant, it attempts to load a file whose name is the lowercase version of the constant (thus class Fred is assumed to be in file fred.rb). If found, it returns the loaded class. It therefore implements an autoload feature similar to Kernel#autoload and #autoload.<pre><code>def Object.const_missing(name)\n  @looked_for ||= {}\n  str_name = name.to_s\n  raise "Class not found: #{name}" if @looked_for[str_name]\n  @looked_for[str_name] = 1\n  file = str_name.downcase\n  require file\n  klass = const_get(name)\n  return klass if klass\n  raise "Class not found: #{name}"\nend\n</code></pre>	http://ruby-doc.org/core/Module.html#method-i-const_missing
Module#const_set	A			instance methods							<pre><code>const_set(sym, obj)    → obj\nconst_set(str, obj)    → obj</code></pre>Sets the named constant to the given object, returning that object. Creates a new constant if no constant with the given name previously existed.<pre><code>Math.const_set("HIGH_SCHOOL_PI", 22.0/7.0)   #=> 3.14285714285714\nMath::HIGH_SCHOOL_PI - Math::PI              #=> 0.00126448926734968\n</code></pre>If sym or str is not a valid constant name a NameError will be raised with a warning “wrong constant name”.<pre><code>Object.const_set('foobar', 42) #=> NameError: wrong constant name foobar\n</code></pre>	http://ruby-doc.org/core/Module.html#method-i-const_set
Module#constants	A			instance methods							<pre><code>constants(inherit=true)    → array</code></pre>Returns an array of the names of the constants accessible in mod. This includes the names of constants in any included modules (example at start of section), unless the inherit parameter is set to false.<br>The implementation makes no guarantees about the order in which the constants are yielded.<pre><code>IO.constants.include?(:SYNC)        #=> true\nIO.constants(false).include?(:SYNC) #=> false\n</code></pre>Also see Module::const_defined?.	http://ruby-doc.org/core/Module.html#method-i-constants
Module#define_method	A			instance methods							<pre><code>define_method(symbol, method)     → symbol\ndefine_method(symbol) { block }   → symbol</code></pre>Defines an instance method in the receiver. The method parameter can be a Proc, a Method or an UnboundMethod object. If a block is specified, it is used as the method body. This block is evaluated using instance_eval, a point that is tricky to demonstrate because define_method is private. (This is why we resort to the send hack in this example.)<pre><code>class A\n  def fred\n    puts "In Fred"\n  end\n  def create_method(name, &block)\n    self.class.send(:define_method, name, &block)\n  end\n  define_method(:wilma) { puts "Charge it!" }\nend\nclass B < A\n  define_method(:barney, instance_method(:fred))\nend\na = B.new\na.barney\na.wilma\na.create_method(:betty) { p self }\na.betty\n</code></pre>produces:<pre><code>In Fred\nCharge it!\n#<B:0x401b39e8>\n</code></pre>	http://ruby-doc.org/core/Module.html#method-i-define_method
Module#deprecate_constant	A			instance methods								http://ruby-doc.org/core/Module.html#method-i-deprecate_constant
Module#extend_object	A			instance methods							<pre><code>extend_object(obj)    → obj</code></pre>Extends the specified object by adding this module’s constants and methods (which are added as singleton methods). This is the callback method used by Object#extend.<pre><code>module Picky\n  def Picky.extend_object(o)\n    if String === o\n      puts "Can't add Picky to a String"\n    else\n      puts "Picky added to #{o.class}"\n      super\n    end\n  end\nend\n(s = Array.new).extend Picky  # Call Object.extend\n(s = "quick brown fox").extend Picky\n</code></pre>produces:	http://ruby-doc.org/core/Module.html#method-i-extend_object
Module#extended	A			instance methods							<pre><code>extended(othermod)</code></pre>The equivalent of included, but for extended modules.<pre><code>module A\n  def self.extended(mod)\n    puts "#{self} extended in #{mod}"\n  end\nend\nmodule Enumerable\n  extend A\nend\n # => prints "A extended in Enumerable"\n</code></pre>	http://ruby-doc.org/core/Module.html#method-i-extended
Module#freeze	A			instance methods							<pre><code>freeze       → mod</code></pre>Prevents further modifications to mod.<br>This method returns self.	http://ruby-doc.org/core/Module.html#method-i-freeze
Module#include	A			instance methods							<pre><code>include(module, ...)    → self</code></pre>Invokes Module.append_features on each parameter in reverse order.	http://ruby-doc.org/core/Module.html#method-i-include
Module#include?	A			instance methods							<pre><code>include?(module)    → true or false</code></pre>Returns true if module is included in mod or one of mod's ancestors.<pre><code>module A\nend\nclass B\n  include A\nend\nclass C < B\nend\nB.include?(A)   #=> true\nC.include?(A)   #=> true\nA.include?(A)   #=> false\n</code></pre>	http://ruby-doc.org/core/Module.html#method-i-include-3F
Module#included	A			instance methods							<pre><code>included(othermod)</code></pre>Callback invoked whenever the receiver is included in another module or class. This should be used in preference to Module.append_features if your code wants to perform some action when a module is included in another.<pre><code>module A\n  def A.included(mod)\n    puts "#{self} included in #{mod}"\n  end\nend\nmodule Enumerable\n  include A\nend\n # => prints "A included in Enumerable"\n</code></pre>	http://ruby-doc.org/core/Module.html#method-i-included
Module#included_modules	A			instance methods							<pre><code>included_modules → array</code></pre>Returns the list of modules included in mod.<pre><code>module Mixin\nend\n\nmodule Outer\n  include Mixin\nend\n\nMixin.included_modules   #=> []\nOuter.included_modules   #=> [Mixin]\n</code></pre>	http://ruby-doc.org/core/Module.html#method-i-included_modules
Module#inspect	A			instance methods								http://ruby-doc.org/core/Module.html#method-i-inspect
Module#instance_method	A			instance methods							<pre><code>instance_method(symbol)   → unbound_method</code></pre>Returns an UnboundMethod representing the given instance method in mod.<pre><code>class Interpreter\n  def do_a() print "there, "; end\n  def do_d() print "Hello ";  end\n  def do_e() print "!\n";     end\n  def do_v() print "Dave";    end\n  Dispatcher = {\n    "a" => instance_method(:do_a),\n    "d" => instance_method(:do_d),\n    "e" => instance_method(:do_e),\n    "v" => instance_method(:do_v)\n  }\n  def interpret(string)\n    string.each_char {|b| Dispatcher[b].bind(self).call }\n  end\nend\n\ninterpreter = Interpreter.new\ninterpreter.interpret('dave')\n</code></pre>produces:<pre><code>Hello there, Dave!\n</code></pre>	http://ruby-doc.org/core/Module.html#method-i-instance_method
Module#instance_methods	A			instance methods							<pre><code>instance_methods(include_super=true)   → array</code></pre>Returns an array containing the names of the public and protected instance methods in the receiver. For a module, these are the public and protected methods; for a class, they are the instance (not singleton) methods. If the optional parameter is false, the methods of any ancestors are not included.<pre><code>module A\n  def method1()  end\nend\nclass B\n  include A\n  def method2()  end\nend\nclass C < B\n  def method3()  end\nend\n\nA.instance_methods(false)                   #=> [:method1]\nB.instance_methods(false)                   #=> [:method2]\nB.instance_methods(true).include?(:method1) #=> true\nC.instance_methods(false)                   #=> [:method3]\nC.instance_methods.include?(:method2)       #=> true\n</code></pre>	http://ruby-doc.org/core/Module.html#method-i-instance_methods
Module#method_added	A			instance methods							<pre><code>method_added(method_name)</code></pre>Invoked as a callback whenever an instance method is added to the receiver.<pre><code>module Chatty\n  def self.method_added(method_name)\n    puts "Adding #{method_name.inspect}"\n  end\n  def self.some_class_method() end\n  def some_instance_method() end\nend\n</code></pre>produces:<pre><code>Adding :some_instance_method\n</code></pre>	http://ruby-doc.org/core/Module.html#method-i-method_added
Module#method_defined?	A			instance methods							<pre><code>method_defined?(symbol)    → true or false\nmethod_defined?(string)    → true or false</code></pre>Returns true if the named method is defined by mod (or its included modules and, if mod is a class, its ancestors). Public and protected methods are matched. String arguments are converted to symbols.<pre><code>module A\n  def method1()  end\n  def protected_method1()  end\n  protected :protected_method1\nend\nclass B\n  def method2()  end\n  def private_method2()  end\n  private :private_method2\nend\nclass C < B\n  include A\n  def method3()  end\nend\n\nA.method_defined? :method1              #=> true\nC.method_defined? "method1"             #=> true\nC.method_defined? "method2"             #=> true\nC.method_defined? "method3"             #=> true\nC.method_defined? "protected_method1"   #=> true\nC.method_defined? "method4"             #=> false\nC.method_defined? "private_method2"     #=> false\n</code></pre>	http://ruby-doc.org/core/Module.html#method-i-method_defined-3F
Module#method_removed	A			instance methods							<pre><code>method_removed(method_name)</code></pre>Invoked as a callback whenever an instance method is removed from the receiver.<pre><code>module Chatty\n  def self.method_removed(method_name)\n    puts "Removing #{method_name.inspect}"\n  end\n  def self.some_class_method() end\n  def some_instance_method() end\n  class << self\n    remove_method :some_class_method\n  end\n  remove_method :some_instance_method\nend\n</code></pre>produces:<pre><code>Removing :some_instance_method\n</code></pre>	http://ruby-doc.org/core/Module.html#method-i-method_removed
Module#method_undefined	A			instance methods							Not documented	http://ruby-doc.org/core/Module.html#method-i-method_undefined
Module#module_eval	A			instance methods							<pre><code>module_eval {|| block }                     → obj</code></pre>Evaluates the string or block in the context of mod, except that when a block is given, constant/class variable lookup is not affected. This can be used to add methods to a class. module_eval returns the result of evaluating its argument. The optional filename and lineno parameters set the text for error messages.<pre><code>class Thing\nend\na = %q{def hello() "Hello there!" end}\nThing.module_eval(a)\nputs Thing.new.hello()\nThing.module_eval("invalid code", "dummy", 123)\n</code></pre>produces:	http://ruby-doc.org/core/Module.html#method-i-module_eval
Module#module_exec	A			instance methods							<pre><code>module_exec(arg...) {|var...| block }       → obj</code></pre>Evaluates the given block in the context of the class/module. The method defined in the block will belong to the receiver. Any arguments passed to the method will be passed to the block. This can be used if the block needs to access instance variables.<pre><code>class Thing\nend\nThing.class_exec{\n  def hello() "Hello there!" end\n}\nputs Thing.new.hello()\n</code></pre>produces:<pre><code>Hello there!\n</code></pre>	http://ruby-doc.org/core/Module.html#method-i-module_exec
Module#module_function	A			instance methods							<pre><code>module_function(symbol, ...)    → self\nmodule_function(string, ...)    → self</code></pre>Creates module functions for the named methods. These functions may be called with the module as a receiver, and also become available as instance methods to classes that mix in the module. Module functions are copies of the original, and so may be changed independently. The instance-method versions are made private. If used with no arguments, subsequently defined methods become module functions. String arguments are converted to symbols.<pre><code>module Mod\n  def one\n    "This is one"\n  end\n  module_function :one\nend\nclass Cls\n  include Mod\n  def call_one\n    one\n  end\nend\nMod.one     #=> "This is one"\nc = Cls.new\nc.call_one  #=> "This is one"\nmodule Mod\n  def one\n    "This is the new one"\n  end\nend\nMod.one     #=> "This is one"\nc.call_one  #=> "This is the new one"\n</code></pre>	http://ruby-doc.org/core/Module.html#method-i-module_function
Module#name	A			instance methods							<pre><code>name    → string</code></pre>Returns the name of the module mod. Returns nil for anonymous modules.	http://ruby-doc.org/core/Module.html#method-i-name
Module#prepend	A			instance methods							<pre><code>prepend(module, ...)    → self</code></pre>Invokes Module.prepend_features on each parameter in reverse order.	http://ruby-doc.org/core/Module.html#method-i-prepend
Module#prepend_features	A			instance methods							<pre><code>prepend_features(mod)   → mod</code></pre>When this module is prepended in another, Ruby calls prepend_features in this module, passing it the receiving module in mod. Ruby’s default implementation is to overlay the constants, methods, and module variables of this module to mod if this module has not already been added to mod or one of its ancestors. See also Module#prepend.	http://ruby-doc.org/core/Module.html#method-i-prepend_features
Module#prepended	A			instance methods							<pre><code>prepended(othermod)</code></pre>The equivalent of included, but for prepended modules.<pre><code>module A\n  def self.prepended(mod)\n    puts "#{self} prepended to #{mod}"\n  end\nend\nmodule Enumerable\n  prepend A\nend\n # => prints "A prepended to Enumerable"\n</code></pre>	http://ruby-doc.org/core/Module.html#method-i-prepended
Module#private	A			instance methods							<pre><code>private                 → self\nprivate(symbol, ...)    → self\nprivate(string, ...)    → self</code></pre>With no arguments, sets the default visibility for subsequently defined methods to private. With arguments, sets the named methods to have private visibility. String arguments are converted to symbols.<pre><code>module Mod\n  def a()  end\n  def b()  end\n  private\n  def c()  end\n  private :a\nend\nMod.private_instance_methods   #=> [:a, :c]\n</code></pre>	http://ruby-doc.org/core/Module.html#method-i-private
Module#private_class_method	A			instance methods							<pre><code>private_class_method(symbol, ...)   → mod\nprivate_class_method(string, ...)   → mod</code></pre>Makes existing class methods private. Often used to hide the default constructor new.<br>String arguments are converted to symbols.<pre><code>class SimpleSingleton  # Not thread safe\n  private_class_method :new\n  def SimpleSingleton.create(*args, &block)\n    @me = new(*args, &block) if ! @me\n    @me\n  end\nend\n</code></pre>	http://ruby-doc.org/core/Module.html#method-i-private_class_method
Module#private_constant	A			instance methods							<pre><code>private_constant(symbol, ...)    => mod</code></pre>Makes a list of existing constants private.	http://ruby-doc.org/core/Module.html#method-i-private_constant
Module#private_instance_methods	A			instance methods							<pre><code>private_instance_methods(include_super=true)    → array</code></pre>Returns a list of the private instance methods defined in mod. If the optional parameter is false, the methods of any ancestors are not included.<pre><code>module Mod\n  def method1()  end\n  private :method1\n  def method2()  end\nend\nMod.instance_methods           #=> [:method2]\nMod.private_instance_methods   #=> [:method1]\n</code></pre>	http://ruby-doc.org/core/Module.html#method-i-private_instance_methods
Module#private_method_defined?	A			instance methods							<pre><code>private_method_defined?(symbol)    → true or false\nprivate_method_defined?(string)    → true or false</code></pre>Returns true if the named private method is defined by _ mod_ (or its included modules and, if mod is a class, its ancestors). String arguments are converted to symbols.<pre><code>module A\n  def method1()  end\nend\nclass B\n  private\n  def method2()  end\nend\nclass C < B\n  include A\n  def method3()  end\nend\n\nA.method_defined? :method1            #=> true\nC.private_method_defined? "method1"   #=> false\nC.private_method_defined? "method2"   #=> true\nC.method_defined? "method2"           #=> false\n</code></pre>	http://ruby-doc.org/core/Module.html#method-i-private_method_defined-3F
Module#protected	A			instance methods							<pre><code>protected                → self\nprotected(symbol, ...)   → self\nprotected(string, ...)   → self</code></pre>With no arguments, sets the default visibility for subsequently defined methods to protected. With arguments, sets the named methods to have protected visibility. String arguments are converted to symbols.	http://ruby-doc.org/core/Module.html#method-i-protected
Module#protected_instance_methods	A			instance methods							<pre><code>protected_instance_methods(include_super=true)   → array</code></pre>Returns a list of the protected instance methods defined in mod. If the optional parameter is false, the methods of any ancestors are not included.	http://ruby-doc.org/core/Module.html#method-i-protected_instance_methods
Module#protected_method_defined?	A			instance methods							<pre><code>protected_method_defined?(symbol)   → true or false\nprotected_method_defined?(string)   → true or false</code></pre>Returns true if the named protected method is defined by mod (or its included modules and, if mod is a class, its ancestors). String arguments are converted to symbols.<pre><code>module A\n  def method1()  end\nend\nclass B\n  protected\n  def method2()  end\nend\nclass C < B\n  include A\n  def method3()  end\nend\n\nA.method_defined? :method1              #=> true\nC.protected_method_defined? "method1"   #=> false\nC.protected_method_defined? "method2"   #=> true\nC.method_defined? "method2"             #=> true\n</code></pre>	http://ruby-doc.org/core/Module.html#method-i-protected_method_defined-3F
Module#public	A			instance methods							<pre><code>public                 → self\npublic(symbol, ...)    → self\npublic(string, ...)    → self</code></pre>With no arguments, sets the default visibility for subsequently defined methods to public. With arguments, sets the named methods to have public visibility. String arguments are converted to symbols.	http://ruby-doc.org/core/Module.html#method-i-public
Module#public_class_method	A			instance methods							<pre><code>public_class_method(symbol, ...)    → mod\npublic_class_method(string, ...)    → mod</code></pre>Makes a list of existing class methods public.<br>String arguments are converted to symbols.	http://ruby-doc.org/core/Module.html#method-i-public_class_method
Module#public_constant	A			instance methods							<pre><code>public_constant(symbol, ...)    => mod</code></pre>Makes a list of existing constants public.	http://ruby-doc.org/core/Module.html#method-i-public_constant
Module#public_instance_method	A			instance methods							<pre><code>public_instance_method(symbol)   → unbound_method</code></pre>Similar to instance_method, searches public method only.	http://ruby-doc.org/core/Module.html#method-i-public_instance_method
Module#public_instance_methods	A			instance methods							<pre><code>public_instance_methods(include_super=true)   → array</code></pre>Returns a list of the public instance methods defined in mod. If the optional parameter is false, the methods of any ancestors are not included.	http://ruby-doc.org/core/Module.html#method-i-public_instance_methods
Module#public_method_defined?	A			instance methods							<pre><code>public_method_defined?(symbol)   → true or false\npublic_method_defined?(string)   → true or false</code></pre>Returns true if the named public method is defined by mod (or its included modules and, if mod is a class, its ancestors). String arguments are converted to symbols.<pre><code>module A\n  def method1()  end\nend\nclass B\n  protected\n  def method2()  end\nend\nclass C < B\n  include A\n  def method3()  end\nend\n\nA.method_defined? :method1           #=> true\nC.public_method_defined? "method1"   #=> true\nC.public_method_defined? "method2"   #=> false\nC.method_defined? "method2"          #=> true\n</code></pre>	http://ruby-doc.org/core/Module.html#method-i-public_method_defined-3F
Module#refine	A			instance methods							<pre><code>refine(klass) { block }   → module</code></pre>Refine klass in the receiver.<br>Returns an overlaid module.	http://ruby-doc.org/core/Module.html#method-i-refine
Module#remove_class_variable	A			instance methods							<pre><code>remove_class_variable(sym)    → obj</code></pre>Removes the definition of the sym, returning that constant's value.<pre><code>class Dummy\n  @@var = 99\n  puts @@var\n  remove_class_variable(:@@var)\n  p(defined? @@var)\nend\n</code></pre>produces:<pre><code>99\nnil\n</code></pre>	http://ruby-doc.org/core/Module.html#method-i-remove_class_variable
Module#remove_const	A			instance methods							<pre><code>remove_const(sym)   → obj</code></pre>Removes the definition of the given constant, returning that constant's previous value. If that constant referred to a module, this will not change that module's name and can lead to confusion.	http://ruby-doc.org/core/Module.html#method-i-remove_const
Module#remove_method	A			instance methods							<pre><code>remove_method(symbol)   → self\nremove_method(string)   → self</code></pre>Removes the method identified by symbol from the current class. For an example, see Module.undef_method. String arguments are converted to symbols.	http://ruby-doc.org/core/Module.html#method-i-remove_method
Module#singleton_class?	A			instance methods							<pre><code>singleton_class?    → true or false</code></pre>Returns true if mod is a singleton class or false if it is an ordinary class or module.<pre><code>class C\nend\nC.singleton_class?                  #=> false\nC.singleton_class.singleton_class?  #=> true\n</code></pre>	http://ruby-doc.org/core/Module.html#method-i-singleton_class-3F
Module#to_s	A			instance methods							<pre><code>to_s   → string</code></pre>Returns a string representing this module or class. For basic classes and modules, this is the name. For singletons, we show information on the thing we’re attached to as well.	http://ruby-doc.org/core/Module.html#method-i-to_s
Module#undef_method	A			instance methods							<pre><code>undef_method(symbol)    → self\nundef_method(string)    → self</code></pre>Prevents the current class from responding to calls to the named method. Contrast this with remove_method, which deletes the method from the particular class; Ruby will still search superclasses and mixed-in modules for a possible receiver. String arguments are converted to symbols.<pre><code>class Parent\n  def hello\n    puts "In parent"\n  end\nend\nclass Child < Parent\n  def hello\n    puts "In child"\n  end\nend\n\nc = Child.new\nc.hello\n\nclass Child\n  remove_method :hello  # remove from child, still in parent\nend\nc.hello\n\nclass Child\n  undef_method :hello   # prevent any calls to 'hello'\nend\nc.hello\n</code></pre>produces:	http://ruby-doc.org/core/Module.html#method-i-undef_method
Module#using	A			instance methods							<pre><code>using(module)    → self</code></pre>Import class refinements from module into the current class or module definition.	http://ruby-doc.org/core/Module.html#method-i-using
Class	A			classes							Classes in Ruby are first-class objects---each is an instance of class Class.<br>Typically, you create a new class by using:<pre><code>class Name\n # some code describing the class behavior\nend\n</code></pre>When a new class is created, an object of type Class is initialized and assigned to a global constant (Name in this case).<br>When Name.new is called to create a new object, the new method in Class is run by default. This can be demonstrated by overriding new in Class:<pre><code>class Class\n  alias old_new new\n  def new(*args)\n    print "Creating a new ", self.name, "\n"\n    old_new(*args)\n  end\nend\n\nclass Name\nend\n\nn = Name.new\n</code></pre>produces:<pre><code>Creating a new Name\n</code></pre>Classes, modules, and objects are interrelated. In the diagram that follows, the vertical arrows represent inheritance, and the parentheses metaclasses. All metaclasses are instances of the class `Class'.	http://ruby-doc.org/core/Class.html
Class::new	A			class methods							<pre><code>new(super_class=Object)               → a_class\nnew(super_class=Object) { |mod| ... } → a_class</code></pre>Creates a new anonymous (unnamed) class with the given superclass (or Object if no parameter is given). You can give a class a name by assigning the class object to a constant.<br>If a block is given, it is passed the class object, and the block is evaluated in the context of this class using class_eval.<pre><code>fred = Class.new do\n  def meth1\n    "hello"\n  end\n  def meth2\n    "bye"\n  end\nend\n\na = fred.new     #=> #<#<Class:0x100381890>:0x100376b98>\na.meth1          #=> "hello"\na.meth2          #=> "bye"\n</code></pre>Assign the class to a constant (name starting uppercase) if you want to treat it like a regular class.	http://ruby-doc.org/core/Class.html#method-c-new
Class#allocate	A			instance methods							<pre><code>allocate()   →   obj</code></pre>Allocates space for a new object of class’s class and does not call initialize on the new instance. The returned object must be an instance of class.<pre><code>klass = Class.new do\n  def initialize(*args)\n    @initialized = true\n  end\n\n  def initialized?\n    @initialized || false\n  end\nend\n\nklass.allocate.initialized? #=> false\n</code></pre>	http://ruby-doc.org/core/Class.html#method-i-allocate
Class#inherited	A			instance methods							<pre><code>inherited(subclass)</code></pre>Callback invoked whenever a subclass of the current class is created.<br>Example:<pre><code>class Foo\n  def self.inherited(subclass)\n    puts "New subclass: #{subclass}"\n  end\nend\n\nclass Bar < Foo\nend\n\nclass Baz < Bar\nend\n</code></pre>produces:<pre><code>New subclass: Bar\nNew subclass: Baz\n</code></pre>	http://ruby-doc.org/core/Class.html#method-i-inherited
Class#new	A			instance methods							<pre><code>new(args, ...)    →  obj</code></pre>Calls allocate to create a new object of class’s class, then invokes that object’s initialize method, passing it args. This is the method that ends up getting called whenever an object is constructed using .new.	http://ruby-doc.org/core/Class.html#method-i-new
Class#superclass	A			instance methods							<pre><code>superclass → a_super_class or nil</code></pre>Returns the superclass of class, or nil.<pre><code>File.superclass          #=> IO\nIO.superclass            #=> Object\nObject.superclass        #=> BasicObject\nclass Foo; end\nclass Bar < Foo; end\nBar.superclass           #=> Foo\n</code></pre>Returns nil when the given class does not have a parent class:<pre><code>BasicObject.superclass   #=> nil\n</code></pre>	http://ruby-doc.org/core/Class.html#method-i-superclass
Complex	A			classes							A complex number can be represented as a paired real number with imaginary unit; a+bi. Where a is real part, b is imaginary part and i is imaginary unit. Real a equals complex a+0i mathematically.<br>Complex object can be created as literal, and also by using Kernel#Complex, ::rect, ::polar or #to_c method.<br>You can also create complex object from floating-point numbers or strings.<pre><code>Complex(0.3)         #=> (0.3+0i)\nComplex('0.3-0.5i')  #=> (0.3-0.5i)\nComplex('2/3+3/4i')  #=> ((2/3)+(3/4)*i)\nComplex('1@2')       #=> (-0.4161468365471424+0.9092974268256817i)\n\n0.3.to_c             #=> (0.3+0i)\n'0.3-0.5i'.to_c      #=> (0.3-0.5i)\n'2/3+3/4i'.to_c      #=> ((2/3)+(3/4)*i)\n'1@2'.to_c           #=> (-0.4161468365471424+0.9092974268256817i)\n</code></pre>A complex object is either an exact or an inexact number.<pre><code>Complex(1, 1) / 2    #=> ((1/2)+(1/2)*i)\nComplex(1, 1) / 2.0  #=> (0.5+0.5i)\n</code></pre>	http://ruby-doc.org/core/Complex.html
Complex::polar	A			class methods							<pre><code>polar(abs[, arg])  →  complex</code></pre>Returns a complex object which denotes the given polar form.<pre><code>Complex.polar(3, 0)            #=> (3.0+0.0i)\nComplex.polar(3, Math::PI/2)   #=> (1.836909530733566e-16+3.0i)\nComplex.polar(3, Math::PI)     #=> (-3.0+3.673819061467132e-16i)\nComplex.polar(3, -Math::PI/2)  #=> (1.836909530733566e-16-3.0i)\n</code></pre>	http://ruby-doc.org/core/Complex.html#method-c-polar
Complex::rect	A			class methods							<pre><code>rect(real[, imag])         →  complex\nrectangular(real[, imag])  →  complex</code></pre>Returns a complex object which denotes the given rectangular form.<pre><code>Complex.rectangular(1, 2)  #=> (1+2i)\n</code></pre>	http://ruby-doc.org/core/Complex.html#method-c-rect
Complex::rectangular	A			class methods							<pre><code>rectangular(real[, imag])  →  complex</code></pre>Returns a complex object which denotes the given rectangular form.<pre><code>Complex.rectangular(1, 2)  #=> (1+2i)\n</code></pre>	http://ruby-doc.org/core/Complex.html#method-c-rectangular
Complex#*	A			instance methods							<pre><code>cmp * numeric  →  complex</code></pre>Performs multiplication.<pre><code>Complex(2, 3)  * Complex(2, 3)   #=> (-5+12i)\nComplex(900)   * Complex(1)      #=> (900+0i)\nComplex(-2, 9) * Complex(-9, 2)  #=> (0-85i)\nComplex(9, 8)  * 4               #=> (36+32i)\nComplex(20, 9) * 9.8             #=> (196.0+88.2i)\n</code></pre>	http://ruby-doc.org/core/Complex.html#method-i-2A
Complex#**	A			instance methods							<pre><code>cmp ** numeric  →  complex</code></pre>Performs exponentiation.<pre><code>Complex('i') ** 2              #=> (-1+0i)\nComplex(-8) ** Rational(1, 3)  #=> (1.0000000000000002+1.7320508075688772i)\n</code></pre>	http://ruby-doc.org/core/Complex.html#method-i-2A-2A
Complex#+	A			instance methods							<pre><code>cmp + numeric  →  complex</code></pre>Performs addition.<pre><code>Complex(2, 3)  + Complex(2, 3)   #=> (4+6i)\nComplex(900)   + Complex(1)      #=> (901+0i)\nComplex(-2, 9) + Complex(-9, 2)  #=> (-11+11i)\nComplex(9, 8)  + 4               #=> (13+8i)\nComplex(20, 9) + 9.8             #=> (29.8+9i)\n</code></pre>	http://ruby-doc.org/core/Complex.html#method-i-2B
Complex#-	A			instance methods							<pre><code>cmp - numeric  →  complex</code></pre>Performs subtraction.<pre><code>Complex(2, 3)  - Complex(2, 3)   #=> (0+0i)\nComplex(900)   - Complex(1)      #=> (899+0i)\nComplex(-2, 9) - Complex(-9, 2)  #=> (7+7i)\nComplex(9, 8)  - 4               #=> (5+8i)\nComplex(20, 9) - 9.8             #=> (10.2+9i)\n</code></pre>	http://ruby-doc.org/core/Complex.html#method-i-2D
Complex#-@	A			instance methods							<pre><code>-cmp  →  complex</code></pre>Returns negation of the value.<pre><code>-Complex(1, 2)  #=> (-1-2i)\n</code></pre>	http://ruby-doc.org/core/Complex.html#method-i-2D-40
Complex#/	A			instance methods							<pre><code>cmp / numeric     →  complex\nquo(numeric)  →  complex</code></pre>Performs division.<pre><code>Complex(2, 3)  / Complex(2, 3)   #=> ((1/1)+(0/1)*i)\nComplex(900)   / Complex(1)      #=> ((900/1)+(0/1)*i)\nComplex(-2, 9) / Complex(-9, 2)  #=> ((36/85)-(77/85)*i)\nComplex(9, 8)  / 4               #=> ((9/4)+(2/1)*i)\nComplex(20, 9) / 9.8             #=> (2.0408163265306123+0.9183673469387754i)\n</code></pre>	http://ruby-doc.org/core/Complex.html#method-i-2F
Complex#==	A			instance methods							<pre><code>cmp == object  →  true or false</code></pre>Returns true if cmp equals object numerically.<pre><code>Complex(2, 3)  == Complex(2, 3)   #=> true\nComplex(5)     == 5               #=> true\nComplex(0)     == 0.0             #=> true\nComplex('1/3') == 0.33            #=> false\nComplex('1/2') == '1/2'           #=> false\n</code></pre>	http://ruby-doc.org/core/Complex.html#method-i-3D-3D
Complex#abs	A			instance methods							<pre><code>abs        →  real</code></pre>Returns the absolute part of its polar form.<pre><code>Complex(-1).abs         #=> 1\nComplex(3.0, -4.0).abs  #=> 5.0\n</code></pre>	http://ruby-doc.org/core/Complex.html#method-i-abs
Complex#abs2	A			instance methods							<pre><code>abs2  →  real</code></pre>Returns square of the absolute value.<pre><code>Complex(-1).abs2         #=> 1\nComplex(3.0, -4.0).abs2  #=> 25.0\n</code></pre>	http://ruby-doc.org/core/Complex.html#method-i-abs2
Complex#angle	A			instance methods							<pre><code>angle  →  float</code></pre>Returns the angle part of its polar form.<pre><code>Complex.polar(3, Math::PI/2).arg  #=> 1.5707963267948966\n</code></pre>	http://ruby-doc.org/core/Complex.html#method-i-angle
Complex#arg	A			instance methods							<pre><code>arg    →  float</code></pre>Returns the angle part of its polar form.<pre><code>Complex.polar(3, Math::PI/2).arg  #=> 1.5707963267948966\n</code></pre>	http://ruby-doc.org/core/Complex.html#method-i-arg
Complex#conj	A			instance methods							<pre><code>conj       →  complex\nconjugate  →  complex</code></pre>Returns the complex conjugate.<pre><code>Complex(1, 2).conjugate  #=> (1-2i)\n</code></pre>	http://ruby-doc.org/core/Complex.html#method-i-conj
Complex#conjugate	A			instance methods							<pre><code>conjugate  →  complex</code></pre>Returns the complex conjugate.<pre><code>Complex(1, 2).conjugate  #=> (1-2i)\n</code></pre>	http://ruby-doc.org/core/Complex.html#method-i-conjugate
Complex#denominator	A			instance methods							<pre><code>denominator  →  integer</code></pre>Returns the denominator (lcm of both denominator - real and imag).<br>See numerator.	http://ruby-doc.org/core/Complex.html#method-i-denominator
Complex#fdiv	A			instance methods							<pre><code>fdiv(numeric)  →  complex</code></pre>Performs division as each part is a float, never returns a float.<pre><code>Complex(11, 22).fdiv(3)  #=> (3.6666666666666665+7.333333333333333i)\n</code></pre>	http://ruby-doc.org/core/Complex.html#method-i-fdiv
Complex#imag	A			instance methods							<pre><code>imag       →  real\nimaginary  →  real</code></pre>Returns the imaginary part.<pre><code>Complex(7).imaginary      #=> 0\nComplex(9, -4).imaginary  #=> -4\n</code></pre>	http://ruby-doc.org/core/Complex.html#method-i-imag
Complex#imaginary	A			instance methods							<pre><code>imaginary  →  real</code></pre>Returns the imaginary part.<pre><code>Complex(7).imaginary      #=> 0\nComplex(9, -4).imaginary  #=> -4\n</code></pre>	http://ruby-doc.org/core/Complex.html#method-i-imaginary
Complex#inspect	A			instance methods							<pre><code>inspect  →  string</code></pre>Returns the value as a string for inspection.<pre><code>Complex(2).inspect                       #=> "(2+0i)"\nComplex('-8/6').inspect                  #=> "((-4/3)+0i)"\nComplex('1/2i').inspect                  #=> "(0+(1/2)*i)"\nComplex(0, Float::INFINITY).inspect      #=> "(0+Infinity*i)"\nComplex(Float::NAN, Float::NAN).inspect  #=> "(NaN+NaN*i)"\n</code></pre>	http://ruby-doc.org/core/Complex.html#method-i-inspect
Complex#magnitude	A			instance methods							<pre><code>magnitude  →  real</code></pre>Returns the absolute part of its polar form.<pre><code>Complex(-1).abs         #=> 1\nComplex(3.0, -4.0).abs  #=> 5.0\n</code></pre>	http://ruby-doc.org/core/Complex.html#method-i-magnitude
Complex#numerator	A			instance methods							<pre><code>numerator  →  numeric</code></pre>Returns the numerator.<br>See denominator.	http://ruby-doc.org/core/Complex.html#method-i-numerator
Complex#phase	A			instance methods							<pre><code>phase  →  float</code></pre>Returns the angle part of its polar form.<pre><code>Complex.polar(3, Math::PI/2).arg  #=> 1.5707963267948966\n</code></pre>	http://ruby-doc.org/core/Complex.html#method-i-phase
Complex#polar	A			instance methods							<pre><code>polar  →  array</code></pre>Returns an array; [cmp.abs, cmp.arg].<pre><code>Complex(1, 2).polar  #=> [2.23606797749979, 1.1071487177940904]\n</code></pre>	http://ruby-doc.org/core/Complex.html#method-i-polar
Complex#quo	A			instance methods							<pre><code>cmp / numeric     →  complex\nquo(numeric)  →  complex</code></pre>Performs division.<pre><code>Complex(2, 3)  / Complex(2, 3)   #=> ((1/1)+(0/1)*i)\nComplex(900)   / Complex(1)      #=> ((900/1)+(0/1)*i)\nComplex(-2, 9) / Complex(-9, 2)  #=> ((36/85)-(77/85)*i)\nComplex(9, 8)  / 4               #=> ((9/4)+(2/1)*i)\nComplex(20, 9) / 9.8             #=> (2.0408163265306123+0.9183673469387754i)\n</code></pre>	http://ruby-doc.org/core/Complex.html#method-i-quo
Complex#rationalize	A			instance methods							<pre><code>rationalize([eps])  →  rational</code></pre>Returns the value as a rational if possible (the imaginary part should be exactly zero).<pre><code>Complex(1.0/3, 0).rationalize  #=> (1/3)\nComplex(1, 0.0).rationalize    # RangeError\nComplex(1, 2).rationalize      # RangeError\n</code></pre>See to_r.	http://ruby-doc.org/core/Complex.html#method-i-rationalize
Complex#real	A			instance methods							<pre><code>real  →  real</code></pre>Returns the real part.<pre><code>Complex(7).real      #=> 7\nComplex(9, -4).real  #=> 9\n</code></pre>	http://ruby-doc.org/core/Complex.html#method-i-real
Complex#real?	A			instance methods							<pre><code>real?  →  false</code></pre>Returns false.	http://ruby-doc.org/core/Complex.html#method-i-real-3F
Complex#rect	A			instance methods							<pre><code>rect         →  array\nrectangular  →  array</code></pre>Returns an array; [cmp.real, cmp.imag].<pre><code>Complex(1, 2).rectangular  #=> [1, 2]\n</code></pre>	http://ruby-doc.org/core/Complex.html#method-i-rect
Complex#rectangular	A			instance methods							<pre><code>rect         →  array\nrectangular  →  array</code></pre>Returns an array; [cmp.real, cmp.imag].<pre><code>Complex(1, 2).rectangular  #=> [1, 2]\n</code></pre>	http://ruby-doc.org/core/Complex.html#method-i-rectangular
Complex#to_c	A			instance methods							<pre><code>to_c  →  self</code></pre>Returns self.<pre><code>Complex(2).to_c      #=> (2+0i)\nComplex(-8, 6).to_c  #=> (-8+6i)\n</code></pre>	http://ruby-doc.org/core/Complex.html#method-i-to_c
Complex#to_f	A			instance methods							<pre><code>to_f  →  float</code></pre>Returns the value as a float if possible (the imaginary part should be exactly zero).<pre><code>Complex(1, 0).to_f    #=> 1.0\nComplex(1, 0.0).to_f  # RangeError\nComplex(1, 2).to_f    # RangeError\n</code></pre>	http://ruby-doc.org/core/Complex.html#method-i-to_f
Complex#to_i	A			instance methods							<pre><code>to_i  →  integer</code></pre>Returns the value as an integer if possible (the imaginary part should be exactly zero).<pre><code>Complex(1, 0).to_i    #=> 1\nComplex(1, 0.0).to_i  # RangeError\nComplex(1, 2).to_i    # RangeError\n</code></pre>	http://ruby-doc.org/core/Complex.html#method-i-to_i
Complex#to_r	A			instance methods							<pre><code>to_r  →  rational</code></pre>Returns the value as a rational if possible (the imaginary part should be exactly zero).<pre><code>Complex(1, 0).to_r    #=> (1/1)\nComplex(1, 0.0).to_r  # RangeError\nComplex(1, 2).to_r    # RangeError\n</code></pre>See rationalize.	http://ruby-doc.org/core/Complex.html#method-i-to_r
Complex#to_s	A			instance methods							<pre><code>to_s  →  string</code></pre>Returns the value as a string.<pre><code>Complex(2).to_s                       #=> "2+0i"\nComplex('-8/6').to_s                  #=> "-4/3+0i"\nComplex('1/2i').to_s                  #=> "0+1/2i"\nComplex(0, Float::INFINITY).to_s      #=> "0+Infinity*i"\nComplex(Float::NAN, Float::NAN).to_s  #=> "NaN+NaN*i"\n</code></pre>	http://ruby-doc.org/core/Complex.html#method-i-to_s
Complex#~	A			instance methods							<pre><code>conj       →  complex\nconjugate  →  complex</code></pre>Returns the complex conjugate.<pre><code>Complex(1, 2).conjugate  #=> (1-2i)\n</code></pre>	http://ruby-doc.org/core/Complex.html#method-i-7E
NilClass	A			classes							The class of the singleton object nil.	http://ruby-doc.org/core/NilClass.html
NilClass#&	A			instance methods							<pre><code>false & obj   → false\nnil & obj     → false</code></pre>And—Returns false. obj is always evaluated as it is the argument to a method call—there is no short-circuit evaluation in this case.	http://ruby-doc.org/core/NilClass.html#method-i-26
NilClass#===	A			instance methods							<pre><code>obj === other   → true or false</code></pre>Case Equality – For class Object, effectively the same as calling #==, but typically overridden by descendants to provide meaningful semantics in case statements.	http://ruby-doc.org/core/NilClass.html#method-i-3D-3D-3D
NilClass#^	A			instance methods							<pre><code>false ^ obj    → true or false\nnil   ^ obj    → true or false</code></pre>Exclusive Or—If obj is nil or false, returns false; otherwise, returns true.	http://ruby-doc.org/core/NilClass.html#method-i-5E
NilClass#inspect	A			instance methods							<pre><code>inspect  → "nil"</code></pre>Always returns the string “nil”.	http://ruby-doc.org/core/NilClass.html#method-i-inspect
NilClass#nil?	A			instance methods							<pre><code>nil?               → true</code></pre>Only the object nil responds true to nil?.	http://ruby-doc.org/core/NilClass.html#method-i-nil-3F
NilClass#rationalize	A			instance methods							<pre><code>rationalize([eps])  →  (0/1)</code></pre>Returns zero as a rational. The optional argument eps is always ignored.	http://ruby-doc.org/core/NilClass.html#method-i-rationalize
NilClass#to_a	A			instance methods							<pre><code>to_a    → []</code></pre>Always returns an empty array.<pre><code>nil.to_a   #=> []\n</code></pre>	http://ruby-doc.org/core/NilClass.html#method-i-to_a
NilClass#to_c	A			instance methods							<pre><code>to_c  →  (0+0i)</code></pre>Returns zero as a complex.	http://ruby-doc.org/core/NilClass.html#method-i-to_c
NilClass#to_f	A			instance methods							<pre><code>to_f    → 0.0</code></pre>Always returns zero.<pre><code>nil.to_f   #=> 0.0\n</code></pre>	http://ruby-doc.org/core/NilClass.html#method-i-to_f
NilClass#to_h	A			instance methods							<pre><code>to_h    → {}</code></pre>Always returns an empty hash.<pre><code>nil.to_h   #=> {}\n</code></pre>	http://ruby-doc.org/core/NilClass.html#method-i-to_h
NilClass#to_i	A			instance methods							<pre><code>to_i → 0</code></pre>Always returns zero.<pre><code>nil.to_i   #=> 0\n</code></pre>	http://ruby-doc.org/core/NilClass.html#method-i-to_i
NilClass#to_r	A			instance methods							<pre><code>to_r  →  (0/1)</code></pre>Returns zero as a rational.	http://ruby-doc.org/core/NilClass.html#method-i-to_r
NilClass#to_s	A			instance methods							<pre><code>to_s    → ""</code></pre>Always returns the empty string.	http://ruby-doc.org/core/NilClass.html#method-i-to_s
NilClass#|	A			instance methods							<pre><code>false | obj   →   true or false\nnil   | obj   →   true or false</code></pre>Or—Returns false if obj is nil or false; true otherwise.	http://ruby-doc.org/core/NilClass.html#method-i-7C
Numeric	A			classes							Numeric is the class from which all higher-level numeric classes should inherit.<br>Numeric allows instantiation of heap-allocated objects. Other core numeric classes such as Integer are implemented as immediates, which means that each Integer is a single immutable object which is always passed by value.<pre><code>a = 1\nputs 1.object_id == a.object_id   #=> true\n</code></pre>There can only ever be one instance of the integer 1, for example. Ruby ensures this by preventing instantiation and duplication.<pre><code>Integer.new(1)   #=> NoMethodError: undefined method `new' for Integer:Class\n1.dup            #=> TypeError: can't dup Fixnum\n</code></pre>For this reason, Numeric should be used when defining other numeric classes.<br>Classes which inherit from Numeric must implement coerce, which returns a two-member Array containing an object that has been coerced into an instance of the new class and self (see coerce).<br>Inheriting classes should also implement arithmetic operator methods (+, -, * and /) and the <=> operator (see Comparable). These methods may rely on coerce to ensure interoperability with instances of other numeric classes.<pre><code>class Tally < Numeric\n  def initialize(string)\n    @string = string\n  end\n\n  def to_s\n    @string\n  end\n\n  def to_i\n    @string.size\n  end\n\n  def coerce(other)\n    [self.class.new('|' * other.to_i), self]\n  end\n\n  def <=>(other)\n    to_i <=> other.to_i\n  end\n\n  def +(other)\n    self.class.new('|' * (to_i + other.to_i))\n  end\n\n  def -(other)\n    self.class.new('|' * (to_i - other.to_i))\n  end\n\n  def *(other)\n    self.class.new('|' * (to_i * other.to_i))\n  end\n\n  def /(other)\n    self.class.new('|' * (to_i / other.to_i))\n  end\nend\n\ntally = Tally.new('||')\nputs tally * 2            #=> "||||"\nputs tally > 1            #=> true\n</code></pre>	http://ruby-doc.org/core/Numeric.html
Numeric#%	A			instance methods							<pre><code>modulo(numeric)  →  real</code></pre>Equivalent to num.divmod(numeric)[1].<br>See #divmod.	http://ruby-doc.org/core/Numeric.html#method-i-25
Numeric#+@	A			instance methods							<pre><code>+num  →  num</code></pre>Unary Plus—Returns the receiver’s value.	http://ruby-doc.org/core/Numeric.html#method-i-2B-40
Numeric#-@	A			instance methods							<pre><code>-num  →  numeric</code></pre>Unary Minus—Returns the receiver’s value, negated.	http://ruby-doc.org/core/Numeric.html#method-i-2D-40
Numeric#<=>	A			instance methods							<pre><code>number <=> other  →  0 or nil</code></pre>Returns zero if number equals other, otherwise nil is returned if the two values are incomparable.	http://ruby-doc.org/core/Numeric.html#method-i-3C-3D-3E
Numeric#abs	A			instance methods							<pre><code>abs        →  numeric</code></pre>Returns the absolute value of num.<pre><code>12.abs         #=> 12\n(-34.56).abs   #=> 34.56\n-34.56.abs     #=> 34.56\n</code></pre>#magnitude is an alias of #abs.	http://ruby-doc.org/core/Numeric.html#method-i-abs
Numeric#abs2	A			instance methods							<pre><code>abs2  →  real</code></pre>Returns square of self.	http://ruby-doc.org/core/Numeric.html#method-i-abs2
Numeric#angle	A			instance methods							<pre><code>angle  →  0 or float</code></pre>Returns 0 if the value is positive, pi otherwise.	http://ruby-doc.org/core/Numeric.html#method-i-angle
Numeric#arg	A			instance methods							<pre><code>arg    →  0 or float</code></pre>Returns 0 if the value is positive, pi otherwise.	http://ruby-doc.org/core/Numeric.html#method-i-arg
Numeric#ceil	A			instance methods							<pre><code>ceil  →  integer</code></pre>Returns the smallest possible Integer that is greater than or equal to num.<br>Numeric achieves this by converting itself to a Float then invoking Float#ceil.<pre><code>1.ceil        #=> 1\n1.2.ceil      #=> 2\n(-1.2).ceil   #=> -1\n(-1.0).ceil   #=> -1\n</code></pre>	http://ruby-doc.org/core/Numeric.html#method-i-ceil
Numeric#coerce	A			instance methods							<pre><code>coerce(numeric)  →  array</code></pre>If a numeric is the same type as num, returns an array containing numeric and num. Otherwise, returns an array with both a numeric and num represented as Float objects.<br>This coercion mechanism is used by Ruby to handle mixed-type numeric operations: it is intended to find a compatible common type between the two operands of the operator.<pre><code>1.coerce(2.5)   #=> [2.5, 1.0]\n1.2.coerce(3)   #=> [3.0, 1.2]\n1.coerce(2)     #=> [2, 1]\n</code></pre>	http://ruby-doc.org/core/Numeric.html#method-i-coerce
Numeric#conj	A			instance methods							<pre><code>conj       →  self\nconjugate  →  self</code></pre>Returns self.	http://ruby-doc.org/core/Numeric.html#method-i-conj
Numeric#conjugate	A			instance methods							<pre><code>conjugate  →  self</code></pre>Returns self.	http://ruby-doc.org/core/Numeric.html#method-i-conjugate
Numeric#denominator	A			instance methods							<pre><code>denominator  →  integer</code></pre>Returns the denominator (always positive).	http://ruby-doc.org/core/Numeric.html#method-i-denominator
Numeric#div	A			instance methods							<pre><code>div(numeric)  →  integer</code></pre>Uses / to perform division, then converts the result to an integer. numeric does not define the / operator; this is left to subclasses.<br>Equivalent to num.divmod(numeric)[0].<br>See #divmod.	http://ruby-doc.org/core/Numeric.html#method-i-div
Numeric#divmod	A			instance methods							<pre><code>divmod(numeric)  →  array</code></pre>Returns an array containing the quotient and modulus obtained by dividing num by numeric.<br>If q, r = * x.divmod(y), then<pre><code>q = floor(x/y)\nx = q*y+r\n</code></pre>The quotient is rounded toward -infinity, as shown in the following table:<br>Examples<pre><code>11.divmod(3)         #=> [3, 2]\n11.divmod(-3)        #=> [-4, -1]\n11.divmod(3.5)       #=> [3, 0.5]\n(-11).divmod(3.5)    #=> [-4, 3.0]\n(11.5).divmod(3.5)   #=> [3, 1.0]\n</code></pre>	http://ruby-doc.org/core/Numeric.html#method-i-divmod
Numeric#eql?	A			instance methods							<pre><code>eql?(numeric)  →  true or false</code></pre>Returns true if num and numeric are the same type and have equal values.<pre><code>1 == 1.0          #=> true\n1.eql?(1.0)       #=> false\n(1.0).eql?(1.0)   #=> true\n</code></pre>	http://ruby-doc.org/core/Numeric.html#method-i-eql-3F
Numeric#fdiv	A			instance methods							<pre><code>fdiv(numeric)  →  float</code></pre>Returns float division.	http://ruby-doc.org/core/Numeric.html#method-i-fdiv
Numeric#floor	A			instance methods							<pre><code>floor  →  integer</code></pre>Returns the largest integer less than or equal to num.<br>Numeric implements this by converting an Integer to a Float and invoking Float#floor.<pre><code>1.floor      #=> 1\n(-1).floor   #=> -1\n</code></pre>	http://ruby-doc.org/core/Numeric.html#method-i-floor
Numeric#i	A			instance methods							<pre><code>i  →  Complex(0,num)</code></pre>Returns the corresponding imaginary number. Not available for complex numbers.	http://ruby-doc.org/core/Numeric.html#method-i-i
Numeric#imag	A			instance methods							<pre><code>imag       →  0\nimaginary  →  0</code></pre>Returns zero.	http://ruby-doc.org/core/Numeric.html#method-i-imag
Numeric#imaginary	A			instance methods							<pre><code>imaginary  →  0</code></pre>Returns zero.	http://ruby-doc.org/core/Numeric.html#method-i-imaginary
Numeric#initialize_copy	A			instance methods							Numerics are immutable values, which should not be copied.<br>Any attempt to use this method on a Numeric will raise a TypeError.	http://ruby-doc.org/core/Numeric.html#method-i-initialize_copy
Numeric#integer?	A			instance methods							<pre><code>integer?  →  true or false</code></pre>Returns true if num is an Integer (including Fixnum and Bignum).<pre><code>(1.0).integer? #=> false\n(1).integer?   #=> true\n</code></pre>	http://ruby-doc.org/core/Numeric.html#method-i-integer-3F
Numeric#magnitude	A			instance methods							<pre><code>magnitude  →  numeric</code></pre>Returns the absolute value of num.<pre><code>12.abs         #=> 12\n(-34.56).abs   #=> 34.56\n-34.56.abs     #=> 34.56\n</code></pre>#magnitude is an alias of #abs.	http://ruby-doc.org/core/Numeric.html#method-i-magnitude
Numeric#modulo	A			instance methods							<pre><code>modulo(numeric)  →  real</code></pre>Equivalent to num.divmod(numeric)[1].<br>See #divmod.	http://ruby-doc.org/core/Numeric.html#method-i-modulo
Numeric#negative?	A			instance methods							<pre><code>negative? →  true or false</code></pre>Returns true if num is less than 0.	http://ruby-doc.org/core/Numeric.html#method-i-negative-3F
Numeric#nonzero?	A			instance methods							<pre><code>nonzero?  →  self or nil</code></pre>Returns self if num is not zero, nil otherwise.<br>This behavior is useful when chaining comparisons:<pre><code>a = %w( z Bb bB bb BB a aA Aa AA A )\nb = a.sort {|a,b| (a.downcase <=> b.downcase).nonzero? || a <=> b }\nb   #=> ["A", "a", "AA", "Aa", "aA", "BB", "Bb", "bB", "bb", "z"]\n</code></pre>	http://ruby-doc.org/core/Numeric.html#method-i-nonzero-3F
Numeric#numerator	A			instance methods							<pre><code>numerator  →  integer</code></pre>Returns the numerator.	http://ruby-doc.org/core/Numeric.html#method-i-numerator
Numeric#phase	A			instance methods							<pre><code>phase  →  0 or float</code></pre>Returns 0 if the value is positive, pi otherwise.	http://ruby-doc.org/core/Numeric.html#method-i-phase
Numeric#polar	A			instance methods							<pre><code>polar  →  array</code></pre>Returns an array; [num.abs, num.arg].	http://ruby-doc.org/core/Numeric.html#method-i-polar
Numeric#positive?	A			instance methods							<pre><code>positive? →  true or false</code></pre>Returns true if num is greater than 0.	http://ruby-doc.org/core/Numeric.html#method-i-positive-3F
Numeric#quo	A			instance methods							<pre><code>quo(int_or_rat)   →  rat\nquo(flo)          →  flo</code></pre>Returns most exact division (rational for integers, float for floats).	http://ruby-doc.org/core/Numeric.html#method-i-quo
Numeric#real	A			instance methods							<pre><code>real  →  self</code></pre>Returns self.	http://ruby-doc.org/core/Numeric.html#method-i-real
Numeric#real?	A			instance methods							<pre><code>real?  →  true or false</code></pre>Returns true if num is a Real number. (i.e. not Complex).	http://ruby-doc.org/core/Numeric.html#method-i-real-3F
Numeric#rect	A			instance methods							<pre><code>rect  →  array\nrectangular  →  array</code></pre>Returns an array; [num, 0].	http://ruby-doc.org/core/Numeric.html#method-i-rect
Numeric#rectangular	A			instance methods							<pre><code>rectangular  →  array</code></pre>Returns an array; [num, 0].	http://ruby-doc.org/core/Numeric.html#method-i-rectangular
Numeric#remainder	A			instance methods							<pre><code>remainder(numeric)  →  real</code></pre>See #divmod.	http://ruby-doc.org/core/Numeric.html#method-i-remainder
Numeric#round	A			instance methods							<pre><code>round([ndigits])  →  integer or float</code></pre>Rounds num to a given precision in decimal digits (default 0 digits).<br>Precision may be negative. Returns a floating point number when ndigits is more than zero.<br>Numeric implements this by converting itself to a Float and invoking Float#round.	http://ruby-doc.org/core/Numeric.html#method-i-round
Numeric#singleton_method_added	A			instance methods							Trap attempts to add methods to Numeric objects. Always raises a TypeError.<br>Numerics should be values; singleton_methods should not be added to them.	http://ruby-doc.org/core/Numeric.html#method-i-singleton_method_added
Numeric#step	A			instance methods							<pre><code>step(by: step, to: limit) {|i| block }   →  self\nstep(by: step, to: limit)                →  an_enumerator\nstep(limit=nil, step=1) {|i| block }     →  self\nstep(limit=nil, step=1)                  →  an_enumerator</code></pre>Invokes the given block with the sequence of numbers starting at num, incremented by step (defaulted to 1) on each call.<br>The loop finishes when the value to be passed to the block is greater than limit (if step is positive) or less than limit (if step is negative), where limit is defaulted to infinity.<br>In the recommended keyword argument style, either or both of step and limit (default infinity) can be omitted. In the fixed position argument style, zero as a step (i.e. num.step(limit, 0)) is not allowed for historical compatibility reasons.<br>If all the arguments are integers, the loop operates using an integer counter.<br>If any of the arguments are floating point numbers, all are converted to floats, and the loop is executed the following expression:<pre><code>floor(n + n*epsilon)+ 1\n</code></pre>Where the n is the following:<pre><code>n = (limit - num)/step\n</code></pre>Otherwise, the loop starts at num, uses either the less-than (<) or greater-than (>) operator to compare the counter against limit, and increments itself using the + operator.<br>If no block is given, an Enumerator is returned instead.<br>For example:<pre><code>p 1.step.take(4)\np 10.step(by: -1).take(4)\n3.step(to: 5) { |i| print i, " " }\n1.step(10, 2) { |i| print i, " " }\nMath::E.step(to: Math::PI, by: 0.2) { |f| print f, " " }\n</code></pre>Will produce:	http://ruby-doc.org/core/Numeric.html#method-i-step
Numeric#to_c	A			instance methods							<pre><code>to_c  →  complex</code></pre>Returns the value as a complex.	http://ruby-doc.org/core/Numeric.html#method-i-to_c
Numeric#to_int	A			instance methods							<pre><code>to_int  →  integer</code></pre>Invokes the child class’s to_i method to convert num to an integer.	http://ruby-doc.org/core/Numeric.html#method-i-to_int
Numeric#truncate	A			instance methods							<pre><code>truncate  →  integer</code></pre>Returns num truncated to an Integer.<br>Numeric implements this by converting its value to a Float and invoking Float#truncate.	http://ruby-doc.org/core/Numeric.html#method-i-truncate
Numeric#zero?	A			instance methods							<pre><code>zero?  →  true or false</code></pre>Returns true if num has a zero value.	http://ruby-doc.org/core/Numeric.html#method-i-zero-3F
String	A			classes							A String object holds and manipulates an arbitrary sequence of bytes, typically representing characters. String objects may be created using String::new or as literals.<br>Because of aliasing issues, users of strings should be aware of the methods that modify the contents of a String object. Typically, methods with names ending in “!” modify their receiver, while those without a “!” return a new String. However, there are exceptions, such as String#[]=.	http://ruby-doc.org/core/String.html
String::new	A			class methods							<pre><code>new(str="")   → new_str\nnew(str="", encoding: enc) → new_str</code></pre>Returns a new string object containing a copy of str. The optional enc argument specifies the encoding of the new string. If not specified, the encoding of str (or ASCII-8BIT, if str is not specified) is used.	http://ruby-doc.org/core/String.html#method-c-new
String::try_convert	A			class methods							<pre><code>try_convert(obj) → string or nil</code></pre>Try to convert obj into a String, using #to_str method. Returns converted string or nil if obj cannot be converted for any reason.<pre><code>String.try_convert("str")     #=> "str"\nString.try_convert(/re/)      #=> nil\n</code></pre>	http://ruby-doc.org/core/String.html#method-c-try_convert
String#%	A			instance methods							<pre><code>str % arg   → new_str</code></pre>Format—Uses str as a format specification, and returns the result of applying it to arg. If the format specification contains more than one substitution, then arg must be an Array or Hash containing the values to be substituted. See Kernel::sprintf for details of the format string.<pre><code>"%05d" % 123                              #=> "00123"\n"%-5s: %08x" % [ "ID", self.object_id ]   #=> "ID   : 200e14d6"\n"foo = %{foo}" % { :foo => 'bar' }        #=> "foo = bar"\n</code></pre>	http://ruby-doc.org/core/String.html#method-i-25
String#*	A			instance methods							<pre><code>str * integer   → new_str</code></pre>Copy — Returns a new String containing integer copies of the receiver. integer must be greater than or equal to 0.<pre><code>"Ho! " * 3   #=> "Ho! Ho! Ho! "\n"Ho! " * 0   #=> ""\n</code></pre>	http://ruby-doc.org/core/String.html#method-i-2A
String#+	A			instance methods							<pre><code>str + other_str   → new_str</code></pre>Concatenation—Returns a new String containing other_str concatenated to str.<pre><code>"Hello from " + self.to_s   #=> "Hello from main"\n</code></pre>	http://ruby-doc.org/core/String.html#method-i-2B
String#+@	A			instance methods							<pre><code>+str  → str (mutable)</code></pre>If the string is frozen, then return duplicated mutable string.<br>If the string is not frozen, then return the string itself.	http://ruby-doc.org/core/String.html#method-i-2B-40
String#-@	A			instance methods							<pre><code>-str  → str (frozen)</code></pre>If the string is frozen, then return the string itself.<br>If the string is not frozen, then duplicate the string freeze it and return it.	http://ruby-doc.org/core/String.html#method-i-2D-40
String#<<	A			instance methods							<pre><code>str << integer       → str\nstr << obj           → str</code></pre>Append—Concatenates the given object to str. If the object is a Integer, it is considered as a codepoint, and is converted to a character before concatenation.<pre><code>a = "hello "\na << "world"   #=> "hello world"\na.concat(33)   #=> "hello world!"\n</code></pre>	http://ruby-doc.org/core/String.html#method-i-3C-3C
String#<=>	A			instance methods							<pre><code>string <=> other_string   → -1, 0, +1 or nil</code></pre>Comparison—Returns -1, 0, +1 or nil depending on whether string is less than, equal to, or greater than other_string.<br>nil is returned if the two values are incomparable.<br>If the strings are of different lengths, and the strings are equal when compared up to the shortest length, then the longer string is considered greater than the shorter one.<br><=> is the basis for the methods <, <=, >, >=, and between?, included from module Comparable. The method String#== does not use Comparable#==.<pre><code>"abcdef" <=> "abcde"     #=> 1\n"abcdef" <=> "abcdef"    #=> 0\n"abcdef" <=> "abcdefg"   #=> -1\n"abcdef" <=> "ABCDEF"    #=> 1\n"abcdef" <=> 1           #=> nil\n</code></pre>	http://ruby-doc.org/core/String.html#method-i-3C-3D-3E
String#==	A			instance methods							<pre><code>str == obj    → true or false</code></pre>Returns whether str == obj, similar to Object#==.<br>If obj is not an instance of String but responds to to_str, then the two strings are compared using case equality Object#===.<br>Otherwise, returns similarly to #eql?, comparing length and content.	http://ruby-doc.org/core/String.html#method-i-3D-3D
String#===	A			instance methods							<pre><code>str === obj   → true or false</code></pre>Returns whether str == obj, similar to Object#==.<br>If obj is not an instance of String but responds to to_str, then the two strings are compared using case equality Object#===.<br>Otherwise, returns similarly to #eql?, comparing length and content.	http://ruby-doc.org/core/String.html#method-i-3D-3D-3D
String#=~	A			instance methods							<pre><code>str =~ obj   → fixnum or nil</code></pre>Match—If obj is a Regexp, use it as a pattern to match against str,and returns the position the match starts, or nil if there is no match. Otherwise, invokes obj.=~, passing str as an argument. The default =~ in Object returns nil.<br>Note: str =~ regexp is not the same as regexp =~ str. Strings captured from named capture groups are assigned to local variables only in the second case.<pre><code>"cat o' 9 tails" =~ /\d/   #=> 7\n"cat o' 9 tails" =~ 9      #=> nil\n</code></pre>	http://ruby-doc.org/core/String.html#method-i-3D-7E
String#[]	A			instance methods							<pre><code>str[index]                 → new_str or nil\nstr[start, length]         → new_str or nil\nstr[range]                 → new_str or nil\nstr[regexp]                → new_str or nil\nstr[regexp, capture]       → new_str or nil\nstr[match_str]             → new_str or nil</code></pre>Element Reference — If passed a single index, returns a substring of one character at that index. If passed a start index and a length, returns a substring containing length characters starting at the start index. If passed a range, its beginning and end are interpreted as offsets delimiting the substring to be returned.<br>In these three cases, if an index is negative, it is counted from the end of the string. For the start and range cases the starting index is just before a character and an index matching the string’s size. Additionally, an empty string is returned when the starting index for a character range is at the end of the string.<br>Returns nil if the initial index falls outside the string or the length is negative.<br>If a Regexp is supplied, the matching portion of the string is returned. If a capture follows the regular expression, which may be a capture group index or name, follows the regular expression that component of the MatchData is returned instead.<br>If a match_str is given, that string is returned if it occurs in the string.<br>Returns nil if the regular expression does not match or the match string cannot be found.<pre><code>a = "hello there"\n\na[1]                   #=> "e"\na[2, 3]                #=> "llo"\na[2..3]                #=> "ll"\n\na[-3, 2]               #=> "er"\na[7..-2]               #=> "her"\na[-4..-2]              #=> "her"\na[-2..-4]              #=> ""\n\na[11, 0]               #=> ""\na[11]                  #=> nil\na[12, 0]               #=> nil\na[12..-1]              #=> nil\n\na[/[aeiou](.)\1/]      #=> "ell"\na[/[aeiou](.)\1/, 0]   #=> "ell"\na[/[aeiou](.)\1/, 1]   #=> "l"\na[/[aeiou](.)\1/, 2]   #=> nil\n\na[/(?<vowel>[aeiou])(?<non_vowel>[^aeiou])/, "non_vowel"] #=> "l"\na[/(?<vowel>[aeiou])(?<non_vowel>[^aeiou])/, "vowel"]     #=> "e"\n\na["lo"]                #=> "lo"\na["bye"]               #=> nil\n</code></pre>	http://ruby-doc.org/core/String.html#method-i-5B-5D
String#[]=	A			instance methods							<pre><code>str[fixnum] = new_str\nstr[fixnum, fixnum] = new_str\nstr[range] = aString\nstr[regexp] = new_str\nstr[regexp, fixnum] = new_str\nstr[regexp, name] = new_str\nstr[other_str] = new_str</code></pre>Element Assignment—Replaces some or all of the content of str. The portion of the string affected is determined using the same criteria as String#[]. If the replacement string is not the same length as the text it is replacing, the string will be adjusted accordingly. If the regular expression or string is used as the index doesn’t match a position in the string, IndexError is raised. If the regular expression form is used, the optional second Fixnum allows you to specify which portion of the match to replace (effectively using the MatchData indexing rules. The forms that take a Fixnum will raise an IndexError if the value is out of range; the Range form will raise a RangeError, and the Regexp and String will raise an IndexError on negative match.	http://ruby-doc.org/core/String.html#method-i-5B-5D-3D
String#ascii_only?	A			instance methods							<pre><code>ascii_only?  → true or false</code></pre>Returns true for a string which has only ASCII characters.<pre><code>"abc".force_encoding("UTF-8").ascii_only?          #=> true\n"abc\u{6666}".force_encoding("UTF-8").ascii_only?  #=> false\n</code></pre>	http://ruby-doc.org/core/String.html#method-i-ascii_only-3F
String#b	A			instance methods							<pre><code>b   → str</code></pre>Returns a copied string whose encoding is ASCII-8BIT.	http://ruby-doc.org/core/String.html#method-i-b
String#bytes	A			instance methods							<pre><code>bytes    → an_array</code></pre>Returns an array of bytes in str. This is a shorthand for str.each_byte.to_a.<br>If a block is given, which is a deprecated form, works the same as each_byte.	http://ruby-doc.org/core/String.html#method-i-bytes
String#bytesize	A			instance methods							<pre><code>bytesize  → integer</code></pre>Returns the length of str in bytes.	http://ruby-doc.org/core/String.html#method-i-bytesize
String#byteslice	A			instance methods							<pre><code>byteslice(fixnum)           → new_str or nil\nbyteslice(fixnum, fixnum)   → new_str or nil\nbyteslice(range)            → new_str or nil</code></pre>Byte Reference—If passed a single Fixnum, returns a substring of one byte at that position. If passed two Fixnum objects, returns a substring starting at the offset given by the first, and a length given by the second. If given a Range, a substring containing bytes at offsets given by the range is returned. In all three cases, if an offset is negative, it is counted from the end of str. Returns nil if the initial offset falls outside the string, the length is negative, or the beginning of the range is greater than the end. The encoding of the resulted string keeps original encoding.	http://ruby-doc.org/core/String.html#method-i-byteslice
String#capitalize	A			instance methods							<pre><code>capitalize   → new_str</code></pre>Returns a copy of str with the first character converted to uppercase and the remainder to lowercase. Note: case conversion is effective only in ASCII region.<pre><code>"hello".capitalize    #=> "Hello"\n"HELLO".capitalize    #=> "Hello"\n"123ABC".capitalize   #=> "123abc"\n</code></pre>	http://ruby-doc.org/core/String.html#method-i-capitalize
String#capitalize!	A			instance methods							<pre><code>capitalize!   → str or nil</code></pre>Modifies str by converting the first character to uppercase and the remainder to lowercase. Returns nil if no changes are made. Note: case conversion is effective only in ASCII region.<pre><code>a = "hello"\na.capitalize!   #=> "Hello"\na               #=> "Hello"\na.capitalize!   #=> nil\n</code></pre>	http://ruby-doc.org/core/String.html#method-i-capitalize-21
String#casecmp	A			instance methods							<pre><code>casecmp(other_str)   → -1, 0, +1 or nil</code></pre>Case-insensitive version of String#<=>.<pre><code>"abcdef".casecmp("abcde")     #=> 1\n"aBcDeF".casecmp("abcdef")    #=> 0\n"abcdef".casecmp("abcdefg")   #=> -1\n"abcdef".casecmp("ABCDEF")    #=> 0\n</code></pre>	http://ruby-doc.org/core/String.html#method-i-casecmp
String#center	A			instance methods							<pre><code>center(width, padstr=' ')   → new_str</code></pre>Centers str in width. If width is greater than the length of str, returns a new String of length width with str centered and padded with padstr; otherwise, returns str.<pre><code>"hello".center(4)         #=> "hello"\n"hello".center(20)        #=> "       hello        "\n"hello".center(20, '123') #=> "1231231hello12312312"\n</code></pre>	http://ruby-doc.org/core/String.html#method-i-center
String#chars	A			instance methods							<pre><code>chars    → an_array</code></pre>Returns an array of characters in str. This is a shorthand for str.each_char.to_a.<br>If a block is given, which is a deprecated form, works the same as each_char.	http://ruby-doc.org/core/String.html#method-i-chars
String#chomp	A			instance methods							<pre><code>chomp(separator=$/)   → new_str</code></pre>Returns a new String with the given record separator removed from the end of str (if present). If $/ has not been changed from the default Ruby record separator, then chomp also removes carriage return characters (that is it will remove \n, \r, and \r\n). If $/ is an empty string, it will remove all trailing newlines from the string.<pre><code>"hello".chomp                #=> "hello"\n"hello\n".chomp              #=> "hello"\n"hello\r\n".chomp            #=> "hello"\n"hello\n\r".chomp            #=> "hello\n"\n"hello\r".chomp              #=> "hello"\n"hello \n there".chomp       #=> "hello \n there"\n"hello".chomp("llo")         #=> "he"\n"hello\r\n\r\n".chomp('')    #=> "hello"\n"hello\r\n\r\r\n".chomp('')  #=> "hello\r\n\r"\n</code></pre>	http://ruby-doc.org/core/String.html#method-i-chomp
String#chomp!	A			instance methods							<pre><code>chomp!(separator=$/)   → str or nil</code></pre>Modifies str in place as described for String#chomp, returning str, or nil if no modifications were made.	http://ruby-doc.org/core/String.html#method-i-chomp-21
String#chop	A			instance methods							<pre><code>chop   → new_str</code></pre>Returns a new String with the last character removed. If the string ends with \r\n, both characters are removed. Applying chop to an empty string returns an empty string. String#chomp is often a safer alternative, as it leaves the string unchanged if it doesn’t end in a record separator.<pre><code>"string\r\n".chop   #=> "string"\n"string\n\r".chop   #=> "string\n"\n"string\n".chop     #=> "string"\n"string".chop       #=> "strin"\n"x".chop.chop       #=> ""\n</code></pre>	http://ruby-doc.org/core/String.html#method-i-chop
String#chop!	A			instance methods							<pre><code>chop!   → str or nil</code></pre>Processes str as for String#chop, returning str, or nil if str is the empty string. See also String#chomp!.	http://ruby-doc.org/core/String.html#method-i-chop-21
String#chr	A			instance methods							<pre><code>chr    →  string</code></pre>Returns a one-character string at the beginning of the string.<pre><code>a = "abcde"\na.chr    #=> "a"\n</code></pre>	http://ruby-doc.org/core/String.html#method-i-chr
String#clear	A			instance methods							<pre><code>clear    →  string</code></pre>Makes string empty.<pre><code>a = "abcde"\na.clear    #=> ""\n</code></pre>	http://ruby-doc.org/core/String.html#method-i-clear
String#codepoints	A			instance methods							<pre><code>codepoints   → an_array</code></pre>Returns an array of the Integer ordinals of the characters in str. This is a shorthand for str.each_codepoint.to_a.<br>If a block is given, which is a deprecated form, works the same as each_codepoint.	http://ruby-doc.org/core/String.html#method-i-codepoints
String#concat	A			instance methods							<pre><code>concat(integer)  → str\nconcat(obj)      → str</code></pre>Append—Concatenates the given object to str. If the object is a Integer, it is considered as a codepoint, and is converted to a character before concatenation.<pre><code>a = "hello "\na << "world"   #=> "hello world"\na.concat(33)   #=> "hello world!"\n</code></pre>	http://ruby-doc.org/core/String.html#method-i-concat
String#count	A			instance methods							<pre><code>count([other_str]+)   → fixnum</code></pre>Each other_str parameter defines a set of characters to count. The intersection of these sets defines the characters to count in str. Any other_str that starts with a caret ^ is negated. The sequence c1-c2 means all characters between c1 and c2. The backslash character \ can be used to escape ^ or - and is otherwise ignored unless it appears at the end of a sequence or the end of a other_str.<pre><code>a = "hello world"\na.count "lo"                   #=> 5\na.count "lo", "o"              #=> 2\na.count "hello", "^l"          #=> 4\na.count "ej-m"                 #=> 4\n\n"hello^world".count "\\^aeiou" #=> 4\n"hello-world".count "a\\-eo"   #=> 4\n\nc = "hello world\\r\\n"\nc.count "\\"                   #=> 2\nc.count "\\A"                  #=> 0\nc.count "X-\\w"                #=> 3\n</code></pre>	http://ruby-doc.org/core/String.html#method-i-count
String#crypt	A			instance methods							<pre><code>crypt(salt_str)   → new_str</code></pre>Applies a one-way cryptographic hash to str by invoking the standard library function crypt(3) with the given salt string. While the format and the result are system and implementation dependent, using a salt matching the regular expression \A[a-zA-Z0-9./]{2} should be valid and safe on any platform, in which only the first two characters are significant.<br>This method is for use in system specific scripts, so if you want a cross-platform hash function consider using Digest or OpenSSL instead.	http://ruby-doc.org/core/String.html#method-i-crypt
String#delete	A			instance methods							<pre><code>delete([other_str]+)   → new_str</code></pre>Returns a copy of str with all characters in the intersection of its arguments deleted. Uses the same rules for building the set of characters as String#count.<pre><code>"hello".delete "l","lo"        #=> "heo"\n"hello".delete "lo"            #=> "he"\n"hello".delete "aeiou", "^e"   #=> "hell"\n"hello".delete "ej-m"          #=> "ho"\n</code></pre>	http://ruby-doc.org/core/String.html#method-i-delete
String#delete!	A			instance methods							<pre><code>delete!([other_str]+)   → str or nil</code></pre>Performs a delete operation in place, returning str, or nil if str was not modified.	http://ruby-doc.org/core/String.html#method-i-delete-21
String#downcase	A			instance methods							<pre><code>downcase   → new_str</code></pre>Returns a copy of str with all uppercase letters replaced with their lowercase counterparts. The operation is locale insensitive—only characters “A” to “Z” are affected. Note: case replacement is effective only in ASCII region.<pre><code>"hEllO".downcase   #=> "hello"\n</code></pre>	http://ruby-doc.org/core/String.html#method-i-downcase
String#downcase!	A			instance methods							<pre><code>downcase!   → str or nil</code></pre>Downcases the contents of str, returning nil if no changes were made. Note: case replacement is effective only in ASCII region.	http://ruby-doc.org/core/String.html#method-i-downcase-21
String#dump	A			instance methods							<pre><code>dump   → new_str</code></pre>Produces a version of str with all non-printing characters replaced by \nnn notation and all special characters escaped.<pre><code>"hello \n ''".dump  #=> "\"hello \\n ''\"\n</code></pre>	http://ruby-doc.org/core/String.html#method-i-dump
String#each_byte	A			instance methods							<pre><code>each_byte {|fixnum| block }    → str\neach_byte                      → an_enumerator</code></pre>Passes each byte in str to the given block, or returns an enumerator if no block is given.<pre><code>"hello".each_byte {|c| print c, ' ' }\n</code></pre>produces:	http://ruby-doc.org/core/String.html#method-i-each_byte
String#each_char	A			instance methods							<pre><code>each_char {|cstr| block }    → str\neach_char                    → an_enumerator</code></pre>Passes each character in str to the given block, or returns an enumerator if no block is given.<pre><code>"hello".each_char {|c| print c, ' ' }\n</code></pre>produces:<pre><code>h e l l o\n</code></pre>	http://ruby-doc.org/core/String.html#method-i-each_char
String#each_codepoint	A			instance methods							<pre><code>each_codepoint {|integer| block }    → str\neach_codepoint                       → an_enumerator</code></pre>Passes the Integer ordinal of each character in str, also known as a codepoint when applied to Unicode strings to the given block.<br>If no block is given, an enumerator is returned instead.<pre><code>"hello\u0639".each_codepoint {|c| print c, ' ' }\n</code></pre>produces:	http://ruby-doc.org/core/String.html#method-i-each_codepoint
String#each_line	A			instance methods							<pre><code>each_line(separator=$/) {|substr| block }   → str\neach_line(separator=$/)                     → an_enumerator</code></pre>Splits str using the supplied parameter as the record separator ($/ by default), passing each substring in turn to the supplied block. If a zero-length record separator is supplied, the string is split into paragraphs delimited by multiple successive newlines.<br>If no block is given, an enumerator is returned instead.<pre><code>print "Example one\n"\n"hello\nworld".each_line {|s| p s}\nprint "Example two\n"\n"hello\nworld".each_line('l') {|s| p s}\nprint "Example three\n"\n"hello\n\n\nworld".each_line('') {|s| p s}\n</code></pre>produces:<pre><code>Example one\n"hello\n"\n"world"\nExample two\n"hel"\n"l"\n"o\nworl"\n"d"\nExample three\n"hello\n\n\n"\n"world"\n</code></pre>	http://ruby-doc.org/core/String.html#method-i-each_line
String#empty?	A			instance methods							<pre><code>empty?   → true or false</code></pre>Returns true if str has a length of zero.<pre><code>"hello".empty?   #=> false\n" ".empty?       #=> false\n"".empty?        #=> true\n</code></pre>	http://ruby-doc.org/core/String.html#method-i-empty-3F
String#encode	A			instance methods							<pre><code>encode(encoding [, options] )   → str\nencode(dst_encoding, src_encoding [, options] )   → str\nencode([options])   → str</code></pre>The first form returns a copy of str transcoded to encoding encoding. The second form returns a copy of str transcoded from src_encoding to dst_encoding. The last form returns a copy of str transcoded to Encoding.default_internal.<br>By default, the first and second form raise Encoding::UndefinedConversionError for characters that are undefined in the destination encoding, and Encoding::InvalidByteSequenceError for invalid byte sequences in the source encoding. The last form by default does not raise exceptions but uses replacement strings.<br>The options Hash gives details for conversion and can have the following keys:<br>If the value is :replace, encode replaces invalid byte sequences in str with the replacement character. The default is to raise the Encoding::InvalidByteSequenceError exception<br>If the value is :replace, encode replaces characters which are undefined in the destination encoding with the replacement character. The default is to raise the Encoding::UndefinedConversionError.<br>Sets the replacement string to the given value. The default replacement string is “uFFFD” for Unicode encoding forms, and “?” otherwise.<br>Sets the replacement string by the given object for undefined character. The object should be a Hash, a Proc, a Method, or an object which has [] method. Its key is an undefined character encoded in the source encoding of current transcoder. Its value can be any encoding until it can be converted into the destination encoding of the transcoder.<br>The value must be :text or :attr. If the value is :text encode replaces undefined characters with their (upper-case hexadecimal) numeric character references. ‘&’, ‘<’, and ‘>’ are converted to “&amp;”, “&lt;”, and “&gt;”, respectively. If the value is :attr, encode also quotes the replacement result (using ‘“’), and replaces ‘”’ with “&quot;”.<br>Replaces LF (“n”) with CR (“r”) if value is true.<br>Replaces LF (“n”) with CRLF (“rn”) if value is true.<br>Replaces CRLF (“rn”) and CR (“r”) with LF (“n”) if value is true.	http://ruby-doc.org/core/String.html#method-i-encode
String#encode!	A			instance methods							<pre><code>encode!(encoding [, options] )   → str\nencode!(dst_encoding, src_encoding [, options] )   → str</code></pre>The first form transcodes the contents of str from str.encoding to encoding. The second form transcodes the contents of str from src_encoding to dst_encoding. The options Hash gives details for conversion. See #encode for details. Returns the string even if no changes were made.	http://ruby-doc.org/core/String.html#method-i-encode-21
String#encoding	A			instance methods							<pre><code>encoding   → encoding</code></pre>Returns the Encoding object that represents the encoding of obj.	http://ruby-doc.org/core/String.html#method-i-encoding
String#end_with?	A			instance methods							<pre><code>end_with?([suffixes]+)   → true or false</code></pre>Returns true if str ends with one of the suffixes given.<pre><code>"hello".end_with?("ello")               #=> true\n\n# returns true if one of the +suffixes+ matches.\n"hello".end_with?("heaven", "ello")     #=> true\n"hello".end_with?("heaven", "paradise") #=> false\n</code></pre>	http://ruby-doc.org/core/String.html#method-i-end_with-3F
String#eql?	A			instance methods							<pre><code>eql?(other)   → true or false</code></pre>Two strings are equal if they have the same length and content.	http://ruby-doc.org/core/String.html#method-i-eql-3F
String#force_encoding	A			instance methods							<pre><code>force_encoding(encoding)   → str</code></pre>Changes the encoding to encoding and returns self.	http://ruby-doc.org/core/String.html#method-i-force_encoding
String#freeze	A			instance methods								http://ruby-doc.org/core/String.html#method-i-freeze
String#getbyte	A			instance methods							<pre><code>getbyte(index)          → 0 .. 255</code></pre>returns the indexth byte as an integer.	http://ruby-doc.org/core/String.html#method-i-getbyte
String#gsub	A			instance methods							<pre><code>gsub(pattern, replacement)       → new_str\ngsub(pattern, hash)              → new_str\ngsub(pattern) {|match| block }   → new_str\ngsub(pattern)                    → enumerator</code></pre>Returns a copy of str with the all occurrences of pattern substituted for the second argument. The pattern is typically a Regexp; if given as a String, any regular expression metacharacters it contains will be interpreted literally, e.g. '\\d' will match a backlash followed by ‘d’, instead of a digit.<br>If replacement is a String it will be substituted for the matched text. It may contain back-references to the pattern’s capture groups of the form \\d, where d is a group number, or \\k<n>, where n is a group name. If it is a double-quoted string, both back-references must be preceded by an additional backslash. However, within replacement the special match variables, such as $&, will not refer to the current match.<br>If the second argument is a Hash, and the matched text is one of its keys, the corresponding value is the replacement string.<br>In the block form, the current match string is passed in as a parameter, and variables such as $1, $2, $`, $&, and $' will be set appropriately. The value returned by the block will be substituted for the match on each call.<br>The result inherits any tainting in the original string or any supplied replacement string.<br>When neither a block nor a second argument is supplied, an Enumerator is returned.<pre><code>"hello".gsub(/[aeiou]/, '*')                  #=> "h*ll*"\n"hello".gsub(/([aeiou])/, '<\1>')             #=> "h<e>ll<o>"\n"hello".gsub(/./) {|s| s.ord.to_s + ' '}      #=> "104 101 108 108 111 "\n"hello".gsub(/(?<foo>[aeiou])/, '{\k<foo>}')  #=> "h{e}ll{o}"\n'hello'.gsub(/[eo]/, 'e' => 3, 'o' => '*')    #=> "h3ll*"\n</code></pre>	http://ruby-doc.org/core/String.html#method-i-gsub
String#gsub!	A			instance methods							<pre><code>gsub!(pattern, replacement)        → str or nil\ngsub!(pattern, hash)               → str or nil\ngsub!(pattern) {|match| block }    → str or nil\ngsub!(pattern)                     → an_enumerator</code></pre>Performs the substitutions of String#gsub in place, returning str, or nil if no substitutions were performed. If no block and no replacement is given, an enumerator is returned instead.	http://ruby-doc.org/core/String.html#method-i-gsub-21
String#hash	A			instance methods							<pre><code>hash   → fixnum</code></pre>Return a hash based on the string’s length, content and encoding.<br>See also Object#hash.	http://ruby-doc.org/core/String.html#method-i-hash
String#hex	A			instance methods							<pre><code>hex   → integer</code></pre>Treats leading characters from str as a string of hexadecimal digits (with an optional sign and an optional 0x) and returns the corresponding number. Zero is returned on error.<pre><code>"0x0a".hex     #=> 10\n"-1234".hex    #=> -4660\n"0".hex        #=> 0\n"wombat".hex   #=> 0\n</code></pre>	http://ruby-doc.org/core/String.html#method-i-hex
String#include?	A			instance methods							<pre><code>include? other_str   → true or false</code></pre>Returns true if str contains the given string or character.<pre><code>"hello".include? "lo"   #=> true\n"hello".include? "ol"   #=> false\n"hello".include? ?h     #=> true\n</code></pre>	http://ruby-doc.org/core/String.html#method-i-include-3F
String#index	A			instance methods							<pre><code>index(substring [, offset])   → fixnum or nil\nindex(regexp [, offset])      → fixnum or nil</code></pre>Returns the index of the first occurrence of the given substring or pattern (regexp) in str. Returns nil if not found. If the second parameter is present, it specifies the position in the string to begin the search.<pre><code>"hello".index('e')             #=> 1\n"hello".index('lo')            #=> 3\n"hello".index('a')             #=> nil\n"hello".index(?e)              #=> 1\n"hello".index(/[aeiou]/, -3)   #=> 4\n</code></pre>	http://ruby-doc.org/core/String.html#method-i-index
String#initialize_copy	A			instance methods							<pre><code>replace(other_str)   → str</code></pre>Replaces the contents and taintedness of str with the corresponding values in other_str.<pre><code>s = "hello"         #=> "hello"\ns.replace "world"   #=> "world"\n</code></pre>	http://ruby-doc.org/core/String.html#method-i-initialize_copy
String#insert	A			instance methods							<pre><code>insert(index, other_str)   → str</code></pre>Inserts other_str before the character at the given index, modifying str. Negative indices count from the end of the string, and insert after the given character. The intent is insert aString so that it starts at the given index.<pre><code>"abcd".insert(0, 'X')    #=> "Xabcd"\n"abcd".insert(3, 'X')    #=> "abcXd"\n"abcd".insert(4, 'X')    #=> "abcdX"\n"abcd".insert(-3, 'X')   #=> "abXcd"\n"abcd".insert(-1, 'X')   #=> "abcdX"\n</code></pre>	http://ruby-doc.org/core/String.html#method-i-insert
String#inspect	A			instance methods							<pre><code>inspect   → string</code></pre>Returns a printable version of str, surrounded by quote marks, with special characters escaped.<pre><code>str = "hello"\nstr[3] = "\b"\nstr.inspect       #=> "\"hel\\bo\""\n</code></pre>	http://ruby-doc.org/core/String.html#method-i-inspect
String#intern	A			instance methods							<pre><code>intern   → symbol</code></pre>Returns the Symbol corresponding to str, creating the symbol if it did not previously exist. See Symbol#id2name.<pre><code>"Koala".intern         #=> :Koala\ns = 'cat'.to_sym       #=> :cat\ns == :cat              #=> true\ns = '@cat'.to_sym      #=> :@cat\ns == :@cat             #=> true\n</code></pre>This can also be used to create symbols that cannot be represented using the :xxx notation.<pre><code>'cat and dog'.to_sym   #=> :"cat and dog"\n</code></pre>	http://ruby-doc.org/core/String.html#method-i-intern
String#length	A			instance methods							<pre><code>length   → integer</code></pre>Returns the character length of str.	http://ruby-doc.org/core/String.html#method-i-length
String#lines	A			instance methods							<pre><code>lines(separator=$/)  → an_array</code></pre>Returns an array of lines in str split using the supplied record separator ($/ by default). This is a shorthand for str.each_line(separator).to_a.<br>If a block is given, which is a deprecated form, works the same as each_line.	http://ruby-doc.org/core/String.html#method-i-lines
String#ljust	A			instance methods							<pre><code>ljust(integer, padstr=' ')   → new_str</code></pre>If integer is greater than the length of str, returns a new String of length integer with str left justified and padded with padstr; otherwise, returns str.<pre><code>"hello".ljust(4)            #=> "hello"\n"hello".ljust(20)           #=> "hello               "\n"hello".ljust(20, '1234')   #=> "hello123412341234123"\n</code></pre>	http://ruby-doc.org/core/String.html#method-i-ljust
String#lstrip	A			instance methods							<pre><code>lstrip   → new_str</code></pre>Returns a copy of str with leading whitespace removed. See also String#rstrip and String#strip.<br>Refer to strip for the definition of whitespace.<pre><code>"  hello  ".lstrip   #=> "hello  "\n"hello".lstrip       #=> "hello"\n</code></pre>	http://ruby-doc.org/core/String.html#method-i-lstrip
String#lstrip!	A			instance methods							<pre><code>lstrip!   → self or nil</code></pre>Removes leading whitespace from str, returning nil if no change was made. See also String#rstrip! and String#strip!.<br>Refer to strip for the definition of whitespace.<pre><code>"  hello  ".lstrip   #=> "hello  "\n"hello".lstrip!      #=> nil\n</code></pre>	http://ruby-doc.org/core/String.html#method-i-lstrip-21
String#match	A			instance methods							<pre><code>match(pattern)        → matchdata or nil\nmatch(pattern, pos)   → matchdata or nil</code></pre>Converts pattern to a Regexp (if it isn’t already one), then invokes its match method on str. If the second parameter is present, it specifies the position in the string to begin the search.<pre><code>'hello'.match('(.)\1')      #=> #<MatchData "ll" 1:"l">\n'hello'.match('(.)\1')[0]   #=> "ll"\n'hello'.match(/(.)\1/)[0]   #=> "ll"\n'hello'.match('xx')         #=> nil\n</code></pre>If a block is given, invoke the block with MatchData if match succeed, so that you can write<br>instead of<br>The return value is a value from block execution in this case.	http://ruby-doc.org/core/String.html#method-i-match
String#next	A			instance methods							<pre><code>next   → new_str</code></pre>Returns the successor to str. The successor is calculated by incrementing characters starting from the rightmost alphanumeric (or the rightmost character if there are no alphanumerics) in the string. Incrementing a digit always results in another digit, and incrementing a letter results in another letter of the same case. Incrementing nonalphanumerics uses the underlying character set’s collating sequence.<br>If the increment generates a “carry,” the character to the left of it is incremented. This process repeats until there is no carry, adding an additional character if necessary.<pre><code>"abcd".succ        #=> "abce"\n"THX1138".succ     #=> "THX1139"\n"<<koala>>".succ   #=> "<<koalb>>"\n"1999zzz".succ     #=> "2000aaa"\n"ZZZ9999".succ     #=> "AAAA0000"\n"***".succ         #=> "**+"\n</code></pre>	http://ruby-doc.org/core/String.html#method-i-next
String#next!	A			instance methods							<pre><code>next!   → str</code></pre>Equivalent to String#succ, but modifies the receiver in place.	http://ruby-doc.org/core/String.html#method-i-next-21
String#oct	A			instance methods							<pre><code>oct   → integer</code></pre>Treats leading characters of str as a string of octal digits (with an optional sign) and returns the corresponding number. Returns 0 if the conversion fails.<pre><code>"123".oct       #=> 83\n"-377".oct      #=> -255\n"bad".oct       #=> 0\n"0377bad".oct   #=> 255\n</code></pre>If str starts with 0, radix indicators are hornored. See Kernel#Integer.	http://ruby-doc.org/core/String.html#method-i-oct
String#ord	A			instance methods							<pre><code>ord   → integer</code></pre>Return the Integer ordinal of a one-character string.<pre><code>"a".ord         #=> 97\n</code></pre>	http://ruby-doc.org/core/String.html#method-i-ord
String#partition	A			instance methods							<pre><code>partition(sep)              → [head, sep, tail]\npartition(regexp)           → [head, match, tail]</code></pre>Searches sep or pattern (regexp) in the string and returns the part before it, the match, and the part after it. If it is not found, returns two empty strings and str.<pre><code>"hello".partition("l")         #=> ["he", "l", "lo"]\n"hello".partition("x")         #=> ["hello", "", ""]\n"hello".partition(/.l/)        #=> ["h", "el", "lo"]\n</code></pre>	http://ruby-doc.org/core/String.html#method-i-partition
String#prepend	A			instance methods							<pre><code>prepend(other_str)  → str</code></pre>Prepend—Prepend the given string to str.<pre><code>a = "world"\na.prepend("hello ") #=> "hello world"\na                   #=> "hello world"\n</code></pre>	http://ruby-doc.org/core/String.html#method-i-prepend
String#replace	A			instance methods							<pre><code>replace(other_str)   → str</code></pre>Replaces the contents and taintedness of str with the corresponding values in other_str.<pre><code>s = "hello"         #=> "hello"\ns.replace "world"   #=> "world"\n</code></pre>	http://ruby-doc.org/core/String.html#method-i-replace
String#reverse	A			instance methods							<pre><code>reverse   → new_str</code></pre>Returns a new string with the characters from str in reverse order.<pre><code>"stressed".reverse   #=> "desserts"\n</code></pre>	http://ruby-doc.org/core/String.html#method-i-reverse
String#reverse!	A			instance methods							<pre><code>reverse!   → str</code></pre>Reverses str in place.	http://ruby-doc.org/core/String.html#method-i-reverse-21
String#rindex	A			instance methods							<pre><code>rindex(substring [, fixnum])   → fixnum or nil\nrindex(regexp [, fixnum])   → fixnum or nil</code></pre>Returns the index of the last occurrence of the given substring or pattern (regexp) in str. Returns nil if not found. If the second parameter is present, it specifies the position in the string to end the search—characters beyond this point will not be considered.<pre><code>"hello".rindex('e')             #=> 1\n"hello".rindex('l')             #=> 3\n"hello".rindex('a')             #=> nil\n"hello".rindex(?e)              #=> 1\n"hello".rindex(/[aeiou]/, -2)   #=> 1\n</code></pre>	http://ruby-doc.org/core/String.html#method-i-rindex
String#rjust	A			instance methods							<pre><code>rjust(integer, padstr=' ')   → new_str</code></pre>If integer is greater than the length of str, returns a new String of length integer with str right justified and padded with padstr; otherwise, returns str.<pre><code>"hello".rjust(4)            #=> "hello"\n"hello".rjust(20)           #=> "               hello"\n"hello".rjust(20, '1234')   #=> "123412341234123hello"\n</code></pre>	http://ruby-doc.org/core/String.html#method-i-rjust
String#rpartition	A			instance methods							<pre><code>rpartition(sep)             → [head, sep, tail]\nrpartition(regexp)          → [head, match, tail]</code></pre>Searches sep or pattern (regexp) in the string from the end of the string, and returns the part before it, the match, and the part after it. If it is not found, returns two empty strings and str.<pre><code>"hello".rpartition("l")         #=> ["hel", "l", "o"]\n"hello".rpartition("x")         #=> ["", "", "hello"]\n"hello".rpartition(/.l/)        #=> ["he", "ll", "o"]\n</code></pre>	http://ruby-doc.org/core/String.html#method-i-rpartition
String#rstrip	A			instance methods							<pre><code>rstrip   → new_str</code></pre>Returns a copy of str with trailing whitespace removed. See also String#lstrip and String#strip.<br>Refer to strip for the definition of whitespace.<pre><code>"  hello  ".rstrip   #=> "  hello"\n"hello".rstrip       #=> "hello"\n</code></pre>	http://ruby-doc.org/core/String.html#method-i-rstrip
String#rstrip!	A			instance methods							<pre><code>rstrip!   → self or nil</code></pre>Removes trailing whitespace from str, returning nil if no change was made. See also String#lstrip! and String#strip!.<br>Refer to strip for the definition of whitespace.<pre><code>"  hello  ".rstrip   #=> "  hello"\n"hello".rstrip!      #=> nil\n</code></pre>	http://ruby-doc.org/core/String.html#method-i-rstrip-21
String#scan	A			instance methods							<pre><code>scan(pattern)                         → array\nscan(pattern) {|match, ...| block }   → str</code></pre>Both forms iterate through str, matching the pattern (which may be a Regexp or a String). For each match, a result is generated and either added to the result array or passed to the block. If the pattern contains no groups, each individual result consists of the matched string, $&. If the pattern contains groups, each individual result is itself an array containing one entry per group.<pre><code>a = "cruel world"\na.scan(/\w+/)        #=> ["cruel", "world"]\na.scan(/.../)        #=> ["cru", "el ", "wor"]\na.scan(/(...)/)      #=> [["cru"], ["el "], ["wor"]]\na.scan(/(..)(..)/)   #=> [["cr", "ue"], ["l ", "wo"]]\n</code></pre>And the block form:<pre><code>a.scan(/\w+/) {|w| print "<<#{w}>> " }\nprint "\n"\na.scan(/(.)(.)/) {|x,y| print y, x }\nprint "\n"\n</code></pre>produces:	http://ruby-doc.org/core/String.html#method-i-scan
String#scrub	A			instance methods							<pre><code>scrub → new_str\nscrub(repl) → new_str\nscrub{|bytes|} → new_str</code></pre>If the string is invalid byte sequence then replace invalid bytes with given replacement character, else returns self. If block is given, replace invalid bytes with returned value of the block.	http://ruby-doc.org/core/String.html#method-i-scrub
String#scrub!	A			instance methods							<pre><code>scrub! → str\nscrub!(repl) → str\nscrub!{|bytes|} → str</code></pre>If the string is invalid byte sequence then replace invalid bytes with given replacement character, else returns self. If block is given, replace invalid bytes with returned value of the block.	http://ruby-doc.org/core/String.html#method-i-scrub-21
String#setbyte	A			instance methods							<pre><code>setbyte(index, integer) → integer</code></pre>modifies the indexth byte as integer.	http://ruby-doc.org/core/String.html#method-i-setbyte
String#size	A			instance methods							<pre><code>size     → integer</code></pre>Returns the character length of str.	http://ruby-doc.org/core/String.html#method-i-size
String#slice	A			instance methods							<pre><code>slice(index)           → new_str or nil\nslice(start, length)   → new_str or nil\nslice(range)           → new_str or nil\nslice(regexp)          → new_str or nil\nslice(regexp, capture) → new_str or nil\nslice(match_str)       → new_str or nil</code></pre>Element Reference — If passed a single index, returns a substring of one character at that index. If passed a start index and a length, returns a substring containing length characters starting at the start index. If passed a range, its beginning and end are interpreted as offsets delimiting the substring to be returned.<br>In these three cases, if an index is negative, it is counted from the end of the string. For the start and range cases the starting index is just before a character and an index matching the string’s size. Additionally, an empty string is returned when the starting index for a character range is at the end of the string.<br>Returns nil if the initial index falls outside the string or the length is negative.<br>If a Regexp is supplied, the matching portion of the string is returned. If a capture follows the regular expression, which may be a capture group index or name, follows the regular expression that component of the MatchData is returned instead.<br>If a match_str is given, that string is returned if it occurs in the string.<br>Returns nil if the regular expression does not match or the match string cannot be found.<pre><code>a = "hello there"\n\na[1]                   #=> "e"\na[2, 3]                #=> "llo"\na[2..3]                #=> "ll"\n\na[-3, 2]               #=> "er"\na[7..-2]               #=> "her"\na[-4..-2]              #=> "her"\na[-2..-4]              #=> ""\n\na[11, 0]               #=> ""\na[11]                  #=> nil\na[12, 0]               #=> nil\na[12..-1]              #=> nil\n\na[/[aeiou](.)\1/]      #=> "ell"\na[/[aeiou](.)\1/, 0]   #=> "ell"\na[/[aeiou](.)\1/, 1]   #=> "l"\na[/[aeiou](.)\1/, 2]   #=> nil\n\na[/(?<vowel>[aeiou])(?<non_vowel>[^aeiou])/, "non_vowel"] #=> "l"\na[/(?<vowel>[aeiou])(?<non_vowel>[^aeiou])/, "vowel"]     #=> "e"\n\na["lo"]                #=> "lo"\na["bye"]               #=> nil\n</code></pre>	http://ruby-doc.org/core/String.html#method-i-slice
String#slice!	A			instance methods							<pre><code>slice!(fixnum)           → new_str or nil\nslice!(fixnum, fixnum)   → new_str or nil\nslice!(range)            → new_str or nil\nslice!(regexp)           → new_str or nil\nslice!(other_str)        → new_str or nil</code></pre>Deletes the specified portion from str, and returns the portion deleted.<pre><code>string = "this is a string"\nstring.slice!(2)        #=> "i"\nstring.slice!(3..6)     #=> " is "\nstring.slice!(/s.*t/)   #=> "sa st"\nstring.slice!("r")      #=> "r"\nstring                  #=> "thing"\n</code></pre>	http://ruby-doc.org/core/String.html#method-i-slice-21
String#split	A			instance methods							<pre><code>split(pattern=nil, [limit])   → anArray</code></pre>Divides str into substrings based on a delimiter, returning an array of these substrings.<br>If pattern is a String, then its contents are used as the delimiter when splitting str. If pattern is a single space, str is split on whitespace, with leading whitespace and runs of contiguous whitespace characters ignored.<br>If pattern is a Regexp, str is divided where the pattern matches. Whenever the pattern matches a zero-length string, str is split into individual characters. If pattern contains groups, the respective matches will be returned in the array as well.<br>If pattern is nil, the value of $; is used. If $; is nil (which is the default), str is split on whitespace as if ` ‘ were specified.<br>If the limit parameter is omitted, trailing null fields are suppressed. If limit is a positive number, at most that number of fields will be returned (if limit is 1, the entire string is returned as the only entry in an array). If negative, there is no limit to the number of fields returned, and trailing null fields are not suppressed.<br>When the input str is empty an empty Array is returned as the string is considered to have no fields to split.<pre><code>" now's  the time".split        #=> ["now's", "the", "time"]\n" now's  the time".split(' ')   #=> ["now's", "the", "time"]\n" now's  the time".split(/ /)   #=> ["", "now's", "", "the", "time"]\n"1, 2.34,56, 7".split(%r{,\s*}) #=> ["1", "2.34", "56", "7"]\n"hello".split(//)               #=> ["h", "e", "l", "l", "o"]\n"hello".split(//, 3)            #=> ["h", "e", "llo"]\n"hi mom".split(%r{\s*})         #=> ["h", "i", "m", "o", "m"]\n\n"mellow yellow".split("ello")   #=> ["m", "w y", "w"]\n"1,2,,3,4,,".split(',')         #=> ["1", "2", "", "3", "4"]\n"1,2,,3,4,,".split(',', 4)      #=> ["1", "2", "", "3,4,,"]\n"1,2,,3,4,,".split(',', -4)     #=> ["1", "2", "", "3", "4", "", ""]\n\n"".split(',', -1)               #=> []\n</code></pre>	http://ruby-doc.org/core/String.html#method-i-split
String#squeeze	A			instance methods							<pre><code>squeeze([other_str]*)    → new_str</code></pre>Builds a set of characters from the other_str parameter(s) using the procedure described for String#count. Returns a new string where runs of the same character that occur in this set are replaced by a single character. If no arguments are given, all runs of identical characters are replaced by a single character.<pre><code>"yellow moon".squeeze                  #=> "yelow mon"\n"  now   is  the".squeeze(" ")         #=> " now is the"\n"putters shoot balls".squeeze("m-z")   #=> "puters shot balls"\n</code></pre>	http://ruby-doc.org/core/String.html#method-i-squeeze
String#squeeze!	A			instance methods							<pre><code>squeeze!([other_str]*)   → str or nil</code></pre>Squeezes str in place, returning either str, or nil if no changes were made.	http://ruby-doc.org/core/String.html#method-i-squeeze-21
String#start_with?	A			instance methods							<pre><code>start_with?([prefixes]+)   → true or false</code></pre>Returns true if str starts with one of the prefixes given.<pre><code>"hello".start_with?("hell")               #=> true\n\n# returns true if one of the prefixes matches.\n"hello".start_with?("heaven", "hell")     #=> true\n"hello".start_with?("heaven", "paradise") #=> false\n</code></pre>	http://ruby-doc.org/core/String.html#method-i-start_with-3F
String#strip	A			instance methods							<pre><code>strip   → new_str</code></pre>Returns a copy of str with leading and trailing whitespace removed.<br>Whitespace is defined as any of the following characters: null, horizontal tab, line feed, vertical tab, form feed, carriage return, space.<pre><code>"    hello    ".strip   #=> "hello"\n"\tgoodbye\r\n".strip   #=> "goodbye"\n"\x00\t\n\v\f\r ".strip #=> ""\n</code></pre>	http://ruby-doc.org/core/String.html#method-i-strip
String#strip!	A			instance methods							<pre><code>strip!   → str or nil</code></pre>Removes leading and trailing whitespace from str. Returns nil if str was not altered.<br>Refer to strip for the definition of whitespace.	http://ruby-doc.org/core/String.html#method-i-strip-21
String#sub	A			instance methods							<pre><code>sub(pattern, replacement)         → new_str\nsub(pattern, hash)                → new_str\nsub(pattern) {|match| block }     → new_str</code></pre>Returns a copy of str with the first occurrence of pattern replaced by the second argument. The pattern is typically a Regexp; if given as a String, any regular expression metacharacters it contains will be interpreted literally, e.g. '\\d' will match a backlash followed by ‘d’, instead of a digit.<br>If replacement is a String it will be substituted for the matched text. It may contain back-references to the pattern’s capture groups of the form "\d", where d is a group number, or "\k<n>", where n is a group name. If it is a double-quoted string, both back-references must be preceded by an additional backslash. However, within replacement the special match variables, such as &$, will not refer to the current match. If replacement is a String that looks like a pattern’s capture group but is actually not a pattern capture group e.g. "\'", then it will have to be preceded by two backslashes like so "\\'".<br>If the second argument is a Hash, and the matched text is one of its keys, the corresponding value is the replacement string.<br>In the block form, the current match string is passed in as a parameter, and variables such as $1, $2, $`, $&, and $' will be set appropriately. The value returned by the block will be substituted for the match on each call.<br>The result inherits any tainting in the original string or any supplied replacement string.<pre><code>"hello".sub(/[aeiou]/, '*')                  #=> "h*llo"\n"hello".sub(/([aeiou])/, '<\1>')             #=> "h<e>llo"\n"hello".sub(/./) {|s| s.ord.to_s + ' ' }     #=> "104 ello"\n"hello".sub(/(?<foo>[aeiou])/, '*\k<foo>*')  #=> "h*e*llo"\n'Is SHELL your preferred shell?'.sub(/[[:upper:]]{2,}/, ENV)\n #=> "Is /bin/bash your preferred shell?"\n</code></pre>	http://ruby-doc.org/core/String.html#method-i-sub
String#sub!	A			instance methods							<pre><code>sub!(pattern, replacement)          → str or nil\nsub!(pattern) {|match| block }      → str or nil</code></pre>Performs the same substitution as #sub in-place.<br>Returns str if a substitution was performed or nil if no substitution was performed.	http://ruby-doc.org/core/String.html#method-i-sub-21
String#succ	A			instance methods							<pre><code>succ   → new_str</code></pre>Returns the successor to str. The successor is calculated by incrementing characters starting from the rightmost alphanumeric (or the rightmost character if there are no alphanumerics) in the string. Incrementing a digit always results in another digit, and incrementing a letter results in another letter of the same case. Incrementing nonalphanumerics uses the underlying character set’s collating sequence.<br>If the increment generates a “carry,” the character to the left of it is incremented. This process repeats until there is no carry, adding an additional character if necessary.<pre><code>"abcd".succ        #=> "abce"\n"THX1138".succ     #=> "THX1139"\n"<<koala>>".succ   #=> "<<koalb>>"\n"1999zzz".succ     #=> "2000aaa"\n"ZZZ9999".succ     #=> "AAAA0000"\n"***".succ         #=> "**+"\n</code></pre>	http://ruby-doc.org/core/String.html#method-i-succ
String#succ!	A			instance methods							<pre><code>succ!   → str</code></pre>Equivalent to String#succ, but modifies the receiver in place.	http://ruby-doc.org/core/String.html#method-i-succ-21
String#sum	A			instance methods							<pre><code>sum(n=16)   → integer</code></pre>Returns a basic n-bit checksum of the characters in str, where n is the optional Fixnum parameter, defaulting to 16. The result is simply the sum of the binary value of each byte in str modulo 2**n - 1. This is not a particularly good checksum.	http://ruby-doc.org/core/String.html#method-i-sum
String#swapcase	A			instance methods							<pre><code>swapcase   → new_str</code></pre>Returns a copy of str with uppercase alphabetic characters converted to lowercase and lowercase characters converted to uppercase. Note: case conversion is effective only in ASCII region.<pre><code>"Hello".swapcase          #=> "hELLO"\n"cYbEr_PuNk11".swapcase   #=> "CyBeR_pUnK11"\n</code></pre>	http://ruby-doc.org/core/String.html#method-i-swapcase
String#swapcase!	A			instance methods							<pre><code>swapcase!   → str or nil</code></pre>Equivalent to String#swapcase, but modifies the receiver in place, returning str, or nil if no changes were made. Note: case conversion is effective only in ASCII region.	http://ruby-doc.org/core/String.html#method-i-swapcase-21
String#to_c	A			instance methods							<pre><code>to_c  →  complex</code></pre>Returns a complex which denotes the string form. The parser ignores leading whitespaces and trailing garbage. Any digit sequences can be separated by an underscore. Returns zero for null or garbage string.<pre><code>'9'.to_c           #=> (9+0i)\n'2.5'.to_c         #=> (2.5+0i)\n'2.5/1'.to_c       #=> ((5/2)+0i)\n'-3/2'.to_c        #=> ((-3/2)+0i)\n'-i'.to_c          #=> (0-1i)\n'45i'.to_c         #=> (0+45i)\n'3-4i'.to_c        #=> (3-4i)\n'-4e2-4e-2i'.to_c  #=> (-400.0-0.04i)\n'-0.0-0.0i'.to_c   #=> (-0.0-0.0i)\n'1/2+3/4i'.to_c    #=> ((1/2)+(3/4)*i)\n'ruby'.to_c        #=> (0+0i)\n</code></pre>See Kernel.Complex.	http://ruby-doc.org/core/String.html#method-i-to_c
String#to_f	A			instance methods							<pre><code>to_f   → float</code></pre>Returns the result of interpreting leading characters in str as a floating point number. Extraneous characters past the end of a valid number are ignored. If there is not a valid number at the start of str, 0.0 is returned. This method never raises an exception.<pre><code>"123.45e1".to_f        #=> 1234.5\n"45.67 degrees".to_f   #=> 45.67\n"thx1138".to_f         #=> 0.0\n</code></pre>	http://ruby-doc.org/core/String.html#method-i-to_f
String#to_i	A			instance methods							<pre><code>to_i(base=10)   → integer</code></pre>Returns the result of interpreting leading characters in str as an integer base base (between 2 and 36). Extraneous characters past the end of a valid number are ignored. If there is not a valid number at the start of str, 0 is returned. This method never raises an exception when base is valid.<pre><code>"12345".to_i             #=> 12345\n"99 red balloons".to_i   #=> 99\n"0a".to_i                #=> 0\n"0a".to_i(16)            #=> 10\n"hello".to_i             #=> 0\n"1100101".to_i(2)        #=> 101\n"1100101".to_i(8)        #=> 294977\n"1100101".to_i(10)       #=> 1100101\n"1100101".to_i(16)       #=> 17826049\n</code></pre>	http://ruby-doc.org/core/String.html#method-i-to_i
String#to_r	A			instance methods							<pre><code>to_r  →  rational</code></pre>Returns a rational which denotes the string form. The parser ignores leading whitespaces and trailing garbage. Any digit sequences can be separated by an underscore. Returns zero for null or garbage string.<br>NOTE: ‘0.3’.to_r isn’t the same as 0.3.to_r. The former is equivalent to ‘3/10’.to_r, but the latter isn’t so.<pre><code>'  2  '.to_r       #=> (2/1)\n'300/2'.to_r       #=> (150/1)\n'-9.2'.to_r        #=> (-46/5)\n'-9.2e2'.to_r      #=> (-920/1)\n'1_234_567'.to_r   #=> (1234567/1)\n'21 june 09'.to_r  #=> (21/1)\n'21/06/09'.to_r    #=> (7/2)\n'bwv 1079'.to_r    #=> (0/1)\n</code></pre>See Kernel.Rational.	http://ruby-doc.org/core/String.html#method-i-to_r
String#to_s	A			instance methods							<pre><code>to_s     → str\nto_str   → str</code></pre>Returns self.<br>If called on a subclass of String, converts the receiver to a String object.	http://ruby-doc.org/core/String.html#method-i-to_s
String#to_str	A			instance methods							<pre><code>to_str   → str</code></pre>Returns self.<br>If called on a subclass of String, converts the receiver to a String object.	http://ruby-doc.org/core/String.html#method-i-to_str
String#to_sym	A			instance methods							<pre><code>to_sym   → symbol</code></pre>Returns the Symbol corresponding to str, creating the symbol if it did not previously exist. See Symbol#id2name.<pre><code>"Koala".intern         #=> :Koala\ns = 'cat'.to_sym       #=> :cat\ns == :cat              #=> true\ns = '@cat'.to_sym      #=> :@cat\ns == :@cat             #=> true\n</code></pre>This can also be used to create symbols that cannot be represented using the :xxx notation.<pre><code>'cat and dog'.to_sym   #=> :"cat and dog"\n</code></pre>	http://ruby-doc.org/core/String.html#method-i-to_sym
String#tr	A			instance methods							<pre><code>tr(from_str, to_str)   => new_str</code></pre>Returns a copy of str with the characters in from_str replaced by the corresponding characters in to_str. If to_str is shorter than from_str, it is padded with its last character in order to maintain the correspondence.<pre><code>"hello".tr('el', 'ip')      #=> "hippo"\n"hello".tr('aeiou', '*')    #=> "h*ll*"\n"hello".tr('aeiou', 'AA*')  #=> "hAll*"\n</code></pre>Both strings may use the c1-c2 notation to denote ranges of characters, and from_str may start with a ^, which denotes all characters except those listed.<pre><code>"hello".tr('a-y', 'b-z')    #=> "ifmmp"\n"hello".tr('^aeiou', '*')   #=> "*e**o"\n</code></pre>The backslash character \ can be used to escape ^ or - and is otherwise ignored unless it appears at the end of a range or the end of the from_str or to_str:<pre><code>"hello^world".tr("\\^aeiou", "*") #=> "h*ll**w*rld"\n"hello-world".tr("a\\-eo", "*")   #=> "h*ll**w*rld"\n\n"hello\r\nworld".tr("\r", "")   #=> "hello\nworld"\n"hello\r\nworld".tr("\\r", "")  #=> "hello\r\nwold"\n"hello\r\nworld".tr("\\\r", "") #=> "hello\nworld"\n\n"X['\\b']".tr("X\\", "")   #=> "['b']"\n"X['\\b']".tr("X-\\]", "") #=> "'b'"\n</code></pre>	http://ruby-doc.org/core/String.html#method-i-tr
String#tr!	A			instance methods							<pre><code>tr!(from_str, to_str)   → str or nil</code></pre>Translates str in place, using the same rules as String#tr. Returns str, or nil if no changes were made.	http://ruby-doc.org/core/String.html#method-i-tr-21
String#tr_s	A			instance methods							<pre><code>tr_s(from_str, to_str)   → new_str</code></pre>Processes a copy of str as described under String#tr, then removes duplicate characters in regions that were affected by the translation.<pre><code>"hello".tr_s('l', 'r')     #=> "hero"\n"hello".tr_s('el', '*')    #=> "h*o"\n"hello".tr_s('el', 'hx')   #=> "hhxo"\n</code></pre>	http://ruby-doc.org/core/String.html#method-i-tr_s
String#tr_s!	A			instance methods							<pre><code>tr_s!(from_str, to_str)   → str or nil</code></pre>Performs String#tr_s processing on str in place, returning str, or nil if no changes were made.	http://ruby-doc.org/core/String.html#method-i-tr_s-21
String#unpack	A			instance methods							<pre><code>unpack(format)    →  anArray</code></pre>Decodes str (which may contain binary data) according to the format string, returning an array of each value extracted. The format string consists of a sequence of single-character directives, summarized in the table at the end of this entry. Each directive may be followed by a number, indicating the number of times to repeat with this directive. An asterisk (“*”) will use up all remaining elements. The directives sSiIlL may each be followed by an underscore (“_”) or exclamation mark (“!”) to use the underlying platform’s native size for the specified type; otherwise, it uses a platform-independent consistent size. Spaces are ignored in the format string. See also Array#pack.<pre><code>"abc \0\0abc \0\0".unpack('A6Z6')   #=> ["abc", "abc "]\n"abc \0\0".unpack('a3a3')           #=> ["abc", " \000\000"]\n"abc \0abc \0".unpack('Z*Z*')       #=> ["abc ", "abc "]\n"aa".unpack('b8B8')                 #=> ["10000110", "01100001"]\n"aaa".unpack('h2H2c')               #=> ["16", "61", 97]\n"\xfe\xff\xfe\xff".unpack('sS')     #=> [-2, 65534]\n"now=20is".unpack('M*')             #=> ["now is"]\n"whole".unpack('xax2aX2aX1aX2a')    #=> ["h", "e", "l", "l", "o"]\n</code></pre>This table summarizes the various formats and the Ruby classes returned by each.	http://ruby-doc.org/core/String.html#method-i-unpack
String#upcase	A			instance methods							<pre><code>upcase   → new_str</code></pre>Returns a copy of str with all lowercase letters replaced with their uppercase counterparts. The operation is locale insensitive—only characters “a” to “z” are affected. Note: case replacement is effective only in ASCII region.<pre><code>"hEllO".upcase   #=> "HELLO"\n</code></pre>	http://ruby-doc.org/core/String.html#method-i-upcase
String#upcase!	A			instance methods							<pre><code>upcase!   → str or nil</code></pre>Upcases the contents of str, returning nil if no changes were made. Note: case replacement is effective only in ASCII region.	http://ruby-doc.org/core/String.html#method-i-upcase-21
String#upto	A			instance methods							<pre><code>upto(other_str, exclusive=false) {|s| block }   → str\nupto(other_str, exclusive=false)                → an_enumerator</code></pre>Iterates through successive values, starting at str and ending at other_str inclusive, passing each value in turn to the block. The String#succ method is used to generate each value. If optional second argument exclusive is omitted or is false, the last value will be included; otherwise it will be excluded.<br>If no block is given, an enumerator is returned instead.<pre><code>"a8".upto("b6") {|s| print s, ' ' }\nfor s in "a8".."b6"\n  print s, ' '\nend\n</code></pre>produces:<pre><code>a8 a9 b0 b1 b2 b3 b4 b5 b6\na8 a9 b0 b1 b2 b3 b4 b5 b6\n</code></pre>If str and other_str contains only ascii numeric characters, both are recognized as decimal numbers. In addition, the width of string (e.g. leading zeros) is handled appropriately.<pre><code>"9".upto("11").to_a   #=> ["9", "10", "11"]\n"25".upto("5").to_a   #=> []\n"07".upto("11").to_a  #=> ["07", "08", "09", "10", "11"]\n</code></pre>	http://ruby-doc.org/core/String.html#method-i-upto
String#valid_encoding?	A			instance methods							<pre><code>valid_encoding?  → true or false</code></pre>Returns true for a string which encoded correctly.<pre><code>"\xc2\xa1".force_encoding("UTF-8").valid_encoding?  #=> true\n"\xc2".force_encoding("UTF-8").valid_encoding?      #=> false\n"\x80".force_encoding("UTF-8").valid_encoding?      #=> false\n</code></pre>	http://ruby-doc.org/core/String.html#method-i-valid_encoding-3F
Float	A			classes							Float objects represent inexact real numbers using the native architecture's double-precision floating point representation.<br>Floating point has a different arithmetic and is an inexact number. So you should know its esoteric system. see following:<br>docs.sun.com/source/806-3568/ncg_goldberg.html<br>wiki.github.com/rdp/ruby_tutorials_core/ruby-talk-faq#wiki-floats_imprecise<br>en.wikipedia.org/wiki/Floating_point#Accuracy_problems	http://ruby-doc.org/core/Float.html
Float#%	A			instance methods							<pre><code>float % other        →  float</code></pre>Return the modulo after division of float by other.<pre><code>6543.21.modulo(137)      #=> 104.21\n6543.21.modulo(137.24)   #=> 92.9299999999996\n</code></pre>	http://ruby-doc.org/core/Float.html#method-i-25
Float#*	A			instance methods							<pre><code>float * other  →  float</code></pre>Returns a new float which is the product of float and other.	http://ruby-doc.org/core/Float.html#method-i-2A
Float#**	A			instance methods							<pre><code>float ** other  →  float</code></pre>Raises float to the power of other.<pre><code>2.0**3      #=> 8.0\n</code></pre>	http://ruby-doc.org/core/Float.html#method-i-2A-2A
Float#+	A			instance methods							<pre><code>float + other  →  float</code></pre>Returns a new float which is the sum of float and other.	http://ruby-doc.org/core/Float.html#method-i-2B
Float#-	A			instance methods							<pre><code>float - other  →  float</code></pre>Returns a new float which is the difference of float and other.	http://ruby-doc.org/core/Float.html#method-i-2D
Float#-@	A			instance methods							<pre><code>-float  →  float</code></pre>Returns float, negated.	http://ruby-doc.org/core/Float.html#method-i-2D-40
Float#/	A			instance methods							<pre><code>float / other  →  float</code></pre>Returns a new float which is the result of dividing float by other.	http://ruby-doc.org/core/Float.html#method-i-2F
Float#<	A			instance methods							<pre><code>float < real  →  true or false</code></pre>Returns true if float is less than real.<br>The result of NaN < NaN is undefined, so the implementation-dependent value is returned.	http://ruby-doc.org/core/Float.html#method-i-3C
Float#<=	A			instance methods							<pre><code>float <= real  →  true or false</code></pre>Returns true if float is less than or equal to real.<br>The result of NaN <= NaN is undefined, so the implementation-dependent value is returned.	http://ruby-doc.org/core/Float.html#method-i-3C-3D
Float#<=>	A			instance methods							<pre><code>float <=> real  →  -1, 0, +1 or nil</code></pre>Returns -1, 0, +1 or nil depending on whether float is less than, equal to, or greater than real. This is the basis for the tests in Comparable.<br>The result of NaN <=> NaN is undefined, so the implementation-dependent value is returned.<br>nil is returned if the two values are incomparable.	http://ruby-doc.org/core/Float.html#method-i-3C-3D-3E
Float#==	A			instance methods							<pre><code>float == obj  →  true or false</code></pre>Returns true only if obj has the same value as float. Contrast this with #eql?, which requires obj to be a Float.<br>The result of NaN == NaN is undefined, so the implementation-dependent value is returned.<pre><code>1.0 == 1   #=> true\n</code></pre>	http://ruby-doc.org/core/Float.html#method-i-3D-3D
Float#===	A			instance methods							<pre><code>float == obj  →  true or false</code></pre>Returns true only if obj has the same value as float. Contrast this with #eql?, which requires obj to be a Float.<br>The result of NaN == NaN is undefined, so the implementation-dependent value is returned.<pre><code>1.0 == 1   #=> true\n</code></pre>	http://ruby-doc.org/core/Float.html#method-i-3D-3D-3D
Float#>	A			instance methods							<pre><code>float > real  →  true or false</code></pre>Returns true if float is greater than real.<br>The result of NaN > NaN is undefined, so the implementation-dependent value is returned.	http://ruby-doc.org/core/Float.html#method-i-3E
Float#>=	A			instance methods							<pre><code>float >= real  →  true or false</code></pre>Returns true if float is greater than or equal to real.<br>The result of NaN >= NaN is undefined, so the implementation-dependent value is returned.	http://ruby-doc.org/core/Float.html#method-i-3E-3D
Float#abs	A			instance methods							<pre><code>abs        →  float</code></pre>Returns the absolute value of float.<pre><code>(-34.56).abs   #=> 34.56\n-34.56.abs     #=> 34.56\n</code></pre>	http://ruby-doc.org/core/Float.html#method-i-abs
Float#angle	A			instance methods							<pre><code>angle  →  0 or float</code></pre>Returns 0 if the value is positive, pi otherwise.	http://ruby-doc.org/core/Float.html#method-i-angle
Float#arg	A			instance methods							<pre><code>arg    →  0 or float</code></pre>Returns 0 if the value is positive, pi otherwise.	http://ruby-doc.org/core/Float.html#method-i-arg
Float#ceil	A			instance methods							<pre><code>ceil  →  integer</code></pre>Returns the smallest Integer greater than or equal to float.<pre><code>1.2.ceil      #=> 2\n2.0.ceil      #=> 2\n(-1.2).ceil   #=> -1\n(-2.0).ceil   #=> -2\n</code></pre>	http://ruby-doc.org/core/Float.html#method-i-ceil
Float#coerce	A			instance methods							<pre><code>coerce(numeric)  →  array</code></pre>Returns an array with both a numeric and a float represented as Float objects.<br>This is achieved by converting a numeric to a Float.<pre><code>1.2.coerce(3)       #=> [3.0, 1.2]\n2.5.coerce(1.1)     #=> [1.1, 2.5]\n</code></pre>	http://ruby-doc.org/core/Float.html#method-i-coerce
Float#denominator	A			instance methods							<pre><code>denominator  →  integer</code></pre>Returns the denominator (always positive). The result is machine dependent.<br>See numerator.	http://ruby-doc.org/core/Float.html#method-i-denominator
Float#divmod	A			instance methods							<pre><code>divmod(numeric)  →  array</code></pre>See Numeric#divmod.<pre><code>42.0.divmod 6 #=> [7, 0.0]\n42.0.divmod 5 #=> [8, 2.0]\n</code></pre>	http://ruby-doc.org/core/Float.html#method-i-divmod
Float#eql?	A			instance methods							<pre><code>eql?(obj)  →  true or false</code></pre>Returns true only if obj is a Float with the same value as float. Contrast this with Float#==, which performs type conversions.<br>The result of NaN.eql?(NaN) is undefined, so the implementation-dependent value is returned.<pre><code>1.0.eql?(1)   #=> false\n</code></pre>	http://ruby-doc.org/core/Float.html#method-i-eql-3F
Float#fdiv	A			instance methods							<pre><code>fdiv(numeric)  →  float</code></pre>Returns float / numeric, same as Float#/.	http://ruby-doc.org/core/Float.html#method-i-fdiv
Float#finite?	A			instance methods							<pre><code>finite?  →  true or false</code></pre>Returns true if float is a valid IEEE floating point number (it is not infinite, and #nan? is false).	http://ruby-doc.org/core/Float.html#method-i-finite-3F
Float#floor	A			instance methods							<pre><code>floor  →  integer</code></pre>Returns the largest integer less than or equal to float.<pre><code>1.2.floor      #=> 1\n2.0.floor      #=> 2\n(-1.2).floor   #=> -2\n(-2.0).floor   #=> -2\n</code></pre>	http://ruby-doc.org/core/Float.html#method-i-floor
Float#hash	A			instance methods							<pre><code>hash  →  integer</code></pre>Returns a hash code for this float.<br>See also Object#hash.	http://ruby-doc.org/core/Float.html#method-i-hash
Float#infinite?	A			instance methods							<pre><code>infinite?  →  nil, -1, +1</code></pre>Return values corresponding to the value of float:<br>nil<br>-1<br>1<br>For example:<pre><code>(0.0).infinite?        #=> nil\n(-1.0/0.0).infinite?   #=> -1\n(+1.0/0.0).infinite?   #=> 1\n</code></pre>	http://ruby-doc.org/core/Float.html#method-i-infinite-3F
Float#inspect	A			instance methods								http://ruby-doc.org/core/Float.html#method-i-inspect
Float#magnitude	A			instance methods							<pre><code>magnitude  →  float</code></pre>Returns the absolute value of float.<pre><code>(-34.56).abs   #=> 34.56\n-34.56.abs     #=> 34.56\n</code></pre>	http://ruby-doc.org/core/Float.html#method-i-magnitude
Float#modulo	A			instance methods							<pre><code>modulo(other)  →  float</code></pre>Return the modulo after division of float by other.<pre><code>6543.21.modulo(137)      #=> 104.21\n6543.21.modulo(137.24)   #=> 92.9299999999996\n</code></pre>	http://ruby-doc.org/core/Float.html#method-i-modulo
Float#nan?	A			instance methods							<pre><code>nan?  →  true or false</code></pre>Returns true if float is an invalid IEEE floating point number.<pre><code>a = -1.0      #=> -1.0\na.nan?        #=> false\na = 0.0/0.0   #=> NaN\na.nan?        #=> true\n</code></pre>	http://ruby-doc.org/core/Float.html#method-i-nan-3F
Float#negative?	A			instance methods							<pre><code>negative? →  true or false</code></pre>Returns true if float is less than 0.	http://ruby-doc.org/core/Float.html#method-i-negative-3F
Float#next_float	A			instance methods							<pre><code>next_float  →  float</code></pre>Returns the next representable floating-point number.<br>Float::MAX.next_float and Float::INFINITY.next_float is Float::INFINITY.<br>Float::NAN.next_float is Float::NAN.<br>For example:<pre><code>p 0.01.next_float  #=> 0.010000000000000002\np 1.0.next_float   #=> 1.0000000000000002\np 100.0.next_float #=> 100.00000000000001\n\np 0.01.next_float - 0.01   #=> 1.734723475976807e-18\np 1.0.next_float - 1.0     #=> 2.220446049250313e-16\np 100.0.next_float - 100.0 #=> 1.4210854715202004e-14\n\nf = 0.01; 20.times { printf "%-20a %s\n", f, f.to_s; f = f.next_float }\n#=> 0x1.47ae147ae147bp-7 0.01\n#   0x1.47ae147ae147cp-7 0.010000000000000002\n#   0x1.47ae147ae147dp-7 0.010000000000000004\n#   0x1.47ae147ae147ep-7 0.010000000000000005\n#   0x1.47ae147ae147fp-7 0.010000000000000007\n#   0x1.47ae147ae148p-7  0.010000000000000009\n#   0x1.47ae147ae1481p-7 0.01000000000000001\n#   0x1.47ae147ae1482p-7 0.010000000000000012\n#   0x1.47ae147ae1483p-7 0.010000000000000014\n#   0x1.47ae147ae1484p-7 0.010000000000000016\n#   0x1.47ae147ae1485p-7 0.010000000000000018\n#   0x1.47ae147ae1486p-7 0.01000000000000002\n#   0x1.47ae147ae1487p-7 0.010000000000000021\n#   0x1.47ae147ae1488p-7 0.010000000000000023\n#   0x1.47ae147ae1489p-7 0.010000000000000024\n#   0x1.47ae147ae148ap-7 0.010000000000000026\n#   0x1.47ae147ae148bp-7 0.010000000000000028\n#   0x1.47ae147ae148cp-7 0.01000000000000003\n#   0x1.47ae147ae148dp-7 0.010000000000000031\n#   0x1.47ae147ae148ep-7 0.010000000000000033\n\nf = 0.0\n100.times { f += 0.1 }\np f                            #=> 9.99999999999998       # should be 10.0 in the ideal world.\np 10-f                         #=> 1.9539925233402755e-14 # the floating-point error.\np(10.0.next_float-10)          #=> 1.7763568394002505e-15 # 1 ulp (units in the last place).\np((10-f)/(10.0.next_float-10)) #=> 11.0                   # the error is 11 ulp.\np((10-f)/(10*Float::EPSILON))  #=> 8.8                    # approximation of the above.\np "%a" % f                     #=> "0x1.3fffffffffff5p+3" # the last hex digit is 5.  16 - 5 = 11 ulp.\n</code></pre>	http://ruby-doc.org/core/Float.html#method-i-next_float
Float#numerator	A			instance methods							<pre><code>numerator  →  integer</code></pre>Returns the numerator. The result is machine dependent.<pre><code>n = 0.3.numerator    #=> 5404319552844595\nd = 0.3.denominator  #=> 18014398509481984\nn.fdiv(d)            #=> 0.3\n</code></pre>	http://ruby-doc.org/core/Float.html#method-i-numerator
Float#phase	A			instance methods							<pre><code>phase  →  0 or float</code></pre>Returns 0 if the value is positive, pi otherwise.	http://ruby-doc.org/core/Float.html#method-i-phase
Float#positive?	A			instance methods							<pre><code>positive? →  true or false</code></pre>Returns true if float is greater than 0.	http://ruby-doc.org/core/Float.html#method-i-positive-3F
Float#prev_float	A			instance methods							<pre><code>prev_float  →  float</code></pre>Returns the previous representable floating-point number.<br>(-Float::MAX).prev_float and (-Float::INFINITY).prev_float is -Float::INFINITY.<br>Float::NAN.prev_float is Float::NAN.<br>For example:<pre><code>p 0.01.prev_float  #=> 0.009999999999999998\np 1.0.prev_float   #=> 0.9999999999999999\np 100.0.prev_float #=> 99.99999999999999\n\np 0.01 - 0.01.prev_float   #=> 1.734723475976807e-18\np 1.0 - 1.0.prev_float     #=> 1.1102230246251565e-16\np 100.0 - 100.0.prev_float #=> 1.4210854715202004e-14\n\nf = 0.01; 20.times { printf "%-20a %s\n", f, f.to_s; f = f.prev_float }\n#=> 0x1.47ae147ae147bp-7 0.01\n#   0x1.47ae147ae147ap-7 0.009999999999999998\n#   0x1.47ae147ae1479p-7 0.009999999999999997\n#   0x1.47ae147ae1478p-7 0.009999999999999995\n#   0x1.47ae147ae1477p-7 0.009999999999999993\n#   0x1.47ae147ae1476p-7 0.009999999999999992\n#   0x1.47ae147ae1475p-7 0.00999999999999999\n#   0x1.47ae147ae1474p-7 0.009999999999999988\n#   0x1.47ae147ae1473p-7 0.009999999999999986\n#   0x1.47ae147ae1472p-7 0.009999999999999985\n#   0x1.47ae147ae1471p-7 0.009999999999999983\n#   0x1.47ae147ae147p-7  0.009999999999999981\n#   0x1.47ae147ae146fp-7 0.00999999999999998\n#   0x1.47ae147ae146ep-7 0.009999999999999978\n#   0x1.47ae147ae146dp-7 0.009999999999999976\n#   0x1.47ae147ae146cp-7 0.009999999999999974\n#   0x1.47ae147ae146bp-7 0.009999999999999972\n#   0x1.47ae147ae146ap-7 0.00999999999999997\n#   0x1.47ae147ae1469p-7 0.009999999999999969\n#   0x1.47ae147ae1468p-7 0.009999999999999967\n</code></pre>	http://ruby-doc.org/core/Float.html#method-i-prev_float
Float#quo	A			instance methods							<pre><code>quo(numeric)  →  float</code></pre>Returns float / numeric, same as Float#/.	http://ruby-doc.org/core/Float.html#method-i-quo
Float#rationalize	A			instance methods							<pre><code>rationalize([eps])  →  rational</code></pre>Returns a simpler approximation of the value (flt-|eps| <= result <= flt+|eps|). if the optional eps is not given, it will be chosen automatically.<pre><code>0.3.rationalize          #=> (3/10)\n1.333.rationalize        #=> (1333/1000)\n1.333.rationalize(0.01)  #=> (4/3)\n</code></pre>See to_r.	http://ruby-doc.org/core/Float.html#method-i-rationalize
Float#round	A			instance methods							<pre><code>round([ndigits])  →  integer or float</code></pre>Rounds float to a given precision in decimal digits (default 0 digits).<br>Precision may be negative. Returns a floating point number when ndigits is more than zero.<pre><code>1.4.round      #=> 1\n1.5.round      #=> 2\n1.6.round      #=> 2\n(-1.5).round   #=> -2\n\n1.234567.round(2)  #=> 1.23\n1.234567.round(3)  #=> 1.235\n1.234567.round(4)  #=> 1.2346\n1.234567.round(5)  #=> 1.23457\n\n34567.89.round(-5) #=> 0\n34567.89.round(-4) #=> 30000\n34567.89.round(-3) #=> 35000\n34567.89.round(-2) #=> 34600\n34567.89.round(-1) #=> 34570\n34567.89.round(0)  #=> 34568\n34567.89.round(1)  #=> 34567.9\n34567.89.round(2)  #=> 34567.89\n34567.89.round(3)  #=> 34567.89\n</code></pre>	http://ruby-doc.org/core/Float.html#method-i-round
Float#to_f	A			instance methods							<pre><code>to_f  →  self</code></pre>Since float is already a float, returns self.	http://ruby-doc.org/core/Float.html#method-i-to_f
Float#to_i	A			instance methods							<pre><code>to_i      →  integer\nto_int    →  integer</code></pre>Returns the float truncated to an Integer.<br>Synonyms are to_i, to_int, and truncate.	http://ruby-doc.org/core/Float.html#method-i-to_i
Float#to_int	A			instance methods							<pre><code>to_int    →  integer</code></pre>Returns the float truncated to an Integer.<br>Synonyms are to_i, to_int, and truncate.	http://ruby-doc.org/core/Float.html#method-i-to_int
Float#to_r	A			instance methods							<pre><code>to_r  →  rational</code></pre>Returns the value as a rational.<br>NOTE: 0.3.to_r isn’t the same as ‘0.3’.to_r. The latter is equivalent to ‘3/10’.to_r, but the former isn’t so.<pre><code>2.0.to_r    #=> (2/1)\n2.5.to_r    #=> (5/2)\n-0.75.to_r  #=> (-3/4)\n0.0.to_r    #=> (0/1)\n</code></pre>See rationalize.	http://ruby-doc.org/core/Float.html#method-i-to_r
Float#to_s	A			instance methods							<pre><code>to_s  →  string</code></pre>Returns a string containing a representation of self. As well as a fixed or exponential form of the float, the call may return NaN, Infinity, and -Infinity.	http://ruby-doc.org/core/Float.html#method-i-to_s
Float#truncate	A			instance methods							<pre><code>truncate  →  integer</code></pre>Returns the float truncated to an Integer.<br>Synonyms are to_i, to_int, and truncate.	http://ruby-doc.org/core/Float.html#method-i-truncate
Float#zero?	A			instance methods							<pre><code>zero?  →  true or false</code></pre>Returns true if float is 0.0.	http://ruby-doc.org/core/Float.html#method-i-zero-3F
Fiber	A			classes							Fibers are primitives for implementing light weight cooperative concurrency in Ruby. Basically they are a means of creating code blocks that can be paused and resumed, much like threads. The main difference is that they are never preempted and that the scheduling must be done by the programmer and not the VM.<br>As opposed to other stackless light weight concurrency models, each fiber comes with a small 4KB stack. This enables the fiber to be paused from deeply nested function calls within the fiber block.<br>When a fiber is created it will not run automatically. Rather it must be explicitly asked to run using the Fiber#resume method. The code running inside the fiber can give up control by calling Fiber.yield in which case it yields control back to caller (the caller of the Fiber#resume).<br>Upon yielding or termination the Fiber returns the value of the last executed expression<br>For instance:<pre><code>fiber = Fiber.new do\n  Fiber.yield 1\n  2\nend\n\nputs fiber.resume\nputs fiber.resume\nputs fiber.resume\n</code></pre>produces<br>The Fiber#resume method accepts an arbitrary number of parameters, if it is the first call to resume then they will be passed as block arguments. Otherwise they will be the return value of the call to Fiber.yield<br>Example:<pre><code>fiber = Fiber.new do |first|\n  second = Fiber.yield first + 2\nend\n\nputs fiber.resume 10\nputs fiber.resume 14\nputs fiber.resume 18\n</code></pre>produces	http://ruby-doc.org/core/Fiber.html
Fiber::current	A			class methods							<pre><code>current() → fiber</code></pre>Returns the current fiber. You need to require 'fiber' before using this method. If you are not running in the context of a fiber this method will return the root fiber.	http://ruby-doc.org/core/Fiber.html#method-c-current
Fiber::yield	A			class methods							<pre><code>yield(args, ...) → obj</code></pre>Yields control back to the context that resumed the fiber, passing along any arguments that were passed to it. The fiber will resume processing at this point when resume is called next. Any arguments passed to the next resume will be the value that this Fiber.yield expression evaluates to.	http://ruby-doc.org/core/Fiber.html#method-c-yield
Fiber#alive?	A			instance methods							<pre><code>alive? → true or false</code></pre>Returns true if the fiber can still be resumed (or transferred to). After finishing execution of the fiber block this method will always return false. You need to require 'fiber' before using this method.	http://ruby-doc.org/core/Fiber.html#method-i-alive-3F
Fiber#resume	A			instance methods							<pre><code>resume(args, ...) → obj</code></pre>Resumes the fiber from the point at which the last Fiber.yield was called, or starts running it if it is the first call to resume. Arguments passed to resume will be the value of the Fiber.yield expression or will be passed as block parameters to the fiber’s block if this is the first resume.<br>Alternatively, when resume is called it evaluates to the arguments passed to the next Fiber.yield statement inside the fiber’s block or to the block value if it runs to completion without any Fiber.yield	http://ruby-doc.org/core/Fiber.html#method-i-resume
Fiber#transfer	A			instance methods							<pre><code>transfer(args, ...) → obj</code></pre>Transfer control to another fiber, resuming it from where it last stopped or starting it if it was not resumed before. The calling fiber will be suspended much like in a call to Fiber.yield. You need to require 'fiber' before using this method.<br>The fiber which receives the transfer call is treats it much like a resume call. Arguments passed to transfer are treated like those passed to resume.<br>You cannot resume a fiber that transferred control to another one. This will cause a double resume error. You need to transfer control back to this fiber before it can yield and resume.<br>Example:<pre><code>fiber1 = Fiber.new do\n  puts "In Fiber 1"\n  Fiber.yield\nend\n\nfiber2 = Fiber.new do\n  puts "In Fiber 2"\n  fiber1.transfer\n  puts "Never see this message"\nend\n\nfiber3 = Fiber.new do\n  puts "In Fiber 3"\nend\n\nfiber2.resume\nfiber3.resume\n</code></pre>produces<pre><code>In fiber 2\nIn fiber 1\nIn fiber 3\n</code></pre>	http://ruby-doc.org/core/Fiber.html#method-i-transfer
FiberError	A			classes							Raised when an invalid operation is attempted on a Fiber, in particular when attempting to call/resume a dead fiber, attempting to yield from the root fiber, or calling a fiber across threads.<pre><code>fiber = Fiber.new{}\nfiber.resume #=> nil\nfiber.resume #=> FiberError: dead fiber called\n</code></pre>	http://ruby-doc.org/core/FiberError.html
Continuation	A			classes							Continuation objects are generated by Kernel#callcc, after having +require+d continuation. They hold a return address and execution context, allowing a nonlocal return to the end of the callcc block from anywhere within a program. Continuations are somewhat analogous to a structured version of C's setjmp/longjmp (although they contain more state, so you might consider them closer to threads).<br>For instance:<pre><code>require "continuation"\narr = [ "Freddie", "Herbie", "Ron", "Max", "Ringo" ]\ncallcc{|cc| $cc = cc}\nputs(message = arr.shift)\n$cc.call unless message =~ /Max/\n</code></pre>produces:<pre><code>Freddie\nHerbie\nRon\nMax\n</code></pre>Also you can call callcc in other methods:<pre><code>require "continuation"\n\ndef g\n  arr = [ "Freddie", "Herbie", "Ron", "Max", "Ringo" ]\n  cc = callcc { |cc| cc }\n  puts arr.shift\n  return cc, arr.size\nend\n\ndef f\n  c, size = g\n  c.call(c) if size > 1\nend\n\nf\n</code></pre>This (somewhat contrived) example allows the inner loop to abandon processing early:<pre><code>require "continuation"\ncallcc {|cont|\n  for i in 0..4\n    print "\n#{i}: "\n    for j in i*5...(i+1)*5\n      cont.call() if j == 17\n      printf "%3d", j\n    end\n  end\n}\nputs\n</code></pre>produces:	http://ruby-doc.org/core/Continuation.html
Continuation#[]	A			instance methods							<pre><code>cont[args, ...]</code></pre>Invokes the continuation. The program continues from the end of the callcc block. If no arguments are given, the original callcc returns nil. If one argument is given, callcc returns it. Otherwise, an array containing args is returned.<pre><code>callcc {|cont|  cont.call }           #=> nil\ncallcc {|cont|  cont.call 1 }         #=> 1\ncallcc {|cont|  cont.call 1, 2, 3 }   #=> [1, 2, 3]\n</code></pre>	http://ruby-doc.org/core/Continuation.html#method-i-5B-5D
Continuation#call	A			instance methods							<pre><code>call(args, ...)</code></pre>Invokes the continuation. The program continues from the end of the callcc block. If no arguments are given, the original callcc returns nil. If one argument is given, callcc returns it. Otherwise, an array containing args is returned.<pre><code>callcc {|cont|  cont.call }           #=> nil\ncallcc {|cont|  cont.call 1 }         #=> 1\ncallcc {|cont|  cont.call 1, 2, 3 }   #=> [1, 2, 3]\n</code></pre>	http://ruby-doc.org/core/Continuation.html#method-i-call
Dir	A			classes							Objects of class Dir are directory streams representing directories in the underlying file system. They provide a variety of ways to list directories and their contents. See also File.<br>The directory used in these examples contains the two regular files (config.h and main.rb), the parent directory (..), and the directory itself (.).	http://ruby-doc.org/core/Dir.html
Dir::[]	A			class methods							<pre><code>Dir[ string [, string ...] ] → array</code></pre>Equivalent to calling Dir.glob([string,...],0).	http://ruby-doc.org/core/Dir.html#method-c-5B-5D
Dir::chdir	A			class methods							<pre><code>chdir( [ string] ) → 0\nchdir( [ string] ) {| path | block }  → anObject</code></pre>Changes the current working directory of the process to the given string. When called without an argument, changes the directory to the value of the environment variable HOME, or LOGDIR. SystemCallError (probably Errno::ENOENT) if the target directory does not exist.<br>If a block is given, it is passed the name of the new current directory, and the block is executed with that as the current directory. The original working directory is restored when the block exits. The return value of chdir is the value of the block. chdir blocks can be nested, but in a multi-threaded program an error will be raised if a thread attempts to open a chdir block while another thread has one open.<pre><code>Dir.chdir("/var/spool/mail")\nputs Dir.pwd\nDir.chdir("/tmp") do\n  puts Dir.pwd\n  Dir.chdir("/usr") do\n    puts Dir.pwd\n  end\n  puts Dir.pwd\nend\nputs Dir.pwd\n</code></pre>produces:	http://ruby-doc.org/core/Dir.html#method-c-chdir
Dir::chroot	A			class methods							<pre><code>chroot( string ) → 0</code></pre>Changes this process’s idea of the file system root. Only a privileged process may make this call. Not available on all platforms. On Unix systems, see chroot(2) for more information.	http://ruby-doc.org/core/Dir.html#method-c-chroot
Dir::delete	A			class methods							<pre><code>delete( string ) → 0</code></pre>Deletes the named directory. Raises a subclass of SystemCallError if the directory isn’t empty.	http://ruby-doc.org/core/Dir.html#method-c-delete
Dir::entries	A			class methods							<pre><code>entries( dirname )                → array\nentries( dirname, encoding: enc ) → array</code></pre>Returns an array containing all of the filenames in the given directory. Will raise a SystemCallError if the named directory doesn’t exist.<br>The optional enc argument specifies the encoding of the directory. If not specified, the filesystem encoding is used.<pre><code>Dir.entries("testdir")   #=> [".", "..", "config.h", "main.rb"]\n</code></pre>	http://ruby-doc.org/core/Dir.html#method-c-entries
Dir::exist?	A			class methods							<pre><code>exist?(file_name)   →  true or false</code></pre>Returns true if the named file is a directory, false otherwise.	http://ruby-doc.org/core/Dir.html#method-c-exist-3F
Dir::exists?	A			class methods							<pre><code>exists?(file_name)  →  true or false</code></pre>Deprecated method. Don’t use.	http://ruby-doc.org/core/Dir.html#method-c-exists-3F
Dir::foreach	A			class methods							<pre><code>foreach( dirname ) {| filename | block }                 → nil\nforeach( dirname, encoding: enc ) {| filename | block }  → nil\nforeach( dirname )                                       → an_enumerator\nforeach( dirname, encoding: enc )                        → an_enumerator</code></pre>Calls the block once for each entry in the named directory, passing the filename of each entry as a parameter to the block.<br>If no block is given, an enumerator is returned instead.<pre><code>Dir.foreach("testdir") {|x| puts "Got #{x}" }\n</code></pre>produces:	http://ruby-doc.org/core/Dir.html#method-c-foreach
Dir::getwd	A			class methods							<pre><code>getwd → string</code></pre>Returns the path to the current working directory of this process as a string.<pre><code>Dir.chdir("/tmp")   #=> 0\nDir.getwd           #=> "/tmp"\nDir.pwd             #=> "/tmp"\n</code></pre>	http://ruby-doc.org/core/Dir.html#method-c-getwd
Dir::glob	A			class methods							<pre><code>glob( pattern, [flags] ) → matches\nglob( pattern, [flags] ) { |filename| block }  → nil</code></pre>Expands pattern, which is an Array of patterns or a pattern String, and returns the results as matches or as arguments given to the block.<br>Note that this pattern is not a regexp, it’s closer to a shell glob. See File.fnmatch for the meaning of the flags parameter. Note that case sensitivity depends on your system (so File::FNM_CASEFOLD is ignored), as does the order in which the results are returned.<br>Matches any file. Can be restricted by other values in the glob. Equivalent to / .* /x in regexp.<br>Matches all files<br>Matches all files beginning with c<br>Matches all files ending with c<br>Match all files that have c in them (including at the beginning or end).<br>Note, this will not match Unix-like hidden files (dotfiles). In order to include those in the match results, you must use the File::FNM_DOTMATCH flag or something like "{*,.*}".<br>Matches directories recursively.<br>Matches any one character. Equivalent to /.{1}/ in regexp.<br>Matches any one character in set. Behaves exactly like character sets in Regexp, including set negation ([^a-z]).<br>Matches either literal p or literal q. Equivalent to pattern alternation in regexp.<br>Matching literals may be more than one character in length. More than two literals may be specified.<br>Escapes the next metacharacter.<br>Note that this means you cannot use backslash on windows as part of a glob, i.e. Dir["c:\foo*"] will not work, use Dir["c:/foo*"] instead.<br>Examples:<pre><code>Dir["config.?"]                     #=> ["config.h"]\nDir.glob("config.?")                #=> ["config.h"]\nDir.glob("*.[a-z][a-z]")            #=> ["main.rb"]\nDir.glob("*.[^r]*")                 #=> ["config.h"]\nDir.glob("*.{rb,h}")                #=> ["main.rb", "config.h"]\nDir.glob("*")                       #=> ["config.h", "main.rb"]\nDir.glob("*", File::FNM_DOTMATCH)   #=> [".", "..", "config.h", "main.rb"]\n\nrbfiles = File.join("**", "*.rb")\nDir.glob(rbfiles)                   #=> ["main.rb",\n                                    #    "lib/song.rb",\n                                    #    "lib/song/karaoke.rb"]\nlibdirs = File.join("**", "lib")\nDir.glob(libdirs)                   #=> ["lib"]\n\nlibrbfiles = File.join("**", "lib", "**", "*.rb")\nDir.glob(librbfiles)                #=> ["lib/song.rb",\n                                    #    "lib/song/karaoke.rb"]\n\nlibrbfiles = File.join("**", "lib", "*.rb")\nDir.glob(librbfiles)                #=> ["lib/song.rb"]\n</code></pre>	http://ruby-doc.org/core/Dir.html#method-c-glob
Dir::home	A			class methods							<pre><code>home()       → "/home/me"\nhome("root") → "/root"</code></pre>Returns the home directory of the current user or the named user if given.	http://ruby-doc.org/core/Dir.html#method-c-home
Dir::mkdir	A			class methods							<pre><code>mkdir( string [, integer] ) → 0</code></pre>Makes a new directory named by string, with permissions specified by the optional parameter anInteger. The permissions may be modified by the value of File::umask, and are ignored on NT. Raises a SystemCallError if the directory cannot be created. See also the discussion of permissions in the class documentation for File.<pre><code>Dir.mkdir(File.join(Dir.home, ".foo"), 0700) #=> 0\n</code></pre>	http://ruby-doc.org/core/Dir.html#method-c-mkdir
Dir::new	A			class methods							<pre><code>new( string ) → aDir\nnew( string, encoding: enc ) → aDir</code></pre>Returns a new directory object for the named directory.<br>The optional enc argument specifies the encoding of the directory. If not specified, the filesystem encoding is used.	http://ruby-doc.org/core/Dir.html#method-c-new
Dir::open	A			class methods							<pre><code>open( string ) → aDir\nopen( string, encoding: enc ) → aDir\nopen( string ) {| aDir | block } → anObject\nopen( string, encoding: enc ) {| aDir | block } → anObject</code></pre>The optional enc argument specifies the encoding of the directory. If not specified, the filesystem encoding is used.<br>With no block, open is a synonym for Dir::new. If a block is present, it is passed aDir as a parameter. The directory is closed at the end of the block, and Dir::open returns the value of the block.	http://ruby-doc.org/core/Dir.html#method-c-open
Dir::pwd	A			class methods							<pre><code>pwd → string</code></pre>Returns the path to the current working directory of this process as a string.<pre><code>Dir.chdir("/tmp")   #=> 0\nDir.getwd           #=> "/tmp"\nDir.pwd             #=> "/tmp"\n</code></pre>	http://ruby-doc.org/core/Dir.html#method-c-pwd
Dir::rmdir	A			class methods							<pre><code>rmdir( string ) → 0</code></pre>Deletes the named directory. Raises a subclass of SystemCallError if the directory isn’t empty.	http://ruby-doc.org/core/Dir.html#method-c-rmdir
Dir::unlink	A			class methods							<pre><code>unlink( string ) → 0</code></pre>Deletes the named directory. Raises a subclass of SystemCallError if the directory isn’t empty.	http://ruby-doc.org/core/Dir.html#method-c-unlink
Dir#close	A			instance methods							<pre><code>close → nil</code></pre>Closes the directory stream. Any further attempts to access dir will raise an IOError.<pre><code>d = Dir.new("testdir")\nd.close   #=> nil\n</code></pre>	http://ruby-doc.org/core/Dir.html#method-i-close
Dir#each	A			instance methods							<pre><code>each { |filename| block }  → dir\neach                       → an_enumerator</code></pre>Calls the block once for each entry in this directory, passing the filename of each entry as a parameter to the block.<br>If no block is given, an enumerator is returned instead.<pre><code>d = Dir.new("testdir")\nd.each  {|x| puts "Got #{x}" }\n</code></pre>produces:	http://ruby-doc.org/core/Dir.html#method-i-each
Dir#fileno	A			instance methods							<pre><code>fileno → integer</code></pre>Returns the file descriptor used in dir.<pre><code>d = Dir.new("..")\nd.fileno   #=> 8\n</code></pre>This method uses dirfd() function defined by POSIX 2008. NotImplementedError is raised on other platforms, such as Windows, which doesn’t provide the function.	http://ruby-doc.org/core/Dir.html#method-i-fileno
Dir#inspect	A			instance methods							<pre><code>inspect → string</code></pre>Return a string describing this Dir object.	http://ruby-doc.org/core/Dir.html#method-i-inspect
Dir#path	A			instance methods							<pre><code>path → string or nil</code></pre>Returns the path parameter passed to dir’s constructor.<pre><code>d = Dir.new("..")\nd.path   #=> ".."\n</code></pre>	http://ruby-doc.org/core/Dir.html#method-i-path
Dir#pos	A			instance methods							<pre><code>pos → integer</code></pre>Returns the current position in dir. See also Dir#seek.<pre><code>d = Dir.new("testdir")\nd.tell   #=> 0\nd.read   #=> "."\nd.tell   #=> 12\n</code></pre>	http://ruby-doc.org/core/Dir.html#method-i-pos
Dir#pos=	A			instance methods							<pre><code>pos = integer  → integer</code></pre>Synonym for Dir#seek, but returns the position parameter.<pre><code>d = Dir.new("testdir")   #=> #<Dir:0x401b3c40>\nd.read                   #=> "."\ni = d.pos                #=> 12\nd.read                   #=> ".."\nd.pos = i                #=> 12\nd.read                   #=> ".."\n</code></pre>	http://ruby-doc.org/core/Dir.html#method-i-pos-3D
Dir#read	A			instance methods							<pre><code>read → string or nil</code></pre>Reads the next entry from dir and returns it as a string. Returns nil at the end of the stream.<pre><code>d = Dir.new("testdir")\nd.read   #=> "."\nd.read   #=> ".."\nd.read   #=> "config.h"\n</code></pre>	http://ruby-doc.org/core/Dir.html#method-i-read
Dir#rewind	A			instance methods							<pre><code>rewind → dir</code></pre>Repositions dir to the first entry.<pre><code>d = Dir.new("testdir")\nd.read     #=> "."\nd.rewind   #=> #<Dir:0x401b3fb0>\nd.read     #=> "."\n</code></pre>	http://ruby-doc.org/core/Dir.html#method-i-rewind
Dir#seek	A			instance methods							<pre><code>seek( integer ) → dir</code></pre>Seeks to a particular location in dir. integer must be a value returned by Dir#tell.<pre><code>d = Dir.new("testdir")   #=> #<Dir:0x401b3c40>\nd.read                   #=> "."\ni = d.tell               #=> 12\nd.read                   #=> ".."\nd.seek(i)                #=> #<Dir:0x401b3c40>\nd.read                   #=> ".."\n</code></pre>	http://ruby-doc.org/core/Dir.html#method-i-seek
Dir#tell	A			instance methods							<pre><code>tell → integer</code></pre>Returns the current position in dir. See also Dir#seek.<pre><code>d = Dir.new("testdir")\nd.tell   #=> 0\nd.read   #=> "."\nd.tell   #=> 12\n</code></pre>	http://ruby-doc.org/core/Dir.html#method-i-tell
Dir#to_path	A			instance methods							<pre><code>to_path → string or nil</code></pre>Returns the path parameter passed to dir’s constructor.<pre><code>d = Dir.new("..")\nd.path   #=> ".."\n</code></pre>	http://ruby-doc.org/core/Dir.html#method-i-to_path
File	A			classes							A File is an abstraction of any file object accessible by the program and is closely associated with class IO. File includes the methods of module FileTest as class methods, allowing you to write (for example) File.exist?("foo").<br>In the description of File methods, permission bits are a platform-specific set of bits that indicate permissions of a file. On Unix-based systems, permissions are viewed as a set of three octets, for the owner, the group, and the rest of the world. For each of these entities, permissions may be set to read, write, or execute the file:<br>The permission bits 0644 (in octal) would thus be interpreted as read/write for owner, and read-only for group and other. Higher-order bits may also be used to indicate the type of file (plain, directory, pipe, socket, and so on) and various other special features. If the permissions are for a directory, the meaning of the execute bit changes; when set the directory can be searched.<br>On non-Posix operating systems, there may be only the ability to make a file read-only or read-write. In this case, the remaining permission bits will be synthesized to resemble typical values. For instance, on Windows NT the default permission bits are 0644, which means read/write for owner, read-only for all others. The only change that can be made is to make the file read-only, which is reported as 0444.<br>Various constants for the methods in File can be found in File::Constants.	http://ruby-doc.org/core/File.html
File::absolute_path	A			class methods							<pre><code>absolute_path(file_name [, dir_string] )  →  abs_file_name</code></pre>Converts a pathname to an absolute pathname. Relative paths are referenced from the current working directory of the process unless dir_string is given, in which case it will be used as the starting point. If the given pathname starts with a “~” it is NOT expanded, it is treated as a normal directory name.<pre><code>File.absolute_path("~oracle/bin")       #=> "<relative_path>/~oracle/bin"\n</code></pre>	http://ruby-doc.org/core/File.html#method-c-absolute_path
File::atime	A			class methods							<pre><code>atime(file_name)  →  time</code></pre>Returns the last access time for the named file as a Time object).<br>file_name can be an IO object.<pre><code>File.atime("testfile")   #=> Wed Apr 09 08:51:48 CDT 2003\n</code></pre>	http://ruby-doc.org/core/File.html#method-c-atime
File::basename	A			class methods							<pre><code>basename(file_name [, suffix] )  →  base_name</code></pre>Returns the last component of the filename given in file_name, which can be formed using both File::SEPARATOR and File::ALT_SEPARATOR as the separator when File::ALT_SEPARATOR is not nil. If suffix is given and present at the end of file_name, it is removed. If suffix is “.*”, any extension will be removed.<pre><code>File.basename("/home/gumby/work/ruby.rb")          #=> "ruby.rb"\nFile.basename("/home/gumby/work/ruby.rb", ".rb")   #=> "ruby"\nFile.basename("/home/gumby/work/ruby.rb", ".*")    #=> "ruby"\n</code></pre>	http://ruby-doc.org/core/File.html#method-c-basename
File::birthtime	A			class methods							<pre><code>birthtime(file_name)  → time</code></pre>Returns the birth time for the named file.<br>file_name can be an IO object.<pre><code>File.birthtime("testfile")   #=> Wed Apr 09 08:53:13 CDT 2003\n</code></pre>If the platform doesn’t have birthtime, raises NotImplementedError.	http://ruby-doc.org/core/File.html#method-c-birthtime
File::blockdev?	A			class methods							<pre><code>blockdev?(file_name)   →  true or false</code></pre>Returns true if the named file is a block device.<br>file_name can be an IO object.	http://ruby-doc.org/core/File.html#method-c-blockdev-3F
File::chardev?	A			class methods							<pre><code>chardev?(file_name)   →  true or false</code></pre>Returns true if the named file is a character device.<br>file_name can be an IO object.	http://ruby-doc.org/core/File.html#method-c-chardev-3F
File::chmod	A			class methods							<pre><code>chmod(mode_int, file_name, ... )  →  integer</code></pre>Changes permission bits on the named file(s) to the bit pattern represented by mode_int. Actual effects are operating system dependent (see the beginning of this section). On Unix systems, see chmod(2) for details. Returns the number of files processed.<pre><code>File.chmod(0644, "testfile", "out")   #=> 2\n</code></pre>	http://ruby-doc.org/core/File.html#method-c-chmod
File::chown	A			class methods							<pre><code>chown(owner_int, group_int, file_name,... )  →  integer</code></pre>Changes the owner and group of the named file(s) to the given numeric owner and group id’s. Only a process with superuser privileges may change the owner of a file. The current owner of a file may change the file’s group to any group to which the owner belongs. A nil or -1 owner or group id is ignored. Returns the number of files processed.<pre><code>File.chown(nil, 100, "testfile")\n</code></pre>	http://ruby-doc.org/core/File.html#method-c-chown
File::ctime	A			class methods							<pre><code>ctime(file_name)  → time</code></pre>Returns the change time for the named file (the time at which directory information about the file was changed, not the file itself).<br>file_name can be an IO object.<br>Note that on Windows (NTFS), returns creation time (birth time).<pre><code>File.ctime("testfile")   #=> Wed Apr 09 08:53:13 CDT 2003\n</code></pre>	http://ruby-doc.org/core/File.html#method-c-ctime
File::delete	A			class methods							<pre><code>delete(file_name, ...)  → integer</code></pre>Deletes the named files, returning the number of names passed as arguments. Raises an exception on any error. See also Dir::rmdir.	http://ruby-doc.org/core/File.html#method-c-delete
File::directory?	A			class methods							<pre><code>directory?(file_name)   →  true or false</code></pre>Returns true if the named file is a directory, or a symlink that points at a directory, and false otherwise.<br>file_name can be an IO object.<pre><code>File.directory?(".")\n</code></pre>	http://ruby-doc.org/core/File.html#method-c-directory-3F
File::dirname	A			class methods							<pre><code>dirname(file_name)  →  dir_name</code></pre>Returns all components of the filename given in file_name except the last one. The filename can be formed using both File::SEPARATOR and File::ALT_SEPARATOR as the separator when File::ALT_SEPARATOR is not nil.<pre><code>File.dirname("/home/gumby/work/ruby.rb")   #=> "/home/gumby/work"\n</code></pre>	http://ruby-doc.org/core/File.html#method-c-dirname
File::executable?	A			class methods							<pre><code>executable?(file_name)   → true or false</code></pre>Returns true if the named file is executable by the effective user and group id of this process. See eaccess(3).	http://ruby-doc.org/core/File.html#method-c-executable-3F
File::executable_real?	A			class methods							<pre><code>executable_real?(file_name)   → true or false</code></pre>Returns true if the named file is executable by the real user and group id of this process. See access(3).	http://ruby-doc.org/core/File.html#method-c-executable_real-3F
File::exist?	A			class methods							<pre><code>exist?(file_name)    →  true or false</code></pre>Return true if the named file exists.<br>file_name can be an IO object.<br>“file exists” means that stat() or fstat() system call is successful.	http://ruby-doc.org/core/File.html#method-c-exist-3F
File::exists?	A			class methods							<pre><code>exists?(file_name)   →  true or false</code></pre>Deprecated method. Don’t use.	http://ruby-doc.org/core/File.html#method-c-exists-3F
File::expand_path	A			class methods							<pre><code>expand_path(file_name [, dir_string] )  →  abs_file_name</code></pre>Converts a pathname to an absolute pathname. Relative paths are referenced from the current working directory of the process unless dir_string is given, in which case it will be used as the starting point. The given pathname may start with a “~”, which expands to the process owner’s home directory (the environment variable HOME must be set correctly). “~user” expands to the named user’s home directory.<pre><code>File.expand_path("~oracle/bin")           #=> "/home/oracle/bin"\n</code></pre>A simple example of using dir_string is as follows.<pre><code>File.expand_path("ruby", "/usr/bin")      #=> "/usr/bin/ruby"\n</code></pre>A more complex example which also resolves parent directory is as follows. Suppose we are in bin/mygem and want the absolute path of lib/mygem.rb.<pre><code>File.expand_path("../../lib/mygem.rb", __FILE__)\n#=> ".../path/to/project/lib/mygem.rb"\n</code></pre>So first it resolves the parent of __FILE__, that is bin/, then go to the parent, the root of the project and appends lib/mygem.rb.	http://ruby-doc.org/core/File.html#method-c-expand_path
File::extname	A			class methods							<pre><code>extname(path)  →  string</code></pre>Returns the extension (the portion of file name in path starting from the last period).<br>If path is a dotfile, or starts with a period, then the starting dot is not dealt with the start of the extension.<br>An empty string will also be returned when the period is the last character in path.<pre><code>File.extname("test.rb")         #=> ".rb"\nFile.extname("a/b/d/test.rb")   #=> ".rb"\nFile.extname(".a/b/d/test.rb")  #=> ".rb"\nFile.extname("foo.")            #=> ""\nFile.extname("test")            #=> ""\nFile.extname(".profile")        #=> ""\nFile.extname(".profile.sh")     #=> ".sh"\n</code></pre>	http://ruby-doc.org/core/File.html#method-c-extname
File::file?	A			class methods							<pre><code>file?(file) → true or false</code></pre>Returns true if the named file exists and is a regular file.<br>file can be an IO object.<br>If the file argument is a symbolic link, it will resolve the symbolic link and use the file referenced by the link.	http://ruby-doc.org/core/File.html#method-c-file-3F
File::fnmatch	A			class methods							<pre><code>fnmatch( pattern, path, [flags] ) → (true or false)\nfnmatch?( pattern, path, [flags] ) → (true or false)</code></pre>Returns true if path matches against pattern. The pattern is not a regular expression; instead it follows rules similar to shell filename globbing. It may contain the following metacharacters:<br>Matches any file. Can be restricted by other values in the glob. Equivalent to / .* /x in regexp.<br>Matches all files regular files<br>Matches all files beginning with c<br>Matches all files ending with c<br>Matches all files that have c in them (including at the beginning or end).<br>To match hidden files (that start with a . set the File::FNM_DOTMATCH flag.<br>Matches directories recursively or files expansively.<br>Matches any one character. Equivalent to /.{1}/ in regexp.<br>Matches any one character in set. Behaves exactly like character sets in Regexp, including set negation ([^a-z]).<br>Escapes the next metacharacter.<br>Matches pattern a and pattern b if File::FNM_EXTGLOB flag is enabled. Behaves like a Regexp union ((?:a|b)).<br>flags is a bitwise OR of the FNM_XXX constants. The same glob pattern and flags are used by Dir.glob.<br>Examples:<pre><code>File.fnmatch('cat',       'cat')        #=> true  # match entire string\nFile.fnmatch('cat',       'category')   #=> false # only match partial string\n\nFile.fnmatch('c{at,ub}s', 'cats')                    #=> false # { } isn't supported by default\nFile.fnmatch('c{at,ub}s', 'cats', File::FNM_EXTGLOB) #=> true  # { } is supported on FNM_EXTGLOB\n\nFile.fnmatch('c?t',     'cat')          #=> true  # '?' match only 1 character\nFile.fnmatch('c??t',    'cat')          #=> false # ditto\nFile.fnmatch('c*',      'cats')         #=> true  # '*' match 0 or more characters\nFile.fnmatch('c*t',     'c/a/b/t')      #=> true  # ditto\nFile.fnmatch('ca[a-z]', 'cat')          #=> true  # inclusive bracket expression\nFile.fnmatch('ca[^t]',  'cat')          #=> false # exclusive bracket expression ('^' or '!')\n\nFile.fnmatch('cat', 'CAT')                     #=> false # case sensitive\nFile.fnmatch('cat', 'CAT', File::FNM_CASEFOLD) #=> true  # case insensitive\n\nFile.fnmatch('?',   '/', File::FNM_PATHNAME)  #=> false # wildcard doesn't match '/' on FNM_PATHNAME\nFile.fnmatch('*',   '/', File::FNM_PATHNAME)  #=> false # ditto\nFile.fnmatch('[/]', '/', File::FNM_PATHNAME)  #=> false # ditto\n\nFile.fnmatch('\?',   '?')                       #=> true  # escaped wildcard becomes ordinary\nFile.fnmatch('\a',   'a')                       #=> true  # escaped ordinary remains ordinary\nFile.fnmatch('\a',   '\a', File::FNM_NOESCAPE)  #=> true  # FNM_NOESCAPE makes '\' ordinary\nFile.fnmatch('[\?]', '?')                       #=> true  # can escape inside bracket expression\n\nFile.fnmatch('*',   '.profile')                      #=> false # wildcard doesn't match leading\nFile.fnmatch('*',   '.profile', File::FNM_DOTMATCH)  #=> true  # period by default.\nFile.fnmatch('.*',  '.profile')                      #=> true\n\nrbfiles = '**' '/' '*.rb' # you don't have to do like this. just write in single string.\nFile.fnmatch(rbfiles, 'main.rb')                    #=> false\nFile.fnmatch(rbfiles, './main.rb')                  #=> false\nFile.fnmatch(rbfiles, 'lib/song.rb')                #=> true\nFile.fnmatch('**.rb', 'main.rb')                    #=> true\nFile.fnmatch('**.rb', './main.rb')                  #=> false\nFile.fnmatch('**.rb', 'lib/song.rb')                #=> true\nFile.fnmatch('*',           'dave/.profile')                      #=> true\n\npattern = '*' '/' '*'\nFile.fnmatch(pattern, 'dave/.profile', File::FNM_PATHNAME)  #=> false\nFile.fnmatch(pattern, 'dave/.profile', File::FNM_PATHNAME | File::FNM_DOTMATCH) #=> true\n\npattern = '**' '/' 'foo'\nFile.fnmatch(pattern, 'a/b/c/foo', File::FNM_PATHNAME)     #=> true\nFile.fnmatch(pattern, '/a/b/c/foo', File::FNM_PATHNAME)    #=> true\nFile.fnmatch(pattern, 'c:/a/b/c/foo', File::FNM_PATHNAME)  #=> true\nFile.fnmatch(pattern, 'a/.b/c/foo', File::FNM_PATHNAME)    #=> false\nFile.fnmatch(pattern, 'a/.b/c/foo', File::FNM_PATHNAME | File::FNM_DOTMATCH) #=> true\n</code></pre>	http://ruby-doc.org/core/File.html#method-c-fnmatch
File::fnmatch?	A			class methods							<pre><code>fnmatch?( pattern, path, [flags] ) → (true or false)</code></pre>Returns true if path matches against pattern. The pattern is not a regular expression; instead it follows rules similar to shell filename globbing. It may contain the following metacharacters:<br>Matches any file. Can be restricted by other values in the glob. Equivalent to / .* /x in regexp.<br>Matches all files regular files<br>Matches all files beginning with c<br>Matches all files ending with c<br>Matches all files that have c in them (including at the beginning or end).<br>To match hidden files (that start with a . set the File::FNM_DOTMATCH flag.<br>Matches directories recursively or files expansively.<br>Matches any one character. Equivalent to /.{1}/ in regexp.<br>Matches any one character in set. Behaves exactly like character sets in Regexp, including set negation ([^a-z]).<br>Escapes the next metacharacter.<br>Matches pattern a and pattern b if File::FNM_EXTGLOB flag is enabled. Behaves like a Regexp union ((?:a|b)).<br>flags is a bitwise OR of the FNM_XXX constants. The same glob pattern and flags are used by Dir.glob.<br>Examples:<pre><code>File.fnmatch('cat',       'cat')        #=> true  # match entire string\nFile.fnmatch('cat',       'category')   #=> false # only match partial string\n\nFile.fnmatch('c{at,ub}s', 'cats')                    #=> false # { } isn't supported by default\nFile.fnmatch('c{at,ub}s', 'cats', File::FNM_EXTGLOB) #=> true  # { } is supported on FNM_EXTGLOB\n\nFile.fnmatch('c?t',     'cat')          #=> true  # '?' match only 1 character\nFile.fnmatch('c??t',    'cat')          #=> false # ditto\nFile.fnmatch('c*',      'cats')         #=> true  # '*' match 0 or more characters\nFile.fnmatch('c*t',     'c/a/b/t')      #=> true  # ditto\nFile.fnmatch('ca[a-z]', 'cat')          #=> true  # inclusive bracket expression\nFile.fnmatch('ca[^t]',  'cat')          #=> false # exclusive bracket expression ('^' or '!')\n\nFile.fnmatch('cat', 'CAT')                     #=> false # case sensitive\nFile.fnmatch('cat', 'CAT', File::FNM_CASEFOLD) #=> true  # case insensitive\n\nFile.fnmatch('?',   '/', File::FNM_PATHNAME)  #=> false # wildcard doesn't match '/' on FNM_PATHNAME\nFile.fnmatch('*',   '/', File::FNM_PATHNAME)  #=> false # ditto\nFile.fnmatch('[/]', '/', File::FNM_PATHNAME)  #=> false # ditto\n\nFile.fnmatch('\?',   '?')                       #=> true  # escaped wildcard becomes ordinary\nFile.fnmatch('\a',   'a')                       #=> true  # escaped ordinary remains ordinary\nFile.fnmatch('\a',   '\a', File::FNM_NOESCAPE)  #=> true  # FNM_NOESCAPE makes '\' ordinary\nFile.fnmatch('[\?]', '?')                       #=> true  # can escape inside bracket expression\n\nFile.fnmatch('*',   '.profile')                      #=> false # wildcard doesn't match leading\nFile.fnmatch('*',   '.profile', File::FNM_DOTMATCH)  #=> true  # period by default.\nFile.fnmatch('.*',  '.profile')                      #=> true\n\nrbfiles = '**' '/' '*.rb' # you don't have to do like this. just write in single string.\nFile.fnmatch(rbfiles, 'main.rb')                    #=> false\nFile.fnmatch(rbfiles, './main.rb')                  #=> false\nFile.fnmatch(rbfiles, 'lib/song.rb')                #=> true\nFile.fnmatch('**.rb', 'main.rb')                    #=> true\nFile.fnmatch('**.rb', './main.rb')                  #=> false\nFile.fnmatch('**.rb', 'lib/song.rb')                #=> true\nFile.fnmatch('*',           'dave/.profile')                      #=> true\n\npattern = '*' '/' '*'\nFile.fnmatch(pattern, 'dave/.profile', File::FNM_PATHNAME)  #=> false\nFile.fnmatch(pattern, 'dave/.profile', File::FNM_PATHNAME | File::FNM_DOTMATCH) #=> true\n\npattern = '**' '/' 'foo'\nFile.fnmatch(pattern, 'a/b/c/foo', File::FNM_PATHNAME)     #=> true\nFile.fnmatch(pattern, '/a/b/c/foo', File::FNM_PATHNAME)    #=> true\nFile.fnmatch(pattern, 'c:/a/b/c/foo', File::FNM_PATHNAME)  #=> true\nFile.fnmatch(pattern, 'a/.b/c/foo', File::FNM_PATHNAME)    #=> false\nFile.fnmatch(pattern, 'a/.b/c/foo', File::FNM_PATHNAME | File::FNM_DOTMATCH) #=> true\n</code></pre>	http://ruby-doc.org/core/File.html#method-c-fnmatch-3F
File::ftype	A			class methods							<pre><code>ftype(file_name)   → string</code></pre>Identifies the type of the named file; the return string is one of “file”, “directory”, “characterSpecial”, “blockSpecial”, “fifo”, “link”, “socket”, or “unknown”.<pre><code>File.ftype("testfile")            #=> "file"\nFile.ftype("/dev/tty")            #=> "characterSpecial"\nFile.ftype("/tmp/.X11-unix/X0")   #=> "socket"\n</code></pre>	http://ruby-doc.org/core/File.html#method-c-ftype
File::grpowned?	A			class methods							<pre><code>grpowned?(file_name)   → true or false</code></pre>Returns true if the named file exists and the effective group id of the calling process is the owner of the file. Returns false on Windows.<br>file_name can be an IO object.	http://ruby-doc.org/core/File.html#method-c-grpowned-3F
File::identical?	A			class methods							<pre><code>identical?(file_1, file_2)   →  true or false</code></pre>Returns true if the named files are identical.<br>file_1 and file_2 can be an IO object.<pre><code>open("a", "w") {}\np File.identical?("a", "a")      #=> true\np File.identical?("a", "./a")    #=> true\nFile.link("a", "b")\np File.identical?("a", "b")      #=> true\nFile.symlink("a", "c")\np File.identical?("a", "c")      #=> true\nopen("d", "w") {}\np File.identical?("a", "d")      #=> false\n</code></pre>	http://ruby-doc.org/core/File.html#method-c-identical-3F
File::join	A			class methods							<pre><code>join(string, ...)  →  string</code></pre>Returns a new string formed by joining the strings using File::SEPARATOR.<pre><code>File.join("usr", "mail", "gumby")   #=> "usr/mail/gumby"\n</code></pre>	http://ruby-doc.org/core/File.html#method-c-join
File::lchmod	A			class methods							<pre><code>lchmod(mode_int, file_name, ...)  → integer</code></pre>Equivalent to File::chmod, but does not follow symbolic links (so it will change the permissions associated with the link, not the file referenced by the link). Often not available.	http://ruby-doc.org/core/File.html#method-c-lchmod
File::lchown	A			class methods							<pre><code>lchown(owner_int, group_int, file_name,..) → integer</code></pre>Equivalent to File::chown, but does not follow symbolic links (so it will change the owner associated with the link, not the file referenced by the link). Often not available. Returns number of files in the argument list.	http://ruby-doc.org/core/File.html#method-c-lchown
File::link	A			class methods							<pre><code>link(old_name, new_name)    → 0</code></pre>Creates a new name for an existing file using a hard link. Will not overwrite new_name if it already exists (raising a subclass of SystemCallError). Not available on all platforms.<pre><code>File.link("testfile", ".testfile")   #=> 0\nIO.readlines(".testfile")[0]         #=> "This is line one\n"\n</code></pre>	http://ruby-doc.org/core/File.html#method-c-link
File::lstat	A			class methods							<pre><code>lstat(file_name)   → stat</code></pre>Same as File::stat, but does not follow the last symbolic link. Instead, reports on the link itself.<pre><code>File.symlink("testfile", "link2test")   #=> 0\nFile.stat("testfile").size              #=> 66\nFile.lstat("link2test").size            #=> 8\nFile.stat("link2test").size             #=> 66\n</code></pre>	http://ruby-doc.org/core/File.html#method-c-lstat
File::mkfifo	A			class methods								http://ruby-doc.org/core/File.html#method-c-mkfifo
File::mtime	A			class methods							<pre><code>mtime(file_name)  →  time</code></pre>Returns the modification time for the named file as a Time object.<br>file_name can be an IO object.<pre><code>File.mtime("testfile")   #=> Tue Apr 08 12:58:04 CDT 2003\n</code></pre>	http://ruby-doc.org/core/File.html#method-c-mtime
File::new	A			class methods							<pre><code>new(filename, mode="r" [, opt])            → file\nnew(filename [, mode [, perm]] [, opt])    → file</code></pre>Opens the file named by filename according to the given mode and returns a new File object.<br>See IO.new for a description of mode and opt.<br>If a file is being created, permission bits may be given in perm. These mode and permission bits are platform dependent; on Unix systems, see open(2) and chmod(2) man pages for details.<pre><code>f = File.new("testfile", "r")\nf = File.new("newfile",  "w+")\nf = File.new("newfile", File::CREAT|File::TRUNC|File::RDWR, 0644)\n</code></pre>	http://ruby-doc.org/core/File.html#method-c-new
File::open	A			class methods							<pre><code>open(filename, mode="r" [, opt])                 → file\nopen(filename [, mode [, perm]] [, opt])         → file\nopen(filename, mode="r" [, opt]) {|file| block } → obj\nopen(filename [, mode [, perm]] [, opt]) {|file| block } → obj</code></pre>With no associated block, File.open is a synonym for ::new. If the optional code block is given, it will be passed the opened file as an argument and the File object will automatically be closed when the block terminates. The value of the block will be returned from File.open.<br>If a file is being created, its initial permissions may be set using the perm parameter. See ::new for further discussion.<br>See IO.new for a description of the mode and opt parameters.	http://ruby-doc.org/core/File.html#method-c-open
File::owned?	A			class methods							<pre><code>owned?(file_name)   → true or false</code></pre>Returns true if the named file exists and the effective used id of the calling process is the owner of the file.<br>file_name can be an IO object.	http://ruby-doc.org/core/File.html#method-c-owned-3F
File::path	A			class methods							<pre><code>path(path)  →  string</code></pre>Returns the string representation of the path<pre><code>File.path("/dev/null")          #=> "/dev/null"\nFile.path(Pathname.new("/tmp")) #=> "/tmp"\n</code></pre>	http://ruby-doc.org/core/File.html#method-c-path
File::pipe?	A			class methods							<pre><code>pipe?(file_name)   →  true or false</code></pre>Returns true if the named file is a pipe.<br>file_name can be an IO object.	http://ruby-doc.org/core/File.html#method-c-pipe-3F
File::readable?	A			class methods							<pre><code>readable?(file_name)   → true or false</code></pre>Returns true if the named file is readable by the effective user and group id of this process. See eaccess(3).	http://ruby-doc.org/core/File.html#method-c-readable-3F
File::readable_real?	A			class methods							<pre><code>readable_real?(file_name)   → true or false</code></pre>Returns true if the named file is readable by the real user and group id of this process. See access(3).	http://ruby-doc.org/core/File.html#method-c-readable_real-3F
File::readlink	A			class methods							<pre><code>readlink(link_name)  →  file_name</code></pre>Returns the name of the file referenced by the given link. Not available on all platforms.<pre><code>File.symlink("testfile", "link2test")   #=> 0\nFile.readlink("link2test")              #=> "testfile"\n</code></pre>	http://ruby-doc.org/core/File.html#method-c-readlink
File::realdirpath	A			class methods							<pre><code>realdirpath(pathname [, dir_string])  →  real_pathname</code></pre>Returns the real (absolute) pathname of pathname in the actual filesystem. The real pathname doesn’t contain symlinks or useless dots.<br>If dir_string is given, it is used as a base directory for interpreting relative pathname instead of the current directory.<br>The last component of the real pathname can be nonexistent.	http://ruby-doc.org/core/File.html#method-c-realdirpath
File::realpath	A			class methods							<pre><code>realpath(pathname [, dir_string])  →  real_pathname</code></pre>Returns the real (absolute) pathname of pathname in the actual filesystem not containing symlinks or useless dots.<br>If dir_string is given, it is used as a base directory for interpreting relative pathname instead of the current directory.<br>All components of the pathname must exist when this method is called.	http://ruby-doc.org/core/File.html#method-c-realpath
File::rename	A			class methods							<pre><code>rename(old_name, new_name)   → 0</code></pre>Renames the given file to the new name. Raises a SystemCallError if the file cannot be renamed.<pre><code>File.rename("afile", "afile.bak")   #=> 0\n</code></pre>	http://ruby-doc.org/core/File.html#method-c-rename
File::setgid?	A			class methods							<pre><code>setgid?(file_name)   →  true or false</code></pre>Returns true if the named file has the setgid bit set.	http://ruby-doc.org/core/File.html#method-c-setgid-3F
File::setuid?	A			class methods							<pre><code>setuid?(file_name)   →  true or false</code></pre>Returns true if the named file has the setuid bit set.	http://ruby-doc.org/core/File.html#method-c-setuid-3F
File::size	A			class methods							<pre><code>size(file_name)   → integer</code></pre>Returns the size of file_name.<br>file_name can be an IO object.	http://ruby-doc.org/core/File.html#method-c-size
File::size?	A			class methods							<pre><code>size?(file_name)   → Integer or nil</code></pre>Returns nil if file_name doesn’t exist or has zero size, the size of the file otherwise.<br>file_name can be an IO object.	http://ruby-doc.org/core/File.html#method-c-size-3F
File::socket?	A			class methods							<pre><code>socket?(file_name)   →  true or false</code></pre>Returns true if the named file is a socket.<br>file_name can be an IO object.	http://ruby-doc.org/core/File.html#method-c-socket-3F
File::split	A			class methods							<pre><code>split(file_name)   → array</code></pre>Splits the given string into a directory and a file component and returns them in a two-element array. See also File::dirname and File::basename.<pre><code>File.split("/home/gumby/.profile")   #=> ["/home/gumby", ".profile"]\n</code></pre>	http://ruby-doc.org/core/File.html#method-c-split
File::stat	A			class methods							<pre><code>stat(file_name)   →  stat</code></pre>Returns a File::Stat object for the named file (see File::Stat).<pre><code>File.stat("testfile").mtime   #=> Tue Apr 08 12:58:04 CDT 2003\n</code></pre>	http://ruby-doc.org/core/File.html#method-c-stat
File::sticky?	A			class methods							<pre><code>sticky?(file_name)   →  true or false</code></pre>Returns true if the named file has the sticky bit set.	http://ruby-doc.org/core/File.html#method-c-sticky-3F
File::symlink	A			class methods							<pre><code>symlink(old_name, new_name)   → 0</code></pre>Creates a symbolic link called new_name for the existing file old_name. Raises a NotImplemented exception on platforms that do not support symbolic links.<pre><code>File.symlink("testfile", "link2test")   #=> 0\n</code></pre>	http://ruby-doc.org/core/File.html#method-c-symlink
File::symlink?	A			class methods							<pre><code>symlink?(file_name)   →  true or false</code></pre>Returns true if the named file is a symbolic link.	http://ruby-doc.org/core/File.html#method-c-symlink-3F
File::truncate	A			class methods							<pre><code>truncate(file_name, integer)  → 0</code></pre>Truncates the file file_name to be at most integer bytes long. Not available on all platforms.<pre><code>f = File.new("out", "w")\nf.write("1234567890")     #=> 10\nf.close                   #=> nil\nFile.truncate("out", 5)   #=> 0\nFile.size("out")          #=> 5\n</code></pre>	http://ruby-doc.org/core/File.html#method-c-truncate
File::umask	A			class methods							<pre><code>umask()          → integer\numask(integer)   → integer</code></pre>Returns the current umask value for this process. If the optional argument is given, set the umask to that value and return the previous value. Umask values are subtracted from the default permissions, so a umask of 0222 would make a file read-only for everyone.<pre><code>File.umask(0006)   #=> 18\nFile.umask         #=> 6\n</code></pre>	http://ruby-doc.org/core/File.html#method-c-umask
File::unlink	A			class methods							<pre><code>unlink(file_name, ...)  → integer</code></pre>Deletes the named files, returning the number of names passed as arguments. Raises an exception on any error. See also Dir::rmdir.	http://ruby-doc.org/core/File.html#method-c-unlink
File::utime	A			class methods							<pre><code>utime(atime, mtime, file_name,...)   →  integer</code></pre>Sets the access and modification times of each named file to the first two arguments. Returns the number of file names in the argument list.	http://ruby-doc.org/core/File.html#method-c-utime
File::world_readable?	A			class methods							<pre><code>world_readable?(file_name)   → fixnum or nil</code></pre>If file_name is readable by others, returns an integer representing the file permission bits of file_name. Returns nil otherwise. The meaning of the bits is platform dependent; on Unix systems, see stat(2).<br>file_name can be an IO object.<pre><code>File.world_readable?("/etc/passwd")           #=> 420\nm = File.world_readable?("/etc/passwd")\nsprintf("%o", m)                              #=> "644"\n</code></pre>	http://ruby-doc.org/core/File.html#method-c-world_readable-3F
File::world_writable?	A			class methods							<pre><code>world_writable?(file_name)   → fixnum or nil</code></pre>If file_name is writable by others, returns an integer representing the file permission bits of file_name. Returns nil otherwise. The meaning of the bits is platform dependent; on Unix systems, see stat(2).<br>file_name can be an IO object.<pre><code>File.world_writable?("/tmp")                  #=> 511\nm = File.world_writable?("/tmp")\nsprintf("%o", m)                              #=> "777"\n</code></pre>	http://ruby-doc.org/core/File.html#method-c-world_writable-3F
File::writable?	A			class methods							<pre><code>writable?(file_name)   → true or false</code></pre>Returns true if the named file is writable by the effective user and group id of this process. See eaccess(3).	http://ruby-doc.org/core/File.html#method-c-writable-3F
File::writable_real?	A			class methods							<pre><code>writable_real?(file_name)   → true or false</code></pre>Returns true if the named file is writable by the real user and group id of this process. See access(3)	http://ruby-doc.org/core/File.html#method-c-writable_real-3F
File::zero?	A			class methods							<pre><code>zero?(file_name)   → true or false</code></pre>Returns true if the named file exists and has a zero size.<br>file_name can be an IO object.	http://ruby-doc.org/core/File.html#method-c-zero-3F
File#atime	A			instance methods							<pre><code>atime    → time</code></pre>Returns the last access time (a Time object)	http://ruby-doc.org/core/File.html#method-i-atime
File#birthtime	A			instance methods							<pre><code>birthtime  →  time</code></pre>Returns the birth time for file.<pre><code>File.new("testfile").birthtime   #=> Wed Apr 09 08:53:14 CDT 2003\n</code></pre>If the platform doesn’t have birthtime, raises NotImplementedError.	http://ruby-doc.org/core/File.html#method-i-birthtime
File#chmod	A			instance methods							<pre><code>chmod(mode_int)   → 0</code></pre>Changes permission bits on file to the bit pattern represented by mode_int. Actual effects are platform dependent; on Unix systems, see chmod(2) for details. Follows symbolic links. Also see File#lchmod.<pre><code>f = File.new("out", "w");\nf.chmod(0644)   #=> 0\n</code></pre>	http://ruby-doc.org/core/File.html#method-i-chmod
File#chown	A			instance methods							<pre><code>chown(owner_int, group_int )   → 0</code></pre>Changes the owner and group of file to the given numeric owner and group id’s. Only a process with superuser privileges may change the owner of a file. The current owner of a file may change the file’s group to any group to which the owner belongs. A nil or -1 owner or group id is ignored. Follows symbolic links. See also File#lchown.<pre><code>File.new("testfile").chown(502, 1000)\n</code></pre>	http://ruby-doc.org/core/File.html#method-i-chown
File#ctime	A			instance methods							<pre><code>ctime  →  time</code></pre>Returns the change time for file (that is, the time directory information about the file was changed, not the file itself).<br>Note that on Windows (NTFS), returns creation time (birth time).<pre><code>File.new("testfile").ctime   #=> Wed Apr 09 08:53:14 CDT 2003\n</code></pre>	http://ruby-doc.org/core/File.html#method-i-ctime
File#flock	A			instance methods							<pre><code>flock(locking_constant) → 0 or false</code></pre>Locks or unlocks a file according to locking_constant (a logical or of the values in the table below). Returns false if File::LOCK_NB is specified and the operation would otherwise have blocked. Not available on all platforms.<br>Locking constants (in class File):<br>Example:<pre><code># update a counter using write lock\n# don't use "w" because it truncates the file before lock.\nFile.open("counter", File::RDWR|File::CREAT, 0644) {|f|\n  f.flock(File::LOCK_EX)\n  value = f.read.to_i + 1\n  f.rewind\n  f.write("#{value}\n")\n  f.flush\n  f.truncate(f.pos)\n}\n\n# read the counter using read lock\nFile.open("counter", "r") {|f|\n  f.flock(File::LOCK_SH)\n  p f.read\n}\n</code></pre>	http://ruby-doc.org/core/File.html#method-i-flock
File#lstat	A			instance methods							<pre><code>lstat   →  stat</code></pre>Same as IO#stat, but does not follow the last symbolic link. Instead, reports on the link itself.<pre><code>File.symlink("testfile", "link2test")   #=> 0\nFile.stat("testfile").size              #=> 66\nf = File.new("link2test")\nf.lstat.size                            #=> 8\nf.stat.size                             #=> 66\n</code></pre>	http://ruby-doc.org/core/File.html#method-i-lstat
File#mtime	A			instance methods							<pre><code>mtime  →  time</code></pre>Returns the modification time for file.<pre><code>File.new("testfile").mtime   #=> Wed Apr 09 08:53:14 CDT 2003\n</code></pre>	http://ruby-doc.org/core/File.html#method-i-mtime
File#path	A			instance methods							<pre><code>path  →  filename\nto_path  →  filename</code></pre>Returns the pathname used to create file as a string. Does not normalize the name.<pre><code>File.new("testfile").path               #=> "testfile"\nFile.new("/tmp/../tmp/xxx", "w").path   #=> "/tmp/../tmp/xxx"\n</code></pre>	http://ruby-doc.org/core/File.html#method-i-path
File#size	A			instance methods							<pre><code>size    → integer</code></pre>Returns the size of file in bytes.<pre><code>File.new("testfile").size   #=> 66\n</code></pre>	http://ruby-doc.org/core/File.html#method-i-size
File#to_path	A			instance methods							<pre><code>to_path  →  filename</code></pre>Returns the pathname used to create file as a string. Does not normalize the name.<pre><code>File.new("testfile").path               #=> "testfile"\nFile.new("/tmp/../tmp/xxx", "w").path   #=> "/tmp/../tmp/xxx"\n</code></pre>	http://ruby-doc.org/core/File.html#method-i-to_path
File#truncate	A			instance methods							<pre><code>truncate(integer)    → 0</code></pre>Truncates file to at most integer bytes. The file must be opened for writing. Not available on all platforms.<pre><code>f = File.new("out", "w")\nf.syswrite("1234567890")   #=> 10\nf.truncate(5)              #=> 0\nf.close()                  #=> nil\nFile.size("out")           #=> 5\n</code></pre>	http://ruby-doc.org/core/File.html#method-i-truncate
Encoding	A			classes							An Encoding instance represents a character encoding usable in Ruby. It is defined as a constant under the Encoding namespace. It has a name and optionally, aliases:<pre><code>Encoding::ISO_8859_1.name\n#=> "ISO-8859-1"\n\nEncoding::ISO_8859_1.names\n#=> ["ISO-8859-1", "ISO8859-1"]\n</code></pre>Ruby methods dealing with encodings return or accept Encoding instances as arguments (when a method accepts an Encoding instance as an argument, it can be passed an Encoding name or alias instead).<pre><code>"some string".encoding\n#=> #<Encoding:UTF-8>\n\nstring = "some string".encode(Encoding::ISO_8859_1)\n#=> "some string"\nstring.encoding\n#=> #<Encoding:ISO-8859-1>\n\n"some string".encode "ISO-8859-1"\n#=> "some string"\n</code></pre>Encoding::ASCII_8BIT is a special encoding that is usually used for a byte string, not a character string. But as the name insists, its characters in the range of ASCII are considered as ASCII characters. This is useful when you use ASCII-8BIT characters with other ASCII compatible characters.	http://ruby-doc.org/core/Encoding.html
Encoding::aliases	A			class methods							<pre><code>aliases → {"alias1" => "orig1", "alias2" => "orig2", ...}</code></pre>Returns the hash of available encoding alias and original encoding name.	http://ruby-doc.org/core/Encoding.html#method-c-aliases
Encoding::compatible?	A			class methods							<pre><code>compatible?(obj1, obj2) → enc or nil</code></pre>Checks the compatibility of two objects.<br>If the objects are both strings they are compatible when they are concatenatable. The encoding of the concatenated string will be returned if they are compatible, nil if they are not.<pre><code>Encoding.compatible?("\xa1".force_encoding("iso-8859-1"), "b")\n#=> #<Encoding:ISO-8859-1>\n\nEncoding.compatible?(\n  "\xa1".force_encoding("iso-8859-1"),\n  "\xa1\xa1".force_encoding("euc-jp"))\n#=> nil\n</code></pre>If the objects are non-strings their encodings are compatible when they have an encoding and:<br>Either encoding is US-ASCII compatible<br>One of the encodings is a 7-bit encoding	http://ruby-doc.org/core/Encoding.html#method-c-compatible-3F
Encoding::default_external	A			class methods							<pre><code>default_external → enc</code></pre>Returns default external encoding.<br>The default external encoding is used by default for strings created from the following locations:<br>CSV<br>File data read from disk<br>SDBM<br>StringIO<br>Zlib::GzipReader<br>Zlib::GzipWriter<br>String#inspect<br>Regexp#inspect<br>While strings created from these locations will have this encoding, the encoding may not be valid. Be sure to check String#valid_encoding?.<br>File data written to disk will be transcoded to the default external encoding when written.<br>The default external encoding is initialized by the locale or -E option.	http://ruby-doc.org/core/Encoding.html#method-c-default_external
Encoding::default_external=	A			class methods							<pre><code>default_external = enc</code></pre>Sets default external encoding. You should not set ::default_external in ruby code as strings created before changing the value may have a different encoding from strings created after the value was changed., instead you should use ruby -E to invoke ruby with the correct default_external.<br>See ::default_external for information on how the default external encoding is used.	http://ruby-doc.org/core/Encoding.html#method-c-default_external-3D
Encoding::default_internal	A			class methods							<pre><code>default_internal → enc</code></pre>Returns default internal encoding. Strings will be transcoded to the default internal encoding in the following places if the default internal encoding is not nil:<br>CSV<br>Etc.sysconfdir and Etc.systmpdir<br>File data read from disk<br>File names from Dir<br>Integer#chr<br>String#inspect and Regexp#inspect<br>Strings returned from Readline<br>Strings returned from SDBM<br>Time#zone<br>Values from ENV<br>Values in ARGV including $PROGRAM_NAME<br>Additionally String#encode and String#encode! use the default internal encoding if no encoding is given.<br>The locale encoding (__ENCODING__), not ::default_internal, is used as the encoding of created strings.<br>::default_internal is initialized by the source file's internal_encoding or -E option.	http://ruby-doc.org/core/Encoding.html#method-c-default_internal
Encoding::default_internal=	A			class methods							<pre><code>default_internal = enc or nil</code></pre>Sets default internal encoding or removes default internal encoding when passed nil. You should not set ::default_internal in ruby code as strings created before changing the value may have a different encoding from strings created after the change. Instead you should use ruby -E to invoke ruby with the correct default_internal.<br>See ::default_internal for information on how the default internal encoding is used.	http://ruby-doc.org/core/Encoding.html#method-c-default_internal-3D
Encoding::find	A			class methods							<pre><code>find(string) → enc</code></pre>Search the encoding with specified name. name should be a string.<pre><code>Encoding.find("US-ASCII")  #=> #<Encoding:US-ASCII>\n</code></pre>Names which this method accept are encoding names and aliases including following special aliases<br>default external encoding<br>default internal encoding<br>locale encoding<br>filesystem encoding<br>An ArgumentError is raised when no encoding with name. Only Encoding.find("internal") however returns nil when no encoding named “internal”, in other words, when Ruby has no default internal encoding.	http://ruby-doc.org/core/Encoding.html#method-c-find
Encoding::list	A			class methods							<pre><code>list → [enc1, enc2, ...]</code></pre>Returns the list of loaded encodings.<pre><code>Encoding.list\n#=> [#<Encoding:ASCII-8BIT>, #<Encoding:UTF-8>,\n      #<Encoding:ISO-2022-JP (dummy)>]\n\nEncoding.find("US-ASCII")\n#=> #<Encoding:US-ASCII>\n\nEncoding.list\n#=> [#<Encoding:ASCII-8BIT>, #<Encoding:UTF-8>,\n      #<Encoding:US-ASCII>, #<Encoding:ISO-2022-JP (dummy)>]\n</code></pre>	http://ruby-doc.org/core/Encoding.html#method-c-list
Encoding::locale_charmap	A			class methods							<pre><code>locale_charmap → string</code></pre>Returns the locale charmap name. It returns nil if no appropriate information.<pre><code>Debian GNU/Linux\n  LANG=C\n    Encoding.locale_charmap  #=> "ANSI_X3.4-1968"\n  LANG=ja_JP.EUC-JP\n    Encoding.locale_charmap  #=> "EUC-JP"\n\nSunOS 5\n  LANG=C\n    Encoding.locale_charmap  #=> "646"\n  LANG=ja\n    Encoding.locale_charmap  #=> "eucJP"\n</code></pre>The result is highly platform dependent. So ::find may cause an error. If you need some encoding object even for unknown locale, ::find("locale") can be used.	http://ruby-doc.org/core/Encoding.html#method-c-locale_charmap
Encoding::name_list	A			class methods							<pre><code>name_list → ["enc1", "enc2", ...]</code></pre>Returns the list of available encoding names.	http://ruby-doc.org/core/Encoding.html#method-c-name_list
Encoding#ascii_compatible?	A			instance methods							<pre><code>ascii_compatible? → true or false</code></pre>Returns whether ASCII-compatible or not.<pre><code>Encoding::UTF_8.ascii_compatible?     #=> true\nEncoding::UTF_16BE.ascii_compatible?  #=> false\n</code></pre>	http://ruby-doc.org/core/Encoding.html#method-i-ascii_compatible-3F
Encoding#dummy?	A			instance methods							<pre><code>dummy? → true or false</code></pre>Returns true for dummy encodings. A dummy encoding is an encoding for which character handling is not properly implemented. It is used for stateful encodings.<pre><code>Encoding::ISO_2022_JP.dummy?       #=> true\nEncoding::UTF_8.dummy?             #=> false\n</code></pre>	http://ruby-doc.org/core/Encoding.html#method-i-dummy-3F
Encoding#inspect	A			instance methods							<pre><code>inspect → string</code></pre>Returns a string which represents the encoding for programmers.<pre><code>Encoding::UTF_8.inspect       #=> "#<Encoding:UTF-8>"\nEncoding::ISO_2022_JP.inspect #=> "#<Encoding:ISO-2022-JP (dummy)>"\n</code></pre>	http://ruby-doc.org/core/Encoding.html#method-i-inspect
Encoding#name	A			instance methods							<pre><code>name → string</code></pre>Returns the name of the encoding.<pre><code>Encoding::UTF_8.name      #=> "UTF-8"\n</code></pre>	http://ruby-doc.org/core/Encoding.html#method-i-name
Encoding#names	A			instance methods							<pre><code>names → array</code></pre>Returns the list of name and aliases of the encoding.<pre><code>Encoding::WINDOWS_31J.names  #=> ["Windows-31J", "CP932", "csWindows31J"]\n</code></pre>	http://ruby-doc.org/core/Encoding.html#method-i-names
Encoding#replicate	A			instance methods							<pre><code>replicate(name) → encoding</code></pre>Returns a replicated encoding of enc whose name is name. The new encoding should have the same byte structure of enc. If name is used by another encoding, raise ArgumentError.	http://ruby-doc.org/core/Encoding.html#method-i-replicate
Encoding#to_s	A			instance methods							<pre><code>to_s → string</code></pre>Returns the name of the encoding.<pre><code>Encoding::UTF_8.name      #=> "UTF-8"\n</code></pre>	http://ruby-doc.org/core/Encoding.html#method-i-to_s
Enumerator	A			classes							A class which allows both internal and external iteration.<br>An Enumerator can be created by the following methods.<br>Kernel#to_enum<br>Kernel#enum_for<br>::new<br>Most methods have two forms: a block form where the contents are evaluated for each item in the enumeration, and a non-block form which returns a new Enumerator wrapping the iteration.<pre><code>enumerator = %w(one two three).each\nputs enumerator.class # => Enumerator\n\nenumerator.each_with_object("foo") do |item, obj|\n  puts "#{obj}: #{item}"\nend\n\n# foo: one\n# foo: two\n# foo: three\n\nenum_with_obj = enumerator.each_with_object("foo")\nputs enum_with_obj.class # => Enumerator\n\nenum_with_obj.each do |item, obj|\n  puts "#{obj}: #{item}"\nend\n\n# foo: one\n# foo: two\n# foo: three\n</code></pre>This allows you to chain Enumerators together. For example, you can map a list's elements to strings containing the index and the element as a string via:<pre><code>puts %w[foo bar baz].map.with_index { |w, i| "#{i}:#{w}" }\n# => ["0:foo", "1:bar", "2:baz"]\n</code></pre>An Enumerator can also be used as an external iterator. For example, #next returns the next value of the iterator or raises StopIteration if the Enumerator is at the end.<pre><code>e = [1,2,3].each   # returns an enumerator object.\nputs e.next   # => 1\nputs e.next   # => 2\nputs e.next   # => 3\nputs e.next   # raises StopIteration\n</code></pre>You can use this to implement an internal iterator as follows:<pre><code>def ext_each(e)\n  while true\n    begin\n      vs = e.next_values\n    rescue StopIteration\n      return $!.result\n    end\n    y = yield(*vs)\n    e.feed y\n  end\nend\n\no = Object.new\n\ndef o.each\n  puts yield\n  puts yield(1)\n  puts yield(1, 2)\n  3\nend\n\n# use o.each as an internal iterator directly.\nputs o.each {|*x| puts x; [:b, *x] }\n# => [], [:b], [1], [:b, 1], [1, 2], [:b, 1, 2], 3\n\n# convert o.each to an external iterator for\n# implementing an internal iterator.\nputs ext_each(o.to_enum) {|*x| puts x; [:b, *x] }\n# => [], [:b], [1], [:b, 1], [1, 2], [:b, 1, 2], 3\n</code></pre>	http://ruby-doc.org/core/Enumerator.html
Enumerator::new	A			class methods							<pre><code>new(size = nil) { |yielder| ... }\nnew(obj, method = :each, *args)</code></pre>Creates a new Enumerator object, which can be used as an Enumerable.<br>In the first form, iteration is defined by the given block, in which a “yielder” object, given as block parameter, can be used to yield a value by calling the yield method (aliased as +<<+):<pre><code>fib = Enumerator.new do |y|\n  a = b = 1\n  loop do\n    y << a\n    a, b = b, a + b\n  end\nend\n\np fib.take(10) # => [1, 1, 2, 3, 5, 8, 13, 21, 34, 55]\n</code></pre>The optional parameter can be used to specify how to calculate the size in a lazy fashion (see #size). It can either be a value or a callable object.<br>In the second, deprecated, form, a generated Enumerator iterates over the given object using the given method with the given arguments passed.<br>Use of this form is discouraged. Use Kernel#enum_for or Kernel#to_enum instead.<pre><code>e = Enumerator.new(ObjectSpace, :each_object)\n    #-> ObjectSpace.enum_for(:each_object)\n\ne.select { |obj| obj.is_a?(Class) }  #=> array of all classes\n</code></pre>	http://ruby-doc.org/core/Enumerator.html#method-c-new
Enumerator#each	A			instance methods							<pre><code>each { |elm| block }                    → obj\neach                                    → enum\neach(*appending_args) { |elm| block }   → obj\neach(*appending_args)                   → an_enumerator</code></pre>Iterates over the block according to how this Enumerator was constructed. If no block and no arguments are given, returns self.<pre><code>"Hello, world!".scan(/\w+/)                     #=> ["Hello", "world"]\n"Hello, world!".to_enum(:scan, /\w+/).to_a      #=> ["Hello", "world"]\n"Hello, world!".to_enum(:scan).each(/\w+/).to_a #=> ["Hello", "world"]\n\nobj = Object.new\n\ndef obj.each_arg(a, b=:b, *rest)\n  yield a\n  yield b\n  yield rest\n  :method_returned\nend\n\nenum = obj.to_enum :each_arg, :a, :x\n\nenum.each.to_a                  #=> [:a, :x, []]\nenum.each.equal?(enum)          #=> true\nenum.each { |elm| elm }         #=> :method_returned\n\nenum.each(:y, :z).to_a          #=> [:a, :x, [:y, :z]]\nenum.each(:y, :z).equal?(enum)  #=> false\nenum.each(:y, :z) { |elm| elm } #=> :method_returned\n</code></pre>	http://ruby-doc.org/core/Enumerator.html#method-i-each
Enumerator#each_with_index	A			instance methods							<pre><code>each_with_index {|(*args), idx| ... }\neach_with_index</code></pre>Same as #with_index, i.e. there is no starting offset.<br>If no block is given, a new Enumerator is returned that includes the index.	http://ruby-doc.org/core/Enumerator.html#method-i-each_with_index
Enumerator#each_with_object	A			instance methods							<pre><code>each_with_object(obj) {|(*args), obj| ... }\neach_with_object(obj)</code></pre>Iterates the given block for each element with an arbitrary object, obj, and returns obj<br>If no block is given, returns a new Enumerator.<pre><code>to_three = Enumerator.new do |y|\n  3.times do |x|\n    y << x\n  end\nend\n\nto_three_with_string = to_three.with_object("foo")\nto_three_with_string.each do |x,string|\n  puts "#{string}: #{x}"\nend\n\n# => foo:0\n# => foo:1\n# => foo:2\n</code></pre>	http://ruby-doc.org/core/Enumerator.html#method-i-each_with_object
Enumerator#feed	A			instance methods							<pre><code>feed obj   → nil</code></pre>Sets the value to be returned by the next yield inside e.<br>If the value is not set, the yield returns nil.<br>This value is cleared after being yielded.<pre><code># Array#map passes the array's elements to "yield" and collects the\n# results of "yield" as an array.\n# Following example shows that "next" returns the passed elements and\n# values passed to "feed" are collected as an array which can be\n# obtained by StopIteration#result.\ne = [1,2,3].map\np e.next           #=> 1\ne.feed "a"\np e.next           #=> 2\ne.feed "b"\np e.next           #=> 3\ne.feed "c"\nbegin\n  e.next\nrescue StopIteration\n  p $!.result      #=> ["a", "b", "c"]\nend\n\no = Object.new\ndef o.each\n  x = yield         # (2) blocks\n  p x               # (5) => "foo"\n  x = yield         # (6) blocks\n  p x               # (8) => nil\n  x = yield         # (9) blocks\n  p x               # not reached w/o another e.next\nend\n\ne = o.to_enum\ne.next              # (1)\ne.feed "foo"        # (3)\ne.next              # (4)\ne.next              # (7)\n                    # (10)\n</code></pre>	http://ruby-doc.org/core/Enumerator.html#method-i-feed
Enumerator#inspect	A			instance methods							<pre><code>inspect  → string</code></pre>Creates a printable version of e.	http://ruby-doc.org/core/Enumerator.html#method-i-inspect
Enumerator#next	A			instance methods							<pre><code>next   → object</code></pre>Returns the next object in the enumerator, and move the internal position forward. When the position reached at the end, StopIteration is raised.<pre><code>a = [1,2,3]\ne = a.to_enum\np e.next   #=> 1\np e.next   #=> 2\np e.next   #=> 3\np e.next   #raises StopIteration\n</code></pre>Note that enumeration sequence by next does not affect other non-external enumeration methods, unless the underlying iteration methods itself has side-effect, e.g. IO#each_line.	http://ruby-doc.org/core/Enumerator.html#method-i-next
Enumerator#next_values	A			instance methods							<pre><code>next_values   → array</code></pre>Returns the next object as an array in the enumerator, and move the internal position forward. When the position reached at the end, StopIteration is raised.<br>This method can be used to distinguish yield and yield nil.<pre><code>o = Object.new\ndef o.each\n  yield\n  yield 1\n  yield 1, 2\n  yield nil\n  yield [1, 2]\nend\ne = o.to_enum\np e.next_values\np e.next_values\np e.next_values\np e.next_values\np e.next_values\ne = o.to_enum\np e.next\np e.next\np e.next\np e.next\np e.next\n\n## yield args       next_values      next\n#  yield            []               nil\n#  yield 1          [1]              1\n#  yield 1, 2       [1, 2]           [1, 2]\n#  yield nil        [nil]            nil\n#  yield [1, 2]     [[1, 2]]         [1, 2]\n</code></pre>Note that next_values does not affect other non-external enumeration methods unless underlying iteration method itself has side-effect, e.g. IO#each_line.	http://ruby-doc.org/core/Enumerator.html#method-i-next_values
Enumerator#peek	A			instance methods							<pre><code>peek   → object</code></pre>Returns the next object in the enumerator, but doesn’t move the internal position forward. If the position is already at the end, StopIteration is raised.<pre><code>a = [1,2,3]\ne = a.to_enum\np e.next   #=> 1\np e.peek   #=> 2\np e.peek   #=> 2\np e.peek   #=> 2\np e.next   #=> 2\np e.next   #=> 3\np e.peek   #raises StopIteration\n</code></pre>	http://ruby-doc.org/core/Enumerator.html#method-i-peek
Enumerator#peek_values	A			instance methods							<pre><code>peek_values   → array</code></pre>Returns the next object as an array, similar to #next_values, but doesn’t move the internal position forward. If the position is already at the end, StopIteration is raised.<pre><code>o = Object.new\ndef o.each\n  yield\n  yield 1\n  yield 1, 2\nend\ne = o.to_enum\np e.peek_values    #=> []\ne.next\np e.peek_values    #=> [1]\np e.peek_values    #=> [1]\ne.next\np e.peek_values    #=> [1, 2]\ne.next\np e.peek_values    # raises StopIteration\n</code></pre>	http://ruby-doc.org/core/Enumerator.html#method-i-peek_values
Enumerator#rewind	A			instance methods							<pre><code>rewind   → e</code></pre>Rewinds the enumeration sequence to the beginning.<br>If the enclosed object responds to a “rewind” method, it is called.	http://ruby-doc.org/core/Enumerator.html#method-i-rewind
Enumerator#size	A			instance methods							<pre><code>size          → int, Float::INFINITY or nil</code></pre>Returns the size of the enumerator, or nil if it can’t be calculated lazily.<pre><code>(1..100).to_a.permutation(4).size # => 94109400\nloop.size # => Float::INFINITY\n(1..100).drop_while.size # => nil\n</code></pre>	http://ruby-doc.org/core/Enumerator.html#method-i-size
Enumerator#with_index	A			instance methods							<pre><code>with_index(offset = 0) {|(*args), idx| ... }\nwith_index(offset = 0)</code></pre>Iterates the given block for each element with an index, which starts from offset. If no block is given, returns a new Enumerator that includes the index, starting from offset<br>the starting index to use	http://ruby-doc.org/core/Enumerator.html#method-i-with_index
Enumerator#with_object	A			instance methods							<pre><code>with_object(obj) {|(*args), obj| ... }\nwith_object(obj)</code></pre>Iterates the given block for each element with an arbitrary object, obj, and returns obj<br>If no block is given, returns a new Enumerator.<pre><code>to_three = Enumerator.new do |y|\n  3.times do |x|\n    y << x\n  end\nend\n\nto_three_with_string = to_three.with_object("foo")\nto_three_with_string.each do |x,string|\n  puts "#{string}: #{x}"\nend\n\n# => foo:0\n# => foo:1\n# => foo:2\n</code></pre>	http://ruby-doc.org/core/Enumerator.html#method-i-with_object
StopIteration	A			classes							Raised to stop the iteration, in particular by Enumerator#next. It is rescued by Kernel#loop.<pre><code>loop do\n  puts "Hello"\n  raise StopIteration\n  puts "World"\nend\nputs "Done!"\n</code></pre>produces:<pre><code>Hello\nDone!\n</code></pre>	http://ruby-doc.org/core/StopIteration.html
StopIteration#result	A			instance methods							<pre><code>result       → value</code></pre>Returns the return value of the iterator.<pre><code>o = Object.new\ndef o.each\n  yield 1\n  yield 2\n  yield 3\n  100\nend\n\ne = o.to_enum\n\nputs e.next                   #=> 1\nputs e.next                   #=> 2\nputs e.next                   #=> 3\n\nbegin\n  e.next\nrescue StopIteration => ex\n  puts ex.result              #=> 100\nend\n</code></pre>	http://ruby-doc.org/core/StopIteration.html#method-i-result
Enumerator::Lazy	A			classes							Lazy	http://ruby-doc.org/core/Enumerator/Lazy.html
Enumerator::Lazy::new	A			class methods							<pre><code>new(obj, size=nil) { |yielder, *values| ... }</code></pre>Creates a new Lazy enumerator. When the enumerator is actually enumerated (e.g. by calling force), obj will be enumerated and each value passed to the given block. The block can yield values back using yielder. For example, to create a method filter_map in both lazy and non-lazy fashions:<pre><code>module Enumerable\n  def filter_map(&block)\n    map(&block).compact\n  end\nend\n\nclass Enumerator::Lazy\n  def filter_map\n    Lazy.new(self) do |yielder, *values|\n      result = yield *values\n      yielder << result if result\n    end\n  end\nend\n\n(1..Float::INFINITY).lazy.filter_map{|i| i*i if i.even?}.first(5)\n    # => [4, 16, 36, 64, 100]\n</code></pre>	http://ruby-doc.org/core/Enumerator/Lazy.html#method-c-new
Enumerator::Lazy#chunk	A			instance methods								http://ruby-doc.org/core/Enumerator/Lazy.html#method-i-chunk
Enumerator::Lazy#collect	A			instance methods								http://ruby-doc.org/core/Enumerator/Lazy.html#method-i-collect
Enumerator::Lazy#collect_concat	A			instance methods							<pre><code>collect_concat { |obj| block } → a_lazy_enumerator</code></pre>Returns a new lazy enumerator with the concatenated results of running block once for every element in lazy.<pre><code>["foo", "bar"].lazy.flat_map {|i| i.each_char.lazy}.force\n#=> ["f", "o", "o", "b", "a", "r"]\n</code></pre>A value x returned by block is decomposed if either of the following conditions is true:<br>Otherwise, x is contained as-is in the return value.<pre><code>[{a:1}, {b:2}].lazy.flat_map {|i| i}.force\n#=> [{:a=>1}, {:b=>2}]\n</code></pre>	http://ruby-doc.org/core/Enumerator/Lazy.html#method-i-collect_concat
Enumerator::Lazy#drop	A			instance methods								http://ruby-doc.org/core/Enumerator/Lazy.html#method-i-drop
Enumerator::Lazy#drop_while	A			instance methods								http://ruby-doc.org/core/Enumerator/Lazy.html#method-i-drop_while
Enumerator::Lazy#enum_for	A			instance methods							<pre><code>enum_for(method = :each, *args)                → lazy_enum\nenum_for(method = :each, *args){|*args| block} → lazy_enum</code></pre>Similar to Kernel#to_enum, except it returns a lazy enumerator. This makes it easy to define Enumerable methods that will naturally remain lazy if called from a lazy enumerator.<br>For example, continuing from the example in Kernel#to_enum:<pre><code># See Kernel#to_enum for the definition of repeat\nr = 1..Float::INFINITY\nr.repeat(2).first(5) # => [1, 1, 2, 2, 3]\nr.repeat(2).class # => Enumerator\nr.repeat(2).map{|n| n ** 2}.first(5) # => endless loop!\n# works naturally on lazy enumerator:\nr.lazy.repeat(2).class # => Enumerator::Lazy\nr.lazy.repeat(2).map{|n| n ** 2}.first(5) # => [1, 1, 4, 4, 9]\n</code></pre>	http://ruby-doc.org/core/Enumerator/Lazy.html#method-i-enum_for
Enumerator::Lazy#find_all	A			instance methods								http://ruby-doc.org/core/Enumerator/Lazy.html#method-i-find_all
Enumerator::Lazy#flat_map	A			instance methods							<pre><code>flat_map       { |obj| block } → a_lazy_enumerator</code></pre>Returns a new lazy enumerator with the concatenated results of running block once for every element in lazy.<pre><code>["foo", "bar"].lazy.flat_map {|i| i.each_char.lazy}.force\n#=> ["f", "o", "o", "b", "a", "r"]\n</code></pre>A value x returned by block is decomposed if either of the following conditions is true:<br>Otherwise, x is contained as-is in the return value.<pre><code>[{a:1}, {b:2}].lazy.flat_map {|i| i}.force\n#=> [{:a=>1}, {:b=>2}]\n</code></pre>	http://ruby-doc.org/core/Enumerator/Lazy.html#method-i-flat_map
Enumerator::Lazy#grep	A			instance methods								http://ruby-doc.org/core/Enumerator/Lazy.html#method-i-grep
Enumerator::Lazy#grep_v	A			instance methods								http://ruby-doc.org/core/Enumerator/Lazy.html#method-i-grep_v
Enumerator::Lazy#lazy	A			instance methods								http://ruby-doc.org/core/Enumerator/Lazy.html#method-i-lazy
Enumerator::Lazy#map	A			instance methods								http://ruby-doc.org/core/Enumerator/Lazy.html#method-i-map
Enumerator::Lazy#reject	A			instance methods								http://ruby-doc.org/core/Enumerator/Lazy.html#method-i-reject
Enumerator::Lazy#select	A			instance methods								http://ruby-doc.org/core/Enumerator/Lazy.html#method-i-select
Enumerator::Lazy#slice_after	A			instance methods								http://ruby-doc.org/core/Enumerator/Lazy.html#method-i-slice_after
Enumerator::Lazy#slice_before	A			instance methods								http://ruby-doc.org/core/Enumerator/Lazy.html#method-i-slice_before
Enumerator::Lazy#slice_when	A			instance methods								http://ruby-doc.org/core/Enumerator/Lazy.html#method-i-slice_when
Enumerator::Lazy#take	A			instance methods								http://ruby-doc.org/core/Enumerator/Lazy.html#method-i-take
Enumerator::Lazy#take_while	A			instance methods								http://ruby-doc.org/core/Enumerator/Lazy.html#method-i-take_while
Enumerator::Lazy#to_enum	A			instance methods							<pre><code>to_enum(method = :each, *args)                 → lazy_enum\nto_enum(method = :each, *args) {|*args| block} → lazy_enum</code></pre>Similar to Kernel#to_enum, except it returns a lazy enumerator. This makes it easy to define Enumerable methods that will naturally remain lazy if called from a lazy enumerator.<br>For example, continuing from the example in Kernel#to_enum:<pre><code># See Kernel#to_enum for the definition of repeat\nr = 1..Float::INFINITY\nr.repeat(2).first(5) # => [1, 1, 2, 2, 3]\nr.repeat(2).class # => Enumerator\nr.repeat(2).map{|n| n ** 2}.first(5) # => endless loop!\n# works naturally on lazy enumerator:\nr.lazy.repeat(2).class # => Enumerator::Lazy\nr.lazy.repeat(2).map{|n| n ** 2}.first(5) # => [1, 1, 4, 4, 9]\n</code></pre>	http://ruby-doc.org/core/Enumerator/Lazy.html#method-i-to_enum
Enumerator::Lazy#zip	A			instance methods								http://ruby-doc.org/core/Enumerator/Lazy.html#method-i-zip
Enumerator::Generator	A			classes							Generator	http://ruby-doc.org/core/Enumerator/Generator.html
Enumerator::Yielder	A			classes							Yielder	http://ruby-doc.org/core/Enumerator/Yielder.html
Exception	A			classes							Descendants of class Exception are used to communicate between Kernel#raise and rescue statements in begin ... end blocks. Exception objects carry information about the exception – its type (the exception’s class name), an optional descriptive string, and optional traceback information. Exception subclasses may add additional information like NameError#name.<br>Programs may make subclasses of Exception, typically of StandardError or RuntimeError, to provide custom classes and add additional information. See the subclass list below for defaults for raise and rescue.<br>When an exception has been raised but not yet handled (in rescue, ensure, at_exit and END blocks) the global variable $! will contain the current exception and $@ contains the current exception’s backtrace.<br>It is recommended that a library should have one subclass of StandardError or RuntimeError and have specific exception types inherit from it. This allows the user to rescue a generic exception type to catch all exceptions the library may raise even if future versions of the library add new exception subclasses.<br>For example:<pre><code>class MyLibrary\n  class Error < RuntimeError\n  end\n\n  class WidgetError < Error\n  end\n\n  class FrobError < Error\n  end\n\nend\n</code></pre>To handle both WidgetError and FrobError the library user can rescue MyLibrary::Error.<br>The built-in subclasses of Exception are:<br>NoMemoryError<br>ScriptError<br>LoadError<br>NotImplementedError<br>SyntaxError<br>SecurityError<br>SignalException<br>Interrupt<br>StandardError -- default for rescue<br>ArgumentError<br>UncaughtThrowError<br>EncodingError<br>FiberError<br>IOError<br>EOFError<br>IndexError<br>KeyError<br>StopIteration<br>LocalJumpError<br>NameError<br>NoMethodError<br>RangeError<br>FloatDomainError<br>RegexpError<br>RuntimeError -- default for raise<br>SystemCallError<br>Errno::*<br>ThreadError<br>TypeError<br>ZeroDivisionError<br>SystemExit<br>SystemStackError<br>fatal – impossible to rescue	http://ruby-doc.org/core/Exception.html
Exception::exception	A			class methods							<pre><code>exception(string)  →  an_exception or exc</code></pre>With no argument, or if the argument is the same as the receiver, return the receiver. Otherwise, create a new exception object of the same class as the receiver, but with a message equal to string.to_str.	http://ruby-doc.org/core/Exception.html#method-c-exception
Exception::new	A			class methods							<pre><code>new(msg = nil)   →  exception</code></pre>Construct a new Exception object, optionally passing in a message.	http://ruby-doc.org/core/Exception.html#method-c-new
Exception#==	A			instance methods							<pre><code>exc == obj   → true or false</code></pre>Equality—If obj is not an Exception, returns false. Otherwise, returns true if exc and obj share same class, messages, and backtrace.	http://ruby-doc.org/core/Exception.html#method-i-3D-3D
Exception#backtrace	A			instance methods							<pre><code>backtrace    → array</code></pre>Returns any backtrace associated with the exception. The backtrace is an array of strings, each containing either “filename:lineNo: in `method”‘ or “filename:lineNo.”<pre><code>def a\n  raise "boom"\nend\n\ndef b\n  a()\nend\n\nbegin\n  b()\nrescue => detail\n  print detail.backtrace.join("\n")\nend\n</code></pre>produces:	http://ruby-doc.org/core/Exception.html#method-i-backtrace
Exception#backtrace_locations	A			instance methods							<pre><code>backtrace_locations    → array</code></pre>Returns any backtrace associated with the exception. This method is similar to #backtrace, but the backtrace is an array of<br>Now, this method is not affected by #set_backtrace.	http://ruby-doc.org/core/Exception.html#method-i-backtrace_locations
Exception#cause	A			instance methods							<pre><code>cause   → an_exception or nil</code></pre>Returns the previous exception ($!) at the time this exception was raised. This is useful for wrapping exceptions and retaining the original exception information.	http://ruby-doc.org/core/Exception.html#method-i-cause
Exception#exception	A			instance methods							<pre><code>exception(string)  →  an_exception or exc</code></pre>With no argument, or if the argument is the same as the receiver, return the receiver. Otherwise, create a new exception object of the same class as the receiver, but with a message equal to string.to_str.	http://ruby-doc.org/core/Exception.html#method-i-exception
Exception#inspect	A			instance methods							<pre><code>inspect   → string</code></pre>Return this exception’s class name and message	http://ruby-doc.org/core/Exception.html#method-i-inspect
Exception#message	A			instance methods							<pre><code>message   →  string</code></pre>Returns the result of invoking exception.to_s. Normally this returns the exception’s message or name. By supplying a to_str method, exceptions are agreeing to be used where Strings are expected.	http://ruby-doc.org/core/Exception.html#method-i-message
Exception#set_backtrace	A			instance methods							<pre><code>set_backtrace(backtrace)   →  array</code></pre>Sets the backtrace information associated with exc. The backtrace must be an array of String objects or a single String in the format described in #backtrace.	http://ruby-doc.org/core/Exception.html#method-i-set_backtrace
Exception#to_s	A			instance methods							<pre><code>to_s   →  string</code></pre>Returns exception’s message (or the name of the exception if no message is set).	http://ruby-doc.org/core/Exception.html#method-i-to_s
SystemExit	A			classes							Raised by exit to initiate the termination of the script.	http://ruby-doc.org/core/SystemExit.html
SystemExit::new	A			class methods							<pre><code>new              → system_exit\nnew(status)      → system_exit\nnew(status, msg) → system_exit\nnew(msg)         → system_exit</code></pre>Create a new SystemExit exception with the given status and message. Status is true, false, or an integer. If status is not given, true is used.	http://ruby-doc.org/core/SystemExit.html#method-c-new
SystemExit#status	A			instance methods							<pre><code>status   → fixnum</code></pre>Return the status value associated with this system exit.	http://ruby-doc.org/core/SystemExit.html#method-i-status
SystemExit#success?	A			instance methods							<pre><code>success?  → true or false</code></pre>Returns true if exiting successful, false if not.	http://ruby-doc.org/core/SystemExit.html#method-i-success-3F
fatal	A			classes							fatal is an Exception that is raised when ruby has encountered a fatal error and must exit. You are not able to rescue fatal.	http://ruby-doc.org/core/fatal.html
SignalException	A			classes							Raised when a signal is received.<pre><code>begin\n  Process.kill('HUP',Process.pid)\n  sleep # wait for receiver to handle signal sent by Process.kill\nrescue SignalException => e\n  puts "received Exception #{e}"\nend\n</code></pre>produces:<pre><code>received Exception SIGHUP\n</code></pre>	http://ruby-doc.org/core/SignalException.html
SignalException::new	A			class methods							<pre><code>new(sig_name)              →  signal_exception\nnew(sig_number [, name])   →  signal_exception</code></pre>Construct a new SignalException object. sig_name should be a known signal name.	http://ruby-doc.org/core/SignalException.html#method-c-new
SignalException#signo	A			instance methods							<pre><code>signo   →  num</code></pre>Returns a signal number.	http://ruby-doc.org/core/SignalException.html#method-i-signo
Interrupt	A			classes							Raised with the interrupt signal is received, typically because the user pressed on Control-C (on most posix platforms). As such, it is a subclass of SignalException.<pre><code>begin\n  puts "Press ctrl-C when you get bored"\n  loop {}\nrescue Interrupt => e\n  puts "Note: You will typically use Signal.trap instead."\nend\n</code></pre>produces:<br>then waits until it is interrupted with Control-C and then prints:	http://ruby-doc.org/core/Interrupt.html
StandardError	A			classes							The most standard error types are subclasses of StandardError. A rescue clause without an explicit Exception class will rescue all StandardErrors (and only those).<pre><code>def foo\n  raise "Oups"\nend\nfoo rescue "Hello"   #=> "Hello"\n</code></pre>On the other hand:<pre><code>require 'does/not/exist' rescue "Hi"\n</code></pre>raises the exception:	http://ruby-doc.org/core/StandardError.html
TypeError	A			classes							Raised when encountering an object that is not of the expected type.<pre><code>[1, 2, 3].first("two")\n</code></pre>raises the exception:	http://ruby-doc.org/core/TypeError.html
ArgumentError	A			classes							Raised when the arguments are wrong and there isn't a more specific Exception class.<br>Ex: passing the wrong number of arguments<pre><code>[1, 2, 3].first(4, 5)\n</code></pre>raises the exception:<br>Ex: passing an argument that is not acceptable:<pre><code>[1, 2, 3].first(-4)\n</code></pre>raises the exception:	http://ruby-doc.org/core/ArgumentError.html
IndexError	A			classes							Raised when the given index is invalid.<pre><code>a = [:foo, :bar]\na.fetch(0)   #=> :foo\na[4]         #=> nil\na.fetch(4)   #=> IndexError: index 4 outside of array bounds: -2...2\n</code></pre>	http://ruby-doc.org/core/IndexError.html
KeyError	A			classes							Raised when the specified key is not found. It is a subclass of IndexError.<pre><code>h = {"foo" => :bar}\nh.fetch("foo") #=> :bar\nh.fetch("baz") #=> KeyError: key not found: "baz"\n</code></pre>	http://ruby-doc.org/core/KeyError.html
RangeError	A			classes							Raised when a given numerical value is out of range.<pre><code>[1, 2, 3].drop(1 << 100)\n</code></pre>raises the exception:	http://ruby-doc.org/core/RangeError.html
ScriptError	A			classes							ScriptError is the superclass for errors raised when a script can not be executed because of a LoadError, NotImplementedError or a SyntaxError. Note these type of ScriptErrors are not StandardError and will not be rescued unless it is specified explicitly (or its ancestor Exception).	http://ruby-doc.org/core/ScriptError.html
SyntaxError	A			classes							Raised when encountering Ruby code with an invalid syntax.<pre><code>eval("1+1=2")\n</code></pre>raises the exception:	http://ruby-doc.org/core/SyntaxError.html
LoadError	A			classes							Raised when a file required (a Ruby script, extension library, ...) fails to load.<pre><code>require 'this/file/does/not/exist'\n</code></pre>raises the exception:	http://ruby-doc.org/core/LoadError.html
NotImplementedError	A			classes							Raised when a feature is not implemented on the current platform. For example, methods depending on the fsync or fork system calls may raise this exception if the underlying operating system or Ruby runtime does not support them.<br>Note that if fork raises a NotImplementedError, then respond_to?(:fork) returns false.	http://ruby-doc.org/core/NotImplementedError.html
NameError	A			classes							Raised when a given name is invalid or undefined.<pre><code>puts foo\n</code></pre>raises the exception:<br>Since constant names must start with a capital:<pre><code>Fixnum.const_set :answer, 42\n</code></pre>raises the exception:	http://ruby-doc.org/core/NameError.html
NameError::new	A			class methods							<pre><code>new(msg [, name])  → name_error</code></pre>Construct a new NameError exception. If given the name parameter may subsequently be examined using the NameError.name method.	http://ruby-doc.org/core/NameError.html#method-c-new
NameError#local_variables	A			instance methods							<pre><code>local_variables  →  array</code></pre>Return a list of the local variable names defined where this NameError exception was raised.<br>Internal use only.	http://ruby-doc.org/core/NameError.html#method-i-local_variables
NameError#name	A			instance methods							<pre><code>name    →  string or nil</code></pre>Return the name associated with this NameError exception.	http://ruby-doc.org/core/NameError.html#method-i-name
NameError#receiver	A			instance methods							<pre><code>receiver  → object</code></pre>Return the receiver associated with this NameError exception.	http://ruby-doc.org/core/NameError.html#method-i-receiver
NoMethodError	A			classes							Raised when a method is called on a receiver which doesn't have it defined and also fails to respond with method_missing.<pre><code>"hello".to_ary\n</code></pre>raises the exception:	http://ruby-doc.org/core/NoMethodError.html
NoMethodError::new	A			class methods							<pre><code>new(msg, name [, args])  → no_method_error</code></pre>Construct a NoMethodError exception for a method of the given name called with the given arguments. The name may be accessed using the #name method on the resulting object, and the arguments using the #args method.	http://ruby-doc.org/core/NoMethodError.html#method-c-new
NoMethodError#args	A			instance methods							<pre><code>args  → obj</code></pre>Return the arguments passed in as the third parameter to the constructor.	http://ruby-doc.org/core/NoMethodError.html#method-i-args
RuntimeError	A			classes							A generic error class raised when an invalid operation is attempted.<pre><code>[1, 2, 3].freeze << 4\n</code></pre>raises the exception:<br>Kernel#raise will raise a RuntimeError if no Exception class is specified.<pre><code>raise "ouch"\n</code></pre>raises the exception:	http://ruby-doc.org/core/RuntimeError.html
SecurityError	A			classes							Raised when attempting a potential unsafe operation, typically when the $SAFE level is raised above 0.<pre><code>foo = "bar"\nproc = Proc.new do\n  $SAFE = 3\n  foo.untaint\nend\nproc.call\n</code></pre>raises the exception:	http://ruby-doc.org/core/SecurityError.html
NoMemoryError	A			classes							Raised when memory allocation fails.	http://ruby-doc.org/core/NoMemoryError.html
EncodingError	A			classes							EncodingError is the base class for encoding errors.	http://ruby-doc.org/core/EncodingError.html
SystemCallError	A			classes							SystemCallError is the base class for all low-level platform-dependent errors.<br>The errors available on the current platform are subclasses of SystemCallError and are defined in the Errno module.<pre><code>File.open("does/not/exist")\n</code></pre>raises the exception:	http://ruby-doc.org/core/SystemCallError.html
SystemCallError::===	A			class methods							<pre><code>system_call_error === other  → true or false</code></pre>Return true if the receiver is a generic SystemCallError, or if the error numbers self and other are the same.	http://ruby-doc.org/core/SystemCallError.html#method-c-3D-3D-3D
SystemCallError::new	A			class methods							<pre><code>new(msg, errno)  → system_call_error_subclass</code></pre>If errno corresponds to a known system error code, constructs the appropriate Errno class for that error, otherwise constructs a generic SystemCallError object. The error number is subsequently available via the errno method.	http://ruby-doc.org/core/SystemCallError.html#method-c-new
SystemCallError#errno	A			instance methods							<pre><code>errno   → fixnum</code></pre>Return this SystemCallError’s error number.	http://ruby-doc.org/core/SystemCallError.html#method-i-errno
Encoding::CompatibilityError	A			classes							Raised by Encoding and String methods when the source encoding is incompatible with the target encoding.	http://ruby-doc.org/core/Encoding/CompatibilityError.html
File::Stat	A			classes							Objects of class File::Stat encapsulate common status information for File objects. The information is recorded at the moment the File::Stat object is created; changes made to the file after that point will not be reflected. File::Stat objects are returned by IO#stat, File::stat, File#lstat, and File::lstat. Many of these methods return platform-specific values, and not all values are meaningful on all systems. See also Kernel#test.	http://ruby-doc.org/core/File/Stat.html
File::Stat::new	A			class methods							<pre><code>File::Stat.new(file_name)  → stat</code></pre>Create a File::Stat object for the given file name (raising an exception if the file doesn’t exist).	http://ruby-doc.org/core/File/Stat.html#method-c-new
File::Stat#<=>	A			instance methods							<pre><code>stat <=> other_stat    → -1, 0, 1, nil</code></pre>Compares File::Stat objects by comparing their respective modification times.<br>nil is returned if other_stat is not a File::Stat object<pre><code>f1 = File.new("f1", "w")\nsleep 1\nf2 = File.new("f2", "w")\nf1.stat <=> f2.stat   #=> -1\n</code></pre>	http://ruby-doc.org/core/File/Stat.html#method-i-3C-3D-3E
File::Stat#atime	A			instance methods							<pre><code>atime   → time</code></pre>Returns the last access time for this file as an object of class Time.<pre><code>File.stat("testfile").atime   #=> Wed Dec 31 18:00:00 CST 1969\n</code></pre>	http://ruby-doc.org/core/File/Stat.html#method-i-atime
File::Stat#birthtime	A			instance methods							<pre><code>birthtime  →  aTime</code></pre>Returns the birth time for stat.<br>If the platform doesn’t have birthtime, raises NotImplementedError.<pre><code>File.write("testfile", "foo")\nsleep 10\nFile.write("testfile", "bar")\nsleep 10\nFile.chmod(0644, "testfile")\nsleep 10\nFile.read("testfile")\nFile.stat("testfile").birthtime   #=> 2014-02-24 11:19:17 +0900\nFile.stat("testfile").mtime       #=> 2014-02-24 11:19:27 +0900\nFile.stat("testfile").ctime       #=> 2014-02-24 11:19:37 +0900\nFile.stat("testfile").atime       #=> 2014-02-24 11:19:47 +0900\n</code></pre>	http://ruby-doc.org/core/File/Stat.html#method-i-birthtime
File::Stat#blksize	A			instance methods							<pre><code>blksize   → integer or nil</code></pre>Returns the native file system’s block size. Will return nil on platforms that don’t support this information.<pre><code>File.stat("testfile").blksize   #=> 4096\n</code></pre>	http://ruby-doc.org/core/File/Stat.html#method-i-blksize
File::Stat#blockdev?	A			instance methods							<pre><code>blockdev?   → true or false</code></pre>Returns true if the file is a block device, false if it isn’t or if the operating system doesn’t support this feature.<pre><code>File.stat("testfile").blockdev?    #=> false\nFile.stat("/dev/hda1").blockdev?   #=> true\n</code></pre>	http://ruby-doc.org/core/File/Stat.html#method-i-blockdev-3F
File::Stat#blocks	A			instance methods							<pre><code>blocks    → integer or nil</code></pre>Returns the number of native file system blocks allocated for this file, or nil if the operating system doesn’t support this feature.<pre><code>File.stat("testfile").blocks   #=> 2\n</code></pre>	http://ruby-doc.org/core/File/Stat.html#method-i-blocks
File::Stat#chardev?	A			instance methods							<pre><code>chardev?    → true or false</code></pre>Returns true if the file is a character device, false if it isn’t or if the operating system doesn’t support this feature.<pre><code>File.stat("/dev/tty").chardev?   #=> true\n</code></pre>	http://ruby-doc.org/core/File/Stat.html#method-i-chardev-3F
File::Stat#ctime	A			instance methods							<pre><code>ctime  →  aTime</code></pre>Returns the change time for stat (that is, the time directory information about the file was changed, not the file itself).<br>Note that on Windows (NTFS), returns creation time (birth time).<pre><code>File.stat("testfile").ctime   #=> Wed Apr 09 08:53:14 CDT 2003\n</code></pre>	http://ruby-doc.org/core/File/Stat.html#method-i-ctime
File::Stat#dev	A			instance methods							<pre><code>dev    → fixnum</code></pre>Returns an integer representing the device on which stat resides.<pre><code>File.stat("testfile").dev   #=> 774\n</code></pre>	http://ruby-doc.org/core/File/Stat.html#method-i-dev
File::Stat#dev_major	A			instance methods							<pre><code>dev_major   → fixnum</code></pre>Returns the major part of File_Stat#dev or nil.<pre><code>File.stat("/dev/fd1").dev_major   #=> 2\nFile.stat("/dev/tty").dev_major   #=> 5\n</code></pre>	http://ruby-doc.org/core/File/Stat.html#method-i-dev_major
File::Stat#dev_minor	A			instance methods							<pre><code>dev_minor   → fixnum</code></pre>Returns the minor part of File_Stat#dev or nil.<pre><code>File.stat("/dev/fd1").dev_minor   #=> 1\nFile.stat("/dev/tty").dev_minor   #=> 0\n</code></pre>	http://ruby-doc.org/core/File/Stat.html#method-i-dev_minor
File::Stat#directory?	A			instance methods							<pre><code>directory?(file_name)   →  true or false</code></pre>Returns true if the named file is a directory, or a symlink that points at a directory, and false otherwise.<br>file_name can be an IO object.<pre><code>File.directory?(".")\n</code></pre>	http://ruby-doc.org/core/File/Stat.html#method-i-directory-3F
File::Stat#executable?	A			instance methods							<pre><code>executable?    → true or false</code></pre>Returns true if stat is executable or if the operating system doesn’t distinguish executable files from nonexecutable files. The tests are made using the effective owner of the process.<pre><code>File.stat("testfile").executable?   #=> false\n</code></pre>	http://ruby-doc.org/core/File/Stat.html#method-i-executable-3F
File::Stat#executable_real?	A			instance methods							<pre><code>executable_real?    → true or false</code></pre>Same as executable?, but tests using the real owner of the process.	http://ruby-doc.org/core/File/Stat.html#method-i-executable_real-3F
File::Stat#file?	A			instance methods							<pre><code>file?    → true or false</code></pre>Returns true if stat is a regular file (not a device file, pipe, socket, etc.).<pre><code>File.stat("testfile").file?   #=> true\n</code></pre>	http://ruby-doc.org/core/File/Stat.html#method-i-file-3F
File::Stat#ftype	A			instance methods							<pre><code>ftype   → string</code></pre>Identifies the type of stat. The return string is one of: “file”, “directory”, “characterSpecial”, “blockSpecial”, “fifo”, “link”, “socket”, or “unknown”.<pre><code>File.stat("/dev/tty").ftype   #=> "characterSpecial"\n</code></pre>	http://ruby-doc.org/core/File/Stat.html#method-i-ftype
File::Stat#gid	A			instance methods							<pre><code>gid   → fixnum</code></pre>Returns the numeric group id of the owner of stat.<pre><code>File.stat("testfile").gid   #=> 500\n</code></pre>	http://ruby-doc.org/core/File/Stat.html#method-i-gid
File::Stat#grpowned?	A			instance methods							<pre><code>grpowned?   → true or false</code></pre>Returns true if the effective group id of the process is the same as the group id of stat. On Windows NT, returns false.<pre><code>File.stat("testfile").grpowned?      #=> true\nFile.stat("/etc/passwd").grpowned?   #=> false\n</code></pre>	http://ruby-doc.org/core/File/Stat.html#method-i-grpowned-3F
File::Stat#ino	A			instance methods							<pre><code>ino   → fixnum</code></pre>Returns the inode number for stat.<pre><code>File.stat("testfile").ino   #=> 1083669\n</code></pre>	http://ruby-doc.org/core/File/Stat.html#method-i-ino
File::Stat#inspect	A			instance methods							<pre><code>inspect  →  string</code></pre>Produce a nicely formatted description of stat.<pre><code>File.stat("/etc/passwd").inspect\n   #=> "#<File::Stat dev=0xe000005, ino=1078078, mode=0100644,\n   #    nlink=1, uid=0, gid=0, rdev=0x0, size=1374, blksize=4096,\n   #    blocks=8, atime=Wed Dec 10 10:16:12 CST 2003,\n   #    mtime=Fri Sep 12 15:41:41 CDT 2003,\n   #    ctime=Mon Oct 27 11:20:27 CST 2003,\n   #    birthtime=Mon Aug 04 08:13:49 CDT 2003>"\n</code></pre>	http://ruby-doc.org/core/File/Stat.html#method-i-inspect
File::Stat#mode	A			instance methods							<pre><code>mode   → fixnum</code></pre>Returns an integer representing the permission bits of stat. The meaning of the bits is platform dependent; on Unix systems, see stat(2).<pre><code>File.chmod(0644, "testfile")   #=> 1\ns = File.stat("testfile")\nsprintf("%o", s.mode)          #=> "100644"\n</code></pre>	http://ruby-doc.org/core/File/Stat.html#method-i-mode
File::Stat#mtime	A			instance methods							<pre><code>mtime  →  aTime</code></pre>Returns the modification time of stat.<pre><code>File.stat("testfile").mtime   #=> Wed Apr 09 08:53:14 CDT 2003\n</code></pre>	http://ruby-doc.org/core/File/Stat.html#method-i-mtime
File::Stat#nlink	A			instance methods							<pre><code>nlink   → fixnum</code></pre>Returns the number of hard links to stat.<pre><code>File.stat("testfile").nlink             #=> 1\nFile.link("testfile", "testfile.bak")   #=> 0\nFile.stat("testfile").nlink             #=> 2\n</code></pre>	http://ruby-doc.org/core/File/Stat.html#method-i-nlink
File::Stat#owned?	A			instance methods							<pre><code>owned?    → true or false</code></pre>Returns true if the effective user id of the process is the same as the owner of stat.<pre><code>File.stat("testfile").owned?      #=> true\nFile.stat("/etc/passwd").owned?   #=> false\n</code></pre>	http://ruby-doc.org/core/File/Stat.html#method-i-owned-3F
File::Stat#pipe?	A			instance methods							<pre><code>pipe?    → true or false</code></pre>Returns true if the operating system supports pipes and stat is a pipe; false otherwise.	http://ruby-doc.org/core/File/Stat.html#method-i-pipe-3F
File::Stat#rdev	A			instance methods							<pre><code>rdev   →  fixnum or nil</code></pre>Returns an integer representing the device type on which stat resides. Returns nil if the operating system doesn’t support this feature.<pre><code>File.stat("/dev/fd1").rdev   #=> 513\nFile.stat("/dev/tty").rdev   #=> 1280\n</code></pre>	http://ruby-doc.org/core/File/Stat.html#method-i-rdev
File::Stat#rdev_major	A			instance methods							<pre><code>rdev_major   → fixnum</code></pre>Returns the major part of File_Stat#rdev or nil.<pre><code>File.stat("/dev/fd1").rdev_major   #=> 2\nFile.stat("/dev/tty").rdev_major   #=> 5\n</code></pre>	http://ruby-doc.org/core/File/Stat.html#method-i-rdev_major
File::Stat#rdev_minor	A			instance methods							<pre><code>rdev_minor   → fixnum</code></pre>Returns the minor part of File_Stat#rdev or nil.<pre><code>File.stat("/dev/fd1").rdev_minor   #=> 1\nFile.stat("/dev/tty").rdev_minor   #=> 0\n</code></pre>	http://ruby-doc.org/core/File/Stat.html#method-i-rdev_minor
File::Stat#readable?	A			instance methods							<pre><code>readable?    → true or false</code></pre>Returns true if stat is readable by the effective user id of this process.<pre><code>File.stat("testfile").readable?   #=> true\n</code></pre>	http://ruby-doc.org/core/File/Stat.html#method-i-readable-3F
File::Stat#readable_real?	A			instance methods							<pre><code>readable_real?  →  true or false</code></pre>Returns true if stat is readable by the real user id of this process.<pre><code>File.stat("testfile").readable_real?   #=> true\n</code></pre>	http://ruby-doc.org/core/File/Stat.html#method-i-readable_real-3F
File::Stat#setgid?	A			instance methods							<pre><code>setgid?   → true or false</code></pre>Returns true if stat has the set-group-id permission bit set, false if it doesn’t or if the operating system doesn’t support this feature.<pre><code>File.stat("/usr/sbin/lpc").setgid?   #=> true\n</code></pre>	http://ruby-doc.org/core/File/Stat.html#method-i-setgid-3F
File::Stat#setuid?	A			instance methods							<pre><code>setuid?    → true or false</code></pre>Returns true if stat has the set-user-id permission bit set, false if it doesn’t or if the operating system doesn’t support this feature.<pre><code>File.stat("/bin/su").setuid?   #=> true\n</code></pre>	http://ruby-doc.org/core/File/Stat.html#method-i-setuid-3F
File::Stat#size	A			instance methods							<pre><code>size    → fixnum</code></pre>Returns the size of stat in bytes.<pre><code>File.stat("testfile").size   #=> 66\n</code></pre>	http://ruby-doc.org/core/File/Stat.html#method-i-size
File::Stat#size?	A			instance methods							<pre><code>size    → integer</code></pre>Returns the size of stat in bytes.<pre><code>File.stat("testfile").size   #=> 66\n</code></pre>	http://ruby-doc.org/core/File/Stat.html#method-i-size-3F
File::Stat#socket?	A			instance methods							<pre><code>socket?    → true or false</code></pre>Returns true if stat is a socket, false if it isn’t or if the operating system doesn’t support this feature.<pre><code>File.stat("testfile").socket?   #=> false\n</code></pre>	http://ruby-doc.org/core/File/Stat.html#method-i-socket-3F
File::Stat#sticky?	A			instance methods							<pre><code>sticky?    → true or false</code></pre>Returns true if stat has its sticky bit set, false if it doesn’t or if the operating system doesn’t support this feature.<pre><code>File.stat("testfile").sticky?   #=> false\n</code></pre>	http://ruby-doc.org/core/File/Stat.html#method-i-sticky-3F
File::Stat#symlink?	A			instance methods							<pre><code>symlink?    → true or false</code></pre>Returns true if stat is a symbolic link, false if it isn’t or if the operating system doesn’t support this feature. As File::stat automatically follows symbolic links, symlink? will always be false for an object returned by File::stat.<pre><code>File.symlink("testfile", "alink")   #=> 0\nFile.stat("alink").symlink?         #=> false\nFile.lstat("alink").symlink?        #=> true\n</code></pre>	http://ruby-doc.org/core/File/Stat.html#method-i-symlink-3F
File::Stat#uid	A			instance methods							<pre><code>uid    → fixnum</code></pre>Returns the numeric user id of the owner of stat.<pre><code>File.stat("testfile").uid   #=> 501\n</code></pre>	http://ruby-doc.org/core/File/Stat.html#method-i-uid
File::Stat#world_readable?	A			instance methods							<pre><code>world_readable? → fixnum or nil</code></pre>If stat is readable by others, returns an integer representing the file permission bits of stat. Returns nil otherwise. The meaning of the bits is platform dependent; on Unix systems, see stat(2).<pre><code>m = File.stat("/etc/passwd").world_readable?  #=> 420\nsprintf("%o", m)                              #=> "644"\n</code></pre>	http://ruby-doc.org/core/File/Stat.html#method-i-world_readable-3F
File::Stat#world_writable?	A			instance methods							<pre><code>world_writable?  →  fixnum or nil</code></pre>If stat is writable by others, returns an integer representing the file permission bits of stat. Returns nil otherwise. The meaning of the bits is platform dependent; on Unix systems, see stat(2).<pre><code>m = File.stat("/tmp").world_writable?         #=> 511\nsprintf("%o", m)                              #=> "777"\n</code></pre>	http://ruby-doc.org/core/File/Stat.html#method-i-world_writable-3F
File::Stat#writable?	A			instance methods							<pre><code>writable?  →  true or false</code></pre>Returns true if stat is writable by the effective user id of this process.<pre><code>File.stat("testfile").writable?   #=> true\n</code></pre>	http://ruby-doc.org/core/File/Stat.html#method-i-writable-3F
File::Stat#writable_real?	A			instance methods							<pre><code>writable_real?  →  true or false</code></pre>Returns true if stat is writable by the real user id of this process.<pre><code>File.stat("testfile").writable_real?   #=> true\n</code></pre>	http://ruby-doc.org/core/File/Stat.html#method-i-writable_real-3F
File::Stat#zero?	A			instance methods							<pre><code>zero?    → true or false</code></pre>Returns true if stat is a zero-length file; false otherwise.<pre><code>File.stat("testfile").zero?   #=> false\n</code></pre>	http://ruby-doc.org/core/File/Stat.html#method-i-zero-3F
IO	A			classes							The IO class is the basis for all input and output in Ruby. An I/O stream may be duplexed (that is, bidirectional), and so may use more than one native operating system stream.<br>Many of the examples in this section use the File class, the only standard subclass of IO. The two classes are closely associated. Like the File class, the Socket library subclasses from IO (such as TCPSocket or UDPSocket).<br>The Kernel#open method can create an IO (or File) object for these types of arguments:<br>A plain string represents a filename suitable for the underlying operating system.<br>A string starting with "|" indicates a subprocess. The remainder of the string following the "|" is invoked as a process with appropriate input/output channels connected to it.<br>A string equal to "|-" will create another Ruby instance as a subprocess.<br>The IO may be opened with different file modes (read-only, write-only) and encodings for proper conversion. See ::new for these options. See Kernel#open for details of the various command formats described above.<br>::popen, the Open3 library, or Process#spawn may also be used to communicate with subprocesses through an IO.<br>Ruby will convert pathnames between different operating system conventions if possible. For instance, on a Windows system the filename "/gumby/ruby/test.rb" will be opened as "\gumby\ruby\test.rb". When specifying a Windows-style filename in a Ruby string, remember to escape the backslashes:<pre><code>"c:\\gumby\\ruby\\test.rb"\n</code></pre>Our examples here will use the Unix-style forward slashes; File::ALT_SEPARATOR can be used to get the platform-specific separator character.<br>The global constant ARGF (also accessible as $<) provides an IO-like stream which allows access to all files mentioned on the command line (or STDIN if no files are mentioned). ARGF#path and its alias ARGF#filename are provided to access the name of the file currently being read.	http://ruby-doc.org/core/IO.html
IO::binread	A			class methods							<pre><code>binread(name, [length [, offset]] )   → string</code></pre>Opens the file, optionally seeks to the given offset, then returns length bytes (defaulting to the rest of the file). binread ensures the file is closed before returning. The open mode would be “rb:ASCII-8BIT”.<pre><code>IO.binread("testfile")           #=> "This is line one\nThis is line two\nThis is line three\nAnd so on...\n"\nIO.binread("testfile", 20)       #=> "This is line one\nThi"\nIO.binread("testfile", 20, 10)   #=> "ne one\nThis is line "\n</code></pre>	http://ruby-doc.org/core/IO.html#method-c-binread
IO::binwrite	A			class methods							<pre><code>binwrite(name, string, [offset] )   => fixnum\nbinwrite(name, string, [offset], open_args )   => fixnum</code></pre>Same as IO.write except opening the file in binary mode and ASCII-8BIT encoding (“wb:ASCII-8BIT”).	http://ruby-doc.org/core/IO.html#method-c-binwrite
IO::copy_stream	A			class methods							<pre><code>copy_stream(src, dst)\ncopy_stream(src, dst, copy_length)\ncopy_stream(src, dst, copy_length, src_offset)</code></pre>::copy_stream copies src to dst. src and dst is either a filename or an IO.<br>This method returns the number of bytes copied.<br>If optional arguments are not given, the start position of the copy is the beginning of the filename or the current file offset of the IO. The end position of the copy is the end of file.<br>If copy_length is given, No more than copy_length bytes are copied.<br>If src_offset is given, it specifies the start position of the copy.<br>When src_offset is specified and src is an IO, ::copy_stream doesn’t move the current file offset.	http://ruby-doc.org/core/IO.html#method-c-copy_stream
IO::for_fd	A			class methods							<pre><code>for_fd(fd, mode [, opt])    → io</code></pre>Synonym for IO.new.	http://ruby-doc.org/core/IO.html#method-c-for_fd
IO::foreach	A			class methods							<pre><code>foreach(name, sep=$/ [, open_args]) {|line| block }     → nil\nforeach(name, limit [, open_args]) {|line| block }      → nil\nforeach(name, sep, limit [, open_args]) {|line| block } → nil\nforeach(...)                                            → an_enumerator</code></pre>Executes the block for every line in the named I/O port, where lines are separated by sep.<br>If no block is given, an enumerator is returned instead.<pre><code>IO.foreach("testfile") {|x| print "GOT ", x }\n</code></pre>produces:<br>If the last argument is a hash, it’s the keyword argument to open. See IO.read for detail.	http://ruby-doc.org/core/IO.html#method-c-foreach
IO::new	A			class methods							<pre><code>new(fd [, mode] [, opt])   → io</code></pre>Returns a new IO object (a stream) for the given integer file descriptor fd and mode string. opt may be used to specify parts of mode in a more readable fashion. See also ::sysopen and ::for_fd.<br>::new is called by various File and IO opening methods such as ::open, Kernel#open, and File.open.<br>When mode is an integer it must be combination of the modes defined in File::Constants (File::RDONLY, +File::WRONLY | File::CREAT+). See the open(2) man page for more information.<br>When mode is a string it must be in one of the following forms:<br>fmode is an IO open mode string, ext_enc is the external encoding for the IO and int_enc is the internal encoding.<br>Ruby allows the following open modes:<br>The following modes must be used separately, and along with one or more of the modes seen above.<br>When the open mode of original IO is read only, the mode cannot be changed to be writable. Similarly, the open mode cannot be changed from write only to readable.<br>When such a change is attempted the error is raised in different locations according to the platform.<br>When ext_enc is specified, strings read will be tagged by the encoding when reading, and strings output will be converted to the specified encoding when writing.<br>When ext_enc and int_enc are specified read strings will be converted from ext_enc to int_enc upon input, and written strings will be converted from int_enc to ext_enc upon output. See Encoding for further details of transcoding on input and output.<br>If “BOM|UTF-8”, “BOM|UTF-16LE” or “BOM|UTF16-BE” are used, ruby checks for a Unicode BOM in the input document to help determine the encoding. For UTF-16 encodings the file open mode must be binary. When present, the BOM is stripped and the external encoding from the BOM is used. When the BOM is missing the given Unicode encoding is used as ext_enc. (The BOM-set encoding option is case insensitive, so “bom|utf-8” is also valid.)<br>opt can be used instead of mode for improved readability. The following keys are supported:<br>Same as mode parameter<br>Specifies file open flags as integer. If mode parameter is given, this parameter will be bitwise-ORed.<br>External encoding for the IO. “-” is a synonym for the default external encoding.<br>Internal encoding for the IO. “-” is a synonym for the default internal encoding.<br>If the value is nil no conversion occurs.<br>Specifies external and internal encodings as “extern:intern”.<br>If the value is truth value, same as “t” in argument mode.<br>If the value is truth value, same as “b” in argument mode.<br>If the value is false, the fd will be kept open after this IO instance gets finalized.<br>Also, opt can have same keys in String#encode for controlling conversion between the external encoding and the internal encoding.<pre><code>fd = IO.sysopen("/dev/tty", "w")\na = IO.new(fd,"w")\n$stderr.puts "Hello"\na.puts "World"\n</code></pre>Produces:<pre><code>Hello\nWorld\n</code></pre><pre><code>require 'fcntl'\n\nfd = STDERR.fcntl(Fcntl::F_DUPFD)\nio = IO.new(fd, mode: 'w:UTF-16LE', cr_newline: true)\nio.puts "Hello, World!"\n\nfd = STDERR.fcntl(Fcntl::F_DUPFD)\nio = IO.new(fd, mode: 'w', cr_newline: true,\n            external_encoding: Encoding::UTF_16LE)\nio.puts "Hello, World!"\n</code></pre>Both of above print “Hello, World!” in UTF-16LE to standard error output with converting EOL generated by puts to CR.	http://ruby-doc.org/core/IO.html#method-c-new
IO::open	A			class methods							<pre><code>open(fd, mode="r" [, opt])                → io\nopen(fd, mode="r" [, opt]) { |io| block } → obj</code></pre>With no associated block, IO.open is a synonym for ::new. If the optional code block is given, it will be passed io as an argument, and the IO object will automatically be closed when the block terminates. In this instance, ::open returns the value of the block.<br>See ::new for a description of the fd, mode and opt parameters.	http://ruby-doc.org/core/IO.html#method-c-open
IO::pipe	A			class methods							<pre><code>pipe                             →  [read_io, write_io]\npipe(ext_enc)                    →  [read_io, write_io]\npipe("ext_enc:int_enc" [, opt])  →  [read_io, write_io]\npipe(ext_enc, int_enc [, opt])   →  [read_io, write_io]\npipe(...) {|read_io, write_io| ... }</code></pre>Creates a pair of pipe endpoints (connected to each other) and returns them as a two-element array of IO objects: [ read_io, write_io ].<br>If a block is given, the block is called and returns the value of the block. read_io and write_io are sent to the block as arguments. If read_io and write_io are not closed when the block exits, they are closed. i.e. closing read_io and/or write_io doesn’t cause an error.<br>Not available on all platforms.<br>If an encoding (encoding name or encoding object) is specified as an optional argument, read string from pipe is tagged with the encoding specified. If the argument is a colon separated two encoding names “A:B”, the read string is converted from encoding A (external encoding) to encoding B (internal encoding), then tagged with B. If two optional arguments are specified, those must be encoding objects or encoding names, and the first one is the external encoding, and the second one is the internal encoding. If the external encoding and the internal encoding is specified, optional hash argument specify the conversion option.<br>In the example below, the two processes close the ends of the pipe that they are not using. This is not just a cosmetic nicety. The read end of a pipe will not generate an end of file condition if there are any writers with the pipe still open. In the case of the parent process, the rd.read will never return if it does not first issue a wr.close.<pre><code>rd, wr = IO.pipe\n\nif fork\n  wr.close\n  puts "Parent got: <#{rd.read}>"\n  rd.close\n  Process.wait\nelse\n  rd.close\n  puts "Sending message to parent"\n  wr.write "Hi Dad"\n  wr.close\nend\n</code></pre>produces:	http://ruby-doc.org/core/IO.html#method-c-pipe
IO::popen	A			class methods							<pre><code>popen([env,] cmd, mode="r" [, opt])               → io\npopen([env,] cmd, mode="r" [, opt]) {|io| block } → obj</code></pre>Runs the specified command as a subprocess; the subprocess’s standard input and output will be connected to the returned IO object.<br>The PID of the started process can be obtained by #pid method.<br>cmd is a string or an array as follows.<br>If cmd is a String “-”, then a new instance of Ruby is started as the subprocess.<br>If cmd is an Array of String, then it will be used as the subprocess’s argv bypassing a shell. The array can contains a hash at first for environments and a hash at last for options similar to spawn.<br>The default mode for the new file object is “r”, but mode may be set to any of the modes listed in the description for class IO. The last argument opt qualifies mode.<pre><code># set IO encoding\nIO.popen("nkf -e filename", :external_encoding=>"EUC-JP") {|nkf_io|\n  euc_jp_string = nkf_io.read\n}\n\n# merge standard output and standard error using\n# spawn option.  See the document of Kernel.spawn.\nIO.popen(["ls", "/", :err=>[:child, :out]]) {|ls_io|\n  ls_result_with_error = ls_io.read\n}\n\n# spawn options can be mixed with IO options\nIO.popen(["ls", "/"], :err=>[:child, :out]) {|ls_io|\n  ls_result_with_error = ls_io.read\n}\n</code></pre>Raises exceptions which IO.pipe and Kernel.spawn raise.<br>If a block is given, Ruby will run the command as a child connected to Ruby with a pipe. Ruby’s end of the pipe will be passed as a parameter to the block. At the end of block, Ruby closes the pipe and sets $?. In this case IO.popen returns the value of the block.<br>If a block is given with a cmd of “-”, the block will be run in two separate processes: once in the parent, and once in a child. The parent process will be passed the pipe object as a parameter to the block, the child version of the block will be passed nil, and the child’s standard in and standard out will be connected to the parent through the pipe. Not available on all platforms.<pre><code>f = IO.popen("uname")\np f.readlines\nf.close\nputs "Parent is #{Process.pid}"\nIO.popen("date") { |f| puts f.gets }\nIO.popen("-") {|f| $stderr.puts "#{Process.pid} is here, f is #{f.inspect}"}\np $?\nIO.popen(%w"sed -e s|^|<foo>| -e s&$&;zot;&", "r+") {|f|\n  f.puts "bar"; f.close_write; puts f.gets\n}\n</code></pre>produces:	http://ruby-doc.org/core/IO.html#method-c-popen
IO::read	A			class methods							<pre><code>read(name, [length [, offset]] [, opt] )   → string</code></pre>Opens the file, optionally seeks to the given offset, then returns length bytes (defaulting to the rest of the file). read ensures the file is closed before returning.<br>The options hash accepts the following keys:<br>string or encoding<br>Specifies the encoding of the read string. encoding: will be ignored if length is specified. See Encoding.aliases for possible encodings.<br>string<br>Specifies the mode argument for open(). It must start with an “r” otherwise it will cause an error. See ::new for the list of possible modes.<br>array of strings<br>Specifies arguments for open() as an array. This key can not be used in combination with either encoding: or mode:.<br>Examples:<pre><code>IO.read("testfile")              #=> "This is line one\nThis is line two\nThis is line three\nAnd so on...\n"\nIO.read("testfile", 20)          #=> "This is line one\nThi"\nIO.read("testfile", 20, 10)      #=> "ne one\nThis is line "\nIO.read("binfile", mode: "rb")   #=> "\xF7\x00\x00\x0E\x12"\n</code></pre>	http://ruby-doc.org/core/IO.html#method-c-read
IO::readlines	A			class methods							<pre><code>readlines(name, sep=$/ [, open_args])     → array\nreadlines(name, limit [, open_args])      → array\nreadlines(name, sep, limit [, open_args]) → array</code></pre>Reads the entire file specified by name as individual lines, and returns those lines in an array. Lines are separated by sep.<pre><code>a = IO.readlines("testfile")\na[0]   #=> "This is line one\n"\n</code></pre>If the last argument is a hash, it’s the keyword argument to open. See IO.read for detail.	http://ruby-doc.org/core/IO.html#method-c-readlines
IO::select	A			class methods							<pre><code>select(read_array [, write_array [, error_array [, timeout]]]) → array  or  nil</code></pre>Calls select(2) system call. It monitors given arrays of IO objects, waits until one or more of IO objects are ready for reading, are ready for writing, and have pending exceptions respectively, and returns an array that contains arrays of those IO objects. It will return nil if optional timeout value is given and no IO object is ready in timeout seconds.<br>IO.select peeks the buffer of IO objects for testing readability. If the IO buffer is not empty, IO.select immediately notifies readability. This "peek" only happens for IO objects. It does not happen for IO-like objects such as OpenSSL::SSL::SSLSocket.<br>The best way to use IO.select is invoking it after nonblocking methods such as read_nonblock, write_nonblock, etc. The methods raise an exception which is extended by IO::WaitReadable or IO::WaitWritable. The modules notify how the caller should wait with IO.select. If IO::WaitReadable is raised, the caller should wait for reading. If IO::WaitWritable is raised, the caller should wait for writing.<br>So, blocking read (readpartial) can be emulated using read_nonblock and IO.select as follows:<pre><code>begin\n  result = io_like.read_nonblock(maxlen)\nrescue IO::WaitReadable\n  IO.select([io_like])\n  retry\nrescue IO::WaitWritable\n  IO.select(nil, [io_like])\n  retry\nend\n</code></pre>Especially, the combination of nonblocking methods and IO.select is preferred for IO like objects such as OpenSSL::SSL::SSLSocket. It has to_io method to return underlying IO object. IO.select calls to_io to obtain the file descriptor to wait.<br>This means that readability notified by IO.select doesn’t mean readability from OpenSSL::SSL::SSLSocket object.<br>The most likely situation is that OpenSSL::SSL::SSLSocket buffers some data. IO.select doesn’t see the buffer. So IO.select can block when OpenSSL::SSL::SSLSocket#readpartial doesn’t block.<br>However, several more complicated situations exist.<br>SSL is a protocol which is sequence of records. The record consists of multiple bytes. So, the remote side of SSL sends a partial record, IO.select notifies readability but OpenSSL::SSL::SSLSocket cannot decrypt a byte and OpenSSL::SSL::SSLSocket#readpartial will blocks.<br>Also, the remote side can request SSL renegotiation which forces the local SSL engine to write some data. This means OpenSSL::SSL::SSLSocket#readpartial may invoke write system call and it can block. In such a situation, OpenSSL::SSL::SSLSocket#read_nonblock raises IO::WaitWritable instead of blocking. So, the caller should wait for ready for writability as above example.<br>The combination of nonblocking methods and IO.select is also useful for streams such as tty, pipe socket socket when multiple processes read from a stream.<br>Finally, Linux kernel developers don’t guarantee that readability of select(2) means readability of following read(2) even for a single process. See select(2) manual on GNU/Linux system.<br>Invoking IO.select before IO#readpartial works well as usual. However it is not the best way to use IO.select.<br>The writability notified by select(2) doesn’t show how many bytes writable. IO#write method blocks until given whole string is written. So, IO#write(two or more bytes) can block after writability is notified by IO.select. IO#write_nonblock is required to avoid the blocking.<br>Blocking write (write) can be emulated using write_nonblock and IO.select as follows: IO::WaitReadable should also be rescued for SSL renegotiation in OpenSSL::SSL::SSLSocket.<pre><code>while 0 < string.bytesize\n  begin\n    written = io_like.write_nonblock(string)\n  rescue IO::WaitReadable\n    IO.select([io_like])\n    retry\n  rescue IO::WaitWritable\n    IO.select(nil, [io_like])\n    retry\n  end\n  string = string.byteslice(written..-1)\nend\n</code></pre>an array of IO objects that wait until ready for read<br>an array of IO objects that wait until ready for write<br>an array of IO objects that wait for exceptions<br>a numeric value in second<pre><code>rp, wp = IO.pipe\nmesg = "ping "\n100.times {\n  # IO.select follows IO#read.  Not the best way to use IO.select.\n  rs, ws, = IO.select([rp], [wp])\n  if r = rs[0]\n    ret = r.read(5)\n    print ret\n    case ret\n    when /ping/\n      mesg = "pong\n"\n    when /pong/\n      mesg = "ping "\n    end\n  end\n  if w = ws[0]\n    w.write(mesg)\n  end\n}\n</code></pre>produces:<pre><code>ping pong\nping pong\nping pong\n(snipped)\nping\n</code></pre>	http://ruby-doc.org/core/IO.html#method-c-select
IO::sysopen	A			class methods							<pre><code>sysopen(path, [mode, [perm]])  → fixnum</code></pre>Opens the given path, returning the underlying file descriptor as a Fixnum.<pre><code>IO.sysopen("testfile")   #=> 3\n</code></pre>	http://ruby-doc.org/core/IO.html#method-c-sysopen
IO::try_convert	A			class methods							<pre><code>try_convert(obj)  →  io or nil</code></pre>Try to convert obj into an IO, using #to_io method. Returns converted IO or nil if obj cannot be converted for any reason.<pre><code>IO.try_convert(STDOUT)     #=> STDOUT\nIO.try_convert("STDOUT")   #=> nil\n\nrequire 'zlib'\nf = open("/tmp/zz.gz")       #=> #<File:/tmp/zz.gz>\nz = Zlib::GzipReader.open(f) #=> #<Zlib::GzipReader:0x81d8744>\nIO.try_convert(z)            #=> #<File:/tmp/zz.gz>\n</code></pre>	http://ruby-doc.org/core/IO.html#method-c-try_convert
IO::write	A			class methods							<pre><code>write(name, string, [offset] )   => fixnum\nwrite(name, string, [offset], open_args )   => fixnum</code></pre>Opens the file, optionally seeks to the given offset, writes string, then returns the length written. write ensures the file is closed before returning. If offset is not given, the file is truncated. Otherwise, it is not truncated.<br>If the last argument is a hash, it specifies option for internal open(). The key would be the following. open_args: is exclusive to others.	http://ruby-doc.org/core/IO.html#method-c-write
IO#<<	A			instance methods							<pre><code>ios << obj     → ios</code></pre>String Output---Writes obj to ios. obj will be converted to a string using to_s.<pre><code>$stdout << "Hello " << "world!\n"\n</code></pre>produces:<pre><code>Hello world!\n</code></pre>	http://ruby-doc.org/core/IO.html#method-i-3C-3C
IO#advise	A			instance methods							<pre><code>advise(advice, offset=0, len=0) → nil</code></pre>Announce an intention to access data from the current file in a specific pattern. On platforms that do not support the posix_fadvise(2) system call, this method is a no-op.<br>advice is one of the following symbols:<br>No advice to give; the default assumption for an open file.<br>The data will be accessed sequentially with lower offsets read before higher ones.<br>The data will be accessed in random order.<br>The data will be accessed in the near future.<br>The data will not be accessed in the near future.<br>The data will only be accessed once.<br>The semantics of a piece of advice are platform-dependent. See man 2 posix_fadvise for details.<br>“data” means the region of the current file that begins at offset and extends for len bytes. If len is 0, the region ends at the last byte of the file. By default, both offset and len are 0, meaning that the advice applies to the entire file.<br>If an error occurs, one of the following exceptions will be raised:<br>The IO stream is closed.<br>The file descriptor of the current file is invalid.<br>An invalid value for advice was given.<br>The file descriptor of the current file refers to a FIFO or pipe. (Linux raises Errno::EINVAL in this case).<br>Either advice was not a Symbol, or one of the other arguments was not an Integer.<br>One of the arguments given was too big/small.<br>exceptions are also possible.	http://ruby-doc.org/core/IO.html#method-i-advise
IO#autoclose=	A			instance methods							<pre><code>autoclose = bool    → true or false</code></pre>Sets auto-close flag.<pre><code>f = open("/dev/null")\nIO.for_fd(f.fileno)\n# ...\nf.gets # may cause IOError\n\nf = open("/dev/null")\nIO.for_fd(f.fileno).autoclose = true\n# ...\nf.gets # won't cause IOError\n</code></pre>	http://ruby-doc.org/core/IO.html#method-i-autoclose-3D
IO#autoclose?	A			instance methods							<pre><code>autoclose?   → true or false</code></pre>Returns true if the underlying file descriptor of ios will be closed automatically at its finalization, otherwise false.	http://ruby-doc.org/core/IO.html#method-i-autoclose-3F
IO#binmode	A			instance methods							<pre><code>binmode    → ios</code></pre>Puts ios into binary mode. Once a stream is in binary mode, it cannot be reset to nonbinary mode.<br>newline conversion disabled<br>encoding conversion disabled<br>content is treated as ASCII-8BIT	http://ruby-doc.org/core/IO.html#method-i-binmode
IO#binmode?	A			instance methods							<pre><code>binmode?    → true or false</code></pre>Returns true if ios is binmode.	http://ruby-doc.org/core/IO.html#method-i-binmode-3F
IO#bytes	A			instance methods							This is a deprecated alias for each_byte.	http://ruby-doc.org/core/IO.html#method-i-bytes
IO#chars	A			instance methods							This is a deprecated alias for each_char.	http://ruby-doc.org/core/IO.html#method-i-chars
IO#close	A			instance methods							<pre><code>close   → nil</code></pre>Closes ios and flushes any pending writes to the operating system. The stream is unavailable for any further data operations; an IOError is raised if such an attempt is made. I/O streams are automatically closed when they are claimed by the garbage collector.<br>If ios is opened by IO.popen, close sets $?.<br>Calling this method on closed IO object is just ignored since Ruby 2.3.	http://ruby-doc.org/core/IO.html#method-i-close
IO#close_on_exec=	A			instance methods							<pre><code>close_on_exec = bool    → true or false</code></pre>Sets a close-on-exec flag.<pre><code>f = open("/dev/null")\nf.close_on_exec = true\nsystem("cat", "/proc/self/fd/#{f.fileno}") # cat: /proc/self/fd/3: No such file or directory\nf.closed?                #=> false\n</code></pre>Ruby sets close-on-exec flags of all file descriptors by default since Ruby 2.0.0. So you don’t need to set by yourself. Also, unsetting a close-on-exec flag can cause file descriptor leak if another thread use fork() and exec() (via system() method for example). If you really needs file descriptor inheritance to child process, use spawn()‘s argument such as fd=>fd.	http://ruby-doc.org/core/IO.html#method-i-close_on_exec-3D
IO#close_on_exec?	A			instance methods							<pre><code>close_on_exec?   → true or false</code></pre>Returns true if ios will be closed on exec.<pre><code>f = open("/dev/null")\nf.close_on_exec?                 #=> false\nf.close_on_exec = true\nf.close_on_exec?                 #=> true\nf.close_on_exec = false\nf.close_on_exec?                 #=> false\n</code></pre>	http://ruby-doc.org/core/IO.html#method-i-close_on_exec-3F
IO#close_read	A			instance methods							<pre><code>close_read    → nil</code></pre>Closes the read end of a duplex I/O stream (i.e., one that contains both a read and a write stream, such as a pipe). Will raise an IOError if the stream is not duplexed.<pre><code>f = IO.popen("/bin/sh","r+")\nf.close_read\nf.readlines\n</code></pre>produces:	http://ruby-doc.org/core/IO.html#method-i-close_read
IO#close_write	A			instance methods							<pre><code>close_write   → nil</code></pre>Closes the write end of a duplex I/O stream (i.e., one that contains both a read and a write stream, such as a pipe). Will raise an IOError if the stream is not duplexed.<pre><code>f = IO.popen("/bin/sh","r+")\nf.close_write\nf.print "nowhere"\n</code></pre>produces:	http://ruby-doc.org/core/IO.html#method-i-close_write
IO#closed?	A			instance methods							<pre><code>closed?    → true or false</code></pre>Returns true if ios is completely closed (for duplex streams, both reader and writer), false otherwise.<pre><code>f = File.new("testfile")\nf.close         #=> nil\nf.closed?       #=> true\nf = IO.popen("/bin/sh","r+")\nf.close_write   #=> nil\nf.closed?       #=> false\nf.close_read    #=> nil\nf.closed?       #=> true\n</code></pre>	http://ruby-doc.org/core/IO.html#method-i-closed-3F
IO#codepoints	A			instance methods							This is a deprecated alias for each_codepoint.	http://ruby-doc.org/core/IO.html#method-i-codepoints
IO#each	A			instance methods							<pre><code>each(sep=$/) {|line| block }         → ios\neach(limit) {|line| block }          → ios\neach(sep,limit) {|line| block }      → ios\neach(...)                            → an_enumerator\neach_line(sep=$/) {|line| block }    → ios\neach_line(limit) {|line| block }     → ios\neach_line(sep,limit) {|line| block } → ios\neach_line(...)                       → an_enumerator</code></pre>Executes the block for every line in ios, where lines are separated by sep. ios must be opened for reading or an IOError will be raised.<br>If no block is given, an enumerator is returned instead.<pre><code>f = File.new("testfile")\nf.each {|line| puts "#{f.lineno}: #{line}" }\n</code></pre>produces:	http://ruby-doc.org/core/IO.html#method-i-each
IO#each_byte	A			instance methods							<pre><code>each_byte {|byte| block }  → ios\neach_byte                  → an_enumerator</code></pre>Calls the given block once for each byte (0..255) in ios, passing the byte as an argument. The stream must be opened for reading or an IOError will be raised.<br>If no block is given, an enumerator is returned instead.<pre><code>f = File.new("testfile")\nchecksum = 0\nf.each_byte {|x| checksum ^= x }   #=> #<File:testfile>\nchecksum                           #=> 12\n</code></pre>	http://ruby-doc.org/core/IO.html#method-i-each_byte
IO#each_char	A			instance methods							<pre><code>each_char {|c| block }  → ios\neach_char               → an_enumerator</code></pre>Calls the given block once for each character in ios, passing the character as an argument. The stream must be opened for reading or an IOError will be raised.<br>If no block is given, an enumerator is returned instead.<pre><code>f = File.new("testfile")\nf.each_char {|c| print c, ' ' }   #=> #<File:testfile>\n</code></pre>	http://ruby-doc.org/core/IO.html#method-i-each_char
IO#each_codepoint	A			instance methods							<pre><code>each_codepoint {|c| block }  → ios\ncodepoints     {|c| block }  → ios\neach_codepoint               → an_enumerator\ncodepoints                   → an_enumerator</code></pre>Passes the Integer ordinal of each character in ios, passing the codepoint as an argument. The stream must be opened for reading or an IOError will be raised.<br>If no block is given, an enumerator is returned instead.	http://ruby-doc.org/core/IO.html#method-i-each_codepoint
IO#each_line	A			instance methods							<pre><code>each_line(sep=$/) {|line| block }    → ios\neach_line(limit) {|line| block }     → ios\neach_line(sep,limit) {|line| block } → ios\neach_line(...)                       → an_enumerator</code></pre>Executes the block for every line in ios, where lines are separated by sep. ios must be opened for reading or an IOError will be raised.<br>If no block is given, an enumerator is returned instead.<pre><code>f = File.new("testfile")\nf.each {|line| puts "#{f.lineno}: #{line}" }\n</code></pre>produces:	http://ruby-doc.org/core/IO.html#method-i-each_line
IO#eof	A			instance methods							<pre><code>eof     → true or false\neof?    → true or false</code></pre>Returns true if ios is at end of file that means there are no more data to read. The stream must be opened for reading or an IOError will be raised.<pre><code>f = File.new("testfile")\ndummy = f.readlines\nf.eof   #=> true\n</code></pre>If ios is a stream such as pipe or socket, IO#eof? blocks until the other end sends some data or closes it.<pre><code>r, w = IO.pipe\nThread.new { sleep 1; w.close }\nr.eof?  #=> true after 1 second blocking\n\nr, w = IO.pipe\nThread.new { sleep 1; w.puts "a" }\nr.eof?  #=> false after 1 second blocking\n\nr, w = IO.pipe\nr.eof?  # blocks forever\n</code></pre>Note that IO#eof? reads data to the input byte buffer. So IO#sysread may not behave as you intend with IO#eof?, unless you call IO#rewind first (which is not available for some streams).	http://ruby-doc.org/core/IO.html#method-i-eof
IO#eof?	A			instance methods							<pre><code>eof?    → true or false</code></pre>Returns true if ios is at end of file that means there are no more data to read. The stream must be opened for reading or an IOError will be raised.<pre><code>f = File.new("testfile")\ndummy = f.readlines\nf.eof   #=> true\n</code></pre>If ios is a stream such as pipe or socket, IO#eof? blocks until the other end sends some data or closes it.<pre><code>r, w = IO.pipe\nThread.new { sleep 1; w.close }\nr.eof?  #=> true after 1 second blocking\n\nr, w = IO.pipe\nThread.new { sleep 1; w.puts "a" }\nr.eof?  #=> false after 1 second blocking\n\nr, w = IO.pipe\nr.eof?  # blocks forever\n</code></pre>Note that IO#eof? reads data to the input byte buffer. So IO#sysread may not behave as you intend with IO#eof?, unless you call IO#rewind first (which is not available for some streams).	http://ruby-doc.org/core/IO.html#method-i-eof-3F
IO#external_encoding	A			instance methods							<pre><code>external_encoding   → encoding</code></pre>Returns the Encoding object that represents the encoding of the file. If io is write mode and no encoding is specified, returns nil.	http://ruby-doc.org/core/IO.html#method-i-external_encoding
IO#fcntl	A			instance methods							<pre><code>fcntl(integer_cmd, arg)    → integer</code></pre>Provides a mechanism for issuing low-level commands to control or query file-oriented I/O streams. Arguments and results are platform dependent. If arg is a number, its value is passed directly. If it is a string, it is interpreted as a binary sequence of bytes (Array#pack might be a useful way to build this string). On Unix platforms, see fcntl(2) for details. Not implemented on all platforms.	http://ruby-doc.org/core/IO.html#method-i-fcntl
IO#fdatasync	A			instance methods							<pre><code>fdatasync   → 0 or nil</code></pre>Immediately writes all buffered data in ios to disk.<br>If the underlying operating system does not support fdatasync(2), IO#fsync is called instead (which might raise a NotImplementedError).	http://ruby-doc.org/core/IO.html#method-i-fdatasync
IO#fileno	A			instance methods							<pre><code>fileno    → fixnum\nto_i      → fixnum</code></pre>Returns an integer representing the numeric file descriptor for ios.<pre><code>$stdin.fileno    #=> 0\n$stdout.fileno   #=> 1\n</code></pre>	http://ruby-doc.org/core/IO.html#method-i-fileno
IO#flush	A			instance methods							<pre><code>flush    → ios</code></pre>Flushes any buffered data within ios to the underlying operating system (note that this is Ruby internal buffering only; the OS may buffer the data as well).<pre><code>$stdout.print "no newline"\n$stdout.flush\n</code></pre>produces:<pre><code>no newline\n</code></pre>	http://ruby-doc.org/core/IO.html#method-i-flush
IO#fsync	A			instance methods							<pre><code>fsync   → 0 or nil</code></pre>Immediately writes all buffered data in ios to disk. Note that fsync differs from using IO#sync=. The latter ensures that data is flushed from Ruby’s buffers, but does not guarantee that the underlying operating system actually writes it to disk.<br>NotImplementedError is raised if the underlying operating system does not support fsync(2).	http://ruby-doc.org/core/IO.html#method-i-fsync
IO#getbyte	A			instance methods							<pre><code>getbyte   → fixnum or nil</code></pre>Gets the next 8-bit byte (0..255) from ios. Returns nil if called at end of file.<pre><code>f = File.new("testfile")\nf.getbyte   #=> 84\nf.getbyte   #=> 104\n</code></pre>	http://ruby-doc.org/core/IO.html#method-i-getbyte
IO#getc	A			instance methods							<pre><code>getc   → string or nil</code></pre>Reads a one-character string from ios. Returns nil if called at end of file.<pre><code>f = File.new("testfile")\nf.getc   #=> "h"\nf.getc   #=> "e"\n</code></pre>	http://ruby-doc.org/core/IO.html#method-i-getc
IO#gets	A			instance methods							<pre><code>gets(sep=$/)     → string or nil\ngets(limit)      → string or nil\ngets(sep, limit) → string or nil</code></pre>Reads the next “line” from the I/O stream; lines are separated by sep. A separator of nil reads the entire contents, and a zero-length separator reads the input a paragraph at a time (two successive newlines in the input separate paragraphs). The stream must be opened for reading or an IOError will be raised. The line read in will be returned and also assigned to $_. Returns nil if called at end of file. If the first argument is an integer, or optional second argument is given, the returning string would not be longer than the given value in bytes.<pre><code>File.new("testfile").gets   #=> "This is line one\n"\n$_                          #=> "This is line one\n"\n\nFile.new("testfile").gets(4)#=> "This"\n</code></pre>If IO contains multibyte characters byte then gets(1) returns character entirely:<pre><code># Russian characters take 2 bytes\nFile.write("testfile", "\u{442 435 441 442}")\nFile.open("testfile") {|f|f.gets(1)} #=> "\u0442"\nFile.open("testfile") {|f|f.gets(2)} #=> "\u0442"\nFile.open("testfile") {|f|f.gets(3)} #=> "\u0442\u0435"\nFile.open("testfile") {|f|f.gets(4)} #=> "\u0442\u0435"\n</code></pre>	http://ruby-doc.org/core/IO.html#method-i-gets
IO#inspect	A			instance methods							<pre><code>inspect   → string</code></pre>Return a string describing this IO object.	http://ruby-doc.org/core/IO.html#method-i-inspect
IO#internal_encoding	A			instance methods							<pre><code>internal_encoding   → encoding</code></pre>Returns the Encoding of the internal string if conversion is specified. Otherwise returns nil.	http://ruby-doc.org/core/IO.html#method-i-internal_encoding
IO#ioctl	A			instance methods							<pre><code>ioctl(integer_cmd, arg)    → integer</code></pre>Provides a mechanism for issuing low-level commands to control or query I/O devices. Arguments and results are platform dependent. If arg is a number, its value is passed directly. If it is a string, it is interpreted as a binary sequence of bytes. On Unix platforms, see ioctl(2) for details. Not implemented on all platforms.	http://ruby-doc.org/core/IO.html#method-i-ioctl
IO#isatty	A			instance methods							<pre><code>isatty   → true or false</code></pre>Returns true if ios is associated with a terminal device (tty), false otherwise.<pre><code>File.new("testfile").isatty   #=> false\nFile.new("/dev/tty").isatty   #=> true\n</code></pre>	http://ruby-doc.org/core/IO.html#method-i-isatty
IO#lineno	A			instance methods							<pre><code>lineno    → integer</code></pre>Returns the current line number in ios. The stream must be opened for reading. lineno counts the number of times gets is called rather than the number of newlines encountered. The two values will differ if gets is called with a separator other than newline.<br>Methods that use $/ like each, lines and readline will also increment lineno.<br>See also the $. variable.<pre><code>f = File.new("testfile")\nf.lineno   #=> 0\nf.gets     #=> "This is line one\n"\nf.lineno   #=> 1\nf.gets     #=> "This is line two\n"\nf.lineno   #=> 2\n</code></pre>	http://ruby-doc.org/core/IO.html#method-i-lineno
IO#lineno=	A			instance methods							<pre><code>lineno = integer    → integer</code></pre>Manually sets the current line number to the given value. $. is updated only on the next read.<pre><code>f = File.new("testfile")\nf.gets                     #=> "This is line one\n"\n$.                         #=> 1\nf.lineno = 1000\nf.lineno                   #=> 1000\n$.                         #=> 1         # lineno of last read\nf.gets                     #=> "This is line two\n"\n$.                         #=> 1001      # lineno of last read\n</code></pre>	http://ruby-doc.org/core/IO.html#method-i-lineno-3D
IO#lines	A			instance methods							This is a deprecated alias for each_line.	http://ruby-doc.org/core/IO.html#method-i-lines
IO#pid	A			instance methods							<pre><code>pid    → fixnum</code></pre>Returns the process ID of a child process associated with ios. This will be set by IO.popen.<pre><code>pipe = IO.popen("-")\nif pipe\n  $stderr.puts "In parent, child pid is #{pipe.pid}"\nelse\n  $stderr.puts "In child, pid is #{$$}"\nend\n</code></pre>produces:	http://ruby-doc.org/core/IO.html#method-i-pid
IO#pos	A			instance methods							<pre><code>pos     → integer</code></pre>Returns the current offset (in bytes) of ios.<pre><code>f = File.new("testfile")\nf.pos    #=> 0\nf.gets   #=> "This is line one\n"\nf.pos    #=> 17\n</code></pre>	http://ruby-doc.org/core/IO.html#method-i-pos
IO#pos=	A			instance methods							<pre><code>pos = integer    → integer</code></pre>Seeks to the given position (in bytes) in ios. It is not guaranteed that seeking to the right position when ios is textmode.<pre><code>f = File.new("testfile")\nf.pos = 17\nf.gets   #=> "This is line two\n"\n</code></pre>	http://ruby-doc.org/core/IO.html#method-i-pos-3D
IO#print	A			instance methods							<pre><code>print()             → nil\nprint(obj, ...)     → nil</code></pre>Writes the given object(s) to ios. The stream must be opened for writing. If the output field separator ($,) is not nil, it will be inserted between each object. If the output record separator ($\) is not nil, it will be appended to the output. If no arguments are given, prints $_. Objects that aren’t strings will be converted by calling their to_s method. With no argument, prints the contents of the variable $_. Returns nil.<pre><code>$stdout.print("This is ", 100, " percent.\n")\n</code></pre>produces:	http://ruby-doc.org/core/IO.html#method-i-print
IO#printf	A			instance methods							<pre><code>printf(format_string [, obj, ...])   → nil</code></pre>Formats and writes to ios, converting parameters under control of the format string. See Kernel#sprintf for details.	http://ruby-doc.org/core/IO.html#method-i-printf
IO#putc	A			instance methods							<pre><code>putc(obj)    → obj</code></pre>If obj is Numeric, write the character whose code is the least-significant byte of obj, otherwise write the first byte of the string representation of obj to ios. Note: This method is not safe for use with multi-byte characters as it will truncate them.<pre><code>$stdout.putc "A"\n$stdout.putc 65\n</code></pre>produces:<pre><code>AA\n</code></pre>	http://ruby-doc.org/core/IO.html#method-i-putc
IO#puts	A			instance methods							<pre><code>puts(obj, ...)    → nil</code></pre>Writes the given objects to ios as with IO#print. Writes a record separator (typically a newline) after any that do not already end with a newline sequence. If called with an array argument, writes each element on a new line. If called without arguments, outputs a single record separator.<pre><code>$stdout.puts("this", "is", "a", "test")\n</code></pre>produces:<pre><code>this\nis\na\ntest\n</code></pre>	http://ruby-doc.org/core/IO.html#method-i-puts
IO#read	A			instance methods							<pre><code>read([length [, outbuf]])    → string, outbuf, or nil</code></pre>Reads length bytes from the I/O stream.<br>length must be a non-negative integer or nil.<br>If length is a positive integer, it tries to read length bytes without any conversion (binary mode). It returns nil or a string whose length is 1 to length bytes. nil means it met EOF at beginning. The 1 to length-1 bytes string means it met EOF after reading the result. The length bytes string means it doesn’t meet EOF. The resulted string is always ASCII-8BIT encoding.<br>If length is omitted or is nil, it reads until EOF and the encoding conversion is applied. It returns a string even if EOF is met at beginning.<br>If length is zero, it returns "".<br>If the optional outbuf argument is present, it must reference a String, which will receive the data. The outbuf will contain only the received data after the method call even if it is not empty at the beginning.<br>At end of file, it returns nil or "" depend on length. ios.read() and ios.read(nil) returns "". ios.read(positive-integer) returns nil.<br>Note that this method behaves like fread() function in C. This means it retry to invoke read(2) system call to read data with the specified length (or until EOF). This behavior is preserved even if ios is non-blocking mode. (This method is non-blocking flag insensitive as other methods.) If you need the behavior like single read(2) system call, consider readpartial, #read_nonblock and sysread.	http://ruby-doc.org/core/IO.html#method-i-read
IO#read_nonblock	A			instance methods							<pre><code>read_nonblock(maxlen [, options])              → string\nread_nonblock(maxlen, outbuf [, options])      → outbuf</code></pre>Reads at most maxlen bytes from ios using the read(2) system call after O_NONBLOCK is set for the underlying file descriptor.<br>If the optional outbuf argument is present, it must reference a String, which will receive the data. The outbuf will contain only the received data after the method call even if it is not empty at the beginning.<br>#read_nonblock just calls the read(2) system call. It causes all errors the read(2) system call causes: Errno::EWOULDBLOCK, Errno::EINTR, etc. The caller should care such errors.<br>If the exception is Errno::EWOULDBLOCK or Errno::EAGAIN, it is extended by IO::WaitReadable. So IO::WaitReadable can be used to rescue the exceptions for retrying read_nonblock.<br>#read_nonblock causes EOFError on EOF.<br>If the read byte buffer is not empty, #read_nonblock reads from the buffer like readpartial. In this case, the read(2) system call is not called.<br>When #read_nonblock raises an exception kind of IO::WaitReadable, #read_nonblock should not be called until io is readable for avoiding busy loop. This can be done as follows.<pre><code># emulates blocking read (readpartial).\nbegin\n  result = io.read_nonblock(maxlen)\nrescue IO::WaitReadable\n  IO.select([io])\n  retry\nend\n</code></pre>Although #read_nonblock doesn’t raise IO::WaitWritable. OpenSSL::Buffering#read_nonblock can raise IO::WaitWritable. If IO and SSL should be used polymorphically, IO::WaitWritable should be rescued too. See the document of OpenSSL::Buffering#read_nonblock for sample code.<br>Note that this method is identical to readpartial except the non-blocking flag is set.<br>By specifying `exception: false`, the options hash allows you to indicate that #read_nonblock should not raise an IO::WaitReadable exception, but return the symbol :wait_readable instead.	http://ruby-doc.org/core/IO.html#method-i-read_nonblock
IO#readbyte	A			instance methods							<pre><code>readbyte   → fixnum</code></pre>Reads a byte as with IO#getbyte, but raises an EOFError on end of file.	http://ruby-doc.org/core/IO.html#method-i-readbyte
IO#readchar	A			instance methods							<pre><code>readchar   → string</code></pre>Reads a one-character string from ios. Raises an EOFError on end of file.<pre><code>f = File.new("testfile")\nf.readchar   #=> "h"\nf.readchar   #=> "e"\n</code></pre>	http://ruby-doc.org/core/IO.html#method-i-readchar
IO#readline	A			instance methods							<pre><code>readline(sep=$/)     → string\nreadline(limit)      → string\nreadline(sep, limit) → string</code></pre>Reads a line as with IO#gets, but raises an EOFError on end of file.	http://ruby-doc.org/core/IO.html#method-i-readline
IO#readlines	A			instance methods							<pre><code>readlines(sep=$/)     → array\nreadlines(limit)      → array\nreadlines(sep, limit) → array</code></pre>Reads all of the lines in ios, and returns them in anArray. Lines are separated by the optional sep. If sep is nil, the rest of the stream is returned as a single record. If the first argument is an integer, or optional second argument is given, the returning string would not be longer than the given value in bytes. The stream must be opened for reading or an IOError will be raised.<pre><code>f = File.new("testfile")\nf.readlines[0]   #=> "This is line one\n"\n</code></pre>	http://ruby-doc.org/core/IO.html#method-i-readlines
IO#readpartial	A			instance methods							<pre><code>readpartial(maxlen)              → string\nreadpartial(maxlen, outbuf)      → outbuf</code></pre>Reads at most maxlen bytes from the I/O stream. It blocks only if ios has no data immediately available. It doesn’t block if some data available. If the optional outbuf argument is present, it must reference a String, which will receive the data. The outbuf will contain only the received data after the method call even if it is not empty at the beginning. It raises EOFError on end of file.<br>readpartial is designed for streams such as pipe, socket, tty, etc. It blocks only when no data immediately available. This means that it blocks only when following all conditions hold.<br>the byte buffer in the IO object is empty.<br>the content of the stream is empty.<br>the stream is not reached to EOF.<br>When readpartial blocks, it waits data or EOF on the stream. If some data is reached, readpartial returns with the data. If EOF is reached, readpartial raises EOFError.<br>When readpartial doesn’t blocks, it returns or raises immediately. If the byte buffer is not empty, it returns the data in the buffer. Otherwise if the stream has some content, it returns the data in the stream. Otherwise if the stream is reached to EOF, it raises EOFError.<pre><code>r, w = IO.pipe           #               buffer          pipe content\nw << "abc"               #               ""              "abc".\nr.readpartial(4096)      #=> "abc"       ""              ""\nr.readpartial(4096)      # blocks because buffer and pipe is empty.\n\nr, w = IO.pipe           #               buffer          pipe content\nw << "abc"               #               ""              "abc"\nw.close                  #               ""              "abc" EOF\nr.readpartial(4096)      #=> "abc"       ""              EOF\nr.readpartial(4096)      # raises EOFError\n\nr, w = IO.pipe           #               buffer          pipe content\nw << "abc\ndef\n"        #               ""              "abc\ndef\n"\nr.gets                   #=> "abc\n"     "def\n"         ""\nw << "ghi\n"             #               "def\n"         "ghi\n"\nr.readpartial(4096)      #=> "def\n"     ""              "ghi\n"\nr.readpartial(4096)      #=> "ghi\n"     ""              ""\n</code></pre>Note that readpartial behaves similar to sysread. The differences are:<br>If the byte buffer is not empty, read from the byte buffer instead of “sysread for buffered IO (IOError)”.<br>It doesn’t cause Errno::EWOULDBLOCK and Errno::EINTR. When readpartial meets EWOULDBLOCK and EINTR by read system call, readpartial retry the system call.<br>The latter means that readpartial is nonblocking-flag insensitive. It blocks on the situation #sysread causes Errno::EWOULDBLOCK as if the fd is blocking mode.	http://ruby-doc.org/core/IO.html#method-i-readpartial
IO#reopen	A			instance methods							<pre><code>reopen(other_IO)         → ios\nreopen(path, mode_str)   → ios</code></pre>Reassociates ios with the I/O stream given in other_IO or to a new stream opened on path. This may dynamically change the actual class of this stream.<pre><code>f1 = File.new("testfile")\nf2 = File.new("testfile")\nf2.readlines[0]   #=> "This is line one\n"\nf2.reopen(f1)     #=> #<File:testfile>\nf2.readlines[0]   #=> "This is line one\n"\n</code></pre>	http://ruby-doc.org/core/IO.html#method-i-reopen
IO#rewind	A			instance methods							<pre><code>rewind    → 0</code></pre>Positions ios to the beginning of input, resetting lineno to zero.<pre><code>f = File.new("testfile")\nf.readline   #=> "This is line one\n"\nf.rewind     #=> 0\nf.lineno     #=> 0\nf.readline   #=> "This is line one\n"\n</code></pre>Note that it cannot be used with streams such as pipes, ttys, and sockets.	http://ruby-doc.org/core/IO.html#method-i-rewind
IO#seek	A			instance methods							<pre><code>seek(amount, whence=IO::SEEK_SET)  →  0</code></pre>Seeks to a given offset anInteger in the stream according to the value of whence:<br>Example:<pre><code>f = File.new("testfile")\nf.seek(-13, IO::SEEK_END)   #=> 0\nf.readline                  #=> "And so on...\n"\n</code></pre>	http://ruby-doc.org/core/IO.html#method-i-seek
IO#set_encoding	A			instance methods							<pre><code>set_encoding(ext_enc)                → io\nset_encoding("ext_enc:int_enc")      → io\nset_encoding(ext_enc, int_enc)       → io\nset_encoding("ext_enc:int_enc", opt) → io\nset_encoding(ext_enc, int_enc, opt)  → io</code></pre>If single argument is specified, read string from io is tagged with the encoding specified. If encoding is a colon separated two encoding names “A:B”, the read string is converted from encoding A (external encoding) to encoding B (internal encoding), then tagged with B. If two arguments are specified, those must be encoding objects or encoding names, and the first one is the external encoding, and the second one is the internal encoding. If the external encoding and the internal encoding is specified, optional hash argument specify the conversion option.	http://ruby-doc.org/core/IO.html#method-i-set_encoding
IO#stat	A			instance methods							<pre><code>stat    → stat</code></pre>Returns status information for ios as an object of type File::Stat.<pre><code>f = File.new("testfile")\ns = f.stat\n"%o" % s.mode   #=> "100644"\ns.blksize       #=> 4096\ns.atime         #=> Wed Apr 09 08:53:54 CDT 2003\n</code></pre>	http://ruby-doc.org/core/IO.html#method-i-stat
IO#sync	A			instance methods							<pre><code>sync    → true or false</code></pre>Returns the current “sync mode” of ios. When sync mode is true, all output is immediately flushed to the underlying operating system and is not buffered by Ruby internally. See also IO#fsync.<pre><code>f = File.new("testfile")\nf.sync   #=> false\n</code></pre>	http://ruby-doc.org/core/IO.html#method-i-sync
IO#sync=	A			instance methods							<pre><code>sync = boolean   → boolean</code></pre>Sets the “sync mode” to true or false. When sync mode is true, all output is immediately flushed to the underlying operating system and is not buffered internally. Returns the new state. See also IO#fsync.<pre><code>f = File.new("testfile")\nf.sync = true\n</code></pre>(produces no output)	http://ruby-doc.org/core/IO.html#method-i-sync-3D
IO#sysread	A			instance methods							<pre><code>sysread(maxlen[, outbuf])    → string</code></pre>Reads maxlen bytes from ios using a low-level read and returns them as a string. Do not mix with other methods that read from ios or you may get unpredictable results. If the optional outbuf argument is present, it must reference a String, which will receive the data. The outbuf will contain only the received data after the method call even if it is not empty at the beginning. Raises SystemCallError on error and EOFError at end of file.<pre><code>f = File.new("testfile")\nf.sysread(16)   #=> "This is line one"\n</code></pre>	http://ruby-doc.org/core/IO.html#method-i-sysread
IO#sysseek	A			instance methods							<pre><code>sysseek(offset, whence=IO::SEEK_SET)   → integer</code></pre>Seeks to a given offset in the stream according to the value of whence (see IO#seek for values of whence). Returns the new offset into the file.<pre><code>f = File.new("testfile")\nf.sysseek(-13, IO::SEEK_END)   #=> 53\nf.sysread(10)                  #=> "And so on."\n</code></pre>	http://ruby-doc.org/core/IO.html#method-i-sysseek
IO#syswrite	A			instance methods							<pre><code>syswrite(string)   → integer</code></pre>Writes the given string to ios using a low-level write. Returns the number of bytes written. Do not mix with other methods that write to ios or you may get unpredictable results. Raises SystemCallError on error.<pre><code>f = File.new("out", "w")\nf.syswrite("ABCDEF")   #=> 6\n</code></pre>	http://ruby-doc.org/core/IO.html#method-i-syswrite
IO#tell	A			instance methods							<pre><code>tell    → integer</code></pre>Returns the current offset (in bytes) of ios.<pre><code>f = File.new("testfile")\nf.pos    #=> 0\nf.gets   #=> "This is line one\n"\nf.pos    #=> 17\n</code></pre>	http://ruby-doc.org/core/IO.html#method-i-tell
IO#to_i	A			instance methods								http://ruby-doc.org/core/IO.html#method-i-to_i
IO#to_io	A			instance methods							<pre><code>to_io  →  ios</code></pre>Returns ios.	http://ruby-doc.org/core/IO.html#method-i-to_io
IO#tty?	A			instance methods							<pre><code>tty?     → true or false</code></pre>Returns true if ios is associated with a terminal device (tty), false otherwise.<pre><code>File.new("testfile").isatty   #=> false\nFile.new("/dev/tty").isatty   #=> true\n</code></pre>	http://ruby-doc.org/core/IO.html#method-i-tty-3F
IO#ungetbyte	A			instance methods							<pre><code>ungetbyte(string)   → nil\nungetbyte(integer)   → nil</code></pre>Pushes back bytes (passed as a parameter) onto ios, such that a subsequent buffered read will return it. Only one byte may be pushed back before a subsequent read operation (that is, you will be able to read only the last of several bytes that have been pushed back). Has no effect with unbuffered reads (such as IO#sysread).<pre><code>f = File.new("testfile")   #=> #<File:testfile>\nb = f.getbyte              #=> 0x38\nf.ungetbyte(b)             #=> nil\nf.getbyte                  #=> 0x38\n</code></pre>	http://ruby-doc.org/core/IO.html#method-i-ungetbyte
IO#ungetc	A			instance methods							<pre><code>ungetc(string)   → nil</code></pre>Pushes back one character (passed as a parameter) onto ios, such that a subsequent buffered character read will return it. Only one character may be pushed back before a subsequent read operation (that is, you will be able to read only the last of several characters that have been pushed back). Has no effect with unbuffered reads (such as IO#sysread).<pre><code>f = File.new("testfile")   #=> #<File:testfile>\nc = f.getc                 #=> "8"\nf.ungetc(c)                #=> nil\nf.getc                     #=> "8"\n</code></pre>	http://ruby-doc.org/core/IO.html#method-i-ungetc
IO#write	A			instance methods							<pre><code>write(string)    → integer</code></pre>Writes the given string to ios. The stream must be opened for writing. If the argument is not a string, it will be converted to a string using to_s. Returns the number of bytes written.<pre><code>count = $stdout.write("This is a test\n")\nputs "That was #{count} bytes of data"\n</code></pre>produces:	http://ruby-doc.org/core/IO.html#method-i-write
IO#write_nonblock	A			instance methods							<pre><code>write_nonblock(string)   → integer\nwrite_nonblock(string [, options])   → integer</code></pre>Writes the given string to ios using the write(2) system call after O_NONBLOCK is set for the underlying file descriptor.<br>It returns the number of bytes written.<br>#write_nonblock just calls the write(2) system call. It causes all errors the write(2) system call causes: Errno::EWOULDBLOCK, Errno::EINTR, etc. The result may also be smaller than string.length (partial write). The caller should care such errors and partial write.<br>If the exception is Errno::EWOULDBLOCK or Errno::EAGAIN, it is extended by IO::WaitWritable. So IO::WaitWritable can be used to rescue the exceptions for retrying write_nonblock.<pre><code># Creates a pipe.\nr, w = IO.pipe\n\n# write_nonblock writes only 65536 bytes and return 65536.\n# (The pipe size is 65536 bytes on this environment.)\ns = "a"  #100000\np w.write_nonblock(s)     #=> 65536\n\n# write_nonblock cannot write a byte and raise EWOULDBLOCK (EAGAIN).\np w.write_nonblock("b")   # Resource temporarily unavailable (Errno::EAGAIN)\n</code></pre>If the write buffer is not empty, it is flushed at first.<br>When #write_nonblock raises an exception kind of IO::WaitWritable, #write_nonblock should not be called until io is writable for avoiding busy loop. This can be done as follows.<pre><code>begin\n  result = io.write_nonblock(string)\nrescue IO::WaitWritable, Errno::EINTR\n  IO.select(nil, [io])\n  retry\nend\n</code></pre>Note that this doesn’t guarantee to write all data in string. The length written is reported as result and it should be checked later.<br>On some platforms such as Windows, #write_nonblock is not supported according to the kind of the IO object. In such cases, #write_nonblock raises Errno::EBADF.<br>By specifying `exception: false`, the options hash allows you to indicate that #write_nonblock should not raise an IO::WaitWritable exception, but return the symbol :wait_writable instead.	http://ruby-doc.org/core/IO.html#method-i-write_nonblock
ObjectSpace::WeakMap	A			classes							An ObjectSpace::WeakMap object holds references to any objects, but those objects can get garbage collected.<br>This class is mostly used internally by WeakRef, please use lib/weakref.rb for the public interface.	http://ruby-doc.org/core/ObjectSpace/WeakMap.html
ObjectSpace::WeakMap#[]	A			instance methods							Retrieves a weakly referenced object with the given key	http://ruby-doc.org/core/ObjectSpace/WeakMap.html#method-i-5B-5D
ObjectSpace::WeakMap#[]=	A			instance methods							Creates a weak reference from the given key to the given value	http://ruby-doc.org/core/ObjectSpace/WeakMap.html#method-i-5B-5D-3D
ObjectSpace::WeakMap#each	A			instance methods							Iterates over keys and objects in a weakly referenced object	http://ruby-doc.org/core/ObjectSpace/WeakMap.html#method-i-each
ObjectSpace::WeakMap#each_key	A			instance methods							Iterates over keys and objects in a weakly referenced object	http://ruby-doc.org/core/ObjectSpace/WeakMap.html#method-i-each_key
ObjectSpace::WeakMap#each_pair	A			instance methods							Iterates over keys and objects in a weakly referenced object	http://ruby-doc.org/core/ObjectSpace/WeakMap.html#method-i-each_pair
ObjectSpace::WeakMap#each_value	A			instance methods							Iterates over keys and objects in a weakly referenced object	http://ruby-doc.org/core/ObjectSpace/WeakMap.html#method-i-each_value
ObjectSpace::WeakMap#finalize	A			instance methods								http://ruby-doc.org/core/ObjectSpace/WeakMap.html#method-i-finalize
ObjectSpace::WeakMap#include?	A			instance methods							Returns true if key is registered	http://ruby-doc.org/core/ObjectSpace/WeakMap.html#method-i-include-3F
ObjectSpace::WeakMap#inspect	A			instance methods								http://ruby-doc.org/core/ObjectSpace/WeakMap.html#method-i-inspect
ObjectSpace::WeakMap#key?	A			instance methods							Returns true if key is registered	http://ruby-doc.org/core/ObjectSpace/WeakMap.html#method-i-key-3F
ObjectSpace::WeakMap#keys	A			instance methods							Iterates over keys and objects in a weakly referenced object	http://ruby-doc.org/core/ObjectSpace/WeakMap.html#method-i-keys
ObjectSpace::WeakMap#length	A			instance methods								http://ruby-doc.org/core/ObjectSpace/WeakMap.html#method-i-length
ObjectSpace::WeakMap#member?	A			instance methods							Returns true if key is registered	http://ruby-doc.org/core/ObjectSpace/WeakMap.html#method-i-member-3F
ObjectSpace::WeakMap#size	A			instance methods								http://ruby-doc.org/core/ObjectSpace/WeakMap.html#method-i-size
ObjectSpace::WeakMap#values	A			instance methods							Iterates over values and objects in a weakly referenced object	http://ruby-doc.org/core/ObjectSpace/WeakMap.html#method-i-values
Hash	A			classes							A Hash is a dictionary-like collection of unique keys and their values. Also called associative arrays, they are similar to Arrays, but where an Array uses integers as its index, a Hash allows you to use any object type.<br>Hashes enumerate their values in the order that the corresponding keys were inserted.<br>A Hash can be easily created by using its implicit form:<pre><code>grades = { "Jane Doe" => 10, "Jim Doe" => 6 }\n</code></pre>Hashes allow an alternate syntax for keys that are symbols. Instead of<pre><code>options = { :font_size => 10, :font_family => "Arial" }\n</code></pre>You could write it as:<pre><code>options = { font_size: 10, font_family: "Arial" }\n</code></pre>Each named key is a symbol you can access in hash:<pre><code>options[:font_size]  # => 10\n</code></pre>A Hash can also be created through its ::new method:<pre><code>grades = Hash.new\ngrades["Dorothy Doe"] = 9\n</code></pre>Hashes have a default value that is returned when accessing keys that do not exist in the hash. If no default is set nil is used. You can set the default value by sending it as an argument to ::new:<pre><code>grades = Hash.new(0)\n</code></pre>Or by using the default= method:<pre><code>grades = {"Timmy Doe" => 8}\ngrades.default = 0\n</code></pre>Accessing a value in a Hash requires using its key:<pre><code>puts grades["Jane Doe"] # => 0\n</code></pre>Hashes are an easy way to represent data structures, such as<pre><code>books         = {}\nbooks[:matz]  = "The Ruby Language"\nbooks[:black] = "The Well-Grounded Rubyist"\n</code></pre>Hashes are also commonly used as a way to have named parameters in functions. Note that no brackets are used below. If a hash is the last argument on a method call, no braces are needed, thus creating a really clean interface:<pre><code>Person.create(name: "John Doe", age: 27)\n\ndef self.create(params)\n  @name = params[:name]\n  @age  = params[:age]\nend\n</code></pre>Two objects refer to the same hash key when their hash value is identical and the two objects are eql? to each other.<br>A user-defined class may be used as a hash key if the hash and eql? methods are overridden to provide meaningful behavior. By default, separate instances refer to separate hash keys.<br>A typical implementation of hash is based on the object’s data while eql? is usually aliased to the overridden == method:<pre><code>class Book\n  attr_reader :author, :title\n\n  def initialize(author, title)\n    @author = author\n    @title = title\n  end\n\n  def ==(other)\n    self.class === other and\n      other.author == @author and\n      other.title == @title\n  end\n\n  alias eql? ==\n\n  def hash\n    @author.hash ^ @title.hash # XOR\n  end\nend\n\nbook1 = Book.new 'matz', 'Ruby in a Nutshell'\nbook2 = Book.new 'matz', 'Ruby in a Nutshell'\n\nreviews = {}\n\nreviews[book1] = 'Great reference!'\nreviews[book2] = 'Nice and compact!'\n\nreviews.length #=> 1\n</code></pre>See also Object#hash and Object#eql?	http://ruby-doc.org/core/Hash.html
Hash::[]	A			class methods							<pre><code>Hash[ key, value, ... ]         → new_hash\nHash[ [ [key, value], ... ] ]   → new_hash\nHash[ object ]                  → new_hash</code></pre>Creates a new hash populated with the given objects.<br>Similar to the literal { key => value, ... }. In the first form, keys and values occur in pairs, so there must be an even number of arguments.<br>The second and third form take a single argument which is either an array of key-value pairs or an object convertible to a hash.<pre><code>Hash["a", 100, "b", 200]             #=> {"a"=>100, "b"=>200}\nHash[ [ ["a", 100], ["b", 200] ] ]   #=> {"a"=>100, "b"=>200}\nHash["a" => 100, "b" => 200]         #=> {"a"=>100, "b"=>200}\n</code></pre>	http://ruby-doc.org/core/Hash.html#method-c-5B-5D
Hash::new	A			class methods							<pre><code>new                          → new_hash\nnew(obj)                     → new_hash\nnew {|hash, key| block }     → new_hash</code></pre>Returns a new, empty hash. If this hash is subsequently accessed by a key that doesn’t correspond to a hash entry, the value returned depends on the style of new used to create the hash. In the first form, the access returns nil. If obj is specified, this single object will be used for all default values. If a block is specified, it will be called with the hash object and the key, and should return the default value. It is the block’s responsibility to store the value in the hash if required.<pre><code>h = Hash.new("Go Fish")\nh["a"] = 100\nh["b"] = 200\nh["a"]           #=> 100\nh["c"]           #=> "Go Fish"\n# The following alters the single default object\nh["c"].upcase!   #=> "GO FISH"\nh["d"]           #=> "GO FISH"\nh.keys           #=> ["a", "b"]\n\n# While this creates a new default object each time\nh = Hash.new { |hash, key| hash[key] = "Go Fish: #{key}" }\nh["c"]           #=> "Go Fish: c"\nh["c"].upcase!   #=> "GO FISH: C"\nh["d"]           #=> "Go Fish: d"\nh.keys           #=> ["c", "d"]\n</code></pre>	http://ruby-doc.org/core/Hash.html#method-c-new
Hash::try_convert	A			class methods							<pre><code>try_convert(obj) → hash or nil</code></pre>Try to convert obj into a hash, using #to_hash method. Returns converted hash or nil if obj cannot be converted for any reason.<pre><code>Hash.try_convert({1=>2})   # => {1=>2}\nHash.try_convert("1=>2")   # => nil\n</code></pre>	http://ruby-doc.org/core/Hash.html#method-c-try_convert
Hash#<	A			instance methods							<pre><code>hash < other → true or false</code></pre>Returns true if hash is subset of other.<pre><code>h1 = {a:1, b:2}\nh2 = {a:1, b:2, c:3}\nh1 < h2    #=> true\nh2 < h1    #=> false\nh1 < h1    #=> false\n</code></pre>	http://ruby-doc.org/core/Hash.html#method-i-3C
Hash#<=	A			instance methods							<pre><code>hash <= other → true or false</code></pre>Returns true if hash is subset of other or equals to other.<pre><code>h1 = {a:1, b:2}\nh2 = {a:1, b:2, c:3}\nh1 <= h2   #=> true\nh2 <= h1   #=> false\nh1 <= h1   #=> true\n</code></pre>	http://ruby-doc.org/core/Hash.html#method-i-3C-3D
Hash#==	A			instance methods							<pre><code>hsh == other_hash    → true or false</code></pre>Equality—Two hashes are equal if they each contain the same number of keys and if each key-value pair is equal to (according to Object#==) the corresponding elements in the other hash.<pre><code>h1 = { "a" => 1, "c" => 2 }\nh2 = { 7 => 35, "c" => 2, "a" => 1 }\nh3 = { "a" => 1, "c" => 2, 7 => 35 }\nh4 = { "a" => 1, "d" => 2, "f" => 35 }\nh1 == h2   #=> false\nh2 == h3   #=> true\nh3 == h4   #=> false\n</code></pre>The orders of each hashes are not compared.<pre><code>h1 = { "a" => 1, "c" => 2 }\nh2 = { "c" => 2, "a" => 1 }\nh1 == h2   #=> true\n</code></pre>	http://ruby-doc.org/core/Hash.html#method-i-3D-3D
Hash#>	A			instance methods							<pre><code>hash > other → true or false</code></pre>Returns true if other is subset of hash.<pre><code>h1 = {a:1, b:2}\nh2 = {a:1, b:2, c:3}\nh1 > h2    #=> false\nh2 > h1    #=> true\nh1 > h1    #=> false\n</code></pre>	http://ruby-doc.org/core/Hash.html#method-i-3E
Hash#>=	A			instance methods							<pre><code>hash >= other → true or false</code></pre>Returns true if other is subset of hash or equals to hash.<pre><code>h1 = {a:1, b:2}\nh2 = {a:1, b:2, c:3}\nh1 >= h2   #=> false\nh2 >= h1   #=> true\nh1 >= h1   #=> true\n</code></pre>	http://ruby-doc.org/core/Hash.html#method-i-3E-3D
Hash#[]	A			instance methods							<pre><code>hsh[key]    →  value</code></pre>Element Reference—Retrieves the value object corresponding to the key object. If not found, returns the default value (see Hash::new for details).<pre><code>h = { "a" => 100, "b" => 200 }\nh["a"]   #=> 100\nh["c"]   #=> nil\n</code></pre>	http://ruby-doc.org/core/Hash.html#method-i-5B-5D
Hash#[]=	A			instance methods							<pre><code>hsh[key] = value        → value</code></pre>	http://ruby-doc.org/core/Hash.html#method-i-5B-5D-3D
Hash#any?	A			instance methods							<pre><code>any? [{ |(key, value)| block }]   → true or false</code></pre>See also Enumerable#any?	http://ruby-doc.org/core/Hash.html#method-i-any-3F
Hash#assoc	A			instance methods							<pre><code>assoc(obj)   →  an_array  or  nil</code></pre>Searches through the hash comparing obj with the key using ==. Returns the key-value pair (two elements array) or nil if no match is found. See Array#assoc.<pre><code>h = {"colors"  => ["red", "blue", "green"],\n     "letters" => ["a", "b", "c" ]}\nh.assoc("letters")  #=> ["letters", ["a", "b", "c"]]\nh.assoc("foo")      #=> nil\n</code></pre>	http://ruby-doc.org/core/Hash.html#method-i-assoc
Hash#clear	A			instance methods							<pre><code>clear → hsh</code></pre>Removes all key-value pairs from hsh.<pre><code>h = { "a" => 100, "b" => 200 }   #=> {"a"=>100, "b"=>200}\nh.clear                          #=> {}\n</code></pre>	http://ruby-doc.org/core/Hash.html#method-i-clear
Hash#compare_by_identity	A			instance methods							<pre><code>compare_by_identity → hsh</code></pre>Makes hsh compare its keys by their identity, i.e. it will consider exact same objects as same keys.<pre><code>h1 = { "a" => 100, "b" => 200, :c => "c" }\nh1["a"]        #=> 100\nh1.compare_by_identity\nh1.compare_by_identity? #=> true\nh1["a".dup]    #=> nil  # different objects.\nh1[:c]         #=> "c"  # same symbols are all same.\n</code></pre>	http://ruby-doc.org/core/Hash.html#method-i-compare_by_identity
Hash#compare_by_identity?	A			instance methods							<pre><code>compare_by_identity? → true or false</code></pre>Returns true if hsh will compare its keys by their identity. Also see Hash#compare_by_identity.	http://ruby-doc.org/core/Hash.html#method-i-compare_by_identity-3F
Hash#default	A			instance methods							<pre><code>default(key=nil)   → obj</code></pre>Returns the default value, the value that would be returned by hsh if key did not exist in hsh. See also Hash::new and Hash#default=.<pre><code>h = Hash.new                            #=> {}\nh.default                               #=> nil\nh.default(2)                            #=> nil\n\nh = Hash.new("cat")                     #=> {}\nh.default                               #=> "cat"\nh.default(2)                            #=> "cat"\n\nh = Hash.new {|h,k| h[k] = k.to_i*10}   #=> {}\nh.default                               #=> nil\nh.default(2)                            #=> 20\n</code></pre>	http://ruby-doc.org/core/Hash.html#method-i-default
Hash#default=	A			instance methods							<pre><code>default = obj     → obj</code></pre>Sets the default value, the value returned for a key that does not exist in the hash. It is not possible to set the default to a Proc that will be executed on each key lookup.<pre><code>h = { "a" => 100, "b" => 200 }\nh.default = "Go fish"\nh["a"]     #=> 100\nh["z"]     #=> "Go fish"\n# This doesn't do what you might hope...\nh.default = proc do |hash, key|\n  hash[key] = key + key\nend\nh[2]       #=> #<Proc:0x401b3948@-:6>\nh["cat"]   #=> #<Proc:0x401b3948@-:6>\n</code></pre>	http://ruby-doc.org/core/Hash.html#method-i-default-3D
Hash#default_proc	A			instance methods							<pre><code>default_proc → anObject</code></pre>If Hash::new was invoked with a block, return that block, otherwise return nil.<pre><code>h = Hash.new {|h,k| h[k] = k*k }   #=> {}\np = h.default_proc                 #=> #<Proc:0x401b3d08@-:1>\na = []                             #=> []\np.call(a, 2)\na                                  #=> [nil, nil, 4]\n</code></pre>	http://ruby-doc.org/core/Hash.html#method-i-default_proc
Hash#default_proc=	A			instance methods							<pre><code>default_proc = proc_obj or nil</code></pre>Sets the default proc to be executed on each failed key lookup.<pre><code>h.default_proc = proc do |hash, key|\n  hash[key] = key + key\nend\nh[2]       #=> 4\nh["cat"]   #=> "catcat"\n</code></pre>	http://ruby-doc.org/core/Hash.html#method-i-default_proc-3D
Hash#delete	A			instance methods							<pre><code>delete(key)                   → value\ndelete(key) {| key | block }  → value</code></pre>Deletes the key-value pair and returns the value from hsh whose key is equal to key. If the key is not found, it returns nil. If the optional code block is given and the key is not found, pass in the key and return the result of block.<pre><code>h = { "a" => 100, "b" => 200 }\nh.delete("a")                              #=> 100\nh.delete("z")                              #=> nil\nh.delete("z") { |el| "#{el} not found" }   #=> "z not found"\n</code></pre>	http://ruby-doc.org/core/Hash.html#method-i-delete
Hash#delete_if	A			instance methods							<pre><code>delete_if {| key, value | block }  → hsh\ndelete_if                          → an_enumerator</code></pre>Deletes every key-value pair from hsh for which block evaluates to true.<br>If no block is given, an enumerator is returned instead.<pre><code>h = { "a" => 100, "b" => 200, "c" => 300 }\nh.delete_if {|key, value| key >= "b" }   #=> {"a"=>100}\n</code></pre>	http://ruby-doc.org/core/Hash.html#method-i-delete_if
Hash#dig	A			instance methods							<pre><code>dig(key, ...)                 → object</code></pre>Extracts the nested value specified by the sequence of idx objects by calling dig at each step, returning nil if any intermediate step is nil.<pre><code>h = { foo: {bar: {baz: 1}}}\n\nh.dig(:foo, :bar, :baz)           #=> 1\nh.dig(:foo, :zot, :xyz)           #=> nil\n\ng = { foo: [10, 11, 12] }\ng.dig(:foo, 1)                    #=> 11\n</code></pre>	http://ruby-doc.org/core/Hash.html#method-i-dig
Hash#each	A			instance methods							<pre><code>each      {| key, value | block } → hsh\neach_pair {| key, value | block } → hsh\neach                              → an_enumerator\neach_pair                         → an_enumerator</code></pre>Calls block once for each key in hsh, passing the key-value pair as parameters.<br>If no block is given, an enumerator is returned instead.<pre><code>h = { "a" => 100, "b" => 200 }\nh.each {|key, value| puts "#{key} is #{value}" }\n</code></pre>produces:<pre><code>a is 100\nb is 200\n</code></pre>	http://ruby-doc.org/core/Hash.html#method-i-each
Hash#each_key	A			instance methods							<pre><code>each_key {| key | block } → hsh\neach_key                  → an_enumerator</code></pre>Calls block once for each key in hsh, passing the key as a parameter.<br>If no block is given, an enumerator is returned instead.<pre><code>h = { "a" => 100, "b" => 200 }\nh.each_key {|key| puts key }\n</code></pre>produces:<pre><code>a\nb\n</code></pre>	http://ruby-doc.org/core/Hash.html#method-i-each_key
Hash#each_pair	A			instance methods							<pre><code>each_pair {| key, value | block } → hsh\neach_pair                         → an_enumerator</code></pre>Calls block once for each key in hsh, passing the key-value pair as parameters.<br>If no block is given, an enumerator is returned instead.<pre><code>h = { "a" => 100, "b" => 200 }\nh.each {|key, value| puts "#{key} is #{value}" }\n</code></pre>produces:<pre><code>a is 100\nb is 200\n</code></pre>	http://ruby-doc.org/core/Hash.html#method-i-each_pair
Hash#each_value	A			instance methods							<pre><code>each_value {| value | block } → hsh\neach_value                    → an_enumerator</code></pre>Calls block once for each key in hsh, passing the value as a parameter.<br>If no block is given, an enumerator is returned instead.<pre><code>h = { "a" => 100, "b" => 200 }\nh.each_value {|value| puts value }\n</code></pre>produces:<pre><code>100\n200\n</code></pre>	http://ruby-doc.org/core/Hash.html#method-i-each_value
Hash#empty?	A			instance methods							<pre><code>empty?    → true or false</code></pre>Returns true if hsh contains no key-value pairs.<pre><code>{}.empty?   #=> true\n</code></pre>	http://ruby-doc.org/core/Hash.html#method-i-empty-3F
Hash#eql?	A			instance methods							<pre><code>eql?(other)  → true or false</code></pre>Returns true if hash and other are both hashes with the same content. The orders of each hashes are not compared.	http://ruby-doc.org/core/Hash.html#method-i-eql-3F
Hash#fetch	A			instance methods							<pre><code>fetch(key [, default] )       → obj\nfetch(key) {| key | block }   → obj</code></pre>Returns a value from the hash for the given key. If the key can’t be found, there are several options: With no other arguments, it will raise an KeyError exception; if default is given, then that will be returned; if the optional code block is specified, then that will be run and its result returned.<pre><code>h = { "a" => 100, "b" => 200 }\nh.fetch("a")                            #=> 100\nh.fetch("z", "go fish")                 #=> "go fish"\nh.fetch("z") { |el| "go fish, #{el}"}   #=> "go fish, z"\n</code></pre>The following example shows that an exception is raised if the key is not found and a default value is not supplied.<pre><code>h = { "a" => 100, "b" => 200 }\nh.fetch("z")\n</code></pre>produces:	http://ruby-doc.org/core/Hash.html#method-i-fetch
Hash#fetch_values	A			instance methods							<pre><code>fetch_values(key, ...)                 → array\nfetch_values(key, ...) { |key| block } → array</code></pre>Returns an array containing the values associated with the given keys but also raises KeyError when one of keys can’t be found. Also see Hash#values_at and Hash#fetch.<pre><code>h = { "cat" => "feline", "dog" => "canine", "cow" => "bovine" }\n\nh.fetch_values("cow", "cat")                   #=> ["bovine", "feline"]\nh.fetch_values("cow", "bird")                  # raises KeyError\nh.fetch_values("cow", "bird") { |k| k.upcase } #=> ["bovine", "BIRD"]\n</code></pre>	http://ruby-doc.org/core/Hash.html#method-i-fetch_values
Hash#flatten	A			instance methods							<pre><code>flatten → an_array\nflatten(level) → an_array</code></pre>Returns a new array that is a one-dimensional flattening of this hash. That is, for every key or value that is an array, extract its elements into the new array. Unlike Array#flatten, this method does not flatten recursively by default. The optional level argument determines the level of recursion to flatten.<pre><code>a =  {1=> "one", 2 => [2,"two"], 3 => "three"}\na.flatten    # => [1, "one", 2, [2, "two"], 3, "three"]\na.flatten(2) # => [1, "one", 2, 2, "two", 3, "three"]\n</code></pre>	http://ruby-doc.org/core/Hash.html#method-i-flatten
Hash#has_key?	A			instance methods							<pre><code>has_key?(key)    → true or false</code></pre>Returns true if the given key is present in hsh.<pre><code>h = { "a" => 100, "b" => 200 }\nh.has_key?("a")   #=> true\nh.has_key?("z")   #=> false\n</code></pre>Note that include? and member? do not test member equality using == as do other Enumerables.<br>See also Enumerable#include?	http://ruby-doc.org/core/Hash.html#method-i-has_key-3F
Hash#has_value?	A			instance methods							<pre><code>has_value?(value)    → true or false</code></pre>Returns true if the given value is present for some key in hsh.<pre><code>h = { "a" => 100, "b" => 200 }\nh.has_value?(100)   #=> true\nh.has_value?(999)   #=> false\n</code></pre>	http://ruby-doc.org/core/Hash.html#method-i-has_value-3F
Hash#hash	A			instance methods							<pre><code>hash   → fixnum</code></pre>Compute a hash-code for this hash. Two hashes with the same content will have the same hash code (and will compare using eql?).<br>See also Object#hash.	http://ruby-doc.org/core/Hash.html#method-i-hash
Hash#include?	A			instance methods							<pre><code>include?(key)    → true or false</code></pre>Returns true if the given key is present in hsh.<pre><code>h = { "a" => 100, "b" => 200 }\nh.has_key?("a")   #=> true\nh.has_key?("z")   #=> false\n</code></pre>Note that include? and member? do not test member equality using == as do other Enumerables.<br>See also Enumerable#include?	http://ruby-doc.org/core/Hash.html#method-i-include-3F
Hash#inspect	A			instance methods							<pre><code>to_s     → string\ninspect  → string</code></pre>Return the contents of this hash as a string.<pre><code>h = { "c" => 300, "a" => 100, "d" => 400, "c" => 300  }\nh.to_s   #=> "{\"c\"=>300, \"a\"=>100, \"d\"=>400}"\n</code></pre>	http://ruby-doc.org/core/Hash.html#method-i-inspect
Hash#invert	A			instance methods							<pre><code>invert → new_hash</code></pre>Returns a new hash created by using hsh’s values as keys, and the keys as values. If a key with the same value already exists in the hsh, then the last one defined will be used, the earlier value(s) will be discarded.<pre><code>h = { "n" => 100, "m" => 100, "y" => 300, "d" => 200, "a" => 0 }\nh.invert   #=> {0=>"a", 100=>"m", 200=>"d", 300=>"y"}\n</code></pre>	http://ruby-doc.org/core/Hash.html#method-i-invert
Hash#keep_if	A			instance methods							<pre><code>keep_if {| key, value | block }  → hsh\nkeep_if                          → an_enumerator</code></pre>Deletes every key-value pair from hsh for which block evaluates to false.<br>If no block is given, an enumerator is returned instead.	http://ruby-doc.org/core/Hash.html#method-i-keep_if
Hash#key	A			instance methods							<pre><code>key(value)    → key</code></pre>Returns the key of an occurrence of a given value. If the value is not found, returns nil.<pre><code>h = { "a" => 100, "b" => 200, "c" => 300, "d" => 300 }\nh.key(200)   #=> "b"\nh.key(300)   #=> "c"\nh.key(999)   #=> nil\n</code></pre>	http://ruby-doc.org/core/Hash.html#method-i-key
Hash#key?	A			instance methods							<pre><code>key?(key)        → true or false</code></pre>Returns true if the given key is present in hsh.<pre><code>h = { "a" => 100, "b" => 200 }\nh.has_key?("a")   #=> true\nh.has_key?("z")   #=> false\n</code></pre>Note that include? and member? do not test member equality using == as do other Enumerables.<br>See also Enumerable#include?	http://ruby-doc.org/core/Hash.html#method-i-key-3F
Hash#keys	A			instance methods							<pre><code>keys    → array</code></pre>Returns a new array populated with the keys from this hash. See also Hash#values.<pre><code>h = { "a" => 100, "b" => 200, "c" => 300, "d" => 400 }\nh.keys   #=> ["a", "b", "c", "d"]\n</code></pre>	http://ruby-doc.org/core/Hash.html#method-i-keys
Hash#length	A			instance methods							<pre><code>length    →  fixnum</code></pre>Returns the number of key-value pairs in the hash.<pre><code>h = { "d" => 100, "a" => 200, "v" => 300, "e" => 400 }\nh.length        #=> 4\nh.delete("a")   #=> 200\nh.length        #=> 3\n</code></pre>	http://ruby-doc.org/core/Hash.html#method-i-length
Hash#member?	A			instance methods							<pre><code>member?(key)     → true or false</code></pre>Returns true if the given key is present in hsh.<pre><code>h = { "a" => 100, "b" => 200 }\nh.has_key?("a")   #=> true\nh.has_key?("z")   #=> false\n</code></pre>Note that include? and member? do not test member equality using == as do other Enumerables.<br>See also Enumerable#include?	http://ruby-doc.org/core/Hash.html#method-i-member-3F
Hash#merge	A			instance methods							<pre><code>merge(other_hash)                              → new_hash\nmerge(other_hash){|key, oldval, newval| block} → new_hash</code></pre>Returns a new hash containing the contents of other_hash and the contents of hsh. If no block is specified, the value for entries with duplicate keys will be that of other_hash. Otherwise the value for each duplicate key is determined by calling the block with the key, its value in hsh and its value in other_hash.<pre><code>h1 = { "a" => 100, "b" => 200 }\nh2 = { "b" => 254, "c" => 300 }\nh1.merge(h2)   #=> {"a"=>100, "b"=>254, "c"=>300}\nh1.merge(h2){|key, oldval, newval| newval - oldval}\n               #=> {"a"=>100, "b"=>54,  "c"=>300}\nh1             #=> {"a"=>100, "b"=>200}\n</code></pre>	http://ruby-doc.org/core/Hash.html#method-i-merge
Hash#merge!	A			instance methods							<pre><code>merge!(other_hash)                                 → hsh\nmerge!(other_hash){|key, oldval, newval| block}    → hsh</code></pre>Adds the contents of other_hash to hsh. If no block is specified, entries with duplicate keys are overwritten with the values from other_hash, otherwise the value of each duplicate key is determined by calling the block with the key, its value in hsh and its value in other_hash.<pre><code>h1 = { "a" => 100, "b" => 200 }\nh2 = { "b" => 254, "c" => 300 }\nh1.merge!(h2)   #=> {"a"=>100, "b"=>254, "c"=>300}\n\nh1 = { "a" => 100, "b" => 200 }\nh2 = { "b" => 254, "c" => 300 }\nh1.merge!(h2) { |key, v1, v2| v1 }\n                #=> {"a"=>100, "b"=>200, "c"=>300}\n</code></pre>	http://ruby-doc.org/core/Hash.html#method-i-merge-21
Hash#rassoc	A			instance methods							<pre><code>rassoc(obj) → an_array or nil</code></pre>Searches through the hash comparing obj with the value using ==. Returns the first key-value pair (two-element array) that matches. See also Array#rassoc.<pre><code>a = {1=> "one", 2 => "two", 3 => "three", "ii" => "two"}\na.rassoc("two")    #=> [2, "two"]\na.rassoc("four")   #=> nil\n</code></pre>	http://ruby-doc.org/core/Hash.html#method-i-rassoc
Hash#rehash	A			instance methods							<pre><code>rehash → hsh</code></pre>Rebuilds the hash based on the current hash values for each key. If values of key objects have changed since they were inserted, this method will reindex hsh. If Hash#rehash is called while an iterator is traversing the hash, a RuntimeError will be raised in the iterator.<pre><code>a = [ "a", "b" ]\nc = [ "c", "d" ]\nh = { a => 100, c => 300 }\nh[a]       #=> 100\na[0] = "z"\nh[a]       #=> nil\nh.rehash   #=> {["z", "b"]=>100, ["c", "d"]=>300}\nh[a]       #=> 100\n</code></pre>	http://ruby-doc.org/core/Hash.html#method-i-rehash
Hash#reject	A			instance methods							<pre><code>reject {|key, value| block}   → a_hash\nreject                        → an_enumerator</code></pre>Returns a new hash consisting of entries for which the block returns false.<br>If no block is given, an enumerator is returned instead.<pre><code>h = { "a" => 100, "b" => 200, "c" => 300 }\nh.reject {|k,v| k < "b"}  #=> {"b" => 200, "c" => 300}\nh.reject {|k,v| v > 100}  #=> {"a" => 100}\n</code></pre>	http://ruby-doc.org/core/Hash.html#method-i-reject
Hash#reject!	A			instance methods							<pre><code>reject! {| key, value | block }  → hsh or nil\nreject!                          → an_enumerator</code></pre>Equivalent to Hash#delete_if, but returns nil if no changes were made.	http://ruby-doc.org/core/Hash.html#method-i-reject-21
Hash#replace	A			instance methods							<pre><code>replace(other_hash) → hsh</code></pre>Replaces the contents of hsh with the contents of other_hash.<pre><code>h = { "a" => 100, "b" => 200 }\nh.replace({ "c" => 300, "d" => 400 })   #=> {"c"=>300, "d"=>400}\n</code></pre>	http://ruby-doc.org/core/Hash.html#method-i-replace
Hash#select	A			instance methods							<pre><code>select {|key, value| block}   → a_hash\nselect                        → an_enumerator</code></pre>Returns a new hash consisting of entries for which the block returns true.<br>If no block is given, an enumerator is returned instead.<pre><code>h = { "a" => 100, "b" => 200, "c" => 300 }\nh.select {|k,v| k > "a"}  #=> {"b" => 200, "c" => 300}\nh.select {|k,v| v < 200}  #=> {"a" => 100}\n</code></pre>	http://ruby-doc.org/core/Hash.html#method-i-select
Hash#select!	A			instance methods							<pre><code>select! {| key, value | block }  → hsh or nil\nselect!                          → an_enumerator</code></pre>Equivalent to Hash#keep_if, but returns nil if no changes were made.	http://ruby-doc.org/core/Hash.html#method-i-select-21
Hash#shift	A			instance methods							<pre><code>shift → anArray or obj</code></pre>Removes a key-value pair from hsh and returns it as the two-item array [ key, value ], or the hash’s default value if the hash is empty.<pre><code>h = { 1 => "a", 2 => "b", 3 => "c" }\nh.shift   #=> [1, "a"]\nh         #=> {2=>"b", 3=>"c"}\n</code></pre>	http://ruby-doc.org/core/Hash.html#method-i-shift
Hash#size	A			instance methods							<pre><code>size      →  fixnum</code></pre>Returns the number of key-value pairs in the hash.<pre><code>h = { "d" => 100, "a" => 200, "v" => 300, "e" => 400 }\nh.length        #=> 4\nh.delete("a")   #=> 200\nh.length        #=> 3\n</code></pre>	http://ruby-doc.org/core/Hash.html#method-i-size
Hash#store	A			instance methods							<pre><code>store(key, value)   → value</code></pre>	http://ruby-doc.org/core/Hash.html#method-i-store
Hash#to_a	A			instance methods							<pre><code>to_a → array</code></pre>Converts hsh to a nested array of [ key, value ] arrays.<pre><code>h = { "c" => 300, "a" => 100, "d" => 400, "c" => 300  }\nh.to_a   #=> [["c", 300], ["a", 100], ["d", 400]]\n</code></pre>	http://ruby-doc.org/core/Hash.html#method-i-to_a
Hash#to_h	A			instance methods							<pre><code>to_h     → hsh or new_hash</code></pre>Returns self. If called on a subclass of Hash, converts the receiver to a Hash object.	http://ruby-doc.org/core/Hash.html#method-i-to_h
Hash#to_hash	A			instance methods							<pre><code>to_hash   => hsh</code></pre>Returns self.	http://ruby-doc.org/core/Hash.html#method-i-to_hash
Hash#to_proc	A			instance methods								http://ruby-doc.org/core/Hash.html#method-i-to_proc
Hash#to_s	A			instance methods								http://ruby-doc.org/core/Hash.html#method-i-to_s
Hash#update	A			instance methods							<pre><code>update(other_hash)                                 → hsh\nupdate(other_hash){|key, oldval, newval| block}    → hsh</code></pre>Adds the contents of other_hash to hsh. If no block is specified, entries with duplicate keys are overwritten with the values from other_hash, otherwise the value of each duplicate key is determined by calling the block with the key, its value in hsh and its value in other_hash.<pre><code>h1 = { "a" => 100, "b" => 200 }\nh2 = { "b" => 254, "c" => 300 }\nh1.merge!(h2)   #=> {"a"=>100, "b"=>254, "c"=>300}\n\nh1 = { "a" => 100, "b" => 200 }\nh2 = { "b" => 254, "c" => 300 }\nh1.merge!(h2) { |key, v1, v2| v1 }\n                #=> {"a"=>100, "b"=>200, "c"=>300}\n</code></pre>	http://ruby-doc.org/core/Hash.html#method-i-update
Hash#value?	A			instance methods							<pre><code>value?(value)        → true or false</code></pre>Returns true if the given value is present for some key in hsh.<pre><code>h = { "a" => 100, "b" => 200 }\nh.has_value?(100)   #=> true\nh.has_value?(999)   #=> false\n</code></pre>	http://ruby-doc.org/core/Hash.html#method-i-value-3F
Hash#values	A			instance methods							<pre><code>values    → array</code></pre>Returns a new array populated with the values from hsh. See also Hash#keys.<pre><code>h = { "a" => 100, "b" => 200, "c" => 300 }\nh.values   #=> [100, 200, 300]\n</code></pre>	http://ruby-doc.org/core/Hash.html#method-i-values
Hash#values_at	A			instance methods							<pre><code>values_at(key, ...)   → array</code></pre>Return an array containing the values associated with the given keys. Also see Hash.select.<pre><code>h = { "cat" => "feline", "dog" => "canine", "cow" => "bovine" }\nh.values_at("cow", "cat")  #=> ["bovine", "feline"]\n</code></pre>	http://ruby-doc.org/core/Hash.html#method-i-values_at
ENV	A			classes							ENV is a hash-like accessor for environment variables.	http://ruby-doc.org/core/ENV.html
ENV::[]	A			class methods							<pre><code>ENV[name] → value</code></pre>Retrieves the value for environment variable name as a String. Returns nil if the named variable does not exist.	http://ruby-doc.org/core/ENV.html#method-c-5B-5D
ENV::[]=	A			class methods							<pre><code>ENV[name] = value</code></pre>Sets the environment variable name to value. If the value given is nil the environment variable is deleted. name must be a string.	http://ruby-doc.org/core/ENV.html#method-c-5B-5D-3D
ENV::assoc	A			class methods							<pre><code>assoc(name) → Array or nil</code></pre>Returns an Array of the name and value of the environment variable with name or nil if the name cannot be found.	http://ruby-doc.org/core/ENV.html#method-c-assoc
ENV::clear	A			class methods							<pre><code>clear</code></pre>Removes every environment variable.	http://ruby-doc.org/core/ENV.html#method-c-clear
ENV::delete	A			class methods							<pre><code>delete(name)            → value\ndelete(name) { |name| } → value</code></pre>Deletes the environment variable with name and returns the value of the variable. If a block is given it will be called when the named environment does not exist.	http://ruby-doc.org/core/ENV.html#method-c-delete
ENV::delete_if	A			class methods							<pre><code>delete_if { |name, value| } → Hash\ndelete_if                   → Enumerator</code></pre>Deletes every environment variable for which the block evaluates to true.<br>If no block is given an enumerator is returned instead.	http://ruby-doc.org/core/ENV.html#method-c-delete_if
ENV::each	A			class methods							<pre><code>each      { |name, value| } → Hash\neach                        → Enumerator\neach_pair { |name, value| } → Hash\neach_pair                   → Enumerator</code></pre>Yields each environment variable name and value.<br>If no block is given an Enumerator is returned.	http://ruby-doc.org/core/ENV.html#method-c-each
ENV::each_key	A			class methods							<pre><code>each_key { |name| } → Hash\neach_key            → Enumerator</code></pre>Yields each environment variable name.<br>An Enumerator is returned if no block is given.	http://ruby-doc.org/core/ENV.html#method-c-each_key
ENV::each_pair	A			class methods							<pre><code>each_pair { |name, value| } → Hash\neach_pair                   → Enumerator</code></pre>Yields each environment variable name and value.<br>If no block is given an Enumerator is returned.	http://ruby-doc.org/core/ENV.html#method-c-each_pair
ENV::each_value	A			class methods							<pre><code>each_value { |value| } → Hash\neach_value             → Enumerator</code></pre>Yields each environment variable value.<br>An Enumerator is returned if no block was given.	http://ruby-doc.org/core/ENV.html#method-c-each_value
ENV::empty?	A			class methods							<pre><code>empty? → true or false</code></pre>Returns true when there are no environment variables	http://ruby-doc.org/core/ENV.html#method-c-empty-3F
ENV::fetch	A			class methods							<pre><code>fetch(name)                        → value\nfetch(name, default)               → value\nfetch(name) { |missing_name| ... } → value</code></pre>Retrieves the environment variable name.<br>If the given name does not exist and neither default nor a block a provided an IndexError is raised. If a block is given it is called with the missing name to provide a value. If a default value is given it will be returned when no block is given.	http://ruby-doc.org/core/ENV.html#method-c-fetch
ENV::has_key?	A			class methods							<pre><code>has_key?(name) → true or false</code></pre>Returns true if there is an environment variable with the given name.	http://ruby-doc.org/core/ENV.html#method-c-has_key-3F
ENV::has_value?	A			class methods							<pre><code>has_value?(value) → true or false</code></pre>Returns true if there is an environment variable with the given value.	http://ruby-doc.org/core/ENV.html#method-c-has_value-3F
ENV::include?	A			class methods							<pre><code>include?(name) → true or false</code></pre>Returns true if there is an environment variable with the given name.	http://ruby-doc.org/core/ENV.html#method-c-include-3F
ENV::index	A			class methods							<pre><code>index(value) → key</code></pre>Deprecated method that is equivalent to ::key	http://ruby-doc.org/core/ENV.html#method-c-index
ENV::inspect	A			class methods							<pre><code>inspect → string</code></pre>Returns the contents of the environment as a String.	http://ruby-doc.org/core/ENV.html#method-c-inspect
ENV::invert	A			class methods							<pre><code>invert → Hash</code></pre>Returns a new hash created by using environment variable names as values and values as names.	http://ruby-doc.org/core/ENV.html#method-c-invert
ENV::keep_if	A			class methods							<pre><code>keep_if { |name, value| } → Hash\nkeep_if                   → Enumerator</code></pre>Deletes every environment variable where the block evaluates to false.<br>Returns an enumerator if no block was given.	http://ruby-doc.org/core/ENV.html#method-c-keep_if
ENV::key	A			class methods							<pre><code>key(value) → name</code></pre>Returns the name of the environment variable with value. If the value is not found nil is returned.	http://ruby-doc.org/core/ENV.html#method-c-key
ENV::key?	A			class methods							<pre><code>key?(name)     → true or false</code></pre>Returns true if there is an environment variable with the given name.	http://ruby-doc.org/core/ENV.html#method-c-key-3F
ENV::keys	A			class methods							<pre><code>keys → Array</code></pre>Returns every environment variable name in an Array	http://ruby-doc.org/core/ENV.html#method-c-keys
ENV::length	A			class methods							<pre><code>length</code></pre>Returns the number of environment variables.	http://ruby-doc.org/core/ENV.html#method-c-length
ENV::member?	A			class methods							<pre><code>member?(name)  → true or false</code></pre>Returns true if there is an environment variable with the given name.	http://ruby-doc.org/core/ENV.html#method-c-member-3F
ENV::rassoc	A			class methods							<pre><code>rassoc(value)</code></pre>Returns an Array of the name and value of the environment variable with value or nil if the value cannot be found.	http://ruby-doc.org/core/ENV.html#method-c-rassoc
ENV::rehash	A			class methods							<pre><code>rehash</code></pre>Re-hashing the environment variables does nothing. It is provided for compatibility with Hash.	http://ruby-doc.org/core/ENV.html#method-c-rehash
ENV::reject	A			class methods							<pre><code>reject { |name, value| } → Hash\nreject                   → Enumerator</code></pre>Same as ENV#delete_if, but works on (and returns) a copy of the environment.	http://ruby-doc.org/core/ENV.html#method-c-reject
ENV::reject!	A			class methods							<pre><code>reject! { |name, value| } → ENV or nil\nreject!                   → Enumerator</code></pre>Equivalent to ENV#delete_if but returns nil if no changes were made.<br>Returns an Enumerator if no block was given.	http://ruby-doc.org/core/ENV.html#method-c-reject-21
ENV::replace	A			class methods							<pre><code>replace(hash) → env</code></pre>Replaces the contents of the environment variables with the contents of hash.	http://ruby-doc.org/core/ENV.html#method-c-replace
ENV::select	A			class methods							<pre><code>select { |name, value| } → Hash\nselect                   → Enumerator</code></pre>Returns a copy of the environment for entries where the block returns true.<br>Returns an Enumerator if no block was given.	http://ruby-doc.org/core/ENV.html#method-c-select
ENV::select!	A			class methods							<pre><code>select! { |name, value| } → ENV or nil\nselect!                   → Enumerator</code></pre>Equivalent to ENV#keep_if but returns nil if no changes were made.	http://ruby-doc.org/core/ENV.html#method-c-select-21
ENV::shift	A			class methods							<pre><code>shift → Array or nil</code></pre>Removes an environment variable name-value pair from ENV and returns it as an Array. Returns nil if when the environment is empty.	http://ruby-doc.org/core/ENV.html#method-c-shift
ENV::size	A			class methods							<pre><code>size</code></pre>Returns the number of environment variables.	http://ruby-doc.org/core/ENV.html#method-c-size
ENV::store	A			class methods							<pre><code>store(name, value) → value</code></pre>Sets the environment variable name to value. If the value given is nil the environment variable is deleted. name must be a string.	http://ruby-doc.org/core/ENV.html#method-c-store
ENV::to_a	A			class methods							<pre><code>to_a → Array</code></pre>Converts the environment variables into an array of names and value arrays.<pre><code>ENV.to_a # => [["TERM", "xterm-color"], ["SHELL", "/bin/bash"], ...]\n</code></pre>	http://ruby-doc.org/core/ENV.html#method-c-to_a
ENV::to_h	A			class methods							<pre><code>to_hash → hash\nto_h    → hash</code></pre>Creates a hash with a copy of the environment variables.	http://ruby-doc.org/core/ENV.html#method-c-to_h
ENV::to_hash	A			class methods							<pre><code>to_hash → hash</code></pre>Creates a hash with a copy of the environment variables.	http://ruby-doc.org/core/ENV.html#method-c-to_hash
ENV::to_s	A			class methods							<pre><code>to_s → "ENV"</code></pre>Returns “ENV”	http://ruby-doc.org/core/ENV.html#method-c-to_s
ENV::update	A			class methods							<pre><code>update(hash)                                  → Hash\nupdate(hash) { |name, old_value, new_value| } → Hash</code></pre>Adds the contents of hash to the environment variables. If no block is specified entries with duplicate keys are overwritten, otherwise the value of each duplicate name is determined by calling the block with the key, its value from the environment and its value from the hash.	http://ruby-doc.org/core/ENV.html#method-c-update
ENV::value?	A			class methods							<pre><code>value?(value) → true or false</code></pre>Returns true if there is an environment variable with the given value.	http://ruby-doc.org/core/ENV.html#method-c-value-3F
ENV::values	A			class methods							<pre><code>values → Array</code></pre>Returns every environment variable value as an Array	http://ruby-doc.org/core/ENV.html#method-c-values
ENV::values_at	A			class methods							<pre><code>values_at(name, ...) → Array</code></pre>Returns an array containing the environment variable values associated with the given names. See also ::select.	http://ruby-doc.org/core/ENV.html#method-c-values_at
IOError	A			classes							Raised when an IO operation fails.<pre><code>File.open("/etc/hosts") {|f| f << "example"}\n  #=> IOError: not opened for writing\n\nFile.open("/etc/hosts") {|f| f.close; f.read }\n  #=> IOError: closed stream\n</code></pre>Note that some IO failures raise +SystemCallError+s and these are not subclasses of IOError:<pre><code>File.open("does/not/exist")\n  #=> Errno::ENOENT: No such file or directory - does/not/exist\n</code></pre>	http://ruby-doc.org/core/IOError.html
EOFError	A			classes							Raised by some IO operations when reaching the end of file. Many IO methods exist in two forms,<br>one that returns nil when the end of file is reached, the other raises EOFError EOFError.<br>EOFError is a subclass of IOError.<pre><code>file = File.open("/etc/hosts")\nfile.read\nfile.gets     #=> nil\nfile.readline #=> EOFError: end of file reached\n</code></pre>	http://ruby-doc.org/core/EOFError.html
IO::EAGAINWaitReadable	A			classes								http://ruby-doc.org/core/IO/EAGAINWaitReadable.html
IO::EAGAINWaitWritable	A			classes								http://ruby-doc.org/core/IO/EAGAINWaitWritable.html
IO::EWOULDBLOCKWaitReadable	A			classes								http://ruby-doc.org/core/IO/EWOULDBLOCKWaitReadable.html
IO::EWOULDBLOCKWaitWritable	A			classes								http://ruby-doc.org/core/IO/EWOULDBLOCKWaitWritable.html
IO::EINPROGRESSWaitReadable	A			classes								http://ruby-doc.org/core/IO/EINPROGRESSWaitReadable.html
IO::EINPROGRESSWaitWritable	A			classes								http://ruby-doc.org/core/IO/EINPROGRESSWaitWritable.html
RubyVM	A			classes							::RubyVM	http://ruby-doc.org/core/RubyVM.html
RubyVM::stat	A			class methods							<pre><code>stat → Hash\nstat(hsh) → hsh\nstat(Symbol) → Numeric</code></pre>Returns a Hash containing implementation-dependent counters inside the VM.<br>This hash includes information about method/constant cache serials:<pre><code>{\n  :global_method_state=>251,\n  :global_constant_state=>481,\n  :class_serial=>9029\n}\n</code></pre>The contents of the hash are implementation specific and may be changed in the future.<br>This method is only expected to work on C Ruby.	http://ruby-doc.org/core/RubyVM.html#method-c-stat
RubyVM::InstructionSequence	A			classes							The InstructionSequence class represents a compiled sequence of instructions for the Ruby Virtual Machine.<br>With it, you can get a handle to the instructions that make up a method or a proc, compile strings of Ruby code down to VM instructions, and disassemble instruction sequences to strings for easy inspection. It is mostly useful if you want to learn how the Ruby VM works, but it also lets you control various settings for the Ruby iseq compiler.<br>You can find the source for the VM instructions in insns.def in the Ruby source.<br>The instruction sequence results will almost certainly change as Ruby changes, so example output in this documentation may be different from what you see.	http://ruby-doc.org/core/RubyVM/InstructionSequence.html
RubyVM::InstructionSequence::compile	A			class methods							<pre><code>compile(source[, file[, path[, line[, options]]]]) → iseq</code></pre>Takes source, a String of Ruby code and compiles it to an InstructionSequence.<br>Optionally takes file, path, and line which describe the filename, absolute path and first line number of the ruby code in source which are metadata attached to the returned iseq.<br>options, which can be true, false or a Hash, is used to modify the default behavior of the Ruby iseq compiler.<br>For details regarding valid compile options see ::compile_option=.<pre><code>RubyVM::InstructionSequence.compile("a = 1 + 2")\n#=> <RubyVM::InstructionSequence:<compiled>@<compiled>>\n</code></pre>	http://ruby-doc.org/core/RubyVM/InstructionSequence.html#method-c-compile
RubyVM::InstructionSequence::compile_file	A			class methods							<pre><code>compile_file(file[, options]) → iseq</code></pre>Takes file, a String with the location of a Ruby source file, reads, parses and compiles the file, and returns iseq, the compiled InstructionSequence with source location metadata set.<br>Optionally takes options, which can be true, false or a Hash, to modify the default behavior of the Ruby iseq compiler.<br>For details regarding valid compile options see ::compile_option=.<pre><code># /tmp/hello.rb\nputs "Hello, world!"\n\n# elsewhere\nRubyVM::InstructionSequence.compile_file("/tmp/hello.rb")\n#=> <RubyVM::InstructionSequence:<main>@/tmp/hello.rb>\n</code></pre>	http://ruby-doc.org/core/RubyVM/InstructionSequence.html#method-c-compile_file
RubyVM::InstructionSequence::compile_option	A			class methods							<pre><code>compile_option → options</code></pre>Returns a hash of default options used by the Ruby iseq compiler.<br>For details, see ::compile_option=.	http://ruby-doc.org/core/RubyVM/InstructionSequence.html#method-c-compile_option
RubyVM::InstructionSequence::compile_option=	A			class methods							<pre><code>compile_option = options</code></pre>Sets the default values for various optimizations in the Ruby iseq compiler.<br>Possible values for options include true, which enables all options, false which disables all options, and nil which leaves all options unchanged.<br>You can also pass a Hash of options that you want to change, any options not present in the hash will be left unchanged.<br>Possible option names (which are keys in options) which can be set to true or false include:<br>:inline_const_cache<br>:instructions_unification<br>:operands_unification<br>:peephole_optimization<br>:specialized_instruction<br>:stack_caching<br>:tailcall_optimization<br>:trace_instruction<br>Additionally, :debug_level can be set to an integer.<br>These default options can be overwritten for a single run of the iseq compiler by passing any of the above values as the options parameter to ::new, ::compile and ::compile_file.	http://ruby-doc.org/core/RubyVM/InstructionSequence.html#method-c-compile_option-3D
RubyVM::InstructionSequence::disasm	A			class methods							<pre><code>disasm(body) → str\ndisassemble(body) → str</code></pre>Takes body, a Method or Proc object, and returns a String with the human readable instructions for body.<br>For a Method object:<pre><code># /tmp/method.rb\ndef hello\n  puts "hello, world"\nend\n\nputs RubyVM::InstructionSequence.disasm(method(:hello))\n</code></pre>Produces:<br>For a Proc:<pre><code># /tmp/proc.rb\np = proc { num = 1 + 2 }\nputs RubyVM::InstructionSequence.disasm(p)\n</code></pre>Produces:	http://ruby-doc.org/core/RubyVM/InstructionSequence.html#method-c-disasm
RubyVM::InstructionSequence::disassemble	A			class methods							<pre><code>disasm(body) → str\ndisassemble(body) → str</code></pre>Takes body, a Method or Proc object, and returns a String with the human readable instructions for body.<br>For a Method object:<pre><code># /tmp/method.rb\ndef hello\n  puts "hello, world"\nend\n\nputs RubyVM::InstructionSequence.disasm(method(:hello))\n</code></pre>Produces:<br>For a Proc:<pre><code># /tmp/proc.rb\np = proc { num = 1 + 2 }\nputs RubyVM::InstructionSequence.disasm(p)\n</code></pre>Produces:	http://ruby-doc.org/core/RubyVM/InstructionSequence.html#method-c-disassemble
RubyVM::InstructionSequence::load_from_binary	A			class methods							<pre><code>RubyVM::InstructionSequence.load_from_binary(binary) → iseq</code></pre>Load an iseq object from binary format String object created by #to_binary.<br>This loader does not have a verifier, so that loading broken/modified binary causes critical problem.<br>You should not load binary data provided by others. You should use binary data translated by yourself.	http://ruby-doc.org/core/RubyVM/InstructionSequence.html#method-c-load_from_binary
RubyVM::InstructionSequence::load_from_binary_extra_data	A			class methods							<pre><code>RubyVM::InstructionSequence.load_from_binary_extra_data(binary) → str</code></pre>Load extra data embed into binary format String object.	http://ruby-doc.org/core/RubyVM/InstructionSequence.html#method-c-load_from_binary_extra_data
RubyVM::InstructionSequence::new	A			class methods							<pre><code>new(source[, file[, path[, line[, options]]]]) → iseq</code></pre>Takes source, a String of Ruby code and compiles it to an InstructionSequence.<br>Optionally takes file, path, and line which describe the filename, absolute path and first line number of the ruby code in source which are metadata attached to the returned iseq.<br>options, which can be true, false or a Hash, is used to modify the default behavior of the Ruby iseq compiler.<br>For details regarding valid compile options see ::compile_option=.<pre><code>RubyVM::InstructionSequence.compile("a = 1 + 2")\n#=> <RubyVM::InstructionSequence:<compiled>@<compiled>>\n</code></pre>	http://ruby-doc.org/core/RubyVM/InstructionSequence.html#method-c-new
RubyVM::InstructionSequence::of	A			class methods							Returns the instruction sequence containing the given proc or method.<br>For example, using irb:<br>Using ::compile_file:	http://ruby-doc.org/core/RubyVM/InstructionSequence.html#method-c-of
RubyVM::InstructionSequence#absolute_path	A			instance methods							Returns the absolute path of this instruction sequence.<br>nil if the iseq was evaluated from a string.<br>For example, using ::compile_file:	http://ruby-doc.org/core/RubyVM/InstructionSequence.html#method-i-absolute_path
RubyVM::InstructionSequence#base_label	A			instance methods							Returns the base label of this instruction sequence.<br>For example, using irb:<pre><code>iseq = RubyVM::InstructionSequence.compile('num = 1 + 2')\n#=> <RubyVM::InstructionSequence:<compiled>@<compiled>>\niseq.base_label\n#=> "<compiled>"\n</code></pre>Using ::compile_file:	http://ruby-doc.org/core/RubyVM/InstructionSequence.html#method-i-base_label
RubyVM::InstructionSequence#disasm	A			instance methods							<pre><code>disasm → str</code></pre>Returns the instruction sequence as a String in human readable form.<pre><code>puts RubyVM::InstructionSequence.compile('1 + 2').disasm\n</code></pre>Produces:	http://ruby-doc.org/core/RubyVM/InstructionSequence.html#method-i-disasm
RubyVM::InstructionSequence#disassemble	A			instance methods							<pre><code>disassemble → str</code></pre>Returns the instruction sequence as a String in human readable form.<pre><code>puts RubyVM::InstructionSequence.compile('1 + 2').disasm\n</code></pre>Produces:	http://ruby-doc.org/core/RubyVM/InstructionSequence.html#method-i-disassemble
RubyVM::InstructionSequence#eval	A			instance methods							<pre><code>eval → obj</code></pre>Evaluates the instruction sequence and returns the result.<pre><code>RubyVM::InstructionSequence.compile("1 + 2").eval #=> 3\n</code></pre>	http://ruby-doc.org/core/RubyVM/InstructionSequence.html#method-i-eval
RubyVM::InstructionSequence#first_lineno	A			instance methods							Returns the number of the first source line where the instruction sequence was loaded from.<br>For example, using irb:<pre><code>iseq = RubyVM::InstructionSequence.compile('num = 1 + 2')\n#=> <RubyVM::InstructionSequence:<compiled>@<compiled>>\niseq.first_lineno\n#=> 1\n</code></pre>	http://ruby-doc.org/core/RubyVM/InstructionSequence.html#method-i-first_lineno
RubyVM::InstructionSequence#inspect	A			instance methods							Returns a human-readable string representation of this instruction sequence, including the label and path.	http://ruby-doc.org/core/RubyVM/InstructionSequence.html#method-i-inspect
RubyVM::InstructionSequence#label	A			instance methods							Returns the label of this instruction sequence.<br><main> if it's at the top level, <compiled> if it was evaluated from a string.<br>For example, using irb:<pre><code>iseq = RubyVM::InstructionSequence.compile('num = 1 + 2')\n#=> <RubyVM::InstructionSequence:<compiled>@<compiled>>\niseq.label\n#=> "<compiled>"\n</code></pre>Using ::compile_file:	http://ruby-doc.org/core/RubyVM/InstructionSequence.html#method-i-label
RubyVM::InstructionSequence#line_trace_all	A			instance methods							Experimental MRI specific feature, only available as C level api.<br>Returns all specified_line events.	http://ruby-doc.org/core/RubyVM/InstructionSequence.html#method-i-line_trace_all
RubyVM::InstructionSequence#line_trace_specify	A			instance methods							Experimental MRI specific feature, only available as C level api.<br>Set a specified_line event at the given line position, if the set parameter is true.<br>This method is useful for building a debugger breakpoint at a specific line.<br>A TypeError is raised if set is not boolean.<br>If pos is a negative integer a TypeError exception is raised.	http://ruby-doc.org/core/RubyVM/InstructionSequence.html#method-i-line_trace_specify
RubyVM::InstructionSequence#path	A			instance methods							Returns the path of this instruction sequence.<br><compiled> if the iseq was evaluated from a string.<br>For example, using irb:<pre><code>iseq = RubyVM::InstructionSequence.compile('num = 1 + 2')\n#=> <RubyVM::InstructionSequence:<compiled>@<compiled>>\niseq.path\n#=> "<compiled>"\n</code></pre>Using ::compile_file:	http://ruby-doc.org/core/RubyVM/InstructionSequence.html#method-i-path
RubyVM::InstructionSequence#to_a	A			instance methods							<pre><code>to_a → ary</code></pre>Returns an Array with 14 elements representing the instruction sequence with the following data:<br>A string identifying the data format. Always YARVInstructionSequence/SimpleDataFormat.<br>The major version of the instruction sequence.<br>The minor version of the instruction sequence.<br>A number identifying the data format. Always 1.<br>A hash containing:<br>the total number of arguments taken by the method or the block (0 if iseq doesn’t represent a method or block)<br>the number of local variables + 1<br>used in calculating the stack depth at which a SystemStackError is thrown.<br>The name of the context (block, method, class, module, etc.) that this instruction sequence belongs to.<br><main> if it's at the top level, <compiled> if it was evaluated from a string.<br>The relative path to the Ruby file where the instruction sequence was loaded from.<br><compiled> if the iseq was evaluated from a string.<br>The absolute path to the Ruby file where the instruction sequence was loaded from.<br>nil if the iseq was evaluated from a string.<br>The number of the first source line where the instruction sequence was loaded from.<br>The type of the instruction sequence.<br>Valid values are :top, :method, :block, :class, :rescue, :ensure, :eval, :main, and :defined_guard.<br>An array containing the names of all arguments and local variables as symbols.<br>An Hash object containing parameter information.<br>More info about these values can be found in vm_core.h.<br>A list of exceptions and control flow operators (rescue, next, redo, break, etc.).<br>An array of arrays containing the instruction names and operands that make up the body of the instruction sequence.<br>Note that this format is MRI specific and version dependent.	http://ruby-doc.org/core/RubyVM/InstructionSequence.html#method-i-to_a
RubyVM::InstructionSequence#to_binary	A			instance methods							<pre><code>to_binary(extra_data = nil) → binary str</code></pre>Returns serialized iseq binary format data as a String object. A corresponding iseq object is created by ::load_from_binary method.<br>String extra_data will be saved with binary data. You can access this data with ::load_from_binary_extra_data.<br>Note that the translated binary data is not portable. You can not move this binary data to another machine. You can not use the binary data which is created by another version/another architecture of Ruby.	http://ruby-doc.org/core/RubyVM/InstructionSequence.html#method-i-to_binary
Math::DomainError	A			classes							Raised when a mathematical function is evaluated outside of its domain of definition.<br>For example, since cos returns values in the range -1..1, its inverse function acos is only defined on that interval:<pre><code>Math.acos(42)\n</code></pre>produces:	http://ruby-doc.org/core/Math/DomainError.html
ZeroDivisionError	A			classes							Raised when attempting to divide an integer by 0.<pre><code>42 / 0\n#=> ZeroDivisionError: divided by 0\n</code></pre>Note that only division by an exact 0 will raise the exception:<pre><code>42 /  0.0 #=> Float::INFINITY\n42 / -0.0 #=> -Float::INFINITY\n0  /  0.0 #=> NaN\n</code></pre>	http://ruby-doc.org/core/ZeroDivisionError.html
FloatDomainError	A			classes							Raised when attempting to convert special float values (in particular infinite or NaN) to numerical classes which don't support them.<pre><code>Float::INFINITY.to_r\n#=> FloatDomainError: Infinity\n</code></pre>	http://ruby-doc.org/core/FloatDomainError.html
Integer	A			classes							This class is the basis for the two concrete classes that hold whole numbers, Bignum and Fixnum.	http://ruby-doc.org/core/Integer.html
Integer#ceil	A			instance methods							<pre><code>to_i      →  integer</code></pre>As int is already an Integer, all these methods simply return the receiver.<br>Synonyms are to_int, floor, ceil, truncate.	http://ruby-doc.org/core/Integer.html#method-i-ceil
Integer#chr	A			instance methods							<pre><code>chr([encoding])  →  string</code></pre>Returns a string containing the character represented by the int‘s value according to encoding.<pre><code>65.chr    #=> "A"\n230.chr   #=> "\346"\n255.chr(Encoding::UTF_8)   #=> "\303\277"\n</code></pre>	http://ruby-doc.org/core/Integer.html#method-i-chr
Integer#denominator	A			instance methods							<pre><code>denominator  →  1</code></pre>Returns 1.	http://ruby-doc.org/core/Integer.html#method-i-denominator
Integer#downto	A			instance methods							<pre><code>downto(limit) {|i| block }  →  self\ndownto(limit)               →  an_enumerator</code></pre>Iterates the given block, passing decreasing values from int down to and including limit.<br>If no block is given, an Enumerator is returned instead.<pre><code>5.downto(1) { |n| print n, ".. " }\nprint "  Liftoff!\n"\n#=> "5.. 4.. 3.. 2.. 1..   Liftoff!"\n</code></pre>	http://ruby-doc.org/core/Integer.html#method-i-downto
Integer#even?	A			instance methods							<pre><code>even?  →  true or false</code></pre>Returns true if int is an even number.	http://ruby-doc.org/core/Integer.html#method-i-even-3F
Integer#floor	A			instance methods							<pre><code>to_i      →  integer</code></pre>As int is already an Integer, all these methods simply return the receiver.<br>Synonyms are to_int, floor, ceil, truncate.	http://ruby-doc.org/core/Integer.html#method-i-floor
Integer#gcd	A			instance methods							<pre><code>gcd(int2)  →  integer</code></pre>Returns the greatest common divisor (always positive). 0.gcd(x) and x.gcd(0) return abs(x).<pre><code>2.gcd(2)                    #=> 2\n3.gcd(-7)                   #=> 1\n((1<<31)-1).gcd((1<<61)-1)  #=> 1\n</code></pre>	http://ruby-doc.org/core/Integer.html#method-i-gcd
Integer#gcdlcm	A			instance methods							<pre><code>gcdlcm(int2)  →  array</code></pre>Returns an array; [int.gcd(int2), int.lcm(int2)].<pre><code>2.gcdlcm(2)                    #=> [2, 2]\n3.gcdlcm(-7)                   #=> [1, 21]\n((1<<31)-1).gcdlcm((1<<61)-1)  #=> [1, 4951760154835678088235319297]\n</code></pre>	http://ruby-doc.org/core/Integer.html#method-i-gcdlcm
Integer#integer?	A			instance methods							<pre><code>integer?  →  true</code></pre>Since int is already an Integer, this always returns true.	http://ruby-doc.org/core/Integer.html#method-i-integer-3F
Integer#lcm	A			instance methods							<pre><code>lcm(int2)  →  integer</code></pre>Returns the least common multiple (always positive). 0.lcm(x) and x.lcm(0) return zero.<pre><code>2.lcm(2)                    #=> 2\n3.lcm(-7)                   #=> 21\n((1<<31)-1).lcm((1<<61)-1)  #=> 4951760154835678088235319297\n</code></pre>	http://ruby-doc.org/core/Integer.html#method-i-lcm
Integer#next	A			instance methods							<pre><code>next  →  integer</code></pre>Returns the Integer equal to int + 1, same as #next.<pre><code>1.next      #=> 2\n(-1).next   #=> 0\n</code></pre>	http://ruby-doc.org/core/Integer.html#method-i-next
Integer#numerator	A			instance methods							<pre><code>numerator  →  self</code></pre>Returns self.	http://ruby-doc.org/core/Integer.html#method-i-numerator
Integer#odd?	A			instance methods							<pre><code>odd?  →  true or false</code></pre>Returns true if int is an odd number.	http://ruby-doc.org/core/Integer.html#method-i-odd-3F
Integer#ord	A			instance methods							<pre><code>ord  →  self</code></pre>Returns the int itself.<pre><code>?a.ord    #=> 97\n</code></pre>This method is intended for compatibility to character constant in Ruby 1.9.<br>For example, ?a.ord returns 97 both in 1.8 and 1.9.	http://ruby-doc.org/core/Integer.html#method-i-ord
Integer#pred	A			instance methods							<pre><code>pred  →  integer</code></pre>Returns the Integer equal to int - 1.<pre><code>1.pred      #=> 0\n(-1).pred   #=> -2\n</code></pre>	http://ruby-doc.org/core/Integer.html#method-i-pred
Integer#rationalize	A			instance methods							<pre><code>rationalize([eps])  →  rational</code></pre>Returns the value as a rational. The optional argument eps is always ignored.	http://ruby-doc.org/core/Integer.html#method-i-rationalize
Integer#round	A			instance methods							<pre><code>round([ndigits])  →  integer or float</code></pre>Rounds int to a given precision in decimal digits (default 0 digits).<br>Precision may be negative. Returns a floating point number when ndigits is positive, self for zero, and round down for negative.<pre><code>1.round        #=> 1\n1.round(2)     #=> 1.0\n15.round(-1)   #=> 20\n</code></pre>	http://ruby-doc.org/core/Integer.html#method-i-round
Integer#succ	A			instance methods							<pre><code>succ  →  integer</code></pre>Returns the Integer equal to int + 1, same as #next.<pre><code>1.next      #=> 2\n(-1).next   #=> 0\n</code></pre>	http://ruby-doc.org/core/Integer.html#method-i-succ
Integer#times	A			instance methods							<pre><code>times {|i| block }  →  self\ntimes               →  an_enumerator</code></pre>Iterates the given block int times, passing in values from zero to int - 1.<br>If no block is given, an Enumerator is returned instead.<pre><code>5.times do |i|\n  print i, " "\nend\n#=> 0 1 2 3 4\n</code></pre>	http://ruby-doc.org/core/Integer.html#method-i-times
Integer#to_i	A			instance methods							<pre><code>to_i      →  integer</code></pre>As int is already an Integer, all these methods simply return the receiver.<br>Synonyms are to_int, floor, ceil, truncate.	http://ruby-doc.org/core/Integer.html#method-i-to_i
Integer#to_int	A			instance methods							<pre><code>to_i      →  integer</code></pre>As int is already an Integer, all these methods simply return the receiver.<br>Synonyms are to_int, floor, ceil, truncate.	http://ruby-doc.org/core/Integer.html#method-i-to_int
Integer#to_r	A			instance methods							<pre><code>to_r  →  rational</code></pre>Returns the value as a rational.<pre><code>1.to_r        #=> (1/1)\n(1<<64).to_r  #=> (18446744073709551616/1)\n</code></pre>	http://ruby-doc.org/core/Integer.html#method-i-to_r
Integer#truncate	A			instance methods							<pre><code>to_i      →  integer</code></pre>As int is already an Integer, all these methods simply return the receiver.<br>Synonyms are to_int, floor, ceil, truncate.	http://ruby-doc.org/core/Integer.html#method-i-truncate
Integer#upto	A			instance methods							<pre><code>upto(limit) {|i| block }  →  self\nupto(limit)               →  an_enumerator</code></pre>Iterates the given block, passing in integer values from int up to and including limit.<br>If no block is given, an Enumerator is returned instead.<br>For example:<pre><code>5.upto(10) { |i| print i, " " }\n#=> 5 6 7 8 9 10\n</code></pre>	http://ruby-doc.org/core/Integer.html#method-i-upto
Fixnum	A			classes							Holds Integer values that can be represented in a native machine word (minus 1 bit). If any operation on a Fixnum exceeds this range, the value is automatically converted to a Bignum.<br>Fixnum objects have immediate value. This means that when they are assigned or passed as parameters, the actual object is passed, rather than a reference to that object.<br>Assignment does not alias Fixnum objects. There is effectively only one Fixnum object instance for any given integer value, so, for example, you cannot add a singleton method to a Fixnum. Any attempt to add a singleton method to a Fixnum object will raise a TypeError.	http://ruby-doc.org/core/Fixnum.html
Fixnum#%	A			instance methods							<pre><code>fix % other        →  real</code></pre>Returns fix modulo other.<br>See Numeric#divmod for more information.	http://ruby-doc.org/core/Fixnum.html#method-i-25
Fixnum#&	A			instance methods							<pre><code>fix & integer  →  integer_result</code></pre>Bitwise AND.	http://ruby-doc.org/core/Fixnum.html#method-i-26
Fixnum#*	A			instance methods							<pre><code>fix * numeric  →  numeric_result</code></pre>Performs multiplication: the class of the resulting object depends on the class of numeric and on the magnitude of the result. It may return a Bignum.	http://ruby-doc.org/core/Fixnum.html#method-i-2A
Fixnum#**	A			instance methods							<pre><code>fix ** numeric  →  numeric_result</code></pre>Raises fix to the power of numeric, which may be negative or fractional.<pre><code>2 ** 3      #=> 8\n2 ** -1     #=> (1/2)\n2 ** 0.5    #=> 1.4142135623731\n</code></pre>	http://ruby-doc.org/core/Fixnum.html#method-i-2A-2A
Fixnum#+	A			instance methods							<pre><code>fix + numeric  →  numeric_result</code></pre>Performs addition: the class of the resulting object depends on the class of numeric and on the magnitude of the result. It may return a Bignum.	http://ruby-doc.org/core/Fixnum.html#method-i-2B
Fixnum#-	A			instance methods							<pre><code>fix - numeric  →  numeric_result</code></pre>Performs subtraction: the class of the resulting object depends on the class of numeric and on the magnitude of the result. It may return a Bignum.	http://ruby-doc.org/core/Fixnum.html#method-i-2D
Fixnum#-@	A			instance methods							<pre><code>-fix  →  integer</code></pre>Negates fix, which may return a Bignum.	http://ruby-doc.org/core/Fixnum.html#method-i-2D-40
Fixnum#/	A			instance methods							<pre><code>fix / numeric  →  numeric_result</code></pre>Performs division: the class of the resulting object depends on the class of numeric and on the magnitude of the result. It may return a Bignum.	http://ruby-doc.org/core/Fixnum.html#method-i-2F
Fixnum#<	A			instance methods							<pre><code>fix < real  →  true or false</code></pre>Returns true if the value of fix is less than that of real.	http://ruby-doc.org/core/Fixnum.html#method-i-3C
Fixnum#<<	A			instance methods							<pre><code>fix << count  →  integer</code></pre>Shifts fix left count positions, or right if count is negative.	http://ruby-doc.org/core/Fixnum.html#method-i-3C-3C
Fixnum#<=	A			instance methods							<pre><code>fix <= real  →  true or false</code></pre>Returns true if the value of fix is less than or equal to that of real.	http://ruby-doc.org/core/Fixnum.html#method-i-3C-3D
Fixnum#<=>	A			instance methods							<pre><code>fix <=> numeric  →  -1, 0, +1 or nil</code></pre>Comparison—Returns -1, 0, +1 or nil depending on whether fix is less than, equal to, or greater than numeric.<br>This is the basis for the tests in the Comparable module.<br>nil is returned if the two values are incomparable.	http://ruby-doc.org/core/Fixnum.html#method-i-3C-3D-3E
Fixnum#==	A			instance methods							<pre><code>fix == other  →  true or false</code></pre>Return true if fix equals other numerically.<pre><code>1 == 2      #=> false\n1 == 1.0    #=> true\n</code></pre>	http://ruby-doc.org/core/Fixnum.html#method-i-3D-3D
Fixnum#===	A			instance methods							<pre><code>fix == other  →  true or false</code></pre>Return true if fix equals other numerically.<pre><code>1 == 2      #=> false\n1 == 1.0    #=> true\n</code></pre>	http://ruby-doc.org/core/Fixnum.html#method-i-3D-3D-3D
Fixnum#>	A			instance methods							<pre><code>fix > real  →  true or false</code></pre>Returns true if the value of fix is greater than that of real.	http://ruby-doc.org/core/Fixnum.html#method-i-3E
Fixnum#>=	A			instance methods							<pre><code>fix >= real  →  true or false</code></pre>Returns true if the value of fix is greater than or equal to that of real.	http://ruby-doc.org/core/Fixnum.html#method-i-3E-3D
Fixnum#>>	A			instance methods							<pre><code>fix >> count  →  integer</code></pre>Shifts fix right count positions, or left if count is negative.	http://ruby-doc.org/core/Fixnum.html#method-i-3E-3E
Fixnum#[]	A			instance methods							<pre><code>fix[n]  →  0, 1</code></pre>Bit Reference—Returns the +n+th bit in the binary representation of fix, where fix[0] is the least significant bit.<br>For example:<pre><code>a = 0b11001100101010\n30.downto(0) do |n| print a[n] end\n#=> 0000000000000000011001100101010\n</code></pre>	http://ruby-doc.org/core/Fixnum.html#method-i-5B-5D
Fixnum#^	A			instance methods							<pre><code>fix ^ integer  →  integer_result</code></pre>Bitwise EXCLUSIVE OR.	http://ruby-doc.org/core/Fixnum.html#method-i-5E
Fixnum#abs	A			instance methods							<pre><code>abs        →  integer</code></pre>Returns the absolute value of fix.<pre><code>-12345.abs   #=> 12345\n12345.abs    #=> 12345\n</code></pre>	http://ruby-doc.org/core/Fixnum.html#method-i-abs
Fixnum#bit_length	A			instance methods							<pre><code>bit_length → integer</code></pre>Returns the number of bits of the value of int.<br>“the number of bits” means that the bit position of the highest bit which is different to the sign bit. (The bit position of the bit 2**n is n+1.) If there is no such bit (zero or minus one), zero is returned.<br>I.e. This method returns ceil(log2(int < 0 ? -int : int+1)).<pre><code>(-2**12-1).bit_length     #=> 13\n(-2**12).bit_length       #=> 12\n(-2**12+1).bit_length     #=> 12\n-0x101.bit_length         #=> 9\n-0x100.bit_length         #=> 8\n-0xff.bit_length          #=> 8\n-2.bit_length             #=> 1\n-1.bit_length             #=> 0\n0.bit_length              #=> 0\n1.bit_length              #=> 1\n0xff.bit_length           #=> 8\n0x100.bit_length          #=> 9\n(2**12-1).bit_length      #=> 12\n(2**12).bit_length        #=> 13\n(2**12+1).bit_length      #=> 13\n</code></pre>This method can be used to detect overflow in Array#pack as follows.<pre><code>if n.bit_length < 32\n  [n].pack("l") # no overflow\nelse\n  raise "overflow"\nend\n</code></pre>	http://ruby-doc.org/core/Fixnum.html#method-i-bit_length
Fixnum#div	A			instance methods							<pre><code>div(numeric)  →  integer</code></pre>Performs integer division: returns integer result of dividing fix by numeric.	http://ruby-doc.org/core/Fixnum.html#method-i-div
Fixnum#divmod	A			instance methods							<pre><code>divmod(numeric)  →  array</code></pre>See Numeric#divmod.	http://ruby-doc.org/core/Fixnum.html#method-i-divmod
Fixnum#even?	A			instance methods							<pre><code>even?  →  true or false</code></pre>Returns true if fix is an even number.	http://ruby-doc.org/core/Fixnum.html#method-i-even-3F
Fixnum#fdiv	A			instance methods							<pre><code>fdiv(numeric)  →  float</code></pre>Returns the floating point result of dividing fix by numeric.<pre><code>654321.fdiv(13731)      #=> 47.6528293642124\n654321.fdiv(13731.24)   #=> 47.6519964693647\n</code></pre>	http://ruby-doc.org/core/Fixnum.html#method-i-fdiv
Fixnum#inspect	A			instance methods								http://ruby-doc.org/core/Fixnum.html#method-i-inspect
Fixnum#magnitude	A			instance methods							<pre><code>magnitude  →  integer</code></pre>Returns the absolute value of fix.<pre><code>-12345.abs   #=> 12345\n12345.abs    #=> 12345\n</code></pre>	http://ruby-doc.org/core/Fixnum.html#method-i-magnitude
Fixnum#modulo	A			instance methods							<pre><code>modulo(other)  →  real</code></pre>Returns fix modulo other.<br>See Numeric#divmod for more information.	http://ruby-doc.org/core/Fixnum.html#method-i-modulo
Fixnum#odd?	A			instance methods							<pre><code>odd?  →  true or false</code></pre>Returns true if fix is an odd number.	http://ruby-doc.org/core/Fixnum.html#method-i-odd-3F
Fixnum#size	A			instance methods							<pre><code>size  →  fixnum</code></pre>Returns the number of bytes in the machine representation of fix.<pre><code>1.size            #=> 4\n-1.size           #=> 4\n2147483647.size   #=> 4\n</code></pre>	http://ruby-doc.org/core/Fixnum.html#method-i-size
Fixnum#succ	A			instance methods							<pre><code>next  →  integer\nsucc  →  integer</code></pre>Returns the Integer equal to int + 1.<pre><code>1.next      #=> 2\n(-1).next   #=> 0\n</code></pre>	http://ruby-doc.org/core/Fixnum.html#method-i-succ
Fixnum#to_f	A			instance methods							<pre><code>to_f  →  float</code></pre>Converts fix to a Float.	http://ruby-doc.org/core/Fixnum.html#method-i-to_f
Fixnum#to_s	A			instance methods							<pre><code>to_s(base=10)  →  string</code></pre>Returns a string containing the representation of fix radix base (between 2 and 36).<pre><code>12345.to_s       #=> "12345"\n12345.to_s(2)    #=> "11000000111001"\n12345.to_s(8)    #=> "30071"\n12345.to_s(10)   #=> "12345"\n12345.to_s(16)   #=> "3039"\n12345.to_s(36)   #=> "9ix"\n</code></pre>	http://ruby-doc.org/core/Fixnum.html#method-i-to_s
Fixnum#zero?	A			instance methods							<pre><code>zero?  →  true or false</code></pre>Returns true if fix is zero.	http://ruby-doc.org/core/Fixnum.html#method-i-zero-3F
Fixnum#|	A			instance methods							<pre><code>fix | integer  →  integer_result</code></pre>Bitwise OR.	http://ruby-doc.org/core/Fixnum.html#method-i-7C
Fixnum#~	A			instance methods							<pre><code>~fix  →  integer</code></pre>One’s complement: returns a number where each bit is flipped.	http://ruby-doc.org/core/Fixnum.html#method-i-7E
Data	A			classes							This is a recommended base class for C extensions using Data_Make_Struct or Data_Wrap_Struct, see README.EXT for details.	http://ruby-doc.org/core/Data.html
TrueClass	A			classes							The global value true is the only instance of class TrueClass and represents a logically true value in boolean expressions. The class provides operators allowing true to be used in logical expressions.	http://ruby-doc.org/core/TrueClass.html
TrueClass#&	A			instance methods							<pre><code>true & obj    → true or false</code></pre>And—Returns false if obj is nil or false, true otherwise.	http://ruby-doc.org/core/TrueClass.html#method-i-26
TrueClass#===	A			instance methods							<pre><code>obj === other   → true or false</code></pre>Case Equality – For class Object, effectively the same as calling #==, but typically overridden by descendants to provide meaningful semantics in case statements.	http://ruby-doc.org/core/TrueClass.html#method-i-3D-3D-3D
TrueClass#^	A			instance methods							<pre><code>true ^ obj   → !obj</code></pre>Exclusive Or—Returns true if obj is nil or false, false otherwise.	http://ruby-doc.org/core/TrueClass.html#method-i-5E
TrueClass#inspect	A			instance methods								http://ruby-doc.org/core/TrueClass.html#method-i-inspect
TrueClass#to_s	A			instance methods							<pre><code>to_s   →  "true"</code></pre>The string representation of true is “true”.	http://ruby-doc.org/core/TrueClass.html#method-i-to_s
TrueClass#|	A			instance methods							<pre><code>true | obj   → true</code></pre>Or—Returns true. As obj is an argument to a method call, it is always evaluated; there is no short-circuit evaluation in this case.<pre><code>true |  puts("or")\ntrue || puts("logical or")\n</code></pre>produces:	http://ruby-doc.org/core/TrueClass.html#method-i-7C
FalseClass	A			classes							The global value false is the only instance of class FalseClass and represents a logically false value in boolean expressions. The class provides operators allowing false to participate correctly in logical expressions.	http://ruby-doc.org/core/FalseClass.html
FalseClass#&	A			instance methods							<pre><code>false & obj   → false\nnil & obj     → false</code></pre>And—Returns false. obj is always evaluated as it is the argument to a method call—there is no short-circuit evaluation in this case.	http://ruby-doc.org/core/FalseClass.html#method-i-26
FalseClass#===	A			instance methods							<pre><code>obj === other   → true or false</code></pre>Case Equality – For class Object, effectively the same as calling #==, but typically overridden by descendants to provide meaningful semantics in case statements.	http://ruby-doc.org/core/FalseClass.html#method-i-3D-3D-3D
FalseClass#^	A			instance methods							<pre><code>false ^ obj    → true or false\nnil   ^ obj    → true or false</code></pre>Exclusive Or—If obj is nil or false, returns false; otherwise, returns true.	http://ruby-doc.org/core/FalseClass.html#method-i-5E
FalseClass#inspect	A			instance methods								http://ruby-doc.org/core/FalseClass.html#method-i-inspect
FalseClass#to_s	A			instance methods							<pre><code>to_s   →  "false"</code></pre>‘nuf said…	http://ruby-doc.org/core/FalseClass.html#method-i-to_s
FalseClass#|	A			instance methods							<pre><code>false | obj   →   true or false\nnil   | obj   →   true or false</code></pre>Or—Returns false if obj is nil or false; true otherwise.	http://ruby-doc.org/core/FalseClass.html#method-i-7C
Thread	A			classes							Threads are the Ruby implementation for a concurrent programming model.<br>Programs that require multiple threads of execution are a perfect candidate for Ruby's Thread class.<br>For example, we can create a new thread separate from the main thread's execution using ::new.<pre><code>thr = Thread.new { puts "Whats the big deal" }\n</code></pre>Then we are able to pause the execution of the main thread and allow our new thread to finish, using join:<pre><code>thr.join #=> "Whats the big deal"\n</code></pre>If we don't call thr.join before the main thread terminates, then all other threads including thr will be killed.<br>Alternatively, you can use an array for handling multiple threads at once, like in the following example:<pre><code>threads = []\nthreads << Thread.new { puts "Whats the big deal" }\nthreads << Thread.new { 3.times { puts "Threads are fun!" } }\n</code></pre>After creating a few threads we wait for them all to finish consecutively.<pre><code>threads.each { |thr| thr.join }\n</code></pre>In order to create new threads, Ruby provides ::new, ::start, and ::fork. A block must be provided with each of these methods, otherwise a ThreadError will be raised.<br>When subclassing the Thread class, the initialize method of your subclass will be ignored by ::start and ::fork. Otherwise, be sure to call super in your initialize method.<br>For terminating threads, Ruby provides a variety of ways to do this.<br>The class method ::kill, is meant to exit a given thread:<br>Alternatively, you can use the instance method exit, or any of its aliases kill or terminate.<pre><code>thr.exit\n</code></pre>Ruby provides a few instance methods for querying the state of a given thread. To get a string with the current thread's state use status<pre><code>thr = Thread.new { sleep }\nthr.status # => "sleep"\nthr.exit\nthr.status # => false\n</code></pre>You can also use alive? to tell if the thread is running or sleeping, and stop? if the thread is dead or sleeping.<br>Since threads are created with blocks, the same rules apply to other Ruby blocks for variable scope. Any local variables created within this block are accessible to only this thread.<br>Each fiber has its own bucket for #[] storage. When you set a new fiber-local it is only accessible within this Fiber. To illustrate:<pre><code>Thread.new {\n  Thread.current[:foo] = "bar"\n  Fiber.new {\n    p Thread.current[:foo] # => nil\n  }.resume\n}.join\n</code></pre>This example uses [] for getting and []= for setting fiber-locals, you can also use keys to list the fiber-locals for a given thread and key? to check if a fiber-local exists.<br>When it comes to thread-locals, they are accessible within the entire scope of the thread. Given the following example:<pre><code>Thread.new{\n  Thread.current.thread_variable_set(:foo, 1)\n  p Thread.current.thread_variable_get(:foo) # => 1\n  Fiber.new{\n    Thread.current.thread_variable_set(:foo, 2)\n    p Thread.current.thread_variable_get(:foo) # => 2\n  }.resume\n  p Thread.current.thread_variable_get(:foo)   # => 2\n}.join\n</code></pre>You can see that the thread-local :foo carried over into the fiber and was changed to 2 by the end of the thread.<br>This example makes use of thread_variable_set to create new thread-locals, and thread_variable_get to reference them.<br>There is also thread_variables to list all thread-locals, and thread_variable? to check if a given thread-local exists.<br>Any thread can raise an exception using the raise instance method, which operates similarly to Kernel#raise.<br>However, it's important to note that an exception that occurs in any thread except the main thread depends on abort_on_exception. This option is false by default, meaning that any unhandled exception will cause the thread to terminate silently when waited on by either join or value. You can change this default by either abort_on_exception= true or setting $DEBUG to true.<br>With the addition of the class method ::handle_interrupt, you can now handle exceptions asynchronously with threads.<br>Ruby provides a few ways to support scheduling threads in your program.<br>The first way is by using the class method ::stop, to put the current running thread to sleep and schedule the execution of another thread.<br>Once a thread is asleep, you can use the instance method wakeup to mark your thread as eligible for scheduling.<br>You can also try ::pass, which attempts to pass execution to another thread but is dependent on the OS whether a running thread will switch or not. The same goes for priority, which lets you hint to the thread scheduler which threads you want to take precedence when passing execution. This method is also dependent on the OS and may be ignored on some platforms.	http://ruby-doc.org/core/Thread.html
Thread::DEBUG	A			class methods							<pre><code>DEBUG     → num</code></pre>Returns the thread debug level. Available only if compiled with THREAD_DEBUG=-1.	http://ruby-doc.org/core/Thread.html#method-c-DEBUG
Thread::DEBUG=	A			class methods							<pre><code>DEBUG = num</code></pre>Sets the thread debug level. Available only if compiled with THREAD_DEBUG=-1.	http://ruby-doc.org/core/Thread.html#method-c-DEBUG-3D
Thread::abort_on_exception	A			class methods							<pre><code>abort_on_exception   → true or false</code></pre>Returns the status of the global “abort on exception” condition.<br>The default is false.<br>When set to true, all threads will abort (the process will exit(0)) if an exception is raised in any thread.<br>Can also be specified by the global $DEBUG flag or command line option -d.<br>See also ::abort_on_exception=.<br>There is also an instance level method to set this for a specific thread, see abort_on_exception.	http://ruby-doc.org/core/Thread.html#method-c-abort_on_exception
Thread::abort_on_exception=	A			class methods							<pre><code>abort_on_exception= boolean   → true or false</code></pre>When set to true, all threads will abort if an exception is raised. Returns the new state.<pre><code>Thread.abort_on_exception = true\nt1 = Thread.new do\n  puts  "In new thread"\n  raise "Exception from thread"\nend\nsleep(1)\nputs "not reached"\n</code></pre>This will produce:<br>See also ::abort_on_exception.<br>There is also an instance level method to set this for a specific thread, see abort_on_exception=.	http://ruby-doc.org/core/Thread.html#method-c-abort_on_exception-3D
Thread::current	A			class methods							<pre><code>current   → thread</code></pre>Returns the currently executing thread.<pre><code>Thread.current   #=> #<Thread:0x401bdf4c run>\n</code></pre>	http://ruby-doc.org/core/Thread.html#method-c-current
Thread::exclusive	A			class methods							<pre><code>exclusive { block }   => obj</code></pre>Wraps the block in a single, VM-global Thread::Mutex#synchronize, returning the value of the block. A thread executing inside the exclusive section will only block other threads which also use the ::exclusive mechanism.	http://ruby-doc.org/core/Thread.html#method-c-exclusive
Thread::exit	A			class methods							<pre><code>exit   → thread</code></pre>Terminates the currently running thread and schedules another thread to be run.<br>If this thread is already marked to be killed, ::exit returns the Thread.<br>If this is the main thread, or the last thread, exit the process.	http://ruby-doc.org/core/Thread.html#method-c-exit
Thread::fork	A			class methods							<pre><code>fork([args]*) {|args| block }    → thread</code></pre>Basically the same as ::new. However, if class Thread is subclassed, then calling start in that subclass will not invoke the subclass’s initialize method.	http://ruby-doc.org/core/Thread.html#method-c-fork
Thread::handle_interrupt	A			class methods							<pre><code>handle_interrupt(hash) { ... } → result of the block</code></pre>Changes asynchronous interrupt timing.<br>interrupt means asynchronous event and corresponding procedure by #raise, #kill, signal trap (not supported yet) and main thread termination (if main thread terminates, then all other thread will be killed).<br>The given hash has pairs like ExceptionClass => :TimingSymbol. Where the ExceptionClass is the interrupt handled by the given block. The TimingSymbol can be one of the following symbols:<br>Invoke interrupts immediately.<br>Invoke interrupts while BlockingOperation.<br>Never invoke all interrupts.<br>BlockingOperation means that the operation will block the calling thread, such as read and write. On CRuby implementation, BlockingOperation is any operation executed without GVL.<br>Masked asynchronous interrupts are delayed until they are enabled. This method is similar to sigprocmask(3).<br>Asynchronous interrupts are difficult to use.<br>If you need to communicate between threads, please consider to use another way such as Queue.<br>Or use them with deep understanding about this method.<br>In this example, we can guard from #raise exceptions.<br>Using the :never TimingSymbol the RuntimeError exception will always be ignored in the first block of the main thread. In the second ::handle_interrupt block we can purposefully handle RuntimeError exceptions.<pre><code>th = Thread.new do\n  Thread.handle_interrupt(RuntimeError => :never) {\n    begin\n      # You can write resource allocation code safely.\n      Thread.handle_interrupt(RuntimeError => :immediate) {\n        # ...\n      }\n    ensure\n      # You can write resource deallocation code safely.\n    end\n  }\nend\nThread.pass\n# ...\nth.raise "stop"\n</code></pre>While we are ignoring the RuntimeError exception, it’s safe to write our resource allocation code. Then, the ensure block is where we can safely deallocate your resources.<br>In the next example, we will guard from the Timeout::Error exception. This will help prevent from leaking resources when Timeout::Error exceptions occur during normal ensure clause. For this example we use the help of the standard library Timeout, from lib/timeout.rb<pre><code>require 'timeout'\nThread.handle_interrupt(Timeout::Error => :never) {\n  timeout(10){\n    # Timeout::Error doesn't occur here\n    Thread.handle_interrupt(Timeout::Error => :on_blocking) {\n      # possible to be killed by Timeout::Error\n      # while blocking operation\n    }\n    # Timeout::Error doesn't occur here\n  }\n}\n</code></pre>In the first part of the timeout block, we can rely on Timeout::Error being ignored. Then in the Timeout::Error => :on_blocking block, any operation that will block the calling thread is susceptible to a Timeout::Error exception being raised.<br>It’s possible to stack multiple levels of ::handle_interrupt blocks in order to control more than one ExceptionClass and TimingSymbol at a time.<pre><code>Thread.handle_interrupt(FooError => :never) {\n  Thread.handle_interrupt(BarError => :never) {\n     # FooError and BarError are prohibited.\n  }\n}\n</code></pre>All exceptions inherited from the ExceptionClass parameter will be considered.<pre><code>Thread.handle_interrupt(Exception => :never) {\n  # all exceptions inherited from Exception are prohibited.\n}\n</code></pre>	http://ruby-doc.org/core/Thread.html#method-c-handle_interrupt
Thread::kill	A			class methods							<pre><code>kill(thread)   → thread</code></pre>Causes the given thread to exit, see also ::exit.<pre><code>count = 0\na = Thread.new { loop { count += 1 } }\nsleep(0.1)       #=> 0\nThread.kill(a)   #=> #<Thread:0x401b3d30 dead>\ncount            #=> 93947\na.alive?         #=> false\n</code></pre>	http://ruby-doc.org/core/Thread.html#method-c-kill
Thread::list	A			class methods							<pre><code>list   → array</code></pre>Returns an array of Thread objects for all threads that are either runnable or stopped.<pre><code>Thread.new { sleep(200) }\nThread.new { 1000000.times {|i| i*i } }\nThread.new { Thread.stop }\nThread.list.each {|t| p t}\n</code></pre>This will produce:<pre><code>#<Thread:0x401b3e84 sleep>\n#<Thread:0x401b3f38 run>\n#<Thread:0x401b3fb0 sleep>\n#<Thread:0x401bdf4c run>\n</code></pre>	http://ruby-doc.org/core/Thread.html#method-c-list
Thread::main	A			class methods							<pre><code>main   → thread</code></pre>Returns the main thread.	http://ruby-doc.org/core/Thread.html#method-c-main
Thread::new	A			class methods							<pre><code>new { ... }                  → thread\nnew(*args, &proc)            → thread\nnew(*args) { |args| ... }    → thread</code></pre>Creates a new thread executing the given block.<br>Any args given to ::new will be passed to the block:<pre><code>arr = []\na, b, c = 1, 2, 3\nThread.new(a,b,c) { |d,e,f| arr << d << e << f }.join\narr #=> [1, 2, 3]\n</code></pre>A ThreadError exception is raised if ::new is called without a block.<br>If you’re going to subclass Thread, be sure to call super in your initialize method, otherwise a ThreadError will be raised.	http://ruby-doc.org/core/Thread.html#method-c-new
Thread::pass	A			class methods							<pre><code>pass   → nil</code></pre>Give the thread scheduler a hint to pass execution to another thread. A running thread may or may not switch, it depends on OS and processor.	http://ruby-doc.org/core/Thread.html#method-c-pass
Thread::pending_interrupt?	A			class methods							<pre><code>pending_interrupt?(error = nil) → true/false</code></pre>Returns whether or not the asynchronous queue is empty.<br>Since ::handle_interrupt can be used to defer asynchronous events, this method can be used to determine if there are any deferred events.<br>If you find this method returns true, then you may finish :never blocks.<br>For example, the following method processes deferred asynchronous events immediately.<pre><code>def Thread.kick_interrupt_immediately\n  Thread.handle_interrupt(Object => :immediate) {\n    Thread.pass\n  }\nend\n</code></pre>If error is given, then check only for error type deferred events.<br>This example can also be written as the following, which you should use to avoid asynchronous interrupts.	http://ruby-doc.org/core/Thread.html#method-c-pending_interrupt-3F
Thread::start	A			class methods							<pre><code>start([args]*) {|args| block }   → thread</code></pre>Basically the same as ::new. However, if class Thread is subclassed, then calling start in that subclass will not invoke the subclass’s initialize method.	http://ruby-doc.org/core/Thread.html#method-c-start
Thread::stop	A			class methods							<pre><code>stop   → nil</code></pre>Stops execution of the current thread, putting it into a “sleep” state, and schedules execution of another thread.<pre><code>a = Thread.new { print "a"; Thread.stop; print "c" }\nsleep 0.1 while a.status!='sleep'\nprint "b"\na.run\na.join\n#=> "abc"\n</code></pre>	http://ruby-doc.org/core/Thread.html#method-c-stop
Thread#[]	A			instance methods							<pre><code>thr[sym]   → obj or nil</code></pre>Attribute Reference—Returns the value of a fiber-local variable (current thread’s root fiber if not explicitly inside a Fiber), using either a symbol or a string name. If the specified variable does not exist, returns nil.<pre><code>[\n  Thread.new { Thread.current["name"] = "A" },\n  Thread.new { Thread.current[:name]  = "B" },\n  Thread.new { Thread.current["name"] = "C" }\n].each do |th|\n  th.join\n  puts "#{th.inspect}: #{th[:name]}"\nend\n</code></pre>This will produce:<pre><code>#<Thread:0x00000002a54220 dead>: A\n#<Thread:0x00000002a541a8 dead>: B\n#<Thread:0x00000002a54130 dead>: C\n</code></pre>#[] and #[]= are not thread-local but fiber-local. This confusion did not exist in Ruby 1.8 because fibers are only available since Ruby 1.9. Ruby 1.9 chooses that the methods behaves fiber-local to save following idiom for dynamic scope.<pre><code>def meth(newvalue)\n  begin\n    oldvalue = Thread.current[:name]\n    Thread.current[:name] = newvalue\n    yield\n  ensure\n    Thread.current[:name] = oldvalue\n  end\nend\n</code></pre>The idiom may not work as dynamic scope if the methods are thread-local and a given block switches fiber.<pre><code>f = Fiber.new {\n  meth(1) {\n    Fiber.yield\n  }\n}\nmeth(2) {\n  f.resume\n}\nf.resume\np Thread.current[:name]\n#=> nil if fiber-local\n#=> 2 if thread-local (The value 2 is leaked to outside of meth method.)\n</code></pre>For thread-local variables, please see thread_variable_get and thread_variable_set.	http://ruby-doc.org/core/Thread.html#method-i-5B-5D
Thread#[]=	A			instance methods							<pre><code>thr[sym] = obj   → obj</code></pre>Attribute Assignment—Sets or creates the value of a fiber-local variable, using either a symbol or a string.<br>See also #[].<br>For thread-local variables, please see thread_variable_set and thread_variable_get.	http://ruby-doc.org/core/Thread.html#method-i-5B-5D-3D
Thread#abort_on_exception	A			instance methods							<pre><code>abort_on_exception   → true or false</code></pre>Returns the status of the thread-local “abort on exception” condition for this thr.<br>The default is false.<br>See also abort_on_exception=.<br>There is also a class level method to set this for all threads, see ::abort_on_exception.	http://ruby-doc.org/core/Thread.html#method-i-abort_on_exception
Thread#abort_on_exception=	A			instance methods							<pre><code>abort_on_exception= boolean   → true or false</code></pre>When set to true, all threads (including the main program) will abort if an exception is raised in this thr.<br>The process will effectively exit(0).<br>See also abort_on_exception.<br>There is also a class level method to set this for all threads, see ::abort_on_exception=.	http://ruby-doc.org/core/Thread.html#method-i-abort_on_exception-3D
Thread#add_trace_func	A			instance methods							<pre><code>add_trace_func(proc)    → proc</code></pre>Adds proc as a handler for tracing.<br>See #set_trace_func and Kernel#set_trace_func.	http://ruby-doc.org/core/Thread.html#method-i-add_trace_func
Thread#alive?	A			instance methods							<pre><code>alive?   → true or false</code></pre>Returns true if thr is running or sleeping.<pre><code>thr = Thread.new { }\nthr.join                #=> #<Thread:0x401b3fb0 dead>\nThread.current.alive?   #=> true\nthr.alive?              #=> false\n</code></pre>See also stop? and status.	http://ruby-doc.org/core/Thread.html#method-i-alive-3F
Thread#backtrace	A			instance methods							<pre><code>backtrace    → array</code></pre>Returns the current backtrace of the target thread.	http://ruby-doc.org/core/Thread.html#method-i-backtrace
Thread#backtrace_locations	A			instance methods							<pre><code>backtrace_locations(*args)   → array or nil</code></pre>Returns the execution stack for the target thread—an array containing backtrace location objects.<br>See Thread::Backtrace::Location for more information.<br>This method behaves similarly to Kernel#caller_locations except it applies to a specific thread.	http://ruby-doc.org/core/Thread.html#method-i-backtrace_locations
Thread#exit	A			instance methods							<pre><code>exit        → thr or nil\nkill        → thr or nil\nterminate   → thr or nil</code></pre>Terminates thr and schedules another thread to be run.<br>If this thread is already marked to be killed, exit returns the Thread.<br>If this is the main thread, or the last thread, exits the process.	http://ruby-doc.org/core/Thread.html#method-i-exit
Thread#group	A			instance methods							<pre><code>group   → thgrp or nil</code></pre>Returns the ThreadGroup which contains the given thread, or returns nil if thr is not a member of any group.<pre><code>Thread.main.group   #=> #<ThreadGroup:0x4029d914>\n</code></pre>	http://ruby-doc.org/core/Thread.html#method-i-group
Thread#inspect	A			instance methods							<pre><code>inspect   → string</code></pre>Dump the name, id, and status of thr to a string.	http://ruby-doc.org/core/Thread.html#method-i-inspect
Thread#join	A			instance methods							<pre><code>join          → thr\njoin(limit)   → thr</code></pre>The calling thread will suspend execution and run this thr.<br>Does not return until thr exits or until the given limit seconds have passed.<br>If the time limit expires, nil will be returned, otherwise thr is returned.<br>Any threads not joined will be killed when the main program exits.<br>If thr had previously raised an exception and the ::abort_on_exception or $DEBUG flags are not set, (so the exception has not yet been processed), it will be processed at this time.<pre><code>a = Thread.new { print "a"; sleep(10); print "b"; print "c" }\nx = Thread.new { print "x"; Thread.pass; print "y"; print "z" }\nx.join # Let thread x finish, thread a will be killed on exit.\n#=> "axyz"\n</code></pre>The following example illustrates the limit parameter.<pre><code>y = Thread.new { 4.times { sleep 0.1; puts 'tick... ' }}\nputs "Waiting" until y.join(0.15)\n</code></pre>This will produce:	http://ruby-doc.org/core/Thread.html#method-i-join
Thread#key?	A			instance methods							<pre><code>key?(sym)   → true or false</code></pre>Returns true if the given string (or symbol) exists as a fiber-local variable.<pre><code>me = Thread.current\nme[:oliver] = "a"\nme.key?(:oliver)    #=> true\nme.key?(:stanley)   #=> false\n</code></pre>	http://ruby-doc.org/core/Thread.html#method-i-key-3F
Thread#keys	A			instance methods							<pre><code>keys   → array</code></pre>Returns an array of the names of the fiber-local variables (as Symbols).<pre><code>thr = Thread.new do\n  Thread.current[:cat] = 'meow'\n  Thread.current["dog"] = 'woof'\nend\nthr.join   #=> #<Thread:0x401b3f10 dead>\nthr.keys   #=> [:dog, :cat]\n</code></pre>	http://ruby-doc.org/core/Thread.html#method-i-keys
Thread#kill	A			instance methods							<pre><code>exit        → thr or nil\nkill        → thr or nil\nterminate   → thr or nil</code></pre>Terminates thr and schedules another thread to be run.<br>If this thread is already marked to be killed, exit returns the Thread.<br>If this is the main thread, or the last thread, exits the process.	http://ruby-doc.org/core/Thread.html#method-i-kill
Thread#name	A			instance methods							<pre><code>name   → string</code></pre>show the name of the thread.	http://ruby-doc.org/core/Thread.html#method-i-name
Thread#name=	A			instance methods							<pre><code>name=(name)   → string</code></pre>set given name to the ruby thread. On some platform, it may set the name to pthread and/or kernel.	http://ruby-doc.org/core/Thread.html#method-i-name-3D
Thread#pending_interrupt?	A			instance methods							<pre><code>pending_interrupt?(error = nil) → true/false</code></pre>Returns whether or not the asynchronous queue is empty for the target thread.<br>If error is given, then check only for error type deferred events.<br>See ::pending_interrupt? for more information.	http://ruby-doc.org/core/Thread.html#method-i-pending_interrupt-3F
Thread#priority	A			instance methods							<pre><code>priority   → integer</code></pre>Returns the priority of thr. Default is inherited from the current thread which creating the new thread, or zero for the initial main thread; higher-priority thread will run more frequently than lower-priority threads (but lower-priority threads can also run).<br>This is just hint for Ruby thread scheduler. It may be ignored on some platform.<pre><code>Thread.current.priority   #=> 0\n</code></pre>	http://ruby-doc.org/core/Thread.html#method-i-priority
Thread#priority=	A			instance methods							<pre><code>priority= integer   → thr</code></pre>Sets the priority of thr to integer. Higher-priority threads will run more frequently than lower-priority threads (but lower-priority threads can also run).<br>This is just hint for Ruby thread scheduler. It may be ignored on some platform.<pre><code>count1 = count2 = 0\na = Thread.new do\n      loop { count1 += 1 }\n    end\na.priority = -1\n\nb = Thread.new do\n      loop { count2 += 1 }\n    end\nb.priority = -2\nsleep 1   #=> 1\ncount1    #=> 622504\ncount2    #=> 5832\n</code></pre>	http://ruby-doc.org/core/Thread.html#method-i-priority-3D
Thread#raise	A			instance methods							<pre><code>raise\nraise(string)\nraise(exception [, string [, array]])</code></pre>Raises an exception from the given thread. The caller does not have to be thr. See Kernel#raise for more information.<pre><code>Thread.abort_on_exception = true\na = Thread.new { sleep(200) }\na.raise("Gotcha")\n</code></pre>This will produce:	http://ruby-doc.org/core/Thread.html#method-i-raise
Thread#run	A			instance methods							<pre><code>run   → thr</code></pre>Wakes up thr, making it eligible for scheduling.<pre><code>a = Thread.new { puts "a"; Thread.stop; puts "c" }\nsleep 0.1 while a.status!='sleep'\nputs "Got here"\na.run\na.join\n</code></pre>This will produce:<pre><code>a\nGot here\nc\n</code></pre>See also the instance method wakeup.	http://ruby-doc.org/core/Thread.html#method-i-run
Thread#safe_level	A			instance methods							<pre><code>safe_level   → integer</code></pre>Returns the safe level in effect for thr. Setting thread-local safe levels can help when implementing sandboxes which run insecure code.<pre><code>thr = Thread.new { $SAFE = 1; sleep }\nThread.current.safe_level   #=> 0\nthr.safe_level              #=> 1\n</code></pre>	http://ruby-doc.org/core/Thread.html#method-i-safe_level
Thread#set_trace_func	A			instance methods							<pre><code>set_trace_func(proc)    → proc\nset_trace_func(nil)     → nil</code></pre>Establishes proc on thr as the handler for tracing, or disables tracing if the parameter is nil.<br>See Kernel#set_trace_func.	http://ruby-doc.org/core/Thread.html#method-i-set_trace_func
Thread#status	A			instance methods							<pre><code>status   → string, false or nil</code></pre>Returns the status of thr.<br>Returned if this thread is sleeping or waiting on I/O<br>When this thread is executing<br>If this thread is aborting<br>When this thread is terminated normally<br>If terminated with an exception.<pre><code>a = Thread.new { raise("die now") }\nb = Thread.new { Thread.stop }\nc = Thread.new { Thread.exit }\nd = Thread.new { sleep }\nd.kill                  #=> #<Thread:0x401b3678 aborting>\na.status                #=> nil\nb.status                #=> "sleep"\nc.status                #=> false\nd.status                #=> "aborting"\nThread.current.status   #=> "run"\n</code></pre>See also the instance methods alive? and stop?	http://ruby-doc.org/core/Thread.html#method-i-status
Thread#stop?	A			instance methods							<pre><code>stop?   → true or false</code></pre>Returns true if thr is dead or sleeping.<pre><code>a = Thread.new { Thread.stop }\nb = Thread.current\na.stop?   #=> true\nb.stop?   #=> false\n</code></pre>See also alive? and status.	http://ruby-doc.org/core/Thread.html#method-i-stop-3F
Thread#terminate	A			instance methods							<pre><code>terminate   → thr or nil</code></pre>Terminates thr and schedules another thread to be run.<br>If this thread is already marked to be killed, exit returns the Thread.<br>If this is the main thread, or the last thread, exits the process.	http://ruby-doc.org/core/Thread.html#method-i-terminate
Thread#thread_variable?	A			instance methods							<pre><code>thread_variable?(key)   → true or false</code></pre>Returns true if the given string (or symbol) exists as a thread-local variable.<pre><code>me = Thread.current\nme.thread_variable_set(:oliver, "a")\nme.thread_variable?(:oliver)    #=> true\nme.thread_variable?(:stanley)   #=> false\n</code></pre>Note that these are not fiber local variables. Please see #[] and #thread_variable_get for more details.	http://ruby-doc.org/core/Thread.html#method-i-thread_variable-3F
Thread#thread_variable_get	A			instance methods							<pre><code>thread_variable_get(key)  → obj or nil</code></pre>Returns the value of a thread local variable that has been set. Note that these are different than fiber local values. For fiber local values, please see #[] and #[]=.<br>Thread local values are carried along with threads, and do not respect fibers. For example:<pre><code>Thread.new {\n  Thread.current.thread_variable_set("foo", "bar") # set a thread local\n  Thread.current["foo"] = "bar"                    # set a fiber local\n\n  Fiber.new {\n    Fiber.yield [\n      Thread.current.thread_variable_get("foo"), # get the thread local\n      Thread.current["foo"],                     # get the fiber local\n    ]\n  }.resume\n}.join.value # => ['bar', nil]\n</code></pre>The value “bar” is returned for the thread local, where nil is returned for the fiber local. The fiber is executed in the same thread, so the thread local values are available.	http://ruby-doc.org/core/Thread.html#method-i-thread_variable_get
Thread#thread_variable_set	A			instance methods							<pre><code>thread_variable_set(key, value)</code></pre>Sets a thread local with key to value. Note that these are local to threads, and not to fibers. Please see #thread_variable_get and #[] for more information.	http://ruby-doc.org/core/Thread.html#method-i-thread_variable_set
Thread#thread_variables	A			instance methods							<pre><code>thread_variables   → array</code></pre>Returns an array of the names of the thread-local variables (as Symbols).<pre><code>thr = Thread.new do\n  Thread.current.thread_variable_set(:cat, 'meow')\n  Thread.current.thread_variable_set("dog", 'woof')\nend\nthr.join               #=> #<Thread:0x401b3f10 dead>\nthr.thread_variables   #=> [:dog, :cat]\n</code></pre>Note that these are not fiber local variables. Please see #[] and #thread_variable_get for more details.	http://ruby-doc.org/core/Thread.html#method-i-thread_variables
Thread#value	A			instance methods							<pre><code>value   → obj</code></pre>Waits for thr to complete, using join, and returns its value or raises the exception which terminated the thread.<pre><code>a = Thread.new { 2 + 2 }\na.value   #=> 4\n\nb = Thread.new { raise 'something went wrong' }\nb.value   #=> RuntimeError: something went wrong\n</code></pre>	http://ruby-doc.org/core/Thread.html#method-i-value
Thread#wakeup	A			instance methods							<pre><code>wakeup   → thr</code></pre>Marks a given thread as eligible for scheduling, however it may still remain blocked on I/O.<br>Note: This does not invoke the scheduler, see run for more information.<pre><code>c = Thread.new { Thread.stop; puts "hey!" }\nsleep 0.1 while c.status!='sleep'\nc.wakeup\nc.join\n#=> "hey!"\n</code></pre>	http://ruby-doc.org/core/Thread.html#method-i-wakeup
Proc	A			classes							Proc objects are blocks of code that have been bound to a set of local variables. Once bound, the code may be called in different contexts and still access those variables.<pre><code>def gen_times(factor)\n  return Proc.new {|n| n*factor }\nend\n\ntimes3 = gen_times(3)\ntimes5 = gen_times(5)\n\ntimes3.call(12)               #=> 36\ntimes5.call(5)                #=> 25\ntimes3.call(times5.call(4))   #=> 60\n</code></pre>	http://ruby-doc.org/core/Proc.html
Proc::new	A			class methods							<pre><code>new {|...| block } → a_proc\nnew                → a_proc</code></pre>Creates a new Proc object, bound to the current context. Proc::new may be called without a block only within a method with an attached block, in which case that block is converted to the Proc object.<pre><code>def proc_from\n  Proc.new\nend\nproc = proc_from { "hello" }\nproc.call   #=> "hello"\n</code></pre>	http://ruby-doc.org/core/Proc.html#method-c-new
Proc#arity	A			instance methods							<pre><code>arity → fixnum</code></pre>Returns the number of mandatory arguments. If the block is declared to take no arguments, returns 0. If the block is known to take exactly n arguments, returns n. If the block has optional arguments, returns -n-1, where n is the number of mandatory arguments, with the exception for blocks that are not lambdas and have only a finite number of optional arguments; in this latter case, returns n. Keywords arguments will considered as a single additional argument, that argument being mandatory if any keyword argument is mandatory. A proc with no argument declarations is the same as a block declaring || as its arguments.	http://ruby-doc.org/core/Proc.html#method-i-arity
Proc#binding	A			instance methods							<pre><code>binding    → binding</code></pre>Returns the binding associated with prc. Note that Kernel#eval accepts either a Proc or a Binding object as its second parameter.<pre><code>def fred(param)\n  proc {}\nend\n\nb = fred(99)\neval("param", b.binding)   #=> 99\n</code></pre>	http://ruby-doc.org/core/Proc.html#method-i-binding
Proc#curry	A			instance methods							<pre><code>curry         → a_proc\ncurry(arity)  → a_proc</code></pre>Returns a curried proc. If the optional arity argument is given, it determines the number of arguments. A curried proc receives some arguments. If a sufficient number of arguments are supplied, it passes the supplied arguments to the original proc and returns the result. Otherwise, returns another curried proc that takes the rest of arguments.<pre><code>b = proc {|x, y, z| (x||0) + (y||0) + (z||0) }\np b.curry[1][2][3]           #=> 6\np b.curry[1, 2][3, 4]        #=> 6\np b.curry(5)[1][2][3][4][5]  #=> 6\np b.curry(5)[1, 2][3, 4][5]  #=> 6\np b.curry(1)[1]              #=> 1\n\nb = proc {|x, y, z, *w| (x||0) + (y||0) + (z||0) + w.inject(0, &:+) }\np b.curry[1][2][3]           #=> 6\np b.curry[1, 2][3, 4]        #=> 10\np b.curry(5)[1][2][3][4][5]  #=> 15\np b.curry(5)[1, 2][3, 4][5]  #=> 15\np b.curry(1)[1]              #=> 1\n\nb = lambda {|x, y, z| (x||0) + (y||0) + (z||0) }\np b.curry[1][2][3]           #=> 6\np b.curry[1, 2][3, 4]        #=> wrong number of arguments (given 4, expected 3)\np b.curry(5)                 #=> wrong number of arguments (given 5, expected 3)\np b.curry(1)                 #=> wrong number of arguments (given 1, expected 3)\n\nb = lambda {|x, y, z, *w| (x||0) + (y||0) + (z||0) + w.inject(0, &:+) }\np b.curry[1][2][3]           #=> 6\np b.curry[1, 2][3, 4]        #=> 10\np b.curry(5)[1][2][3][4][5]  #=> 15\np b.curry(5)[1, 2][3, 4][5]  #=> 15\np b.curry(1)                 #=> wrong number of arguments (given 1, expected 3)\n\nb = proc { :foo }\np b.curry[]                  #=> :foo\n</code></pre>	http://ruby-doc.org/core/Proc.html#method-i-curry
Proc#hash	A			instance methods							<pre><code>hash   →  integer</code></pre>Returns a hash value corresponding to proc body.<br>See also Object#hash.	http://ruby-doc.org/core/Proc.html#method-i-hash
Proc#inspect	A			instance methods								http://ruby-doc.org/core/Proc.html#method-i-inspect
Proc#lambda?	A			instance methods							<pre><code>lambda? → true or false</code></pre>Returns true for a Proc object for which argument handling is rigid. Such procs are typically generated by lambda.<br>A Proc object generated by proc ignores extra arguments.<pre><code>proc {|a,b| [a,b] }.call(1,2,3)    #=> [1,2]\n</code></pre>It provides nil for missing arguments.<pre><code>proc {|a,b| [a,b] }.call(1)        #=> [1,nil]\n</code></pre>It expands a single array argument.<pre><code>proc {|a,b| [a,b] }.call([1,2])    #=> [1,2]\n</code></pre>A Proc object generated by lambda doesn’t have such tricks.<pre><code>lambda {|a,b| [a,b] }.call(1,2,3)  #=> ArgumentError\nlambda {|a,b| [a,b] }.call(1)      #=> ArgumentError\nlambda {|a,b| [a,b] }.call([1,2])  #=> ArgumentError\n</code></pre>#lambda? is a predicate for the tricks. It returns true if no tricks apply.<pre><code>lambda {}.lambda?            #=> true\nproc {}.lambda?              #=> false\n</code></pre>::new is the same as proc.<pre><code>Proc.new {}.lambda?          #=> false\n</code></pre>lambda, proc and ::new preserve the tricks of a Proc object given by & argument.<pre><code>lambda(&lambda {}).lambda?   #=> true\nproc(&lambda {}).lambda?     #=> true\nProc.new(&lambda {}).lambda? #=> true\n\nlambda(&proc {}).lambda?     #=> false\nproc(&proc {}).lambda?       #=> false\nProc.new(&proc {}).lambda?   #=> false\n</code></pre>A Proc object generated by & argument has the tricks<pre><code>def n(&b) b.lambda? end\nn {}                         #=> false\n</code></pre>The & argument preserves the tricks if a Proc object is given by & argument.<pre><code>n(&lambda {})                #=> true\nn(&proc {})                  #=> false\nn(&Proc.new {})              #=> false\n</code></pre>A Proc object converted from a method has no tricks.<pre><code>def m() end\nmethod(:m).to_proc.lambda?   #=> true\n\nn(&method(:m))               #=> true\nn(&method(:m).to_proc)       #=> true\n</code></pre>define_method is treated the same as method definition. The defined method has no tricks.<pre><code>class C\n  define_method(:d) {}\nend\nC.new.d(1,2)       #=> ArgumentError\nC.new.method(:d).to_proc.lambda?   #=> true\n</code></pre>define_method always defines a method without the tricks, even if a non-lambda Proc object is given. This is the only exception for which the tricks are not preserved.<pre><code>class C\n  define_method(:e, &proc {})\nend\nC.new.e(1,2)       #=> ArgumentError\nC.new.method(:e).to_proc.lambda?   #=> true\n</code></pre>This exception insures that methods never have tricks and makes it easy to have wrappers to define methods that behave as usual.<pre><code>class C\n  def self.def2(name, &body)\n    define_method(name, &body)\n  end\n\n  def2(:f) {}\nend\nC.new.f(1,2)       #=> ArgumentError\n</code></pre>The wrapper def2 defines a method which has no tricks.	http://ruby-doc.org/core/Proc.html#method-i-lambda-3F
Proc#parameters	A			instance methods							<pre><code>parameters  → array</code></pre>Returns the parameter information of this proc.<pre><code>prc = lambda{|x, y=42, *other|}\nprc.parameters  #=> [[:req, :x], [:opt, :y], [:rest, :other]]\n</code></pre>	http://ruby-doc.org/core/Proc.html#method-i-parameters
Proc#source_location	A			instance methods							<pre><code>source_location  → [String, Fixnum]</code></pre>Returns the Ruby source filename and line number containing this proc or nil if this proc was not defined in Ruby (i.e. native)	http://ruby-doc.org/core/Proc.html#method-i-source_location
Proc#to_proc	A			instance methods							<pre><code>to_proc → proc</code></pre>Part of the protocol for converting objects to Proc objects. Instances of class Proc simply return themselves.	http://ruby-doc.org/core/Proc.html#method-i-to_proc
Proc#to_s	A			instance methods							<pre><code>to_s   → string</code></pre>Returns the unique identifier for this proc, along with an indication of where the proc was defined.	http://ruby-doc.org/core/Proc.html#method-i-to_s
LocalJumpError	A			classes							Raised when Ruby can't yield as requested.<br>A typical scenario is attempting to yield when no block is given:<pre><code>def call_block\n  yield 42\nend\ncall_block\n</code></pre>raises the exception:<br>A more subtle example:<pre><code>def get_me_a_return\n  Proc.new { return 42 }\nend\nget_me_a_return.call\n</code></pre>raises the exception:	http://ruby-doc.org/core/LocalJumpError.html
LocalJumpError#exit_value	A			instance methods							<pre><code>exit_value  → obj</code></pre>Returns the exit value associated with this LocalJumpError.	http://ruby-doc.org/core/LocalJumpError.html#method-i-exit_value
LocalJumpError#reason	A			instance methods							<pre><code>reason   → symbol</code></pre>The reason this block was terminated: :break, :redo, :retry, :next, :return, or :noreason.	http://ruby-doc.org/core/LocalJumpError.html#method-i-reason
SystemStackError	A			classes							Raised in case of a stack overflow.<pre><code>def me_myself_and_i\n  me_myself_and_i\nend\nme_myself_and_i\n</code></pre>raises the exception:	http://ruby-doc.org/core/SystemStackError.html
Method	A			classes							Method	http://ruby-doc.org/core/Method.html
Method#==	A			instance methods							<pre><code>meth == other_meth  → true or false</code></pre>Two method objects are equal if they are bound to the same object and refer to the same method definition and their owners are the same class or module.	http://ruby-doc.org/core/Method.html#method-i-3D-3D
Method#[]	A			instance methods							<pre><code>meth[args, ...]         → obj</code></pre>Invokes the meth with the specified arguments, returning the method’s return value.<pre><code>m = 12.method("+")\nm.call(3)    #=> 15\nm.call(20)   #=> 32\n</code></pre>	http://ruby-doc.org/core/Method.html#method-i-5B-5D
Method#arity	A			instance methods							<pre><code>arity    → fixnum</code></pre>Returns an indication of the number of arguments accepted by a method. Returns a nonnegative integer for methods that take a fixed number of arguments. For Ruby methods that take a variable number of arguments, returns -n-1, where n is the number of required arguments. For methods written in C, returns -1 if the call takes a variable number of arguments.<pre><code>class C\n  def one;    end\n  def two(a); end\n  def three(*a);  end\n  def four(a, b); end\n  def five(a, b, *c);    end\n  def six(a, b, *c, &d); end\nend\nc = C.new\nc.method(:one).arity     #=> 0\nc.method(:two).arity     #=> 1\nc.method(:three).arity   #=> -1\nc.method(:four).arity    #=> 2\nc.method(:five).arity    #=> -3\nc.method(:six).arity     #=> -3\n\n"cat".method(:size).arity      #=> 0\n"cat".method(:replace).arity   #=> 1\n"cat".method(:squeeze).arity   #=> -1\n"cat".method(:count).arity     #=> -1\n</code></pre>	http://ruby-doc.org/core/Method.html#method-i-arity
Method#call	A			instance methods							<pre><code>call(args, ...)    → obj</code></pre>Invokes the meth with the specified arguments, returning the method’s return value.<pre><code>m = 12.method("+")\nm.call(3)    #=> 15\nm.call(20)   #=> 32\n</code></pre>	http://ruby-doc.org/core/Method.html#method-i-call
Method#clone	A			instance methods							<pre><code>clone → new_method</code></pre>Returns a clone of this method.<pre><code>class A\n  def foo\n    return "bar"\n  end\nend\n\nm = A.new.method(:foo)\nm.call # => "bar"\nn = m.clone.call # => "bar"\n</code></pre>	http://ruby-doc.org/core/Method.html#method-i-clone
Method#curry	A			instance methods							<pre><code>curry        → proc\ncurry(arity) → proc</code></pre>Returns a curried proc based on the method. When the proc is called with a number of arguments that is lower than the method’s arity, then another curried proc is returned. Only when enough arguments have been supplied to satisfy the method signature, will the method actually be called.<br>The optional arity argument should be supplied when currying methods with variable arguments to determine how many arguments are needed before the method is called.<pre><code>def foo(a,b,c)\n  [a, b, c]\nend\n\nproc  = self.method(:foo).curry\nproc2 = proc.call(1, 2)          #=> #<Proc>\nproc2.call(3)                    #=> [1,2,3]\n\ndef vararg(*args)\n  args\nend\n\nproc = self.method(:vararg).curry(4)\nproc2 = proc.call(:x)      #=> #<Proc>\nproc3 = proc2.call(:y, :z) #=> #<Proc>\nproc3.call(:a)             #=> [:x, :y, :z, :a]\n</code></pre>	http://ruby-doc.org/core/Method.html#method-i-curry
Method#eql?	A			instance methods							<pre><code>eql?(other_meth)  → true or false</code></pre>Two method objects are equal if they are bound to the same object and refer to the same method definition and their owners are the same class or module.	http://ruby-doc.org/core/Method.html#method-i-eql-3F
Method#hash	A			instance methods							<pre><code>hash   → integer</code></pre>Returns a hash value corresponding to the method object.<br>See also Object#hash.	http://ruby-doc.org/core/Method.html#method-i-hash
Method#inspect	A			instance methods							<pre><code>inspect   →  string</code></pre>Returns the name of the underlying method.<pre><code>"cat".method(:count).inspect   #=> "#<Method: String#count>"\n</code></pre>	http://ruby-doc.org/core/Method.html#method-i-inspect
Method#name	A			instance methods							<pre><code>name    → symbol</code></pre>Returns the name of the method.	http://ruby-doc.org/core/Method.html#method-i-name
Method#original_name	A			instance methods							<pre><code>original_name    → symbol</code></pre>Returns the original name of the method.	http://ruby-doc.org/core/Method.html#method-i-original_name
Method#owner	A			instance methods							<pre><code>owner    → class_or_module</code></pre>Returns the class or module that defines the method.	http://ruby-doc.org/core/Method.html#method-i-owner
Method#parameters	A			instance methods							<pre><code>parameters  → array</code></pre>Returns the parameter information of this method.	http://ruby-doc.org/core/Method.html#method-i-parameters
Method#receiver	A			instance methods							<pre><code>receiver    → object</code></pre>Returns the bound receiver of the method object.	http://ruby-doc.org/core/Method.html#method-i-receiver
Method#source_location	A			instance methods							<pre><code>source_location  → [String, Fixnum]</code></pre>Returns the Ruby source filename and line number containing this method or nil if this method was not defined in Ruby (i.e. native)	http://ruby-doc.org/core/Method.html#method-i-source_location
Method#super_method	A			instance methods							<pre><code>super_method  → method</code></pre>Returns a Method of superclass which would be called when super is used or nil if there is no method on superclass.	http://ruby-doc.org/core/Method.html#method-i-super_method
Method#to_proc	A			instance methods							<pre><code>to_proc    → proc</code></pre>Returns a Proc object corresponding to this method.	http://ruby-doc.org/core/Method.html#method-i-to_proc
Method#to_s	A			instance methods							<pre><code>to_s      →  string</code></pre>Returns the name of the underlying method.<pre><code>"cat".method(:count).inspect   #=> "#<Method: String#count>"\n</code></pre>	http://ruby-doc.org/core/Method.html#method-i-to_s
Method#unbind	A			instance methods							<pre><code>unbind    → unbound_method</code></pre>Dissociates meth from its current receiver. The resulting UnboundMethod can subsequently be bound to a new object of the same class (see UnboundMethod).	http://ruby-doc.org/core/Method.html#method-i-unbind
UnboundMethod	A			classes							Ruby supports two forms of objectified methods. Class Method is used to represent methods that are associated with a particular object: these method objects are bound to that object. Bound method objects for an object can be created using Object#method.<br>Ruby also supports unbound methods; methods objects that are not associated with a particular object. These can be created either by calling Module#instance_method or by calling unbind on a bound method object. The result of both of these is an UnboundMethod object.<br>Unbound methods can only be called after they are bound to an object. That object must be a kind_of? the method's original class.<pre><code>class Square\n  def area\n    @side * @side\n  end\n  def initialize(side)\n    @side = side\n  end\nend\n\narea_un = Square.instance_method(:area)\n\ns = Square.new(12)\narea = area_un.bind(s)\narea.call   #=> 144\n</code></pre>Unbound methods are a reference to the method at the time it was objectified: subsequent changes to the underlying class will not affect the unbound method.<pre><code>class Test\n  def test\n    :original\n  end\nend\num = Test.instance_method(:test)\nclass Test\n  def test\n    :modified\n  end\nend\nt = Test.new\nt.test            #=> :modified\num.bind(t).call   #=> :original\n</code></pre>	http://ruby-doc.org/core/UnboundMethod.html
UnboundMethod#==	A			instance methods							<pre><code>meth == other_meth  → true or false</code></pre>Two method objects are equal if they are bound to the same object and refer to the same method definition and their owners are the same class or module.	http://ruby-doc.org/core/UnboundMethod.html#method-i-3D-3D
UnboundMethod#arity	A			instance methods							<pre><code>arity    → fixnum</code></pre>Returns an indication of the number of arguments accepted by a method. Returns a nonnegative integer for methods that take a fixed number of arguments. For Ruby methods that take a variable number of arguments, returns -n-1, where n is the number of required arguments. For methods written in C, returns -1 if the call takes a variable number of arguments.<pre><code>class C\n  def one;    end\n  def two(a); end\n  def three(*a);  end\n  def four(a, b); end\n  def five(a, b, *c);    end\n  def six(a, b, *c, &d); end\nend\nc = C.new\nc.method(:one).arity     #=> 0\nc.method(:two).arity     #=> 1\nc.method(:three).arity   #=> -1\nc.method(:four).arity    #=> 2\nc.method(:five).arity    #=> -3\nc.method(:six).arity     #=> -3\n\n"cat".method(:size).arity      #=> 0\n"cat".method(:replace).arity   #=> 1\n"cat".method(:squeeze).arity   #=> -1\n"cat".method(:count).arity     #=> -1\n</code></pre>	http://ruby-doc.org/core/UnboundMethod.html#method-i-arity
UnboundMethod#bind	A			instance methods							<pre><code>bind(obj) → method</code></pre>Bind umeth to obj. If Klass was the class from which umeth was obtained, obj.kind_of?(Klass) must be true.<pre><code>class A\n  def test\n    puts "In test, class = #{self.class}"\n  end\nend\nclass B < A\nend\nclass C < B\nend\n\num = B.instance_method(:test)\nbm = um.bind(C.new)\nbm.call\nbm = um.bind(B.new)\nbm.call\nbm = um.bind(A.new)\nbm.call\n</code></pre>produces:	http://ruby-doc.org/core/UnboundMethod.html#method-i-bind
UnboundMethod#clone	A			instance methods							<pre><code>clone → new_method</code></pre>Returns a clone of this method.<pre><code>class A\n  def foo\n    return "bar"\n  end\nend\n\nm = A.new.method(:foo)\nm.call # => "bar"\nn = m.clone.call # => "bar"\n</code></pre>	http://ruby-doc.org/core/UnboundMethod.html#method-i-clone
UnboundMethod#eql?	A			instance methods							<pre><code>eql?(other_meth)  → true or false</code></pre>Two method objects are equal if they are bound to the same object and refer to the same method definition and their owners are the same class or module.	http://ruby-doc.org/core/UnboundMethod.html#method-i-eql-3F
UnboundMethod#hash	A			instance methods							<pre><code>hash   → integer</code></pre>Returns a hash value corresponding to the method object.<br>See also Object#hash.	http://ruby-doc.org/core/UnboundMethod.html#method-i-hash
UnboundMethod#inspect	A			instance methods							<pre><code>inspect   →  string</code></pre>Returns the name of the underlying method.<pre><code>"cat".method(:count).inspect   #=> "#<Method: String#count>"\n</code></pre>	http://ruby-doc.org/core/UnboundMethod.html#method-i-inspect
UnboundMethod#name	A			instance methods							<pre><code>name    → symbol</code></pre>Returns the name of the method.	http://ruby-doc.org/core/UnboundMethod.html#method-i-name
UnboundMethod#original_name	A			instance methods							<pre><code>original_name    → symbol</code></pre>Returns the original name of the method.	http://ruby-doc.org/core/UnboundMethod.html#method-i-original_name
UnboundMethod#owner	A			instance methods							<pre><code>owner    → class_or_module</code></pre>Returns the class or module that defines the method.	http://ruby-doc.org/core/UnboundMethod.html#method-i-owner
UnboundMethod#parameters	A			instance methods							<pre><code>parameters  → array</code></pre>Returns the parameter information of this method.	http://ruby-doc.org/core/UnboundMethod.html#method-i-parameters
UnboundMethod#source_location	A			instance methods							<pre><code>source_location  → [String, Fixnum]</code></pre>Returns the Ruby source filename and line number containing this method or nil if this method was not defined in Ruby (i.e. native)	http://ruby-doc.org/core/UnboundMethod.html#method-i-source_location
UnboundMethod#super_method	A			instance methods							<pre><code>super_method  → method</code></pre>Returns a Method of superclass which would be called when super is used or nil if there is no method on superclass.	http://ruby-doc.org/core/UnboundMethod.html#method-i-super_method
UnboundMethod#to_s	A			instance methods							<pre><code>to_s      →  string</code></pre>Returns the name of the underlying method.<pre><code>"cat".method(:count).inspect   #=> "#<Method: String#count>"\n</code></pre>	http://ruby-doc.org/core/UnboundMethod.html#method-i-to_s
Binding	A			classes							Objects of class Binding encapsulate the execution context at some particular place in the code and retain this context for future use. The variables, methods, value of self, and possibly an iterator block that can be accessed in this context are all retained. Binding objects can be created using Kernel#binding, and are made available to the callback of Kernel#set_trace_func.<br>These binding objects can be passed as the second argument of the Kernel#eval method, establishing an environment for the evaluation.<pre><code>class Demo\n  def initialize(n)\n    @secret = n\n  end\n  def get_binding\n    return binding()\n  end\nend\n\nk1 = Demo.new(99)\nb1 = k1.get_binding\nk2 = Demo.new(-3)\nb2 = k2.get_binding\n\neval("@secret", b1)   #=> 99\neval("@secret", b2)   #=> -3\neval("@secret")       #=> nil\n</code></pre>Binding objects have no class-specific methods.	http://ruby-doc.org/core/Binding.html
Binding#eval	A			instance methods							<pre><code>eval(string [, filename [,lineno]])  → obj</code></pre>Evaluates the Ruby expression(s) in string, in the binding’s context. If the optional filename and lineno parameters are present, they will be used when reporting syntax errors.<pre><code>def get_binding(param)\n  return binding\nend\nb = get_binding("hello")\nb.eval("param")   #=> "hello"\n</code></pre>	http://ruby-doc.org/core/Binding.html#method-i-eval
Binding#local_variable_defined?	A			instance methods							<pre><code>local_variable_defined?(symbol) → obj</code></pre>Returns a true if a local variable symbol exists.<pre><code>def foo\n  a = 1\n  binding.local_variable_defined?(:a) #=> true\n  binding.local_variable_defined?(:b) #=> false\nend\n</code></pre>This method is short version of the following code.<pre><code>binding.eval("defined?(#{symbol}) == 'local-variable'")\n</code></pre>	http://ruby-doc.org/core/Binding.html#method-i-local_variable_defined-3F
Binding#local_variable_get	A			instance methods							<pre><code>local_variable_get(symbol) → obj</code></pre>Returns a value of local variable symbol.<pre><code>def foo\n  a = 1\n  binding.local_variable_get(:a) #=> 1\n  binding.local_variable_get(:b) #=> NameError\nend\n</code></pre>This method is short version of the following code.<pre><code>binding.eval("#{symbol}")\n</code></pre>	http://ruby-doc.org/core/Binding.html#method-i-local_variable_get
Binding#local_variable_set	A			instance methods							<pre><code>local_variable_set(symbol, obj) → obj</code></pre>Set local variable named symbol as obj.<pre><code>def foo\n  a = 1\n  bind = binding\n  bind.local_variable_set(:a, 2) # set existing local variable `a'\n  bind.local_variable_set(:b, 3) # create new local variable `b'\n                                 # `b' exists only in binding.\n  p bind.local_variable_get(:a) #=> 2\n  p bind.local_variable_get(:b) #=> 3\n  p a #=> 2\n  p b #=> NameError\nend\n</code></pre>This method is a similar behavior of the following code<pre><code>binding.eval("#{symbol} = #{obj}")\n</code></pre>if obj can be dumped in Ruby code.	http://ruby-doc.org/core/Binding.html#method-i-local_variable_set
Binding#local_variables	A			instance methods							<pre><code>local_variables → Array</code></pre>Returns the symbol names of the binding’s local variables<pre><code>def foo\n  a = 1\n  2.times do |n|\n    binding.local_variables #=> [:a, :n]\n  end\nend\n</code></pre>This method is short version of the following code.<pre><code>binding.eval("local_variables")\n</code></pre>	http://ruby-doc.org/core/Binding.html#method-i-local_variables
Binding#receiver	A			instance methods							<pre><code>receiver    → object</code></pre>Returns the bound receiver of the binding object.	http://ruby-doc.org/core/Binding.html#method-i-receiver
Process::Waiter	A			classes								http://ruby-doc.org/core/Process/Waiter.html
Process::Waiter#pid	A			instance methods								http://ruby-doc.org/core/Process/Waiter.html#method-i-pid
Process::Status	A			classes							Process::Status encapsulates the information on the status of a running or terminated system process. The built-in variable $? is either nil or a Process::Status object.<pre><code>fork { exit 99 }   #=> 26557\nProcess.wait       #=> 26557\n$?.class           #=> Process::Status\n$?.to_i            #=> 25344\n$? >> 8            #=> 99\n$?.stopped?        #=> false\n$?.exited?         #=> true\n$?.exitstatus      #=> 99\n</code></pre>Posix systems record information on processes using a 16-bit integer. The lower bits record the process status (stopped, exited, signaled) and the upper bits possibly contain additional information (for example the program's return code in the case of exited processes). Pre Ruby 1.8, these bits were exposed directly to the Ruby program. Ruby now encapsulates these in a Process::Status object. To maximize compatibility, however, these objects retain a bit-oriented interface. In the descriptions that follow, when we talk about the integer value of stat, we're referring to this 16 bit value.	http://ruby-doc.org/core/Process/Status.html
Process::Status#&	A			instance methods							<pre><code>stat & num   → fixnum</code></pre>Logical AND of the bits in stat with num.<pre><code>fork { exit 0x37 }\nProcess.wait\nsprintf('%04x', $?.to_i)       #=> "3700"\nsprintf('%04x', $? & 0x1e00)   #=> "1600"\n</code></pre>	http://ruby-doc.org/core/Process/Status.html#method-i-26
Process::Status#==	A			instance methods							<pre><code>stat == other   → true or false</code></pre>Returns true if the integer value of stat equals other.	http://ruby-doc.org/core/Process/Status.html#method-i-3D-3D
Process::Status#>>	A			instance methods							<pre><code>stat >> num   → fixnum</code></pre>Shift the bits in stat right num places.<pre><code>fork { exit 99 }   #=> 26563\nProcess.wait       #=> 26563\n$?.to_i            #=> 25344\n$? >> 8            #=> 99\n</code></pre>	http://ruby-doc.org/core/Process/Status.html#method-i-3E-3E
Process::Status#coredump?	A			instance methods							<pre><code>coredump?   → true or false</code></pre>Returns true if stat generated a coredump when it terminated. Not available on all platforms.	http://ruby-doc.org/core/Process/Status.html#method-i-coredump-3F
Process::Status#exited?	A			instance methods							<pre><code>exited?   → true or false</code></pre>Returns true if stat exited normally (for example using an exit() call or finishing the program).	http://ruby-doc.org/core/Process/Status.html#method-i-exited-3F
Process::Status#exitstatus	A			instance methods							<pre><code>exitstatus   → fixnum or nil</code></pre>Returns the least significant eight bits of the return code of stat. Only available if exited? is true.<pre><code>fork { }           #=> 26572\nProcess.wait       #=> 26572\n$?.exited?         #=> true\n$?.exitstatus      #=> 0\n\nfork { exit 99 }   #=> 26573\nProcess.wait       #=> 26573\n$?.exited?         #=> true\n$?.exitstatus      #=> 99\n</code></pre>	http://ruby-doc.org/core/Process/Status.html#method-i-exitstatus
Process::Status#inspect	A			instance methods							<pre><code>inspect   → string</code></pre>Override the inspection method.<pre><code>system("false")\np $?.inspect #=> "#<Process::Status: pid 12861 exit 1>"\n</code></pre>	http://ruby-doc.org/core/Process/Status.html#method-i-inspect
Process::Status#pid	A			instance methods							<pre><code>pid   → fixnum</code></pre>Returns the process ID that this status object represents.<pre><code>fork { exit }   #=> 26569\nProcess.wait    #=> 26569\n$?.pid          #=> 26569\n</code></pre>	http://ruby-doc.org/core/Process/Status.html#method-i-pid
Process::Status#signaled?	A			instance methods							<pre><code>signaled?   → true or false</code></pre>Returns true if stat terminated because of an uncaught signal.	http://ruby-doc.org/core/Process/Status.html#method-i-signaled-3F
Process::Status#stopped?	A			instance methods							<pre><code>stopped?   → true or false</code></pre>Returns true if this process is stopped. This is only returned if the corresponding wait call had the WUNTRACED flag set.	http://ruby-doc.org/core/Process/Status.html#method-i-stopped-3F
Process::Status#stopsig	A			instance methods							<pre><code>stopsig   → fixnum or nil</code></pre>Returns the number of the signal that caused stat to stop (or nil if self is not stopped).	http://ruby-doc.org/core/Process/Status.html#method-i-stopsig
Process::Status#success?	A			instance methods							<pre><code>success?   → true, false or nil</code></pre>Returns true if stat is successful, false if not. Returns nil if exited? is not true.	http://ruby-doc.org/core/Process/Status.html#method-i-success-3F
Process::Status#termsig	A			instance methods							<pre><code>termsig   → fixnum or nil</code></pre>Returns the number of the signal that caused stat to terminate (or nil if self was not terminated by an uncaught signal).	http://ruby-doc.org/core/Process/Status.html#method-i-termsig
Process::Status#to_i	A			instance methods							<pre><code>to_i     → fixnum\nto_int   → fixnum</code></pre>Returns the bits in stat as a Fixnum. Poking around in these bits is platform dependent.<pre><code>fork { exit 0xab }         #=> 26566\nProcess.wait               #=> 26566\nsprintf('%04x', $?.to_i)   #=> "ab00"\n</code></pre>	http://ruby-doc.org/core/Process/Status.html#method-i-to_i
Process::Status#to_s	A			instance methods							<pre><code>to_s   → string</code></pre>Show pid and exit status as a string.<pre><code>system("false")\np $?.to_s         #=> "pid 12766 exit 1"\n</code></pre>	http://ruby-doc.org/core/Process/Status.html#method-i-to_s
Struct	A			classes								http://ruby-doc.org/core/Struct.html
Struct::new	A			class methods							<pre><code>new([class_name] [, member_name]+>)                        → StructClass\nnew([class_name] [, member_name]+>) {|StructClass| block } → StructClass\nnew(value, ...)                                       → obj\nStructClass[value, ...]                                           → obj</code></pre>The first two forms are used to create a new Struct subclass class_name that can contain a value for each member_name. This subclass can be used to create instances of the structure like any other Class.<br>If the class_name is omitted an anonymous structure class will be created. Otherwise, the name of this struct will appear as a constant in class Struct, so it must be unique for all Structs in the system and must start with a capital letter. Assigning a structure class to a constant also gives the class the name of the constant.<pre><code># Create a structure with a name under Struct\nStruct.new("Customer", :name, :address)\n#=> Struct::Customer\nStruct::Customer.new("Dave", "123 Main")\n#=> #<struct Struct::Customer name="Dave", address="123 Main">\n</code></pre>If a block is given it will be evaluated in the context of StructClass, passing the created class as a parameter:<pre><code>Customer = Struct.new(:name, :address) do\n  def greeting\n    "Hello #{name}!"\n  end\nend\nCustomer.new("Dave", "123 Main").greeting  # => "Hello Dave!"\n</code></pre>This is the recommended way to customize a struct. Subclassing an anonymous struct creates an extra anonymous class that will never be used.<br>The last two forms create a new instance of a struct subclass. The number of value parameters must be less than or equal to the number of attributes defined for the structure. Unset parameters default to nil. Passing more parameters than number of attributes will raise an ArgumentError.<pre><code># Create a structure named by its constant\nCustomer = Struct.new(:name, :address)\n#=> Customer\nCustomer.new("Dave", "123 Main")\n#=> #<struct Customer name="Dave", address="123 Main">\n</code></pre>	http://ruby-doc.org/core/Struct.html#method-c-new
Struct#==	A			instance methods							<pre><code>struct == other     → true or false</code></pre>Equality—Returns true if other has the same struct subclass and has equal member values (according to Object#==).<pre><code>Customer = Struct.new(:name, :address, :zip)\njoe   = Customer.new("Joe Smith", "123 Maple, Anytown NC", 12345)\njoejr = Customer.new("Joe Smith", "123 Maple, Anytown NC", 12345)\njane  = Customer.new("Jane Doe", "456 Elm, Anytown NC", 12345)\njoe == joejr   #=> true\njoe == jane    #=> false\n</code></pre>	http://ruby-doc.org/core/Struct.html#method-i-3D-3D
Struct#[]	A			instance methods							<pre><code>struct[member]   → anObject\nstruct[index]    → anObject</code></pre>Attribute Reference—Returns the value of the given struct member or the member at the given index. Raises NameError if the member does not exist and IndexError if the index is out of range.<pre><code>Customer = Struct.new(:name, :address, :zip)\njoe = Customer.new("Joe Smith", "123 Maple, Anytown NC", 12345)\n\njoe["name"]   #=> "Joe Smith"\njoe[:name]    #=> "Joe Smith"\njoe[0]        #=> "Joe Smith"\n</code></pre>	http://ruby-doc.org/core/Struct.html#method-i-5B-5D
Struct#[]=	A			instance methods							<pre><code>struct[member] = obj    → obj\nstruct[index]  = obj    → obj</code></pre>Attribute Assignment—Sets the value of the given struct member or the member at the given index. Raises NameError if the member does not exist and IndexError if the index is out of range.<pre><code>Customer = Struct.new(:name, :address, :zip)\njoe = Customer.new("Joe Smith", "123 Maple, Anytown NC", 12345)\n\njoe["name"] = "Luke"\njoe[:zip]   = "90210"\n\njoe.name   #=> "Luke"\njoe.zip    #=> "90210"\n</code></pre>	http://ruby-doc.org/core/Struct.html#method-i-5B-5D-3D
Struct#dig	A			instance methods							<pre><code>dig(key, ...)              → object</code></pre>Extracts the nested value specified by the sequence of idx objects by calling dig at each step, returning nil if any intermediate step is nil.<pre><code>klass = Struct.new(:a)\no = klass.new(klass.new({b: [1, 2, 3]}))\n\no.dig(:a, :a, :b, 0)              #=> 1\no.dig(:b, 0)                      #=> nil\n</code></pre>	http://ruby-doc.org/core/Struct.html#method-i-dig
Struct#each	A			instance methods							<pre><code>each {|obj| block }  → struct\neach                 → an_enumerator</code></pre>Yields the value of each struct member in order. If no block is given an enumerator is returned.<pre><code>Customer = Struct.new(:name, :address, :zip)\njoe = Customer.new("Joe Smith", "123 Maple, Anytown NC", 12345)\njoe.each {|x| puts(x) }\n</code></pre>Produces:	http://ruby-doc.org/core/Struct.html#method-i-each
Struct#each_pair	A			instance methods							<pre><code>each_pair {|sym, obj| block }     → struct\neach_pair                         → an_enumerator</code></pre>Yields the name and value of each struct member in order. If no block is given an enumerator is returned.<pre><code>Customer = Struct.new(:name, :address, :zip)\njoe = Customer.new("Joe Smith", "123 Maple, Anytown NC", 12345)\njoe.each_pair {|name, value| puts("#{name} => #{value}") }\n</code></pre>Produces:	http://ruby-doc.org/core/Struct.html#method-i-each_pair
Struct#eql?	A			instance methods							<pre><code>eql?(other)   → true or false</code></pre>Hash equality---other and struct refer to the same hash key if they have the same struct subclass and have equal member values (according to Object#eql?).	http://ruby-doc.org/core/Struct.html#method-i-eql-3F
Struct#hash	A			instance methods							<pre><code>hash   → fixnum</code></pre>Returns a hash value based on this struct’s contents (see Object#hash).<br>See also Object#hash.	http://ruby-doc.org/core/Struct.html#method-i-hash
Struct#inspect	A			instance methods							<pre><code>to_s      → string\ninspect   → string</code></pre>Describe the contents of this struct in a string.	http://ruby-doc.org/core/Struct.html#method-i-inspect
Struct#length	A			instance methods							<pre><code>length    → fixnum</code></pre>Returns the number of struct members.<pre><code>Customer = Struct.new(:name, :address, :zip)\njoe = Customer.new("Joe Smith", "123 Maple, Anytown NC", 12345)\njoe.length   #=> 3\n</code></pre>	http://ruby-doc.org/core/Struct.html#method-i-length
Struct#members	A			instance methods							<pre><code>members    → array</code></pre>Returns the struct members as an array of symbols:<pre><code>Customer = Struct.new(:name, :address, :zip)\njoe = Customer.new("Joe Smith", "123 Maple, Anytown NC", 12345)\njoe.members   #=> [:name, :address, :zip]\n</code></pre>	http://ruby-doc.org/core/Struct.html#method-i-members
Struct#select	A			instance methods							<pre><code>select {|i| block }    → array\nselect                 → an_enumerator</code></pre>Yields each member value from the struct to the block and returns an Array containing the member values from the struct for which the given block returns a true value (equivalent to Enumerable#select).<pre><code>Lots = Struct.new(:a, :b, :c, :d, :e, :f)\nl = Lots.new(11, 22, 33, 44, 55, 66)\nl.select {|v| (v % 2).zero? }   #=> [22, 44, 66]\n</code></pre>	http://ruby-doc.org/core/Struct.html#method-i-select
Struct#size	A			instance methods							<pre><code>size      → fixnum</code></pre>Returns the number of struct members.<pre><code>Customer = Struct.new(:name, :address, :zip)\njoe = Customer.new("Joe Smith", "123 Maple, Anytown NC", 12345)\njoe.length   #=> 3\n</code></pre>	http://ruby-doc.org/core/Struct.html#method-i-size
Struct#to_a	A			instance methods							<pre><code>to_a     → array</code></pre>Returns the values for this struct as an Array.<pre><code>Customer = Struct.new(:name, :address, :zip)\njoe = Customer.new("Joe Smith", "123 Maple, Anytown NC", 12345)\njoe.to_a[1]   #=> "123 Maple, Anytown NC"\n</code></pre>	http://ruby-doc.org/core/Struct.html#method-i-to_a
Struct#to_h	A			instance methods							<pre><code>to_h     → hash</code></pre>Returns a Hash containing the names and values for the struct’s members.<pre><code>Customer = Struct.new(:name, :address, :zip)\njoe = Customer.new("Joe Smith", "123 Maple, Anytown NC", 12345)\njoe.to_h[:address]   #=> "123 Maple, Anytown NC"\n</code></pre>	http://ruby-doc.org/core/Struct.html#method-i-to_h
Struct#to_s	A			instance methods								http://ruby-doc.org/core/Struct.html#method-i-to_s
Struct#values	A			instance methods							<pre><code>values   → array</code></pre>Returns the values for this struct as an Array.<pre><code>Customer = Struct.new(:name, :address, :zip)\njoe = Customer.new("Joe Smith", "123 Maple, Anytown NC", 12345)\njoe.to_a[1]   #=> "123 Maple, Anytown NC"\n</code></pre>	http://ruby-doc.org/core/Struct.html#method-i-values
Struct#values_at	A			instance methods							<pre><code>values_at(selector, ...)  → an_array</code></pre>Returns the struct member values for each selector as an Array. A selector may be either an Integer offset or a Range of offsets (as in Array#values_at).<pre><code>Customer = Struct.new(:name, :address, :zip)\njoe = Customer.new("Joe Smith", "123 Maple, Anytown NC", 12345)\njoe.values_at 0, 2 #=> ["Joe Smith", 12345]\n</code></pre>	http://ruby-doc.org/core/Struct.html#method-i-values_at
Random	A			classes							Random provides an interface to Ruby's pseudo-random number generator, or PRNG. The PRNG produces a deterministic sequence of bits which approximate true randomness. The sequence may be represented by integers, floats, or binary strings.<br>The generator may be initialized with either a system-generated or user-supplied seed value by using ::srand.<br>The class method #rand provides the base functionality of Kernel#rand along with better handling of floating point values. These are both interfaces to Random::DEFAULT, the Ruby system PRNG.<br>::new will create a new PRNG with a state independent of Random::DEFAULT, allowing multiple generators with different seed values or sequence positions to exist simultaneously. Random objects can be marshaled, allowing sequences to be saved and resumed.<br>PRNGs are currently implemented as a modified Mersenne Twister with a period of 2**19937-1.	http://ruby-doc.org/core/Random.html
Random::new	A			class methods							<pre><code>new(seed = Random.new_seed) → prng</code></pre>Creates a new PRNG using seed to set the initial state. If seed is omitted, the generator is initialized with ::new_seed.<br>See ::srand for more information on the use of seed values.	http://ruby-doc.org/core/Random.html#method-c-new
Random::new_seed	A			class methods							<pre><code>new_seed → integer</code></pre>Returns an arbitrary seed value. This is used by ::new when no seed value is specified as an argument.<pre><code>Random.new_seed  #=> 115032730400174366788466674494640623225\n</code></pre>	http://ruby-doc.org/core/Random.html#method-c-new_seed
Random::rand	A			class methods							<pre><code>rand → float\nrand(max) → number</code></pre>Alias of Random::DEFAULT.rand.	http://ruby-doc.org/core/Random.html#method-c-rand
Random::raw_seed	A			class methods							<pre><code>raw_seed(size) → string</code></pre>Returns a raw seed string, using platform providing features.<pre><code>Random.raw_seed(8)  #=> "\x78\x41\xBA\xAF\x7D\xEA\xD8\xEA"\n</code></pre>	http://ruby-doc.org/core/Random.html#method-c-raw_seed
Random::srand	A			class methods							<pre><code>srand(number = Random.new_seed) → old_seed</code></pre>Seeds the system pseudo-random number generator, Random::DEFAULT, with number. The previous seed value is returned.<br>If number is omitted, seeds the generator using a source of entropy provided by the operating system, if available (/dev/urandom on Unix systems or the RSA cryptographic provider on Windows), which is then combined with the time, the process id, and a sequence number.<br>srand may be used to ensure repeatable sequences of pseudo-random numbers between different runs of the program. By setting the seed to a known value, programs can be made deterministic during testing.<pre><code>srand 1234               # => 268519324636777531569100071560086917274\n[ rand, rand ]           # => [0.1915194503788923, 0.6221087710398319]\n[ rand(10), rand(1000) ] # => [4, 664]\nsrand 1234               # => 1234\n[ rand, rand ]           # => [0.1915194503788923, 0.6221087710398319]\n</code></pre>	http://ruby-doc.org/core/Random.html#method-c-srand
Random#==	A			instance methods							<pre><code>prng1 == prng2 → true or false</code></pre>Returns true if the two generators have the same internal state, otherwise false. Equivalent generators will return the same sequence of pseudo-random numbers. Two generators will generally have the same state only if they were initialized with the same seed<pre><code>Random.new == Random.new             # => false\nRandom.new(1234) == Random.new(1234) # => true\n</code></pre>and have the same invocation history.<pre><code>prng1 = Random.new(1234)\nprng2 = Random.new(1234)\nprng1 == prng2 # => true\n\nprng1.rand     # => 0.1915194503788923\nprng1 == prng2 # => false\n\nprng2.rand     # => 0.1915194503788923\nprng1 == prng2 # => true\n</code></pre>	http://ruby-doc.org/core/Random.html#method-i-3D-3D
Random#bytes	A			instance methods							<pre><code>bytes(size) → a_string</code></pre>Returns a random binary string containing size bytes.<pre><code>random_string = Random.new.bytes(10) # => "\xD7:R\xAB?\x83\xCE\xFAkO"\nrandom_string.size                   # => 10\n</code></pre>	http://ruby-doc.org/core/Random.html#method-i-bytes
Random#rand	A			instance methods							<pre><code>rand → float\nrand(max) → number</code></pre>When max is an Integer, rand returns a random integer greater than or equal to zero and less than max. Unlike Kernel#rand, when max is a negative integer or zero, rand raises an ArgumentError.<pre><code>prng = Random.new\nprng.rand(100)       # => 42\n</code></pre>When max is a Float, rand returns a random floating point number between 0.0 and max, including 0.0 and excluding max.<pre><code>prng.rand(1.5)       # => 1.4600282860034115\n</code></pre>When max is a Range, rand returns a random number where range.member?(number) == true.<pre><code>prng.rand(5..9)      # => one of [5, 6, 7, 8, 9]\nprng.rand(5...9)     # => one of [5, 6, 7, 8]\nprng.rand(5.0..9.0)  # => between 5.0 and 9.0, including 9.0\nprng.rand(5.0...9.0) # => between 5.0 and 9.0, excluding 9.0\n</code></pre>Both the beginning and ending values of the range must respond to subtract (-) and add (+)methods, or rand will raise an ArgumentError.	http://ruby-doc.org/core/Random.html#method-i-rand
Random#seed	A			instance methods							<pre><code>seed → integer</code></pre>Returns the seed value used to initialize the generator. This may be used to initialize another generator with the same state at a later time, causing it to produce the same sequence of numbers.<pre><code>prng1 = Random.new(1234)\nprng1.seed       #=> 1234\nprng1.rand(100)  #=> 47\n\nprng2 = Random.new(prng1.seed)\nprng2.rand(100)  #=> 47\n</code></pre>	http://ruby-doc.org/core/Random.html#method-i-seed
Range	A			classes							A Range represents an interval—a set of values with a beginning and an end. Ranges may be constructed using the s..e and s...e literals, or with ::new. Ranges constructed using .. run from the beginning to the end inclusively. Those created using ... exclude the end value. When used as an iterator, ranges return each value in the sequence.<pre><code>(-1..-5).to_a      #=> []\n(-5..-1).to_a      #=> [-5, -4, -3, -2, -1]\n('a'..'e').to_a    #=> ["a", "b", "c", "d", "e"]\n('a'...'e').to_a   #=> ["a", "b", "c", "d"]\n</code></pre>	http://ruby-doc.org/core/Range.html
Range::new	A			class methods							<pre><code>new(begin, end, exclude_end=false)    → rng</code></pre>Constructs a range using the given begin and end. If the exclude_end parameter is omitted or is false, the rng will include the end object; otherwise, it will be excluded.	http://ruby-doc.org/core/Range.html#method-c-new
Range#==	A			instance methods							<pre><code>rng == obj    → true or false</code></pre>Returns true only if obj is a Range, has equivalent begin and end items (by comparing them with ==), and has the same exclude_end? setting as the range.<pre><code>(0..2) == (0..2)            #=> true\n(0..2) == Range.new(0,2)    #=> true\n(0..2) == (0...2)           #=> false\n</code></pre>	http://ruby-doc.org/core/Range.html#method-i-3D-3D
Range#===	A			instance methods							<pre><code>rng === obj       →  true or false</code></pre>Returns true if obj is an element of the range, false otherwise. Conveniently, === is the comparison operator used by case statements.<pre><code>case 79\nwhen 1..50   then   print "low\n"\nwhen 51..75  then   print "medium\n"\nwhen 76..100 then   print "high\n"\nend\n</code></pre>produces:<pre><code>high\n</code></pre>	http://ruby-doc.org/core/Range.html#method-i-3D-3D-3D
Range#begin	A			instance methods							<pre><code>begin    → obj</code></pre>Returns the object that defines the beginning of the range.<pre><code>(1..10).begin   #=> 1\n</code></pre>	http://ruby-doc.org/core/Range.html#method-i-begin
Range#bsearch	A			instance methods							<pre><code>bsearch {|obj| block }  → value</code></pre>By using binary search, finds a value in range which meets the given condition in O(log n) where n is the size of the range.<br>You can use this method in two use cases: a find-minimum mode and a find-any mode. In either case, the elements of the range must be monotone (or sorted) with respect to the block.<br>In find-minimum mode (this is a good choice for typical use case), the block must return true or false, and there must be a value x so that:<br>the block returns false for any value which is less than x, and<br>the block returns true for any value which is greater than or equal to x.<br>If x is within the range, this method returns the value x. Otherwise, it returns nil.<pre><code>ary = [0, 4, 7, 10, 12]\n(0...ary.size).bsearch {|i| ary[i] >= 4 } #=> 1\n(0...ary.size).bsearch {|i| ary[i] >= 6 } #=> 2\n(0...ary.size).bsearch {|i| ary[i] >= 8 } #=> 3\n(0...ary.size).bsearch {|i| ary[i] >= 100 } #=> nil\n\n(0.0...Float::INFINITY).bsearch {|x| Math.log(x) >= 0 } #=> 1.0\n</code></pre>In find-any mode (this behaves like libc’s bsearch(3)), the block must return a number, and there must be two values x and y (x <= y) so that:<br>the block returns a positive number for v if v < x,<br>the block returns zero for v if x <= v < y, and<br>the block returns a negative number for v if y <= v.<br>This method returns any value which is within the intersection of the given range and x…y (if any). If there is no value that satisfies the condition, it returns nil.<pre><code>ary = [0, 100, 100, 100, 200]\n(0..4).bsearch {|i| 100 - ary[i] } #=> 1, 2 or 3\n(0..4).bsearch {|i| 300 - ary[i] } #=> nil\n(0..4).bsearch {|i|  50 - ary[i] } #=> nil\n</code></pre>You must not mix the two modes at a time; the block must always return either true/false, or always return a number. It is undefined which value is actually picked up at each iteration.	http://ruby-doc.org/core/Range.html#method-i-bsearch
Range#cover?	A			instance methods							<pre><code>cover?(obj)  →  true or false</code></pre>Returns true if obj is between the begin and end of the range.<br>This tests begin <= obj <= end when exclude_end? is false and begin <= obj < end when exclude_end? is true.<pre><code>("a".."z").cover?("c")    #=> true\n("a".."z").cover?("5")    #=> false\n("a".."z").cover?("cc")   #=> true\n</code></pre>	http://ruby-doc.org/core/Range.html#method-i-cover-3F
Range#each	A			instance methods							<pre><code>each {| i | block } → rng\neach                → an_enumerator</code></pre>Iterates over the elements of range, passing each in turn to the block.<br>The each method can only be used if the begin object of the range supports the succ method. A TypeError is raised if the object does not have succ method defined (like Float).<br>If no block is given, an enumerator is returned instead.<pre><code>(10..15).each {|n| print n, ' ' }\n# prints: 10 11 12 13 14 15\n\n(2.5..5).each {|n| print n, ' ' }\n# raises: TypeError: can't iterate from Float\n</code></pre>	http://ruby-doc.org/core/Range.html#method-i-each
Range#end	A			instance methods							<pre><code>end    → obj</code></pre>Returns the object that defines the end of the range.<pre><code>(1..10).end    #=> 10\n(1...10).end   #=> 10\n</code></pre>	http://ruby-doc.org/core/Range.html#method-i-end
Range#eql?	A			instance methods							<pre><code>eql?(obj)    → true or false</code></pre>Returns true only if obj is a Range, has equivalent begin and end items (by comparing them with eql?), and has the same exclude_end? setting as the range.<pre><code>(0..2).eql?(0..2)            #=> true\n(0..2).eql?(Range.new(0,2))  #=> true\n(0..2).eql?(0...2)           #=> false\n</code></pre>	http://ruby-doc.org/core/Range.html#method-i-eql-3F
Range#exclude_end?	A			instance methods							<pre><code>exclude_end?    → true or false</code></pre>Returns true if the range excludes its end value.<pre><code>(1..5).exclude_end?     #=> false\n(1...5).exclude_end?    #=> true\n</code></pre>	http://ruby-doc.org/core/Range.html#method-i-exclude_end-3F
Range#first	A			instance methods							<pre><code>first    → obj\nfirst(n) → an_array</code></pre>Returns the first object in the range, or an array of the first n elements.<pre><code>(10..20).first     #=> 10\n(10..20).first(3)  #=> [10, 11, 12]\n</code></pre>	http://ruby-doc.org/core/Range.html#method-i-first
Range#hash	A			instance methods							<pre><code>hash    → fixnum</code></pre>Compute a hash-code for this range. Two ranges with equal begin and end points (using eql?), and the same exclude_end? value will generate the same hash-code.<br>See also Object#hash.	http://ruby-doc.org/core/Range.html#method-i-hash
Range#include?	A			instance methods							<pre><code>include?(obj) →  true or false</code></pre>Returns true if obj is an element of the range, false otherwise. If begin and end are numeric, comparison is done according to the magnitude of the values.<pre><code>("a".."z").include?("g")   #=> true\n("a".."z").include?("A")   #=> false\n("a".."z").include?("cc")  #=> false\n</code></pre>	http://ruby-doc.org/core/Range.html#method-i-include-3F
Range#inspect	A			instance methods							<pre><code>inspect  → string</code></pre>Convert this range object to a printable form (using inspect to convert the begin and end objects).	http://ruby-doc.org/core/Range.html#method-i-inspect
Range#last	A			instance methods							<pre><code>last    → obj\nlast(n) → an_array</code></pre>Returns the last object in the range, or an array of the last n elements.<br>Note that with no arguments last will return the object that defines the end of the range even if exclude_end? is true.<pre><code>(10..20).last      #=> 20\n(10...20).last     #=> 20\n(10..20).last(3)   #=> [18, 19, 20]\n(10...20).last(3)  #=> [17, 18, 19]\n</code></pre>	http://ruby-doc.org/core/Range.html#method-i-last
Range#max	A			instance methods							<pre><code>max                       → obj\nmax {| a,b | block }      → obj\nmax(n)                    → obj\nmax(n) {| a,b | block }   → obj</code></pre>Returns the maximum value in the range. Returns nil if the begin value of the range larger than the end value.<br>Can be given an optional block to override the default comparison method a <=> b.<pre><code>(10..20).max    #=> 20\n</code></pre>	http://ruby-doc.org/core/Range.html#method-i-max
Range#member?	A			instance methods							<pre><code>member?(obj)  →  true or false</code></pre>Returns true if obj is an element of the range, false otherwise. If begin and end are numeric, comparison is done according to the magnitude of the values.<pre><code>("a".."z").include?("g")   #=> true\n("a".."z").include?("A")   #=> false\n("a".."z").include?("cc")  #=> false\n</code></pre>	http://ruby-doc.org/core/Range.html#method-i-member-3F
Range#min	A			instance methods							<pre><code>min                       → obj\nmin {| a,b | block }      → obj\nmin(n)                    → array\nmin(n) {| a,b | block }   → array</code></pre>Returns the minimum value in the range. Returns nil if the begin value of the range is larger than the end value.<br>Can be given an optional block to override the default comparison method a <=> b.<pre><code>(10..20).min    #=> 10\n</code></pre>	http://ruby-doc.org/core/Range.html#method-i-min
Range#size	A			instance methods							<pre><code>size                   → num</code></pre>Returns the number of elements in the range. Both the begin and the end of the Range must be Numeric, otherwise nil is returned.<pre><code>(10..20).size    #=> 11\n('a'..'z').size  #=> nil\n(-Float::INFINITY..Float::INFINITY).size #=> Infinity\n</code></pre>	http://ruby-doc.org/core/Range.html#method-i-size
Range#step	A			instance methods							<pre><code>step(n=1) {| obj | block }    → rng\nstep(n=1)                     → an_enumerator</code></pre>Iterates over the range, passing each nth element to the block. If begin and end are numeric, n is added for each iteration. Otherwise step invokes succ to iterate through range elements.<br>If no block is given, an enumerator is returned instead.<pre><code>range = Xs.new(1)..Xs.new(10)\nrange.step(2) {|x| puts x}\nputs\nrange.step(3) {|x| puts x}\n</code></pre>produces:<br>See Range for the definition of class Xs.	http://ruby-doc.org/core/Range.html#method-i-step
Range#to_s	A			instance methods							<pre><code>to_s   → string</code></pre>Convert this range object to a printable form (using to_s to convert the begin and end objects).	http://ruby-doc.org/core/Range.html#method-i-to_s
Rational	A			classes							A rational number can be represented as a paired integer number; a/b (b>0). Where a is numerator and b is denominator. Integer a equals rational a/1 mathematically.<br>In ruby, you can create rational object with Rational, #to_r, rationalize method or suffixing r to a literal. The return values will be irreducible.<br>You can also create rational object from floating-point numbers or strings.<pre><code>Rational(0.3)    #=> (5404319552844595/18014398509481984)\nRational('0.3')  #=> (3/10)\nRational('2/3')  #=> (2/3)\n\n0.3.to_r         #=> (5404319552844595/18014398509481984)\n'0.3'.to_r       #=> (3/10)\n'2/3'.to_r       #=> (2/3)\n0.3.rationalize  #=> (3/10)\n</code></pre>A rational object is an exact number, which helps you to write program without any rounding errors.<pre><code>10.times.inject(0){|t,| t + 0.1}              #=> 0.9999999999999999\n10.times.inject(0){|t,| t + Rational('0.1')}  #=> (1/1)\n</code></pre>However, when an expression has inexact factor (numerical value or operation), will produce an inexact result.<pre><code>Rational(10) / 3   #=> (10/3)\nRational(10) / 3.0 #=> 3.3333333333333335\n\nRational(-8) ** Rational(1, 3)\n                   #=> (1.0000000000000002+1.7320508075688772i)\n</code></pre>	http://ruby-doc.org/core/Rational.html
Rational#*	A			instance methods							<pre><code>rat * numeric  →  numeric</code></pre>Performs multiplication.<pre><code>Rational(2, 3)  * Rational(2, 3)   #=> (4/9)\nRational(900)   * Rational(1)      #=> (900/1)\nRational(-2, 9) * Rational(-9, 2)  #=> (1/1)\nRational(9, 8)  * 4                #=> (9/2)\nRational(20, 9) * 9.8              #=> 21.77777777777778\n</code></pre>	http://ruby-doc.org/core/Rational.html#method-i-2A
Rational#**	A			instance methods							<pre><code>rat ** numeric  →  numeric</code></pre>Performs exponentiation.<pre><code>Rational(2)    ** Rational(3)    #=> (8/1)\nRational(10)   ** -2             #=> (1/100)\nRational(10)   ** -2.0           #=> 0.01\nRational(-4)   ** Rational(1,2)  #=> (1.2246063538223773e-16+2.0i)\nRational(1, 2) ** 0              #=> (1/1)\nRational(1, 2) ** 0.0            #=> 1.0\n</code></pre>	http://ruby-doc.org/core/Rational.html#method-i-2A-2A
Rational#+	A			instance methods							<pre><code>rat + numeric  →  numeric</code></pre>Performs addition.<pre><code>Rational(2, 3)  + Rational(2, 3)   #=> (4/3)\nRational(900)   + Rational(1)      #=> (900/1)\nRational(-2, 9) + Rational(-9, 2)  #=> (-85/18)\nRational(9, 8)  + 4                #=> (41/8)\nRational(20, 9) + 9.8              #=> 12.022222222222222\n</code></pre>	http://ruby-doc.org/core/Rational.html#method-i-2B
Rational#-	A			instance methods							<pre><code>rat - numeric  →  numeric</code></pre>Performs subtraction.<pre><code>Rational(2, 3)  - Rational(2, 3)   #=> (0/1)\nRational(900)   - Rational(1)      #=> (899/1)\nRational(-2, 9) - Rational(-9, 2)  #=> (77/18)\nRational(9, 8)  - 4                #=> (23/8)\nRational(20, 9) - 9.8              #=> -7.577777777777778\n</code></pre>	http://ruby-doc.org/core/Rational.html#method-i-2D
Rational#/	A			instance methods							<pre><code>rat / numeric     →  numeric</code></pre>Performs division.<pre><code>Rational(2, 3)  / Rational(2, 3)   #=> (1/1)\nRational(900)   / Rational(1)      #=> (900/1)\nRational(-2, 9) / Rational(-9, 2)  #=> (4/81)\nRational(9, 8)  / 4                #=> (9/32)\nRational(20, 9) / 9.8              #=> 0.22675736961451246\n</code></pre>	http://ruby-doc.org/core/Rational.html#method-i-2F
Rational#<=>	A			instance methods							<pre><code>rational <=> numeric  →  -1, 0, +1 or nil</code></pre>Performs comparison and returns -1, 0, or +1.<br>nil is returned if the two values are incomparable.<pre><code>Rational(2, 3)  <=> Rational(2, 3)  #=> 0\nRational(5)     <=> 5               #=> 0\nRational(2,3)   <=> Rational(1,3)   #=> 1\nRational(1,3)   <=> 1               #=> -1\nRational(1,3)   <=> 0.3             #=> 1\n</code></pre>	http://ruby-doc.org/core/Rational.html#method-i-3C-3D-3E
Rational#==	A			instance methods							<pre><code>rat == object  →  true or false</code></pre>Returns true if rat equals object numerically.<pre><code>Rational(2, 3)  == Rational(2, 3)   #=> true\nRational(5)     == 5                #=> true\nRational(0)     == 0.0              #=> true\nRational('1/3') == 0.33             #=> false\nRational('1/2') == '1/2'            #=> false\n</code></pre>	http://ruby-doc.org/core/Rational.html#method-i-3D-3D
Rational#ceil	A			instance methods							<pre><code>ceil               →  integer\nceil(precision=0)  →  rational</code></pre>Returns the truncated value (toward positive infinity).	http://ruby-doc.org/core/Rational.html#method-i-ceil
Rational#denominator	A			instance methods							<pre><code>denominator  →  integer</code></pre>Returns the denominator (always positive).<pre><code>Rational(7).denominator             #=> 1\nRational(7, 1).denominator          #=> 1\nRational(9, -4).denominator         #=> 4\nRational(-2, -10).denominator       #=> 5\nrat.numerator.gcd(rat.denominator)  #=> 1\n</code></pre>	http://ruby-doc.org/core/Rational.html#method-i-denominator
Rational#fdiv	A			instance methods							<pre><code>fdiv(numeric)  →  float</code></pre>Performs division and returns the value as a float.<pre><code>Rational(2, 3).fdiv(1)       #=> 0.6666666666666666\nRational(2, 3).fdiv(0.5)     #=> 1.3333333333333333\nRational(2).fdiv(3)          #=> 0.6666666666666666\n</code></pre>	http://ruby-doc.org/core/Rational.html#method-i-fdiv
Rational#floor	A			instance methods							<pre><code>floor               →  integer\nfloor(precision=0)  →  rational</code></pre>Returns the truncated value (toward negative infinity).	http://ruby-doc.org/core/Rational.html#method-i-floor
Rational#inspect	A			instance methods							<pre><code>inspect  →  string</code></pre>Returns the value as a string for inspection.<pre><code>Rational(2).inspect      #=> "(2/1)"\nRational(-8, 6).inspect  #=> "(-4/3)"\nRational('1/2').inspect  #=> "(1/2)"\n</code></pre>	http://ruby-doc.org/core/Rational.html#method-i-inspect
Rational#numerator	A			instance methods							<pre><code>numerator  →  integer</code></pre>Returns the numerator.<pre><code>Rational(7).numerator        #=> 7\nRational(7, 1).numerator     #=> 7\nRational(9, -4).numerator    #=> -9\nRational(-2, -10).numerator  #=> 1\n</code></pre>	http://ruby-doc.org/core/Rational.html#method-i-numerator
Rational#quo	A			instance methods							<pre><code>quo(numeric)  →  numeric</code></pre>Performs division.<pre><code>Rational(2, 3)  / Rational(2, 3)   #=> (1/1)\nRational(900)   / Rational(1)      #=> (900/1)\nRational(-2, 9) / Rational(-9, 2)  #=> (4/81)\nRational(9, 8)  / 4                #=> (9/32)\nRational(20, 9) / 9.8              #=> 0.22675736961451246\n</code></pre>	http://ruby-doc.org/core/Rational.html#method-i-quo
Rational#rationalize	A			instance methods							<pre><code>rationalize       →  self\nrationalize(eps)  →  rational</code></pre>Returns a simpler approximation of the value if the optional argument eps is given (rat-|eps| <= result <= rat+|eps|), self otherwise.<pre><code>r = Rational(5033165, 16777216)\nr.rationalize                    #=> (5033165/16777216)\nr.rationalize(Rational('0.01'))  #=> (3/10)\nr.rationalize(Rational('0.1'))   #=> (1/3)\n</code></pre>	http://ruby-doc.org/core/Rational.html#method-i-rationalize
Rational#round	A			instance methods							<pre><code>round               →  integer\nround(precision=0)  →  rational</code></pre>Returns the truncated value (toward the nearest integer; 0.5 => 1; -0.5 => -1).	http://ruby-doc.org/core/Rational.html#method-i-round
Rational#to_f	A			instance methods							<pre><code>to_f  →  float</code></pre>Return the value as a float.<pre><code>Rational(2).to_f      #=> 2.0\nRational(9, 4).to_f   #=> 2.25\nRational(-3, 4).to_f  #=> -0.75\nRational(20, 3).to_f  #=> 6.666666666666667\n</code></pre>	http://ruby-doc.org/core/Rational.html#method-i-to_f
Rational#to_i	A			instance methods							<pre><code>to_i  →  integer</code></pre>Returns the truncated value as an integer.<br>Equivalent to<pre><code>rat.truncate.\n\nRational(2, 3).to_i   #=> 0\nRational(3).to_i      #=> 3\nRational(300.6).to_i  #=> 300\nRational(98,71).to_i  #=> 1\nRational(-30,2).to_i  #=> -15\n</code></pre>	http://ruby-doc.org/core/Rational.html#method-i-to_i
Rational#to_r	A			instance methods							<pre><code>to_r  →  self</code></pre>Returns self.<pre><code>Rational(2).to_r      #=> (2/1)\nRational(-8, 6).to_r  #=> (-4/3)\n</code></pre>	http://ruby-doc.org/core/Rational.html#method-i-to_r
Rational#to_s	A			instance methods							<pre><code>to_s  →  string</code></pre>Returns the value as a string.<pre><code>Rational(2).to_s      #=> "2/1"\nRational(-8, 6).to_s  #=> "-4/3"\nRational('1/2').to_s  #=> "1/2"\n</code></pre>	http://ruby-doc.org/core/Rational.html#method-i-to_s
Rational#truncate	A			instance methods							<pre><code>truncate               →  integer\ntruncate(precision=0)  →  rational</code></pre>Returns the truncated value (toward zero).	http://ruby-doc.org/core/Rational.html#method-i-truncate
RegexpError	A			classes							Raised when given an invalid regexp expression.<pre><code>Regexp.new("?")\n</code></pre>raises the exception:	http://ruby-doc.org/core/RegexpError.html
Regexp	A			classes							A Regexp holds a regular expression, used to match a pattern against strings. Regexps are created using the /.../ and %r{...} literals, and by the Regexp::new constructor.<br>Regular expressions (regexps) are patterns which describe the contents of a string. They’re used for testing whether a string contains a given pattern, or extracting the portions that match. They are created with the /pat/ and %r{pat} literals or the Regexp.new constructor.<br>A regexp is usually delimited with forward slashes (/). For example:<pre><code>/hay/ =~ 'haystack'   #=> 0\n/y/.match('haystack') #=> #<MatchData "y">\n</code></pre>If a string contains the pattern it is said to match. A literal string matches itself.<br>Here ‘haystack’ does not contain the pattern ‘needle’, so it doesn’t match:<pre><code>/needle/.match('haystack') #=> nil\n</code></pre>Here ‘haystack’ contains the pattern ‘hay’, so it matches:<pre><code>/hay/.match('haystack')    #=> #<MatchData "hay">\n</code></pre>Specifically, /st/ requires that the string contains the letter s followed by the letter t, so it matches haystack, also.	http://ruby-doc.org/core/Regexp.html
Regexp::compile	A			class methods							Alias for Regexp.new	http://ruby-doc.org/core/Regexp.html#method-c-compile
Regexp::escape	A			class methods							<pre><code>escape(str)   → string</code></pre>Escapes any characters that would have special meaning in a regular expression. Returns a new escaped string, or self if no characters are escaped. For any string, Regexp.new(Regexp.escape(str))=~str will be true.<pre><code>Regexp.escape('\*?{}.')   #=> \\\*\?\{\}\.\n</code></pre>	http://ruby-doc.org/core/Regexp.html#method-c-escape
Regexp::last_match	A			class methods							<pre><code>last_match           → matchdata\nlast_match(n)        → str</code></pre>The first form returns the MatchData object generated by the last successful pattern match. Equivalent to reading the special global variable $~ (see Special global variables in Regexp for details).<br>The second form returns the nth field in this MatchData object. n can be a string or symbol to reference a named capture.<br>Note that the ::last_match is local to the thread and method scope of the method that did the pattern match.<pre><code>/c(.)t/ =~ 'cat'        #=> 0\nRegexp.last_match       #=> #<MatchData "cat" 1:"a">\nRegexp.last_match(0)    #=> "cat"\nRegexp.last_match(1)    #=> "a"\nRegexp.last_match(2)    #=> nil\n\n/(?<lhs>\w+)\s*=\s*(?<rhs>\w+)/ =~ "var = val"\nRegexp.last_match       #=> #<MatchData "var = val" lhs:"var" rhs:"val">\nRegexp.last_match(:lhs) #=> "var"\nRegexp.last_match(:rhs) #=> "val"\n</code></pre>	http://ruby-doc.org/core/Regexp.html#method-c-last_match
Regexp::new	A			class methods							<pre><code>new(string, [options])       → regexp\nnew(regexp)                  → regexp\ncompile(string, [options)    → regexp\ncompile(regexp)              → regexp</code></pre>Constructs a new regular expression from pattern, which can be either a String or a Regexp (in which case that regexp’s options are propagated), and new options may not be specified (a change as of Ruby 1.8).<br>If options is a Fixnum, it should be one or more of the constants Regexp::EXTENDED, Regexp::IGNORECASE, and Regexp::MULTILINE, or-ed together. Otherwise, if options is not nil or false, the regexp will be case insensitive.<pre><code>r1 = Regexp.new('^a-z+:\s+\w+') #=> /^a-z+:\s+\w+/\nr2 = Regexp.new('cat', true)     #=> /cat/i\nr3 = Regexp.new(r2)              #=> /cat/i\nr4 = Regexp.new('dog', Regexp::EXTENDED | Regexp::IGNORECASE) #=> /dog/ix\n</code></pre>	http://ruby-doc.org/core/Regexp.html#method-c-new
Regexp::quote	A			class methods							<pre><code>quote(str)    → string</code></pre>Escapes any characters that would have special meaning in a regular expression. Returns a new escaped string, or self if no characters are escaped. For any string, Regexp.new(Regexp.escape(str))=~str will be true.<pre><code>Regexp.escape('\*?{}.')   #=> \\\*\?\{\}\.\n</code></pre>	http://ruby-doc.org/core/Regexp.html#method-c-quote
Regexp::try_convert	A			class methods							<pre><code>try_convert(obj) → re or nil</code></pre>Try to convert obj into a Regexp, using to_regexp method. Returns converted regexp or nil if obj cannot be converted for any reason.<pre><code>Regexp.try_convert(/re/)         #=> /re/\nRegexp.try_convert("re")         #=> nil\n\no = Object.new\nRegexp.try_convert(o)            #=> nil\ndef o.to_regexp() /foo/ end\nRegexp.try_convert(o)            #=> /foo/\n</code></pre>	http://ruby-doc.org/core/Regexp.html#method-c-try_convert
Regexp::union	A			class methods							<pre><code>union(pat1, pat2, ...)            → new_regexp\nunion(pats_ary)                   → new_regexp</code></pre>Return a Regexp object that is the union of the given patterns, i.e., will match any of its parts. The patterns can be Regexp objects, in which case their options will be preserved, or Strings. If no patterns are given, returns /(?!)/. The behavior is unspecified if any given pattern contains capture.<pre><code>Regexp.union                         #=> /(?!)/\nRegexp.union("penzance")             #=> /penzance/\nRegexp.union("a+b*c")                #=> /a\+b\*c/\nRegexp.union("skiing", "sledding")   #=> /skiing|sledding/\nRegexp.union(["skiing", "sledding"]) #=> /skiing|sledding/\nRegexp.union(/dogs/, /cats/i)        #=> /(?-mix:dogs)|(?i-mx:cats)/\n</code></pre>Note: the arguments for ::union will try to be converted into a regular expression literal via to_regexp.	http://ruby-doc.org/core/Regexp.html#method-c-union
Regexp#==	A			instance methods							<pre><code>rxp == other_rxp      → true or false</code></pre>Equality—Two regexps are equal if their patterns are identical, they have the same character set code, and their casefold? values are the same.<pre><code>/abc/  == /abc/x   #=> false\n/abc/  == /abc/i   #=> false\n/abc/  == /abc/u   #=> false\n/abc/u == /abc/n   #=> false\n</code></pre>	http://ruby-doc.org/core/Regexp.html#method-i-3D-3D
Regexp#===	A			instance methods							<pre><code>rxp === str   → true or false</code></pre>Case Equality—Used in case statements.<pre><code>a = "HELLO"\ncase a\nwhen /^[a-z]*$/; print "Lower case\n"\nwhen /^[A-Z]*$/; print "Upper case\n"\nelse;            print "Mixed case\n"\nend\n#=> "Upper case"\n</code></pre>Following a regular expression literal with the === operator allows you to compare against a String.<pre><code>/^[a-z]*$/ === "HELLO" #=> false\n/^[A-Z]*$/ === "HELLO" #=> true\n</code></pre>	http://ruby-doc.org/core/Regexp.html#method-i-3D-3D-3D
Regexp#=~	A			instance methods							<pre><code>rxp =~ str    → integer or nil</code></pre>Match—Matches rxp against str.<pre><code>/at/ =~ "input data"   #=> 7\n/ax/ =~ "input data"   #=> nil\n</code></pre>If =~ is used with a regexp literal with named captures, captured strings (or nil) is assigned to local variables named by the capture names.<pre><code>/(?<lhs>\w+)\s*=\s*(?<rhs>\w+)/ =~ "  x = y  "\np lhs    #=> "x"\np rhs    #=> "y"\n</code></pre>If it is not matched, nil is assigned for the variables.<pre><code>/(?<lhs>\w+)\s*=\s*(?<rhs>\w+)/ =~ "  x = "\np lhs    #=> nil\np rhs    #=> nil\n</code></pre>This assignment is implemented in the Ruby parser. The parser detects ‘regexp-literal =~ expression’ for the assignment. The regexp must be a literal without interpolation and placed at left hand side.<br>The assignment does not occur if the regexp is not a literal.<pre><code>re = /(?<lhs>\w+)\s*=\s*(?<rhs>\w+)/\nre =~ "  x = y  "\np lhs    # undefined local variable\np rhs    # undefined local variable\n</code></pre>A regexp interpolation, #{}, also disables the assignment.<pre><code>rhs_pat = /(?<rhs>\w+)/\n/(?<lhs>\w+)\s*=\s*#{rhs_pat}/ =~ "x = y"\np lhs    # undefined local variable\n</code></pre>The assignment does not occur if the regexp is placed at the right hand side.<pre><code>"  x = y  " =~ /(?<lhs>\w+)\s*=\s*(?<rhs>\w+)/\np lhs, rhs # undefined local variable\n</code></pre>	http://ruby-doc.org/core/Regexp.html#method-i-3D-7E
Regexp#casefold?	A			instance methods							<pre><code>casefold?   → true or false</code></pre>Returns the value of the case-insensitive flag.<pre><code>/a/.casefold?           #=> false\n/a/i.casefold?          #=> true\n/(?i:a)/.casefold?      #=> false\n</code></pre>	http://ruby-doc.org/core/Regexp.html#method-i-casefold-3F
Regexp#encoding	A			instance methods							<pre><code>encoding   → encoding</code></pre>Returns the Encoding object that represents the encoding of obj.	http://ruby-doc.org/core/Regexp.html#method-i-encoding
Regexp#eql?	A			instance methods							<pre><code>eql?(other_rxp)   → true or false</code></pre>Equality—Two regexps are equal if their patterns are identical, they have the same character set code, and their casefold? values are the same.<pre><code>/abc/  == /abc/x   #=> false\n/abc/  == /abc/i   #=> false\n/abc/  == /abc/u   #=> false\n/abc/u == /abc/n   #=> false\n</code></pre>	http://ruby-doc.org/core/Regexp.html#method-i-eql-3F
Regexp#fixed_encoding?	A			instance methods							<pre><code>fixed_encoding?   → true or false</code></pre>Returns false if rxp is applicable to a string with any ASCII compatible encoding. Returns true otherwise.<pre><code>r = /a/\nr.fixed_encoding?                               #=> false\nr =~ "\u{6666} a"                               #=> 2\nr =~ "\xa1\xa2 a".force_encoding("euc-jp")      #=> 2\nr =~ "abc".force_encoding("euc-jp")             #=> 0\n\nr = /a/u\nr.fixed_encoding?                               #=> true\nr.encoding                                      #=> #<Encoding:UTF-8>\nr =~ "\u{6666} a"                               #=> 2\nr =~ "\xa1\xa2".force_encoding("euc-jp")        #=> ArgumentError\nr =~ "abc".force_encoding("euc-jp")             #=> 0\n\nr = /\u{6666}/\nr.fixed_encoding?                               #=> true\nr.encoding                                      #=> #<Encoding:UTF-8>\nr =~ "\u{6666} a"                               #=> 0\nr =~ "\xa1\xa2".force_encoding("euc-jp")        #=> ArgumentError\nr =~ "abc".force_encoding("euc-jp")             #=> nil\n</code></pre>	http://ruby-doc.org/core/Regexp.html#method-i-fixed_encoding-3F
Regexp#hash	A			instance methods							<pre><code>hash   → fixnum</code></pre>Produce a hash based on the text and options of this regular expression.<br>See also Object#hash.	http://ruby-doc.org/core/Regexp.html#method-i-hash
Regexp#inspect	A			instance methods							<pre><code>inspect   → string</code></pre>Produce a nicely formatted string-version of rxp. Perhaps surprisingly, #inspect actually produces the more natural version of the string than #to_s.<pre><code>/ab+c/ix.inspect        #=> "/ab+c/ix"\n</code></pre>	http://ruby-doc.org/core/Regexp.html#method-i-inspect
Regexp#match	A			instance methods							<pre><code>match(str)       → matchdata or nil\nmatch(str,pos)   → matchdata or nil</code></pre>Returns a MatchData object describing the match, or nil if there was no match. This is equivalent to retrieving the value of the special variable $~ following a normal match. If the second parameter is present, it specifies the position in the string to begin the search.<pre><code>/(.)(.)(.)/.match("abc")[2]   #=> "b"\n/(.)(.)/.match("abc", 1)[2]   #=> "c"\n</code></pre>If a block is given, invoke the block with MatchData if match succeed, so that you can write<pre><code>/M(.*)/.match("Matz") do |m|\n  puts m[0]\n  puts m[1]\nend\n</code></pre>instead of<pre><code>if m = /M(.*)/.match("Matz")\n  puts m[0]\n  puts m[1]\nend\n</code></pre>The return value is a value from block execution in this case.	http://ruby-doc.org/core/Regexp.html#method-i-match
Regexp#named_captures	A			instance methods							<pre><code>named_captures  → hash</code></pre>Returns a hash representing information about named captures of rxp.<br>A key of the hash is a name of the named captures. A value of the hash is an array which is list of indexes of corresponding named captures.<pre><code>/(?<foo>.)(?<bar>.)/.named_captures\n#=> {"foo"=>[1], "bar"=>[2]}\n\n/(?<foo>.)(?<foo>.)/.named_captures\n#=> {"foo"=>[1, 2]}\n</code></pre>If there are no named captures, an empty hash is returned.<pre><code>/(.)(.)/.named_captures\n#=> {}\n</code></pre>	http://ruby-doc.org/core/Regexp.html#method-i-named_captures
Regexp#names	A			instance methods							<pre><code>names   → [name1, name2, ...]</code></pre>Returns a list of names of captures as an array of strings.<pre><code>/(?<foo>.)(?<bar>.)(?<baz>.)/.names\n#=> ["foo", "bar", "baz"]\n\n/(?<foo>.)(?<foo>.)/.names\n#=> ["foo"]\n\n/(.)(.)/.names\n#=> []\n</code></pre>	http://ruby-doc.org/core/Regexp.html#method-i-names
Regexp#options	A			instance methods							<pre><code>options   → fixnum</code></pre>Returns the set of bits corresponding to the options used when creating this Regexp (see Regexp::new for details. Note that additional bits may be set in the returned options: these are used internally by the regular expression code. These extra bits are ignored if the options are passed to Regexp::new.<pre><code>Regexp::IGNORECASE                  #=> 1\nRegexp::EXTENDED                    #=> 2\nRegexp::MULTILINE                   #=> 4\n\n/cat/.options                       #=> 0\n/cat/ix.options                     #=> 3\nRegexp.new('cat', true).options     #=> 1\n/\xa1\xa2/e.options                 #=> 16\n\nr = /cat/ix\nRegexp.new(r.source, r.options)     #=> /cat/ix\n</code></pre>	http://ruby-doc.org/core/Regexp.html#method-i-options
Regexp#source	A			instance methods							<pre><code>source   → str</code></pre>Returns the original string of the pattern.<pre><code>/ab+c/ix.source #=> "ab+c"\n</code></pre>Note that escape sequences are retained as is.<pre><code>/\x20\+/.source  #=> "\\x20\\+"\n</code></pre>	http://ruby-doc.org/core/Regexp.html#method-i-source
Regexp#to_s	A			instance methods							<pre><code>to_s   → str</code></pre>Returns a string containing the regular expression and its options (using the (?opts:source) notation. This string can be fed back in to Regexp::new to a regular expression with the same semantics as the original. (However, Regexp#== may not return true when comparing the two, as the source of the regular expression itself may differ, as the example shows). Regexp#inspect produces a generally more readable version of rxp.<pre><code>r1 = /ab+c/ix           #=> /ab+c/ix\ns1 = r1.to_s            #=> "(?ix-m:ab+c)"\nr2 = Regexp.new(s1)     #=> /(?ix-m:ab+c)/\nr1 == r2                #=> false\nr1.source               #=> "ab+c"\nr2.source               #=> "(?ix-m:ab+c)"\n</code></pre>	http://ruby-doc.org/core/Regexp.html#method-i-to_s
Regexp#~	A			instance methods							<pre><code>~ rxp   → integer or nil</code></pre>Match—Matches rxp against the contents of $_. Equivalent to rxp =~ $_.<pre><code>$_ = "input data"\n~ /at/   #=> 7\n</code></pre>	http://ruby-doc.org/core/Regexp.html#method-i-7E
MatchData	A			classes							MatchData is the type of the special variable $~, and is the type of the object returned by Regexp#match and Regexp.last_match. It encapsulates all the results of a pattern match, results normally accessed through the special variables $&, $', $`, $1, $2, and so on.	http://ruby-doc.org/core/MatchData.html
MatchData#==	A			instance methods							<pre><code>mtch == mtch2   → true or false</code></pre>Equality—Two matchdata are equal if their target strings, patterns, and matched positions are identical.	http://ruby-doc.org/core/MatchData.html#method-i-3D-3D
MatchData#[]	A			instance methods							<pre><code>mtch[i]               → str or nil\nmtch[start, length]   → array\nmtch[range]           → array\nmtch[name]            → str or nil</code></pre>Match Reference – MatchData acts as an array, and may be accessed using the normal array indexing techniques. mtch[0] is equivalent to the special variable $&, and returns the entire matched string. mtch[1], mtch[2], and so on return the values of the matched backreferences (portions of the pattern between parentheses).<pre><code>m = /(.)(.)(\d+)(\d)/.match("THX1138.")\nm          #=> #<MatchData "HX1138" 1:"H" 2:"X" 3:"113" 4:"8">\nm[0]       #=> "HX1138"\nm[1, 2]    #=> ["H", "X"]\nm[1..3]    #=> ["H", "X", "113"]\nm[-3, 2]   #=> ["X", "113"]\n\nm = /(?<foo>a+)b/.match("ccaaab")\nm          #=> #<MatchData "aaab" foo:"aaa">\nm["foo"]   #=> "aaa"\nm[:foo]    #=> "aaa"\n</code></pre>	http://ruby-doc.org/core/MatchData.html#method-i-5B-5D
MatchData#begin	A			instance methods							<pre><code>begin(n)   → integer</code></pre>Returns the offset of the start of the nth element of the match array in the string. n can be a string or symbol to reference a named capture.<pre><code>m = /(.)(.)(\d+)(\d)/.match("THX1138.")\nm.begin(0)       #=> 1\nm.begin(2)       #=> 2\n\nm = /(?<foo>.)(.)(?<bar>.)/.match("hoge")\np m.begin(:foo)  #=> 0\np m.begin(:bar)  #=> 2\n</code></pre>	http://ruby-doc.org/core/MatchData.html#method-i-begin
MatchData#captures	A			instance methods							<pre><code>captures   → array</code></pre>Returns the array of captures; equivalent to mtch.to_a[1..-1].<pre><code>f1,f2,f3,f4 = /(.)(.)(\d+)(\d)/.match("THX1138.").captures\nf1    #=> "H"\nf2    #=> "X"\nf3    #=> "113"\nf4    #=> "8"\n</code></pre>	http://ruby-doc.org/core/MatchData.html#method-i-captures
MatchData#end	A			instance methods							<pre><code>end(n)   → integer</code></pre>Returns the offset of the character immediately following the end of the nth element of the match array in the string. n can be a string or symbol to reference a named capture.<pre><code>m = /(.)(.)(\d+)(\d)/.match("THX1138.")\nm.end(0)         #=> 7\nm.end(2)         #=> 3\n\nm = /(?<foo>.)(.)(?<bar>.)/.match("hoge")\np m.end(:foo)    #=> 1\np m.end(:bar)    #=> 3\n</code></pre>	http://ruby-doc.org/core/MatchData.html#method-i-end
MatchData#eql?	A			instance methods							<pre><code>eql?(mtch2)   → true or false</code></pre>Equality—Two matchdata are equal if their target strings, patterns, and matched positions are identical.	http://ruby-doc.org/core/MatchData.html#method-i-eql-3F
MatchData#hash	A			instance methods							<pre><code>hash   → integer</code></pre>Produce a hash based on the target string, regexp and matched positions of this matchdata.<br>See also Object#hash.	http://ruby-doc.org/core/MatchData.html#method-i-hash
MatchData#inspect	A			instance methods							<pre><code>inspect   → str</code></pre>Returns a printable version of mtch.<pre><code>puts /.$/.match("foo").inspect\n#=> #<MatchData "o">\n\nputs /(.)(.)(.)/.match("foo").inspect\n#=> #<MatchData "foo" 1:"f" 2:"o" 3:"o">\n\nputs /(.)(.)?(.)/.match("fo").inspect\n#=> #<MatchData "fo" 1:"f" 2:nil 3:"o">\n\nputs /(?<foo>.)(?<bar>.)(?<baz>.)/.match("hoge").inspect\n#=> #<MatchData "hog" foo:"h" bar:"o" baz:"g">\n</code></pre>	http://ruby-doc.org/core/MatchData.html#method-i-inspect
MatchData#length	A			instance methods							<pre><code>length   → integer</code></pre>Returns the number of elements in the match array.<pre><code>m = /(.)(.)(\d+)(\d)/.match("THX1138.")\nm.length   #=> 5\nm.size     #=> 5\n</code></pre>	http://ruby-doc.org/core/MatchData.html#method-i-length
MatchData#names	A			instance methods							<pre><code>names   → [name1, name2, ...]</code></pre>Returns a list of names of captures as an array of strings. It is same as mtch.regexp.names.<pre><code>/(?<foo>.)(?<bar>.)(?<baz>.)/.match("hoge").names\n#=> ["foo", "bar", "baz"]\n\nm = /(?<x>.)(?<y>.)?/.match("a") #=> #<MatchData "a" x:"a" y:nil>\nm.names                          #=> ["x", "y"]\n</code></pre>	http://ruby-doc.org/core/MatchData.html#method-i-names
MatchData#offset	A			instance methods							<pre><code>offset(n)   → array</code></pre>Returns a two-element array containing the beginning and ending offsets of the nth match. n can be a string or symbol to reference a named capture.<pre><code>m = /(.)(.)(\d+)(\d)/.match("THX1138.")\nm.offset(0)      #=> [1, 7]\nm.offset(4)      #=> [6, 7]\n\nm = /(?<foo>.)(.)(?<bar>.)/.match("hoge")\np m.offset(:foo) #=> [0, 1]\np m.offset(:bar) #=> [2, 3]\n</code></pre>	http://ruby-doc.org/core/MatchData.html#method-i-offset
MatchData#post_match	A			instance methods							<pre><code>post_match   → str</code></pre>Returns the portion of the original string after the current match. Equivalent to the special variable $'.<pre><code>m = /(.)(.)(\d+)(\d)/.match("THX1138: The Movie")\nm.post_match   #=> ": The Movie"\n</code></pre>	http://ruby-doc.org/core/MatchData.html#method-i-post_match
MatchData#pre_match	A			instance methods							<pre><code>pre_match   → str</code></pre>Returns the portion of the original string before the current match. Equivalent to the special variable $`.<pre><code>m = /(.)(.)(\d+)(\d)/.match("THX1138.")\nm.pre_match   #=> "T"\n</code></pre>	http://ruby-doc.org/core/MatchData.html#method-i-pre_match
MatchData#regexp	A			instance methods							<pre><code>regexp   → regexp</code></pre>Returns the regexp.<pre><code>m = /a.*b/.match("abc")\nm.regexp #=> /a.*b/\n</code></pre>	http://ruby-doc.org/core/MatchData.html#method-i-regexp
MatchData#size	A			instance methods							<pre><code>size     → integer</code></pre>Returns the number of elements in the match array.<pre><code>m = /(.)(.)(\d+)(\d)/.match("THX1138.")\nm.length   #=> 5\nm.size     #=> 5\n</code></pre>	http://ruby-doc.org/core/MatchData.html#method-i-size
MatchData#string	A			instance methods							<pre><code>string   → str</code></pre>Returns a frozen copy of the string passed in to match.<pre><code>m = /(.)(.)(\d+)(\d)/.match("THX1138.")\nm.string   #=> "THX1138."\n</code></pre>	http://ruby-doc.org/core/MatchData.html#method-i-string
MatchData#to_a	A			instance methods							<pre><code>to_a   → anArray</code></pre>Returns the array of matches.<pre><code>m = /(.)(.)(\d+)(\d)/.match("THX1138.")\nm.to_a   #=> ["HX1138", "H", "X", "113", "8"]\n</code></pre>Because to_a is called when expanding *variable, there’s a useful assignment shortcut for extracting matched fields. This is slightly slower than accessing the fields directly (as an intermediate array is generated).<pre><code>all,f1,f2,f3 = * /(.)(.)(\d+)(\d)/.match("THX1138.")\nall   #=> "HX1138"\nf1    #=> "H"\nf2    #=> "X"\nf3    #=> "113"\n</code></pre>	http://ruby-doc.org/core/MatchData.html#method-i-to_a
MatchData#to_s	A			instance methods							<pre><code>to_s   → str</code></pre>Returns the entire matched string.<pre><code>m = /(.)(.)(\d+)(\d)/.match("THX1138.")\nm.to_s   #=> "HX1138"\n</code></pre>	http://ruby-doc.org/core/MatchData.html#method-i-to_s
MatchData#values_at	A			instance methods							<pre><code>values_at([index]*)   → array</code></pre>Uses each index to access the matching values, returning an array of the corresponding matches.<pre><code>m = /(.)(.)(\d+)(\d)/.match("THX1138: The Movie")\nm.to_a               #=> ["HX1138", "H", "X", "113", "8"]\nm.values_at(0, 2, -2)   #=> ["HX1138", "X", "113"]\n</code></pre>	http://ruby-doc.org/core/MatchData.html#method-i-values_at
Symbol	A			classes							Symbol objects represent names and some strings inside the Ruby interpreter. They are generated using the :name and :"string" literals syntax, and by the various to_sym methods. The same Symbol object will be created for a given name or string for the duration of a program's execution, regardless of the context or meaning of that name. Thus if Fred is a constant in one context, a method in another, and a class in a third, the Symbol :Fred will be the same object in all three contexts.<pre><code>module One\n  class Fred\n  end\n  $f1 = :Fred\nend\nmodule Two\n  Fred = 1\n  $f2 = :Fred\nend\ndef Fred()\nend\n$f3 = :Fred\n$f1.object_id   #=> 2514190\n$f2.object_id   #=> 2514190\n$f3.object_id   #=> 2514190\n</code></pre>	http://ruby-doc.org/core/Symbol.html
Symbol::all_symbols	A			class methods							<pre><code>all_symbols    => array</code></pre>Returns an array of all the symbols currently in Ruby's symbol table.	http://ruby-doc.org/core/Symbol.html#method-c-all_symbols
Symbol#<=>	A			instance methods							<pre><code>symbol <=> other_symbol       → -1, 0, +1 or nil</code></pre>Compares symbol with other_symbol after calling to_s on each of the symbols. Returns -1, 0, +1 or nil depending on whether symbol is less than, equal to, or greater than other_symbol.<br>See String#<=> for more information.	http://ruby-doc.org/core/Symbol.html#method-i-3C-3D-3E
Symbol#==	A			instance methods							<pre><code>sym == obj   → true or false</code></pre>Equality—If sym and obj are exactly the same symbol, returns true.	http://ruby-doc.org/core/Symbol.html#method-i-3D-3D
Symbol#===	A			instance methods							<pre><code>sym == obj   → true or false</code></pre>Equality—If sym and obj are exactly the same symbol, returns true.	http://ruby-doc.org/core/Symbol.html#method-i-3D-3D-3D
Symbol#=~	A			instance methods							<pre><code>sym =~ obj   → fixnum or nil</code></pre>Returns sym.to_s =~ obj.	http://ruby-doc.org/core/Symbol.html#method-i-3D-7E
Symbol#[]	A			instance methods							<pre><code>sym[idx]      → char\nsym[b, n]     → string</code></pre>Returns sym.to_s[].	http://ruby-doc.org/core/Symbol.html#method-i-5B-5D
Symbol#capitalize	A			instance methods							<pre><code>capitalize  → symbol</code></pre>Same as sym.to_s.capitalize.intern.	http://ruby-doc.org/core/Symbol.html#method-i-capitalize
Symbol#casecmp	A			instance methods							<pre><code>casecmp(other)  → -1, 0, +1 or nil</code></pre>Case-insensitive version of Symbol#<=>.	http://ruby-doc.org/core/Symbol.html#method-i-casecmp
Symbol#downcase	A			instance methods							<pre><code>downcase  → symbol</code></pre>Same as sym.to_s.downcase.intern.	http://ruby-doc.org/core/Symbol.html#method-i-downcase
Symbol#empty?	A			instance methods							<pre><code>empty?   → true or false</code></pre>Returns that sym is :“” or not.	http://ruby-doc.org/core/Symbol.html#method-i-empty-3F
Symbol#encoding	A			instance methods							<pre><code>encoding   → encoding</code></pre>Returns the Encoding object that represents the encoding of sym.	http://ruby-doc.org/core/Symbol.html#method-i-encoding
Symbol#id2name	A			instance methods							<pre><code>id2name   → string</code></pre>Returns the name or string corresponding to sym.<pre><code>:fred.id2name   #=> "fred"\n</code></pre>	http://ruby-doc.org/core/Symbol.html#method-i-id2name
Symbol#inspect	A			instance methods							<pre><code>inspect    → string</code></pre>Returns the representation of sym as a symbol literal.<pre><code>:fred.inspect   #=> ":fred"\n</code></pre>	http://ruby-doc.org/core/Symbol.html#method-i-inspect
Symbol#intern	A			instance methods							<pre><code>intern   → sym</code></pre>In general, to_sym returns the Symbol corresponding to an object. As sym is already a symbol, self is returned in this case.	http://ruby-doc.org/core/Symbol.html#method-i-intern
Symbol#length	A			instance methods							<pre><code>length    → integer</code></pre>Same as sym.to_s.length.	http://ruby-doc.org/core/Symbol.html#method-i-length
Symbol#match	A			instance methods							<pre><code>match(obj)   → fixnum or nil</code></pre>Returns sym.to_s =~ obj.	http://ruby-doc.org/core/Symbol.html#method-i-match
Symbol#next	A			instance methods							<pre><code>succ</code></pre>Same as sym.to_s.succ.intern.	http://ruby-doc.org/core/Symbol.html#method-i-next
Symbol#size	A			instance methods							<pre><code>size    → integer</code></pre>Same as sym.to_s.length.	http://ruby-doc.org/core/Symbol.html#method-i-size
Symbol#slice	A			instance methods							<pre><code>slice(idx)      → char\nslice(b, n)     → string</code></pre>Returns sym.to_s[].	http://ruby-doc.org/core/Symbol.html#method-i-slice
Symbol#succ	A			instance methods							<pre><code>succ</code></pre>Same as sym.to_s.succ.intern.	http://ruby-doc.org/core/Symbol.html#method-i-succ
Symbol#swapcase	A			instance methods							<pre><code>swapcase  → symbol</code></pre>Same as sym.to_s.swapcase.intern.	http://ruby-doc.org/core/Symbol.html#method-i-swapcase
Symbol#to_proc	A			instance methods							<pre><code>to_proc</code></pre>Returns a Proc object which respond to the given method by sym.<pre><code>(1..3).collect(&:to_s)  #=> ["1", "2", "3"]\n</code></pre>	http://ruby-doc.org/core/Symbol.html#method-i-to_proc
Symbol#to_s	A			instance methods							<pre><code>to_s      → string</code></pre>Returns the name or string corresponding to sym.<pre><code>:fred.id2name   #=> "fred"\n</code></pre>	http://ruby-doc.org/core/Symbol.html#method-i-to_s
Symbol#to_sym	A			instance methods							<pre><code>to_sym   → sym</code></pre>In general, to_sym returns the Symbol corresponding to an object. As sym is already a symbol, self is returned in this case.	http://ruby-doc.org/core/Symbol.html#method-i-to_sym
Symbol#upcase	A			instance methods							<pre><code>upcase    → symbol</code></pre>Same as sym.to_s.upcase.intern.	http://ruby-doc.org/core/Symbol.html#method-i-upcase
ThreadGroup	A			classes							ThreadGroup provides a means of keeping track of a number of threads as a group.<br>A given Thread object can only belong to one ThreadGroup at a time; adding a thread to a new group will remove it from any previous group.<br>Newly created threads belong to the same group as the thread from which they were created.	http://ruby-doc.org/core/ThreadGroup.html
ThreadGroup#add	A			instance methods							<pre><code>add(thread)   → thgrp</code></pre>Adds the given thread to this group, removing it from any other group to which it may have previously been a member.<pre><code>puts "Initial group is #{ThreadGroup::Default.list}"\ntg = ThreadGroup.new\nt1 = Thread.new { sleep }\nt2 = Thread.new { sleep }\nputs "t1 is #{t1}"\nputs "t2 is #{t2}"\ntg.add(t1)\nputs "Initial group now #{ThreadGroup::Default.list}"\nputs "tg group now #{tg.list}"\n</code></pre>This will produce:<pre><code>Initial group is #<Thread:0x401bdf4c>\nt1 is #<Thread:0x401b3c90>\nt2 is #<Thread:0x401b3c18>\nInitial group now #<Thread:0x401b3c18>#<Thread:0x401bdf4c>\ntg group now #<Thread:0x401b3c90>\n</code></pre>	http://ruby-doc.org/core/ThreadGroup.html#method-i-add
ThreadGroup#enclose	A			instance methods							<pre><code>enclose   → thgrp</code></pre>Prevents threads from being added to or removed from the receiving ThreadGroup.<br>New threads can still be started in an enclosed ThreadGroup.<pre><code>ThreadGroup::Default.enclose        #=> #<ThreadGroup:0x4029d914>\nthr = Thread::new { Thread.stop }   #=> #<Thread:0x402a7210 sleep>\ntg = ThreadGroup::new               #=> #<ThreadGroup:0x402752d4>\ntg.add thr\n#=> ThreadError: can't move from the enclosed thread group\n</code></pre>	http://ruby-doc.org/core/ThreadGroup.html#method-i-enclose
ThreadGroup#enclosed?	A			instance methods							<pre><code>enclosed?   → true or false</code></pre>Returns true if the thgrp is enclosed. See also #enclose.	http://ruby-doc.org/core/ThreadGroup.html#method-i-enclosed-3F
ThreadGroup#list	A			instance methods							<pre><code>list   → array</code></pre>Returns an array of all existing Thread objects that belong to this group.<pre><code>ThreadGroup::Default.list   #=> [#<Thread:0x401bdf4c run>]\n</code></pre>	http://ruby-doc.org/core/ThreadGroup.html#method-i-list
ThreadError	A			classes							Raised when an invalid operation is attempted on a thread.<br>For example, when no other thread has been started:<pre><code>Thread.stop\n</code></pre>This will raises the following exception:	http://ruby-doc.org/core/ThreadError.html
ConditionVariable	A			classes							ConditionVariable objects augment class Mutex. Using condition variables, it is possible to suspend while in the middle of a critical section until a resource becomes available.<br>Example:<pre><code>require 'thread'\n\nmutex = Mutex.new\nresource = ConditionVariable.new\n\na = Thread.new {\n   mutex.synchronize {\n     # Thread 'a' now needs the resource\n     resource.wait(mutex)\n     # 'a' can now have the resource\n   }\n}\n\nb = Thread.new {\n   mutex.synchronize {\n     # Thread 'b' has finished using the resource\n     resource.signal\n   }\n}\n</code></pre>	http://ruby-doc.org/core/ConditionVariable.html
ConditionVariable::new	A			class methods							Creates a new condition variable instance.	http://ruby-doc.org/core/ConditionVariable.html#method-c-new
ConditionVariable#broadcast	A			instance methods							Wakes up all threads waiting for this lock.	http://ruby-doc.org/core/ConditionVariable.html#method-i-broadcast
ConditionVariable#signal	A			instance methods							Wakes up the first thread in line waiting for this lock.	http://ruby-doc.org/core/ConditionVariable.html#method-i-signal
ConditionVariable#wait	A			instance methods							<pre><code>wait(mutex, timeout=nil)</code></pre>Releases the lock held in mutex and waits; reacquires the lock on wakeup.<br>If timeout is given, this method returns after timeout seconds passed, even if no other thread doesn't signal.	http://ruby-doc.org/core/ConditionVariable.html#method-i-wait
Queue	A			classes							This class provides a way to synchronize communication between threads.<br>Example:<pre><code>require 'thread'\nqueue = Queue.new\n\nproducer = Thread.new do\n  5.times do |i|\n     sleep rand(i) # simulate expense\n     queue << i\n     puts "#{i} produced"\n  end\nend\n\nconsumer = Thread.new do\n  5.times do |i|\n     value = queue.pop\n     sleep rand(i/2) # simulate expense\n     puts "consumed #{value}"\n  end\nend\n</code></pre>	http://ruby-doc.org/core/Queue.html
Queue::new	A			class methods							Creates a new queue instance.	http://ruby-doc.org/core/Queue.html#method-c-new
Queue#<<	A			instance methods							Alias for push.	http://ruby-doc.org/core/Queue.html#method-i-3C-3C
Queue#clear	A			instance methods							Removes all objects from the queue.	http://ruby-doc.org/core/Queue.html#method-i-clear
Queue#close	A			instance methods							<pre><code>close</code></pre>Closes the queue. A closed queue cannot be re-opened.<br>After the call to close completes, the following are true:<br>closed? will return true<br>close will be ignored.<br>calling enq/push/<< will return nil.<br>when empty? is false, calling deq/pop/shift will return an object from the queue as usual.<br>ClosedQueueError is inherited from StopIteration, so that you can break loop block.	http://ruby-doc.org/core/Queue.html#method-i-close
Queue#closed?	A			instance methods							<pre><code>closed?</code></pre>Returns true if the queue is closed.	http://ruby-doc.org/core/Queue.html#method-i-closed-3F
Queue#deq	A			instance methods							Alias for push.	http://ruby-doc.org/core/Queue.html#method-i-deq
Queue#empty?	A			instance methods							<pre><code>empty?</code></pre>Returns true if the queue is empty.	http://ruby-doc.org/core/Queue.html#method-i-empty-3F
Queue#enq	A			instance methods								http://ruby-doc.org/core/Queue.html#method-i-enq
Queue#length	A			instance methods							<pre><code>length\nsize</code></pre>Returns the length of the queue.	http://ruby-doc.org/core/Queue.html#method-i-length
Queue#num_waiting	A			instance methods							Returns the number of threads waiting on the queue.	http://ruby-doc.org/core/Queue.html#method-i-num_waiting
Queue#pop	A			instance methods							<pre><code>pop(non_block=false)\ndeq(non_block=false)\nshift(non_block=false)</code></pre>Retrieves data from the queue.<br>If the queue is empty, the calling thread is suspended until data is pushed onto the queue. If non_block is true, the thread isn't suspended, and an exception is raised.	http://ruby-doc.org/core/Queue.html#method-i-pop
Queue#push	A			instance methods							<pre><code>push(object)\nenq(object)\n<\n            \n          </code></pre>Pushes the given object to the queue.	http://ruby-doc.org/core/Queue.html#method-i-push
Queue#shift	A			instance methods							Alias for pop.	http://ruby-doc.org/core/Queue.html#method-i-shift
Queue#size	A			instance methods							Alias for pop.	http://ruby-doc.org/core/Queue.html#method-i-size
SizedQueue	A			classes							This class represents queues of specified size capacity. The push operation may be blocked if the capacity is full.<br>See Queue for an example of how a SizedQueue works.	http://ruby-doc.org/core/SizedQueue.html
SizedQueue::new	A			class methods							<pre><code>new(max)</code></pre>Creates a fixed-length queue with a maximum size of max.	http://ruby-doc.org/core/SizedQueue.html#method-c-new
SizedQueue#<<	A			instance methods							Alias for push.	http://ruby-doc.org/core/SizedQueue.html#method-i-3C-3C
SizedQueue#clear	A			instance methods							Removes all objects from the queue.	http://ruby-doc.org/core/SizedQueue.html#method-i-clear
SizedQueue#close	A			instance methods							<pre><code>close(exception=false)</code></pre>Similar to Queue#close.<br>The difference is behavior with waiting enqueuing threads.<br>If there are waiting enqueuing threads, they are interrupted by raising ClosedQueueError('queue closed').	http://ruby-doc.org/core/SizedQueue.html#method-i-close
SizedQueue#deq	A			instance methods							Alias for push.	http://ruby-doc.org/core/SizedQueue.html#method-i-deq
SizedQueue#enq	A			instance methods								http://ruby-doc.org/core/SizedQueue.html#method-i-enq
SizedQueue#max	A			instance methods							Returns the maximum size of the queue.	http://ruby-doc.org/core/SizedQueue.html#method-i-max
SizedQueue#max=	A			instance methods							<pre><code>max=(number)</code></pre>Sets the maximum size of the queue to the given number.	http://ruby-doc.org/core/SizedQueue.html#method-i-max-3D
SizedQueue#num_waiting	A			instance methods							Returns the number of threads waiting on the queue.	http://ruby-doc.org/core/SizedQueue.html#method-i-num_waiting
SizedQueue#pop	A			instance methods							<pre><code>pop(non_block=false)\ndeq(non_block=false)\nshift(non_block=false)</code></pre>Retrieves data from the queue.<br>If the queue is empty, the calling thread is suspended until data is pushed onto the queue. If non_block is true, the thread isn't suspended, and an exception is raised.	http://ruby-doc.org/core/SizedQueue.html#method-i-pop
SizedQueue#push	A			instance methods							<pre><code>push(object, non_block=false)\nenq(object, non_block=false)\n<\n            \n          </code></pre>Pushes object to the queue.<br>If there is no space left in the queue, waits until space becomes available, unless non_block is true. If non_block is true, the thread isn't suspended, and an exception is raised.	http://ruby-doc.org/core/SizedQueue.html#method-i-push
SizedQueue#shift	A			instance methods							Alias for pop.	http://ruby-doc.org/core/SizedQueue.html#method-i-shift
Thread::Mutex	A			classes							Mutex	http://ruby-doc.org/core/Thread/Mutex.html
Thread::Mutex::new	A			class methods							<pre><code>new   → mutex</code></pre>Creates a new Mutex	http://ruby-doc.org/core/Thread/Mutex.html#method-c-new
Thread::Mutex#lock	A			instance methods							<pre><code>lock  → self</code></pre>Attempts to grab the lock and waits if it isn’t available. Raises ThreadError if mutex was locked by the current thread.	http://ruby-doc.org/core/Thread/Mutex.html#method-i-lock
Thread::Mutex#locked?	A			instance methods							<pre><code>locked?  → true or false</code></pre>Returns true if this lock is currently held by some thread.	http://ruby-doc.org/core/Thread/Mutex.html#method-i-locked-3F
Thread::Mutex#owned?	A			instance methods							<pre><code>owned?  → true or false</code></pre>Returns true if this lock is currently held by current thread.	http://ruby-doc.org/core/Thread/Mutex.html#method-i-owned-3F
Thread::Mutex#sleep	A			instance methods							<pre><code>sleep(timeout = nil)    → number</code></pre>Releases the lock and sleeps timeout seconds if it is given and non-nil or forever. Raises ThreadError if mutex wasn’t locked by the current thread.<br>When the thread is next woken up, it will attempt to reacquire the lock.<br>Note that this method can wakeup without explicit Thread#wakeup call. For example, receiving signal and so on.	http://ruby-doc.org/core/Thread/Mutex.html#method-i-sleep
Thread::Mutex#synchronize	A			instance methods							<pre><code>synchronize { ... }    → result of the block</code></pre>Obtains a lock, runs the block, and releases the lock when the block completes. See the example under Mutex.	http://ruby-doc.org/core/Thread/Mutex.html#method-i-synchronize
Thread::Mutex#try_lock	A			instance methods							<pre><code>try_lock  → true or false</code></pre>Attempts to obtain the lock and returns immediately. Returns true if the lock was granted.	http://ruby-doc.org/core/Thread/Mutex.html#method-i-try_lock
Thread::Mutex#unlock	A			instance methods							<pre><code>unlock    → self</code></pre>Releases the lock. Raises ThreadError if mutex wasn’t locked by the current thread.	http://ruby-doc.org/core/Thread/Mutex.html#method-i-unlock
Time	A			classes							Time is an abstraction of dates and times. Time is stored internally as the number of seconds with fraction since the Epoch, January 1, 1970 00:00 UTC. Also see the library module Date. The Time class treats GMT (Greenwich Mean Time) and UTC (Coordinated Universal Time) as equivalent. GMT is the older way of referring to these baseline times but persists in the names of calls on POSIX systems.<br>All times may have fraction. Be aware of this fact when comparing times with each other – times that are apparently equal when displayed may be different when compared.<br>Since Ruby 1.9.2, Time implementation uses a signed 63 bit integer, Bignum or Rational. The integer is a number of nanoseconds since the Epoch which can represent 1823-11-12 to 2116-02-20. When Bignum or Rational is used (before 1823, after 2116, under nanosecond), Time works slower as when integer is used.<br>All of these examples were done using the EST timezone which is GMT-5.	http://ruby-doc.org/core/Time.html
Time::at	A			class methods							<pre><code>at(time) → time\nat(seconds_with_frac) → time\nat(seconds, microseconds_with_frac) → time</code></pre>Creates a new Time object with the value given by time, the given number of seconds_with_frac, or seconds and microseconds_with_frac since the Epoch. seconds_with_frac and microseconds_with_frac can be an Integer, Float, Rational, or other Numeric. non-portable feature allows the offset to be negative on some systems.<br>If a numeric argument is given, the result is in local time.<pre><code>Time.at(0)                           #=> 1969-12-31 18:00:00 -0600\nTime.at(Time.at(0))                  #=> 1969-12-31 18:00:00 -0600\nTime.at(946702800)                   #=> 1999-12-31 23:00:00 -0600\nTime.at(-284061600)                  #=> 1960-12-31 00:00:00 -0600\nTime.at(946684800.2).usec            #=> 200000\nTime.at(946684800, 123456.789).nsec  #=> 123456789\n</code></pre>	http://ruby-doc.org/core/Time.html#method-c-at
Time::gm	A			class methods							<pre><code>gm(year) → time\ngm(year, month) → time\ngm(year, month, day) → time\ngm(year, month, day, hour) → time\ngm(year, month, day, hour, min) → time\ngm(year, month, day, hour, min, sec_with_frac) → time\ngm(year, month, day, hour, min, sec, usec_with_frac) → time\ngm(sec, min, hour, day, month, year, dummy, dummy, dummy, dummy) → time</code></pre>Creates a Time object based on given values, interpreted as UTC (GMT). The year must be specified. Other values default to the minimum value for that field (and may be nil or omitted). Months may be specified by numbers from 1 to 12, or by the three-letter English month names. Hours are specified on a 24-hour clock (0..23). Raises an ArgumentError if any values are out of range. Will also accept ten arguments in the order output by #to_a.<br>sec_with_frac and usec_with_frac can have a fractional part.<pre><code>Time.utc(2000,"jan",1,20,15,1)  #=> 2000-01-01 20:15:01 UTC\nTime.gm(2000,"jan",1,20,15,1)   #=> 2000-01-01 20:15:01 UTC\n</code></pre>	http://ruby-doc.org/core/Time.html#method-c-gm
Time::local	A			class methods							<pre><code>local(year) → time\nlocal(year, month) → time\nlocal(year, month, day) → time\nlocal(year, month, day, hour) → time\nlocal(year, month, day, hour, min) → time\nlocal(year, month, day, hour, min, sec_with_frac) → time\nlocal(year, month, day, hour, min, sec, usec_with_frac) → time\nlocal(sec, min, hour, day, month, year, dummy, dummy, isdst, dummy) → time</code></pre>Same as ::gm, but interprets the values in the local time zone.<pre><code>Time.local(2000,"jan",1,20,15,1)   #=> 2000-01-01 20:15:01 -0600\n</code></pre>	http://ruby-doc.org/core/Time.html#method-c-local
Time::mktime	A			class methods							<pre><code>mktime(year) → time\nmktime(year, month) → time\nmktime(year, month, day) → time\nmktime(year, month, day, hour) → time\nmktime(year, month, day, hour, min) → time\nmktime(year, month, day, hour, min, sec_with_frac) → time\nmktime(year, month, day, hour, min, sec, usec_with_frac) → time\nmktime(sec, min, hour, day, month, year, dummy, dummy, isdst, dummy) → time</code></pre>Same as ::gm, but interprets the values in the local time zone.<pre><code>Time.local(2000,"jan",1,20,15,1)   #=> 2000-01-01 20:15:01 -0600\n</code></pre>	http://ruby-doc.org/core/Time.html#method-c-mktime
Time::new	A			class methods							<pre><code>new → time\nnew(year, month=nil, day=nil, hour=nil, min=nil, sec=nil, utc_offset=nil) → time</code></pre>Returns a Time object.<br>It is initialized to the current system time if no argument is given.<br>Note: The new object will use the resolution available on your system clock, and may include fractional seconds.<br>If one or more arguments specified, the time is initialized to the specified time.<br>sec may have fraction if it is a rational.<br>utc_offset is the offset from UTC. It can be a string such as "+09:00" or a number of seconds such as 32400.<pre><code>a = Time.new      #=> 2007-11-19 07:50:02 -0600\nb = Time.new      #=> 2007-11-19 07:50:02 -0600\na == b            #=> false\n"%.6f" % a.to_f   #=> "1195480202.282373"\n"%.6f" % b.to_f   #=> "1195480202.283415"\n\nTime.new(2008,6,21, 13,30,0, "+09:00") #=> 2008-06-21 13:30:00 +0900\n\n# A trip for RubyConf 2007\nt1 = Time.new(2007,11,1,15,25,0, "+09:00") # JST (Narita)\nt2 = Time.new(2007,11,1,12, 5,0, "-05:00") # CDT (Minneapolis)\nt3 = Time.new(2007,11,1,13,25,0, "-05:00") # CDT (Minneapolis)\nt4 = Time.new(2007,11,1,16,53,0, "-04:00") # EDT (Charlotte)\nt5 = Time.new(2007,11,5, 9,24,0, "-05:00") # EST (Charlotte)\nt6 = Time.new(2007,11,5,11,21,0, "-05:00") # EST (Detroit)\nt7 = Time.new(2007,11,5,13,45,0, "-05:00") # EST (Detroit)\nt8 = Time.new(2007,11,6,17,10,0, "+09:00") # JST (Narita)\np((t2-t1)/3600.0)                          #=> 10.666666666666666\np((t4-t3)/3600.0)                          #=> 2.466666666666667\np((t6-t5)/3600.0)                          #=> 1.95\np((t8-t7)/3600.0)                          #=> 13.416666666666666\n</code></pre>	http://ruby-doc.org/core/Time.html#method-c-new
Time::now	A			class methods							<pre><code>now → time</code></pre>Creates a new Time object for the current time. This is same as ::new without arguments.<pre><code>Time.now            #=> 2009-06-24 12:39:54 +0900\n</code></pre>	http://ruby-doc.org/core/Time.html#method-c-now
Time::utc	A			class methods							<pre><code>utc(year) → time\nutc(year, month) → time\nutc(year, month, day) → time\nutc(year, month, day, hour) → time\nutc(year, month, day, hour, min) → time\nutc(year, month, day, hour, min, sec_with_frac) → time\nutc(year, month, day, hour, min, sec, usec_with_frac) → time\nutc(sec, min, hour, day, month, year, dummy, dummy, dummy, dummy) → time</code></pre>Creates a Time object based on given values, interpreted as UTC (GMT). The year must be specified. Other values default to the minimum value for that field (and may be nil or omitted). Months may be specified by numbers from 1 to 12, or by the three-letter English month names. Hours are specified on a 24-hour clock (0..23). Raises an ArgumentError if any values are out of range. Will also accept ten arguments in the order output by #to_a.<br>sec_with_frac and usec_with_frac can have a fractional part.<pre><code>Time.utc(2000,"jan",1,20,15,1)  #=> 2000-01-01 20:15:01 UTC\nTime.gm(2000,"jan",1,20,15,1)   #=> 2000-01-01 20:15:01 UTC\n</code></pre>	http://ruby-doc.org/core/Time.html#method-c-utc
Time#+	A			instance methods							<pre><code>time + numeric → time</code></pre>Addition — Adds some number of seconds (possibly fractional) to time and returns that value as a new Time object.<pre><code>t = Time.now         #=> 2007-11-19 08:22:21 -0600\nt + (60 * 60 * 24)   #=> 2007-11-20 08:22:21 -0600\n</code></pre>	http://ruby-doc.org/core/Time.html#method-i-2B
Time#-	A			instance methods							<pre><code>time - other_time → float\ntime - numeric    → time</code></pre>Difference — Returns a new Time object that represents the difference between time and other_time, or subtracts the given number of seconds in numeric from time.<pre><code>t = Time.now       #=> 2007-11-19 08:23:10 -0600\nt2 = t + 2592000   #=> 2007-12-19 08:23:10 -0600\nt2 - t             #=> 2592000.0\nt2 - 2592000       #=> 2007-11-19 08:23:10 -0600\n</code></pre>	http://ruby-doc.org/core/Time.html#method-i-2D
Time#<=>	A			instance methods							<pre><code>time <=> other_time → -1, 0, +1 or nil</code></pre>Comparison—Compares time with other_time.<br>-1, 0, +1 or nil depending on whether time is less than, equal to, or greater than other_time.<br>nil is returned if the two values are incomparable.<pre><code>t = Time.now       #=> 2007-11-19 08:12:12 -0600\nt2 = t + 2592000   #=> 2007-12-19 08:12:12 -0600\nt <=> t2           #=> -1\nt2 <=> t           #=> 1\n\nt = Time.now       #=> 2007-11-19 08:13:38 -0600\nt2 = t + 0.1       #=> 2007-11-19 08:13:38 -0600\nt.nsec             #=> 98222999\nt2.nsec            #=> 198222999\nt <=> t2           #=> -1\nt2 <=> t           #=> 1\nt <=> t            #=> 0\n</code></pre>	http://ruby-doc.org/core/Time.html#method-i-3C-3D-3E
Time#asctime	A			instance methods							<pre><code>asctime → string</code></pre>Returns a canonical string representation of time.<pre><code>Time.now.asctime   #=> "Wed Apr  9 08:56:03 2003"\n</code></pre>	http://ruby-doc.org/core/Time.html#method-i-asctime
Time#ctime	A			instance methods							<pre><code>ctime   → string</code></pre>Returns a canonical string representation of time.<pre><code>Time.now.asctime   #=> "Wed Apr  9 08:56:03 2003"\n</code></pre>	http://ruby-doc.org/core/Time.html#method-i-ctime
Time#day	A			instance methods							<pre><code>day  → fixnum</code></pre>Returns the day of the month (1..n) for time.<pre><code>t = Time.now   #=> 2007-11-19 08:27:03 -0600\nt.day          #=> 19\nt.mday         #=> 19\n</code></pre>	http://ruby-doc.org/core/Time.html#method-i-day
Time#dst?	A			instance methods							<pre><code>dst?  → true or false</code></pre>Returns true if time occurs during Daylight Saving Time in its time zone.<pre><code># CST6CDT:\n  Time.local(2000, 1, 1).zone    #=> "CST"\n  Time.local(2000, 1, 1).isdst   #=> false\n  Time.local(2000, 1, 1).dst?    #=> false\n  Time.local(2000, 7, 1).zone    #=> "CDT"\n  Time.local(2000, 7, 1).isdst   #=> true\n  Time.local(2000, 7, 1).dst?    #=> true\n\n# Asia/Tokyo:\n  Time.local(2000, 1, 1).zone    #=> "JST"\n  Time.local(2000, 1, 1).isdst   #=> false\n  Time.local(2000, 1, 1).dst?    #=> false\n  Time.local(2000, 7, 1).zone    #=> "JST"\n  Time.local(2000, 7, 1).isdst   #=> false\n  Time.local(2000, 7, 1).dst?    #=> false\n</code></pre>	http://ruby-doc.org/core/Time.html#method-i-dst-3F
Time#eql?	A			instance methods							<pre><code>eql?(other_time)</code></pre>Returns true if time and other_time are both Time objects with the same seconds and fractional seconds.	http://ruby-doc.org/core/Time.html#method-i-eql-3F
Time#friday?	A			instance methods							<pre><code>friday? → true or false</code></pre>Returns true if time represents Friday.<pre><code>t = Time.local(1987, 12, 18)     #=> 1987-12-18 00:00:00 -0600\nt.friday?                        #=> true\n</code></pre>	http://ruby-doc.org/core/Time.html#method-i-friday-3F
Time#getgm	A			instance methods							<pre><code>getgm  → new_time</code></pre>Returns a new Time object representing time in UTC.<pre><code>t = Time.local(2000,1,1,20,15,1)   #=> 2000-01-01 20:15:01 -0600\nt.gmt?                             #=> false\ny = t.getgm                        #=> 2000-01-02 02:15:01 UTC\ny.gmt?                             #=> true\nt == y                             #=> true\n</code></pre>	http://ruby-doc.org/core/Time.html#method-i-getgm
Time#getlocal	A			instance methods							<pre><code>getlocal → new_time\ngetlocal(utc_offset) → new_time</code></pre>Returns a new Time object representing time in local time (using the local time zone in effect for this process).<br>If utc_offset is given, it is used instead of the local time. utc_offset can be given as a human-readable string (eg. "+09:00") or as a number of seconds (eg. 32400).<pre><code>t = Time.utc(2000,1,1,20,15,1)  #=> 2000-01-01 20:15:01 UTC\nt.utc?                          #=> true\n\nl = t.getlocal                  #=> 2000-01-01 14:15:01 -0600\nl.utc?                          #=> false\nt == l                          #=> true\n\nj = t.getlocal("+09:00")        #=> 2000-01-02 05:15:01 +0900\nj.utc?                          #=> false\nt == j                          #=> true\n\nk = t.getlocal(9*60*60)         #=> 2000-01-02 05:15:01 +0900\nk.utc?                          #=> false\nt == k                          #=> true\n</code></pre>	http://ruby-doc.org/core/Time.html#method-i-getlocal
Time#getutc	A			instance methods							<pre><code>getutc → new_time</code></pre>Returns a new Time object representing time in UTC.<pre><code>t = Time.local(2000,1,1,20,15,1)   #=> 2000-01-01 20:15:01 -0600\nt.gmt?                             #=> false\ny = t.getgm                        #=> 2000-01-02 02:15:01 UTC\ny.gmt?                             #=> true\nt == y                             #=> true\n</code></pre>	http://ruby-doc.org/core/Time.html#method-i-getutc
Time#gmt?	A			instance methods							<pre><code>gmt? → true or false</code></pre>Returns true if time represents a time in UTC (GMT).<pre><code>t = Time.now                        #=> 2007-11-19 08:15:23 -0600\nt.utc?                              #=> false\nt = Time.gm(2000,"jan",1,20,15,1)   #=> 2000-01-01 20:15:01 UTC\nt.utc?                              #=> true\n\nt = Time.now                        #=> 2007-11-19 08:16:03 -0600\nt.gmt?                              #=> false\nt = Time.gm(2000,1,1,20,15,1)       #=> 2000-01-01 20:15:01 UTC\nt.gmt?                              #=> true\n</code></pre>	http://ruby-doc.org/core/Time.html#method-i-gmt-3F
Time#gmt_offset	A			instance methods							<pre><code>gmt_offset → fixnum</code></pre>Returns the offset in seconds between the timezone of time and UTC.<pre><code>t = Time.gm(2000,1,1,20,15,1)   #=> 2000-01-01 20:15:01 UTC\nt.gmt_offset                    #=> 0\nl = t.getlocal                  #=> 2000-01-01 14:15:01 -0600\nl.gmt_offset                    #=> -21600\n</code></pre>	http://ruby-doc.org/core/Time.html#method-i-gmt_offset
Time#gmtime	A			instance methods							<pre><code>gmtime    → time</code></pre>Converts time to UTC (GMT), modifying the receiver.<pre><code>t = Time.now   #=> 2007-11-19 08:18:31 -0600\nt.gmt?         #=> false\nt.gmtime       #=> 2007-11-19 14:18:31 UTC\nt.gmt?         #=> true\n\nt = Time.now   #=> 2007-11-19 08:18:51 -0600\nt.utc?         #=> false\nt.utc          #=> 2007-11-19 14:18:51 UTC\nt.utc?         #=> true\n</code></pre>	http://ruby-doc.org/core/Time.html#method-i-gmtime
Time#gmtoff	A			instance methods							<pre><code>gmtoff     → fixnum</code></pre>Returns the offset in seconds between the timezone of time and UTC.<pre><code>t = Time.gm(2000,1,1,20,15,1)   #=> 2000-01-01 20:15:01 UTC\nt.gmt_offset                    #=> 0\nl = t.getlocal                  #=> 2000-01-01 14:15:01 -0600\nl.gmt_offset                    #=> -21600\n</code></pre>	http://ruby-doc.org/core/Time.html#method-i-gmtoff
Time#hash	A			instance methods							<pre><code>hash   → fixnum</code></pre>Returns a hash code for this Time object.<br>See also Object#hash.	http://ruby-doc.org/core/Time.html#method-i-hash
Time#hour	A			instance methods							<pre><code>hour → fixnum</code></pre>Returns the hour of the day (0..23) for time.<pre><code>t = Time.now   #=> 2007-11-19 08:26:20 -0600\nt.hour         #=> 8\n</code></pre>	http://ruby-doc.org/core/Time.html#method-i-hour
Time#inspect	A			instance methods							<pre><code>inspect → string</code></pre>Returns a string representing time. Equivalent to calling strftime with the appropriate format string.	http://ruby-doc.org/core/Time.html#method-i-inspect
Time#isdst	A			instance methods							<pre><code>isdst → true or false</code></pre>Returns true if time occurs during Daylight Saving Time in its time zone.<pre><code># CST6CDT:\n  Time.local(2000, 1, 1).zone    #=> "CST"\n  Time.local(2000, 1, 1).isdst   #=> false\n  Time.local(2000, 1, 1).dst?    #=> false\n  Time.local(2000, 7, 1).zone    #=> "CDT"\n  Time.local(2000, 7, 1).isdst   #=> true\n  Time.local(2000, 7, 1).dst?    #=> true\n\n# Asia/Tokyo:\n  Time.local(2000, 1, 1).zone    #=> "JST"\n  Time.local(2000, 1, 1).isdst   #=> false\n  Time.local(2000, 1, 1).dst?    #=> false\n  Time.local(2000, 7, 1).zone    #=> "JST"\n  Time.local(2000, 7, 1).isdst   #=> false\n  Time.local(2000, 7, 1).dst?    #=> false\n</code></pre>	http://ruby-doc.org/core/Time.html#method-i-isdst
Time#localtime	A			instance methods							<pre><code>localtime → time\nlocaltime(utc_offset) → time</code></pre>Converts time to local time (using the local time zone in effect for this process) modifying the receiver.<br>If utc_offset is given, it is used instead of the local time.<pre><code>t = Time.utc(2000, "jan", 1, 20, 15, 1) #=> 2000-01-01 20:15:01 UTC\nt.utc?                                  #=> true\n\nt.localtime                             #=> 2000-01-01 14:15:01 -0600\nt.utc?                                  #=> false\n\nt.localtime("+09:00")                   #=> 2000-01-02 05:15:01 +0900\nt.utc?                                  #=> false\n</code></pre>	http://ruby-doc.org/core/Time.html#method-i-localtime
Time#mday	A			instance methods							<pre><code>mday → fixnum</code></pre>Returns the day of the month (1..n) for time.<pre><code>t = Time.now   #=> 2007-11-19 08:27:03 -0600\nt.day          #=> 19\nt.mday         #=> 19\n</code></pre>	http://ruby-doc.org/core/Time.html#method-i-mday
Time#min	A			instance methods							<pre><code>min → fixnum</code></pre>Returns the minute of the hour (0..59) for time.<pre><code>t = Time.now   #=> 2007-11-19 08:25:51 -0600\nt.min          #=> 25\n</code></pre>	http://ruby-doc.org/core/Time.html#method-i-min
Time#mon	A			instance methods							<pre><code>mon   → fixnum\nmonth → fixnum</code></pre>Returns the month of the year (1..12) for time.<pre><code>t = Time.now   #=> 2007-11-19 08:27:30 -0600\nt.mon          #=> 11\nt.month        #=> 11\n</code></pre>	http://ruby-doc.org/core/Time.html#method-i-mon
Time#monday?	A			instance methods							<pre><code>monday? → true or false</code></pre>Returns true if time represents Monday.<pre><code>t = Time.local(2003, 8, 4)       #=> 2003-08-04 00:00:00 -0500\np t.monday?                      #=> true\n</code></pre>	http://ruby-doc.org/core/Time.html#method-i-monday-3F
Time#month	A			instance methods							<pre><code>month → fixnum</code></pre>Returns the month of the year (1..12) for time.<pre><code>t = Time.now   #=> 2007-11-19 08:27:30 -0600\nt.mon          #=> 11\nt.month        #=> 11\n</code></pre>	http://ruby-doc.org/core/Time.html#method-i-month
Time#nsec	A			instance methods							<pre><code>nsec    → int</code></pre>Returns the number of nanoseconds for time.<pre><code>t = Time.now        #=> 2007-11-17 15:18:03 +0900\n"%10.9f" % t.to_f   #=> "1195280283.536151409"\nt.nsec              #=> 536151406\n</code></pre>The lowest digits of to_f and nsec are different because IEEE 754 double is not accurate enough to represent the exact number of nanoseconds since the Epoch.<br>The more accurate value is returned by nsec.	http://ruby-doc.org/core/Time.html#method-i-nsec
Time#round	A			instance methods							<pre><code>round([ndigits])   → new_time</code></pre>Rounds sub seconds to a given precision in decimal digits (0 digits by default). It returns a new Time object. ndigits should be zero or positive integer.<pre><code>require 'time'\n\nt = Time.utc(2010,3,30, 5,43,"25.123456789".to_r)\np t.iso8601(10)           #=> "2010-03-30T05:43:25.1234567890Z"\np t.round.iso8601(10)     #=> "2010-03-30T05:43:25.0000000000Z"\np t.round(0).iso8601(10)  #=> "2010-03-30T05:43:25.0000000000Z"\np t.round(1).iso8601(10)  #=> "2010-03-30T05:43:25.1000000000Z"\np t.round(2).iso8601(10)  #=> "2010-03-30T05:43:25.1200000000Z"\np t.round(3).iso8601(10)  #=> "2010-03-30T05:43:25.1230000000Z"\np t.round(4).iso8601(10)  #=> "2010-03-30T05:43:25.1235000000Z"\np t.round(5).iso8601(10)  #=> "2010-03-30T05:43:25.1234600000Z"\np t.round(6).iso8601(10)  #=> "2010-03-30T05:43:25.1234570000Z"\np t.round(7).iso8601(10)  #=> "2010-03-30T05:43:25.1234568000Z"\np t.round(8).iso8601(10)  #=> "2010-03-30T05:43:25.1234567900Z"\np t.round(9).iso8601(10)  #=> "2010-03-30T05:43:25.1234567890Z"\np t.round(10).iso8601(10) #=> "2010-03-30T05:43:25.1234567890Z"\n\nt = Time.utc(1999,12,31, 23,59,59)\np((t + 0.4).round.iso8601(3))    #=> "1999-12-31T23:59:59.000Z"\np((t + 0.49).round.iso8601(3))   #=> "1999-12-31T23:59:59.000Z"\np((t + 0.5).round.iso8601(3))    #=> "2000-01-01T00:00:00.000Z"\np((t + 1.4).round.iso8601(3))    #=> "2000-01-01T00:00:00.000Z"\np((t + 1.49).round.iso8601(3))   #=> "2000-01-01T00:00:00.000Z"\np((t + 1.5).round.iso8601(3))    #=> "2000-01-01T00:00:01.000Z"\n\nt = Time.utc(1999,12,31, 23,59,59)\np (t + 0.123456789).round(4).iso8601(6)  #=> "1999-12-31T23:59:59.123500Z"\n</code></pre>	http://ruby-doc.org/core/Time.html#method-i-round
Time#saturday?	A			instance methods							<pre><code>saturday? → true or false</code></pre>Returns true if time represents Saturday.<pre><code>t = Time.local(2006, 6, 10)      #=> 2006-06-10 00:00:00 -0500\nt.saturday?                      #=> true\n</code></pre>	http://ruby-doc.org/core/Time.html#method-i-saturday-3F
Time#sec	A			instance methods							<pre><code>sec → fixnum</code></pre>Returns the second of the minute (0..60) for time.<br>Note: Seconds range from zero to 60 to allow the system to inject leap seconds. See en.wikipedia.org/wiki/Leap_second for further details.<pre><code>t = Time.now   #=> 2007-11-19 08:25:02 -0600\nt.sec          #=> 2\n</code></pre>	http://ruby-doc.org/core/Time.html#method-i-sec
Time#strftime	A			instance methods							<pre><code>strftime( string ) → string</code></pre>Formats time according to the directives in the given format string.<br>The directives begin with a percent (%) character. Any text not listed as a directive will be passed through to the output string.<br>The directive consists of a percent (%) character, zero or more flags, optional minimum field width, optional modifier and a conversion specifier as follows:<br>Flags:<br>The minimum field width specifies the minimum width.<br>The modifiers are “E” and “O”. They are ignored.<br>Format directives:<br>This method is similar to strftime() function defined in ISO C and POSIX.<br>While all directives are locale independent since Ruby 1.9, %Z is platform dependent. So, the result may differ even if the same format string is used in other systems such as C.<br>%z is recommended over %Z. %Z doesn’t identify the timezone. For example, “CST” is used at America/Chicago (-06:00), America/Havana (-05:00), Asia/Harbin (+08:00), Australia/Darwin (+09:30) and Australia/Adelaide (+10:30). Also, %Z is highly dependent on the operating system. For example, it may generate a non ASCII string on Japanese Windows. i.e. the result can be different to “JST”. So the numeric time zone offset, %z, is recommended.<br>Examples:<pre><code>t = Time.new(2007,11,19,8,37,48,"-06:00") #=> 2007-11-19 08:37:48 -0600\nt.strftime("Printed on %m/%d/%Y")   #=> "Printed on 11/19/2007"\nt.strftime("at %I:%M%p")            #=> "at 08:37AM"\n</code></pre>Various ISO 8601 formats:	http://ruby-doc.org/core/Time.html#method-i-strftime
Time#subsec	A			instance methods							<pre><code>subsec    → number</code></pre>Returns the fraction for time.<br>The return value can be a rational number.<pre><code>t = Time.now        #=> 2009-03-26 22:33:12 +0900\n"%10.9f" % t.to_f   #=> "1238074392.940563917"\nt.subsec            #=> (94056401/100000000)\n</code></pre>The lowest digits of to_f and subsec are different because IEEE 754 double is not accurate enough to represent the rational number.<br>The more accurate value is returned by subsec.	http://ruby-doc.org/core/Time.html#method-i-subsec
Time#succ	A			instance methods							<pre><code>succ   → new_time</code></pre>Returns a new Time object, one second later than time. #succ is obsolete since 1.9.2 for time is not a discrete value.<pre><code>t = Time.now       #=> 2007-11-19 08:23:57 -0600\nt.succ             #=> 2007-11-19 08:23:58 -0600\n</code></pre>Use instead time + 1<pre><code>t + 1              #=> 2007-11-19 08:23:58 -0600\n</code></pre>	http://ruby-doc.org/core/Time.html#method-i-succ
Time#sunday?	A			instance methods							<pre><code>sunday? → true or false</code></pre>Returns true if time represents Sunday.<pre><code>t = Time.local(1990, 4, 1)       #=> 1990-04-01 00:00:00 -0600\nt.sunday?                        #=> true\n</code></pre>	http://ruby-doc.org/core/Time.html#method-i-sunday-3F
Time#thursday?	A			instance methods							<pre><code>thursday? → true or false</code></pre>Returns true if time represents Thursday.<pre><code>t = Time.local(1995, 12, 21)     #=> 1995-12-21 00:00:00 -0600\np t.thursday?                    #=> true\n</code></pre>	http://ruby-doc.org/core/Time.html#method-i-thursday-3F
Time#to_a	A			instance methods							<pre><code>to_a → array</code></pre>Returns a ten-element array of values for time:<pre><code>[sec, min, hour, day, month, year, wday, yday, isdst, zone]\n</code></pre>See the individual methods for an explanation of the valid ranges of each value. The ten elements can be passed directly to ::utc or ::local to create a new Time object.<pre><code>t = Time.now     #=> 2007-11-19 08:36:01 -0600\nnow = t.to_a     #=> [1, 36, 8, 19, 11, 2007, 1, 323, false, "CST"]\n</code></pre>	http://ruby-doc.org/core/Time.html#method-i-to_a
Time#to_f	A			instance methods							<pre><code>to_f → float</code></pre>Returns the value of time as a floating point number of seconds since the Epoch.<pre><code>t = Time.now\n"%10.5f" % t.to_f   #=> "1270968744.77658"\nt.to_i              #=> 1270968744\n</code></pre>Note that IEEE 754 double is not accurate enough to represent the number of nanoseconds since the Epoch.	http://ruby-doc.org/core/Time.html#method-i-to_f
Time#to_i	A			instance methods							<pre><code>to_i   → int</code></pre>Returns the value of time as an integer number of seconds since the Epoch.<pre><code>t = Time.now\n"%10.5f" % t.to_f   #=> "1270968656.89607"\nt.to_i              #=> 1270968656\n</code></pre>	http://ruby-doc.org/core/Time.html#method-i-to_i
Time#to_r	A			instance methods							<pre><code>to_r → a_rational</code></pre>Returns the value of time as a rational number of seconds since the Epoch.<pre><code>t = Time.now\np t.to_r            #=> (1270968792716287611/1000000000)\n</code></pre>This methods is intended to be used to get an accurate value representing the nanoseconds since the Epoch. You can use this method to convert time to another Epoch.	http://ruby-doc.org/core/Time.html#method-i-to_r
Time#to_s	A			instance methods							<pre><code>to_s    → string</code></pre>Returns a string representing time. Equivalent to calling strftime with the appropriate format string.	http://ruby-doc.org/core/Time.html#method-i-to_s
Time#tuesday?	A			instance methods							<pre><code>tuesday? → true or false</code></pre>Returns true if time represents Tuesday.<pre><code>t = Time.local(1991, 2, 19)      #=> 1991-02-19 00:00:00 -0600\np t.tuesday?                     #=> true\n</code></pre>	http://ruby-doc.org/core/Time.html#method-i-tuesday-3F
Time#tv_nsec	A			instance methods							<pre><code>tv_nsec → int</code></pre>Returns the number of nanoseconds for time.<pre><code>t = Time.now        #=> 2007-11-17 15:18:03 +0900\n"%10.9f" % t.to_f   #=> "1195280283.536151409"\nt.nsec              #=> 536151406\n</code></pre>The lowest digits of to_f and nsec are different because IEEE 754 double is not accurate enough to represent the exact number of nanoseconds since the Epoch.<br>The more accurate value is returned by nsec.	http://ruby-doc.org/core/Time.html#method-i-tv_nsec
Time#tv_sec	A			instance methods							<pre><code>tv_sec → int</code></pre>Returns the value of time as an integer number of seconds since the Epoch.<pre><code>t = Time.now\n"%10.5f" % t.to_f   #=> "1270968656.89607"\nt.to_i              #=> 1270968656\n</code></pre>	http://ruby-doc.org/core/Time.html#method-i-tv_sec
Time#tv_usec	A			instance methods							<pre><code>tv_usec → int</code></pre>Returns the number of microseconds for time.<pre><code>t = Time.now        #=> 2007-11-19 08:03:26 -0600\n"%10.6f" % t.to_f   #=> "1195481006.775195"\nt.usec              #=> 775195\n</code></pre>	http://ruby-doc.org/core/Time.html#method-i-tv_usec
Time#usec	A			instance methods							<pre><code>usec    → int</code></pre>Returns the number of microseconds for time.<pre><code>t = Time.now        #=> 2007-11-19 08:03:26 -0600\n"%10.6f" % t.to_f   #=> "1195481006.775195"\nt.usec              #=> 775195\n</code></pre>	http://ruby-doc.org/core/Time.html#method-i-usec
Time#utc	A			instance methods							<pre><code>gmtime    → time\nutc       → time</code></pre>Converts time to UTC (GMT), modifying the receiver.<pre><code>t = Time.now   #=> 2007-11-19 08:18:31 -0600\nt.gmt?         #=> false\nt.gmtime       #=> 2007-11-19 14:18:31 UTC\nt.gmt?         #=> true\n\nt = Time.now   #=> 2007-11-19 08:18:51 -0600\nt.utc?         #=> false\nt.utc          #=> 2007-11-19 14:18:51 UTC\nt.utc?         #=> true\n</code></pre>	http://ruby-doc.org/core/Time.html#method-i-utc
Time#utc?	A			instance methods							<pre><code>utc? → true or false</code></pre>Returns true if time represents a time in UTC (GMT).<pre><code>t = Time.now                        #=> 2007-11-19 08:15:23 -0600\nt.utc?                              #=> false\nt = Time.gm(2000,"jan",1,20,15,1)   #=> 2000-01-01 20:15:01 UTC\nt.utc?                              #=> true\n\nt = Time.now                        #=> 2007-11-19 08:16:03 -0600\nt.gmt?                              #=> false\nt = Time.gm(2000,1,1,20,15,1)       #=> 2000-01-01 20:15:01 UTC\nt.gmt?                              #=> true\n</code></pre>	http://ruby-doc.org/core/Time.html#method-i-utc-3F
Time#utc_offset	A			instance methods							<pre><code>utc_offset → fixnum</code></pre>Returns the offset in seconds between the timezone of time and UTC.<pre><code>t = Time.gm(2000,1,1,20,15,1)   #=> 2000-01-01 20:15:01 UTC\nt.gmt_offset                    #=> 0\nl = t.getlocal                  #=> 2000-01-01 14:15:01 -0600\nl.gmt_offset                    #=> -21600\n</code></pre>	http://ruby-doc.org/core/Time.html#method-i-utc_offset
Time#wday	A			instance methods							<pre><code>wday → fixnum</code></pre>Returns an integer representing the day of the week, 0..6, with Sunday == 0.<pre><code>t = Time.now   #=> 2007-11-20 02:35:35 -0600\nt.wday         #=> 2\nt.sunday?      #=> false\nt.monday?      #=> false\nt.tuesday?     #=> true\nt.wednesday?   #=> false\nt.thursday?    #=> false\nt.friday?      #=> false\nt.saturday?    #=> false\n</code></pre>	http://ruby-doc.org/core/Time.html#method-i-wday
Time#wednesday?	A			instance methods							<pre><code>wednesday? → true or false</code></pre>Returns true if time represents Wednesday.<pre><code>t = Time.local(1993, 2, 24)      #=> 1993-02-24 00:00:00 -0600\np t.wednesday?                   #=> true\n</code></pre>	http://ruby-doc.org/core/Time.html#method-i-wednesday-3F
Time#yday	A			instance methods							<pre><code>yday → fixnum</code></pre>Returns an integer representing the day of the year, 1..366.<pre><code>t = Time.now   #=> 2007-11-19 08:32:31 -0600\nt.yday         #=> 323\n</code></pre>	http://ruby-doc.org/core/Time.html#method-i-yday
Time#year	A			instance methods							<pre><code>year → fixnum</code></pre>Returns the year for time (including the century).<pre><code>t = Time.now   #=> 2007-11-19 08:27:51 -0600\nt.year         #=> 2007\n</code></pre>	http://ruby-doc.org/core/Time.html#method-i-year
Time#zone	A			instance methods							<pre><code>zone → string</code></pre>Returns the name of the time zone used for time. As of Ruby 1.8, returns “UTC” rather than “GMT” for UTC times.<pre><code>t = Time.gm(2000, "jan", 1, 20, 15, 1)\nt.zone   #=> "UTC"\nt = Time.local(2000, "jan", 1, 20, 15, 1)\nt.zone   #=> "CST"\n</code></pre>	http://ruby-doc.org/core/Time.html#method-i-zone
Encoding::UndefinedConversionError	A			classes							Raised by Encoding and String methods when a transcoding operation fails.	http://ruby-doc.org/core/Encoding/UndefinedConversionError.html
Encoding::UndefinedConversionError#destination_encoding	A			instance methods							<pre><code>destination_encoding         → string</code></pre>Returns the destination encoding as an encoding object.	http://ruby-doc.org/core/Encoding/UndefinedConversionError.html#method-i-destination_encoding
Encoding::UndefinedConversionError#destination_encoding_name	A			instance methods							<pre><code>destination_encoding_name         → string</code></pre>Returns the destination encoding name as a string.	http://ruby-doc.org/core/Encoding/UndefinedConversionError.html#method-i-destination_encoding_name
Encoding::UndefinedConversionError#error_char	A			instance methods							<pre><code>error_char         → string</code></pre>Returns the one-character string which cause Encoding::UndefinedConversionError.<pre><code>ec = Encoding::Converter.new("ISO-8859-1", "EUC-JP")\nbegin\n  ec.convert("\xa0")\nrescue Encoding::UndefinedConversionError\n  puts $!.error_char.dump   #=> "\xC2\xA0"\n  p $!.error_char.encoding  #=> #<Encoding:UTF-8>\nend\n</code></pre>	http://ruby-doc.org/core/Encoding/UndefinedConversionError.html#method-i-error_char
Encoding::UndefinedConversionError#source_encoding	A			instance methods							<pre><code>source_encoding              → encoding</code></pre>Returns the source encoding as an encoding object.<br>Note that the result may not be equal to the source encoding of the encoding converter if the conversion has multiple steps.<pre><code>ec = Encoding::Converter.new("ISO-8859-1", "EUC-JP") # ISO-8859-1 -> UTF-8 -> EUC-JP\nbegin\n  ec.convert("\xa0") # NO-BREAK SPACE, which is available in UTF-8 but not in EUC-JP.\nrescue Encoding::UndefinedConversionError\n  p $!.source_encoding              #=> #<Encoding:UTF-8>\n  p $!.destination_encoding         #=> #<Encoding:EUC-JP>\n  p $!.source_encoding_name         #=> "UTF-8"\n  p $!.destination_encoding_name    #=> "EUC-JP"\nend\n</code></pre>	http://ruby-doc.org/core/Encoding/UndefinedConversionError.html#method-i-source_encoding
Encoding::UndefinedConversionError#source_encoding_name	A			instance methods							<pre><code>source_encoding_name         → string</code></pre>Returns the source encoding name as a string.	http://ruby-doc.org/core/Encoding/UndefinedConversionError.html#method-i-source_encoding_name
Encoding::InvalidByteSequenceError	A			classes							Raised by Encoding and String methods when the string being transcoded contains a byte invalid for the either the source or target encoding.	http://ruby-doc.org/core/Encoding/InvalidByteSequenceError.html
Encoding::InvalidByteSequenceError#destination_encoding	A			instance methods							<pre><code>destination_encoding         → string</code></pre>Returns the destination encoding as an encoding object.	http://ruby-doc.org/core/Encoding/InvalidByteSequenceError.html#method-i-destination_encoding
Encoding::InvalidByteSequenceError#destination_encoding_name	A			instance methods							<pre><code>destination_encoding_name         → string</code></pre>Returns the destination encoding name as a string.	http://ruby-doc.org/core/Encoding/InvalidByteSequenceError.html#method-i-destination_encoding_name
Encoding::InvalidByteSequenceError#error_bytes	A			instance methods							<pre><code>error_bytes         → string</code></pre>Returns the discarded bytes when Encoding::InvalidByteSequenceError occurs.<pre><code>ec = Encoding::Converter.new("EUC-JP", "ISO-8859-1")\nbegin\n  ec.convert("abc\xA1\xFFdef")\nrescue Encoding::InvalidByteSequenceError\n  p $!      #=> #<Encoding::InvalidByteSequenceError: "\xA1" followed by "\xFF" on EUC-JP>\n  puts $!.error_bytes.dump          #=> "\xA1"\n  puts $!.readagain_bytes.dump      #=> "\xFF"\nend\n</code></pre>	http://ruby-doc.org/core/Encoding/InvalidByteSequenceError.html#method-i-error_bytes
Encoding::InvalidByteSequenceError#incomplete_input?	A			instance methods							<pre><code>incomplete_input?         → true or false</code></pre>Returns true if the invalid byte sequence error is caused by premature end of string.<pre><code>ec = Encoding::Converter.new("EUC-JP", "ISO-8859-1")\n\nbegin\n  ec.convert("abc\xA1z")\nrescue Encoding::InvalidByteSequenceError\n  p $!      #=> #<Encoding::InvalidByteSequenceError: "\xA1" followed by "z" on EUC-JP>\n  p $!.incomplete_input?    #=> false\nend\n\nbegin\n  ec.convert("abc\xA1")\n  ec.finish\nrescue Encoding::InvalidByteSequenceError\n  p $!      #=> #<Encoding::InvalidByteSequenceError: incomplete "\xA1" on EUC-JP>\n  p $!.incomplete_input?    #=> true\nend\n</code></pre>	http://ruby-doc.org/core/Encoding/InvalidByteSequenceError.html#method-i-incomplete_input-3F
Encoding::InvalidByteSequenceError#readagain_bytes	A			instance methods							<pre><code>readagain_bytes         → string</code></pre>Returns the bytes to be read again when Encoding::InvalidByteSequenceError occurs.	http://ruby-doc.org/core/Encoding/InvalidByteSequenceError.html#method-i-readagain_bytes
Encoding::InvalidByteSequenceError#source_encoding	A			instance methods							<pre><code>source_encoding              → encoding</code></pre>Returns the source encoding as an encoding object.<br>Note that the result may not be equal to the source encoding of the encoding converter if the conversion has multiple steps.<pre><code>ec = Encoding::Converter.new("ISO-8859-1", "EUC-JP") # ISO-8859-1 -> UTF-8 -> EUC-JP\nbegin\n  ec.convert("\xa0") # NO-BREAK SPACE, which is available in UTF-8 but not in EUC-JP.\nrescue Encoding::UndefinedConversionError\n  p $!.source_encoding              #=> #<Encoding:UTF-8>\n  p $!.destination_encoding         #=> #<Encoding:EUC-JP>\n  p $!.source_encoding_name         #=> "UTF-8"\n  p $!.destination_encoding_name    #=> "EUC-JP"\nend\n</code></pre>	http://ruby-doc.org/core/Encoding/InvalidByteSequenceError.html#method-i-source_encoding
Encoding::InvalidByteSequenceError#source_encoding_name	A			instance methods							<pre><code>source_encoding_name         → string</code></pre>Returns the source encoding name as a string.	http://ruby-doc.org/core/Encoding/InvalidByteSequenceError.html#method-i-source_encoding_name
Encoding::ConverterNotFoundError	A			classes							Raised by transcoding methods when a named encoding does not correspond with a known converter.	http://ruby-doc.org/core/Encoding/ConverterNotFoundError.html
Encoding::Converter	A			classes								http://ruby-doc.org/core/Encoding/Converter.html
Encoding::Converter::asciicompat_encoding	A			class methods							<pre><code>Encoding::Converter.asciicompat_encoding(string) → encoding or nil\nEncoding::Converter.asciicompat_encoding(encoding) → encoding or nil</code></pre>Returns the corresponding ASCII compatible encoding.<br>Returns nil if the argument is an ASCII compatible encoding.<br>“corresponding ASCII compatible encoding” is an ASCII compatible encoding which can represents exactly the same characters as the given ASCII incompatible encoding. So, no conversion undefined error occurs when converting between the two encodings.<pre><code>Encoding::Converter.asciicompat_encoding("ISO-2022-JP") #=> #<Encoding:stateless-ISO-2022-JP>\nEncoding::Converter.asciicompat_encoding("UTF-16BE") #=> #<Encoding:UTF-8>\nEncoding::Converter.asciicompat_encoding("UTF-8") #=> nil\n</code></pre>	http://ruby-doc.org/core/Encoding/Converter.html#method-c-asciicompat_encoding
Encoding::Converter::new	A			class methods							<pre><code>Encoding::Converter.new(source_encoding, destination_encoding)\nEncoding::Converter.new(source_encoding, destination_encoding, opt)\nEncoding::Converter.new(convpath)</code></pre>possible options elements:<br>::new creates an instance of Encoding::Converter.<br>Source_encoding and #destination_encoding should be a string or Encoding object.<br>opt should be nil, a hash or an integer.<br>convpath should be an array. convpath may contain<br>two-element arrays which contain encodings or encoding names, or<br>strings representing decorator names.<br>::new optionally takes an option. The option should be a hash or an integer. The option hash can contain :invalid => nil, etc. The option integer should be logical-or of constants such as Encoding::Converter::INVALID_REPLACE, etc.<br>Raise error on invalid byte sequence. This is a default behavior.<br>Replace invalid byte sequence by replacement string.<br>Raise an error if a character in #source_encoding is not defined in destination_encoding. This is a default behavior.<br>Replace undefined character in #destination_encoding with replacement string.<br>Specify the replacement string. If not specified, “uFFFD” is used for Unicode encodings and “?” for others.<br>Convert CRLF and CR to LF.<br>Convert LF to CRLF.<br>Convert LF to CR.<br>Escape as XML CharData. This form can be used as a HTML 4.0 #PCDATA.<br>‘&’ -> ‘&amp;’<br>‘<’ -> ‘&lt;’<br>‘>’ -> ‘&gt;’<br>undefined characters in #destination_encoding -> hexadecimal CharRef such as &#xHH;<br>Escape as XML AttValue. The converted result is quoted as “…”. This form can be used as a HTML 4.0 attribute value.<br>‘&’ -> ‘&amp;’<br>‘<’ -> ‘&lt;’<br>‘>’ -> ‘&gt;’<br>‘“’ -> ‘&quot;’<br>undefined characters in #destination_encoding -> hexadecimal CharRef such as &#xHH;<br>Examples:<pre><code># UTF-16BE to UTF-8\nec = Encoding::Converter.new("UTF-16BE", "UTF-8")\n\n# Usually, decorators such as newline conversion are inserted last.\nec = Encoding::Converter.new("UTF-16BE", "UTF-8", :universal_newline => true)\np ec.convpath #=> [[#<Encoding:UTF-16BE>, #<Encoding:UTF-8>],\n              #    "universal_newline"]\n\n# But, if the last encoding is ASCII incompatible,\n# decorators are inserted before the last conversion.\nec = Encoding::Converter.new("UTF-8", "UTF-16BE", :crlf_newline => true)\np ec.convpath #=> ["crlf_newline",\n              #    [#<Encoding:UTF-8>, #<Encoding:UTF-16BE>]]\n\n# Conversion path can be specified directly.\nec = Encoding::Converter.new(["universal_newline", ["EUC-JP", "UTF-8"], ["UTF-8", "UTF-16BE"]])\np ec.convpath #=> ["universal_newline",\n              #    [#<Encoding:EUC-JP>, #<Encoding:UTF-8>],\n              #    [#<Encoding:UTF-8>, #<Encoding:UTF-16BE>]]\n</code></pre>	http://ruby-doc.org/core/Encoding/Converter.html#method-c-new
Encoding::Converter::search_convpath	A			class methods							<pre><code>Encoding::Converter.search_convpath(source_encoding, destination_encoding)         → ary\nEncoding::Converter.search_convpath(source_encoding, destination_encoding, opt)    → ary</code></pre>Returns a conversion path.	http://ruby-doc.org/core/Encoding/Converter.html#method-c-search_convpath
Encoding::Converter#==	A			instance methods							<pre><code>ec == other        → true or false</code></pre>	http://ruby-doc.org/core/Encoding/Converter.html#method-i-3D-3D
Encoding::Converter#convert	A			instance methods							<pre><code>convert(source_string) → destination_string</code></pre>Convert source_string and return destination_string.<br>source_string is assumed as a part of source. i.e. :partial_input=>true is specified internally. finish method should be used last.<pre><code>ec = Encoding::Converter.new("utf-8", "euc-jp")\nputs ec.convert("\u3042").dump     #=> "\xA4\xA2"\nputs ec.finish.dump                #=> ""\n\nec = Encoding::Converter.new("euc-jp", "utf-8")\nputs ec.convert("\xA4").dump       #=> ""\nputs ec.convert("\xA2").dump       #=> "\xE3\x81\x82"\nputs ec.finish.dump                #=> ""\n\nec = Encoding::Converter.new("utf-8", "iso-2022-jp")\nputs ec.convert("\xE3").dump       #=> "".force_encoding("ISO-2022-JP")\nputs ec.convert("\x81").dump       #=> "".force_encoding("ISO-2022-JP")\nputs ec.convert("\x82").dump       #=> "\e$B$\"".force_encoding("ISO-2022-JP")\nputs ec.finish.dump                #=> "\e(B".force_encoding("ISO-2022-JP")\n</code></pre>If a conversion error occur, Encoding::UndefinedConversionError or Encoding::InvalidByteSequenceError is raised. #convert doesn’t supply methods to recover or restart from these exceptions. When you want to handle these conversion errors, use #primitive_convert.	http://ruby-doc.org/core/Encoding/Converter.html#method-i-convert
Encoding::Converter#convpath	A			instance methods							<pre><code>convpath        → ary</code></pre>Returns the conversion path of ec.<br>The result is an array of conversions.<pre><code>ec = Encoding::Converter.new("ISO-8859-1", "EUC-JP", crlf_newline: true)\np ec.convpath\n#=> [[#<Encoding:ISO-8859-1>, #<Encoding:UTF-8>],\n#    [#<Encoding:UTF-8>, #<Encoding:EUC-JP>],\n#    "crlf_newline"]\n</code></pre>Each element of the array is a pair of encodings or a string. A pair means an encoding conversion. A string means a decorator.<br>In the above example, [#<Encoding:ISO-8859-1>, #<Encoding:UTF-8>] means a converter from ISO-8859-1 to UTF-8. “crlf_newline” means newline converter from LF to CRLF.	http://ruby-doc.org/core/Encoding/Converter.html#method-i-convpath
Encoding::Converter#destination_encoding	A			instance methods							<pre><code>destination_encoding → encoding</code></pre>Returns the destination encoding as an Encoding object.	http://ruby-doc.org/core/Encoding/Converter.html#method-i-destination_encoding
Encoding::Converter#finish	A			instance methods							<pre><code>finish → string</code></pre>Finishes the converter. It returns the last part of the converted string.<pre><code>ec = Encoding::Converter.new("utf-8", "iso-2022-jp")\np ec.convert("\u3042")     #=> "\e$B$\""\np ec.finish                #=> "\e(B"\n</code></pre>	http://ruby-doc.org/core/Encoding/Converter.html#method-i-finish
Encoding::Converter#insert_output	A			instance methods							<pre><code>insert_output(string) → nil</code></pre>Inserts string into the encoding converter. The string will be converted to the destination encoding and output on later conversions.<br>If the destination encoding is stateful, string is converted according to the state and the state is updated.<br>This method should be used only when a conversion error occurs.<pre><code>ec = Encoding::Converter.new("utf-8", "iso-8859-1")\nsrc = "HIRAGANA LETTER A is \u{3042}."\ndst = ""\np ec.primitive_convert(src, dst)    #=> :undefined_conversion\nputs "[#{dst.dump}, #{src.dump}]"   #=> ["HIRAGANA LETTER A is ", "."]\nec.insert_output("<err>")\np ec.primitive_convert(src, dst)    #=> :finished\nputs "[#{dst.dump}, #{src.dump}]"   #=> ["HIRAGANA LETTER A is <err>.", ""]\n\nec = Encoding::Converter.new("utf-8", "iso-2022-jp")\nsrc = "\u{306F 3041 3068 2661 3002}" # U+2661 is not representable in iso-2022-jp\ndst = ""\np ec.primitive_convert(src, dst)    #=> :undefined_conversion\nputs "[#{dst.dump}, #{src.dump}]"   #=> ["\e$B$O$!$H".force_encoding("ISO-2022-JP"), "\xE3\x80\x82"]\nec.insert_output "?"                # state change required to output "?".\np ec.primitive_convert(src, dst)    #=> :finished\nputs "[#{dst.dump}, #{src.dump}]"   #=> ["\e$B$O$!$H\e(B?\e$B!#\e(B".force_encoding("ISO-2022-JP"), ""]\n</code></pre>	http://ruby-doc.org/core/Encoding/Converter.html#method-i-insert_output
Encoding::Converter#inspect	A			instance methods							<pre><code>inspect         → string</code></pre>Returns a printable version of ec<pre><code>ec = Encoding::Converter.new("iso-8859-1", "utf-8")\nputs ec.inspect    #=> #<Encoding::Converter: ISO-8859-1 to UTF-8>\n</code></pre>	http://ruby-doc.org/core/Encoding/Converter.html#method-i-inspect
Encoding::Converter#last_error	A			instance methods							<pre><code>last_error → exception or nil</code></pre>Returns an exception object for the last conversion. Returns nil if the last conversion did not produce an error.<br>“error” means that Encoding::InvalidByteSequenceError and Encoding::UndefinedConversionError for #convert and :invalid_byte_sequence, :incomplete_input and :undefined_conversion for #primitive_convert.<pre><code>ec = Encoding::Converter.new("utf-8", "iso-8859-1")\np ec.primitive_convert(src="\xf1abcd", dst="")       #=> :invalid_byte_sequence\np ec.last_error      #=> #<Encoding::InvalidByteSequenceError: "\xF1" followed by "a" on UTF-8>\np ec.primitive_convert(src, dst, nil, 1)             #=> :destination_buffer_full\np ec.last_error      #=> nil\n</code></pre>	http://ruby-doc.org/core/Encoding/Converter.html#method-i-last_error
Encoding::Converter#primitive_convert	A			instance methods							<pre><code>primitive_convert(source_buffer, destination_buffer) → symbol\nprimitive_convert(source_buffer, destination_buffer, destination_byteoffset) → symbol\nprimitive_convert(source_buffer, destination_buffer, destination_byteoffset, destination_bytesize) → symbol\nprimitive_convert(source_buffer, destination_buffer, destination_byteoffset, destination_bytesize, opt) → symbol</code></pre>possible opt elements:<br>possible results:<pre><code>:invalid_byte_sequence\n:incomplete_input\n:undefined_conversion\n:after_output\n:destination_buffer_full\n:source_buffer_empty\n:finished\n</code></pre>#primitive_convert converts source_buffer into destination_buffer.<br>source_buffer should be a string or nil. nil means an empty string.<br>destination_buffer should be a string.<br>destination_byteoffset should be an integer or nil. nil means the end of destination_buffer. If it is omitted, nil is assumed.<br>destination_bytesize should be an integer or nil. nil means unlimited. If it is omitted, nil is assumed.<br>opt should be nil, a hash or an integer. nil means no flags. If it is omitted, nil is assumed.<br>#primitive_convert converts the content of source_buffer from beginning and store the result into destination_buffer.<br>destination_byteoffset and destination_bytesize specify the region which the converted result is stored. destination_byteoffset specifies the start position in destination_buffer in bytes. If destination_byteoffset is nil, destination_buffer.bytesize is used for appending the result. destination_bytesize specifies maximum number of bytes. If destination_bytesize is nil, destination size is unlimited. After conversion, destination_buffer is resized to destination_byteoffset + actually produced number of bytes. Also destination_buffer’s encoding is set to destination_encoding.<br>#primitive_convert drops the converted part of source_buffer. the dropped part is converted in destination_buffer or buffered in Encoding::Converter object.<br>#primitive_convert stops conversion when one of following condition met.<br>invalid byte sequence found in source buffer (:invalid_byte_sequence) primitive_errinfo and last_error methods returns the detail of the error.<br>unexpected end of source buffer (:incomplete_input) this occur only when :partial_input is not specified. primitive_errinfo and last_error methods returns the detail of the error.<br>character not representable in output encoding (:undefined_conversion) primitive_errinfo and last_error methods returns the detail of the error.<br>after some output is generated, before input is done (:after_output) this occur only when :after_output is specified.<br>destination buffer is full (:destination_buffer_full) this occur only when destination_bytesize is non-nil.<br>source buffer is empty (:source_buffer_empty) this occur only when :partial_input is specified.<br>conversion is finished (:finished)<br>example:<pre><code>ec = Encoding::Converter.new("UTF-8", "UTF-16BE")\nret = ec.primitive_convert(src="pi", dst="", nil, 100)\np [ret, src, dst] #=> [:finished, "", "\x00p\x00i"]\n\nec = Encoding::Converter.new("UTF-8", "UTF-16BE")\nret = ec.primitive_convert(src="pi", dst="", nil, 1)\np [ret, src, dst] #=> [:destination_buffer_full, "i", "\x00"]\nret = ec.primitive_convert(src, dst="", nil, 1)\np [ret, src, dst] #=> [:destination_buffer_full, "", "p"]\nret = ec.primitive_convert(src, dst="", nil, 1)\np [ret, src, dst] #=> [:destination_buffer_full, "", "\x00"]\nret = ec.primitive_convert(src, dst="", nil, 1)\np [ret, src, dst] #=> [:finished, "", "i"]\n</code></pre>	http://ruby-doc.org/core/Encoding/Converter.html#method-i-primitive_convert
Encoding::Converter#primitive_errinfo	A			instance methods							<pre><code>primitive_errinfo → array</code></pre>#primitive_errinfo returns important information regarding the last error as a 5-element array:<pre><code>[result, enc1, enc2, error_bytes, readagain_bytes]\n</code></pre>result is the last result of primitive_convert.<br>Other elements are only meaningful when result is :invalid_byte_sequence, :incomplete_input or :undefined_conversion.<br>enc1 and enc2 indicate a conversion step as a pair of strings. For example, a converter from EUC-JP to ISO-8859-1 converts a string as follows: EUC-JP -> UTF-8 -> ISO-8859-1. So [enc1, enc2] is either [“EUC-JP”, “UTF-8”] or [“UTF-8”, “ISO-8859-1”].<br>error_bytes and readagain_bytes indicate the byte sequences which caused the error. error_bytes is discarded portion. readagain_bytes is buffered portion which is read again on next conversion.<br>Example:<pre><code># \xff is invalid as EUC-JP.\nec = Encoding::Converter.new("EUC-JP", "Shift_JIS")\nec.primitive_convert(src="\xff", dst="", nil, 10)\np ec.primitive_errinfo\n#=> [:invalid_byte_sequence, "EUC-JP", "UTF-8", "\xFF", ""]\n\n# HIRAGANA LETTER A (\xa4\xa2 in EUC-JP) is not representable in ISO-8859-1.\n# Since this error is occur in UTF-8 to ISO-8859-1 conversion,\n# error_bytes is HIRAGANA LETTER A in UTF-8 (\xE3\x81\x82).\nec = Encoding::Converter.new("EUC-JP", "ISO-8859-1")\nec.primitive_convert(src="\xa4\xa2", dst="", nil, 10)\np ec.primitive_errinfo\n#=> [:undefined_conversion, "UTF-8", "ISO-8859-1", "\xE3\x81\x82", ""]\n\n# partial character is invalid\nec = Encoding::Converter.new("EUC-JP", "ISO-8859-1")\nec.primitive_convert(src="\xa4", dst="", nil, 10)\np ec.primitive_errinfo\n#=> [:incomplete_input, "EUC-JP", "UTF-8", "\xA4", ""]\n\n# Encoding::Converter::PARTIAL_INPUT prevents invalid errors by\n# partial characters.\nec = Encoding::Converter.new("EUC-JP", "ISO-8859-1")\nec.primitive_convert(src="\xa4", dst="", nil, 10, Encoding::Converter::PARTIAL_INPUT)\np ec.primitive_errinfo\n#=> [:source_buffer_empty, nil, nil, nil, nil]\n\n# \xd8\x00\x00@ is invalid as UTF-16BE because\n# no low surrogate after high surrogate (\xd8\x00).\n# It is detected by 3rd byte (\00) which is part of next character.\n# So the high surrogate (\xd8\x00) is discarded and\n# the 3rd byte is read again later.\n# Since the byte is buffered in ec, it is dropped from src.\nec = Encoding::Converter.new("UTF-16BE", "UTF-8")\nec.primitive_convert(src="\xd8\x00\x00@", dst="", nil, 10)\np ec.primitive_errinfo\n#=> [:invalid_byte_sequence, "UTF-16BE", "UTF-8", "\xD8\x00", "\x00"]\np src\n#=> "@"\n\n# Similar to UTF-16BE, \x00\xd8@\x00 is invalid as UTF-16LE.\n# The problem is detected by 4th byte.\nec = Encoding::Converter.new("UTF-16LE", "UTF-8")\nec.primitive_convert(src="\x00\xd8@\x00", dst="", nil, 10)\np ec.primitive_errinfo\n#=> [:invalid_byte_sequence, "UTF-16LE", "UTF-8", "\x00\xD8", "@\x00"]\np src\n#=> ""\n</code></pre>	http://ruby-doc.org/core/Encoding/Converter.html#method-i-primitive_errinfo
Encoding::Converter#putback	A			instance methods							call-seq<br>Put back the bytes which will be converted.<br>The bytes are caused by invalid_byte_sequence error. When invalid_byte_sequence error, some bytes are discarded and some bytes are buffered to be converted later. The latter bytes can be put back. It can be observed by Encoding::InvalidByteSequenceError#readagain_bytes and #primitive_errinfo.<pre><code>ec = Encoding::Converter.new("utf-16le", "iso-8859-1")\nsrc = "\x00\xd8\x61\x00"\ndst = ""\np ec.primitive_convert(src, dst)   #=> :invalid_byte_sequence\np ec.primitive_errinfo     #=> [:invalid_byte_sequence, "UTF-16LE", "UTF-8", "\x00\xD8", "a\x00"]\np ec.putback               #=> "a\x00"\np ec.putback               #=> ""          # no more bytes to put back\n</code></pre>	http://ruby-doc.org/core/Encoding/Converter.html#method-i-putback
Encoding::Converter#replacement	A			instance methods							<pre><code>replacement → string</code></pre>Returns the replacement string.<pre><code>ec = Encoding::Converter.new("euc-jp", "us-ascii")\np ec.replacement    #=> "?"\n\nec = Encoding::Converter.new("euc-jp", "utf-8")\np ec.replacement    #=> "\uFFFD"\n</code></pre>	http://ruby-doc.org/core/Encoding/Converter.html#method-i-replacement
Encoding::Converter#replacement=	A			instance methods							<pre><code>replacement = string</code></pre>Sets the replacement string.<pre><code>ec = Encoding::Converter.new("utf-8", "us-ascii", :undef => :replace)\nec.replacement = "<undef>"\np ec.convert("a \u3042 b")      #=> "a <undef> b"\n</code></pre>	http://ruby-doc.org/core/Encoding/Converter.html#method-i-replacement-3D
Encoding::Converter#source_encoding	A			instance methods							<pre><code>source_encoding → encoding</code></pre>Returns the source encoding as an Encoding object.	http://ruby-doc.org/core/Encoding/Converter.html#method-i-source_encoding
RubyVM::Env	A			classes							::RubyVM::Env	http://ruby-doc.org/core/RubyVM/Env.html
Thread::Backtrace::Location	A			classes							An object representation of a stack frame, initialized by Kernel#caller_locations.<br>For example:<pre><code># caller_locations.rb\ndef a(skip)\n  caller_locations(skip)\nend\ndef b(skip)\n  a(skip)\nend\ndef c(skip)\n  b(skip)\nend\n\nc(0..2).map do |call|\n  puts call.to_s\nend\n</code></pre>Running ruby caller_locations.rb will produce:<br>Here’s another example with a slightly different result:<pre><code># foo.rb\nclass Foo\n  attr_accessor :locations\n  def initialize(skip)\n    @locations = caller_locations(skip)\n  end\nend\n\nFoo.new(0..2).locations.map do |call|\n  puts call.to_s\nend\n</code></pre>Now run ruby foo.rb and you should see:	http://ruby-doc.org/core/Thread/Backtrace/Location.html
Thread::Backtrace::Location#absolute_path	A			instance methods							Returns the full file path of this frame.<br>Same as path, but includes the absolute path.	http://ruby-doc.org/core/Thread/Backtrace/Location.html#method-i-absolute_path
Thread::Backtrace::Location#base_label	A			instance methods							Returns the base label of this frame.<br>Usually same as label, without decoration.	http://ruby-doc.org/core/Thread/Backtrace/Location.html#method-i-base_label
Thread::Backtrace::Location#inspect	A			instance methods							Returns the same as calling inspect on the string representation of to_str	http://ruby-doc.org/core/Thread/Backtrace/Location.html#method-i-inspect
Thread::Backtrace::Location#label	A			instance methods							Returns the label of this frame.<br>Usually consists of method, class, module, etc names with decoration.<br>Consider the following example:<pre><code>def foo\n  puts caller_locations(0).first.label\n\n  1.times do\n    puts caller_locations(0).first.label\n\n    1.times do\n      puts caller_locations(0).first.label\n    end\n\n  end\nend\n</code></pre>The result of calling foo is this:	http://ruby-doc.org/core/Thread/Backtrace/Location.html#method-i-label
Thread::Backtrace::Location#lineno	A			instance methods							Returns the line number of this frame.<br>For example, using caller_locations.rb from Thread::Backtrace::Location<pre><code>loc = c(0..1).first\nloc.lineno #=> 2\n</code></pre>	http://ruby-doc.org/core/Thread/Backtrace/Location.html#method-i-lineno
Thread::Backtrace::Location#path	A			instance methods							Returns the file name of this frame.<br>For example, using caller_locations.rb from Thread::Backtrace::Location<pre><code>loc = c(0..1).first\nloc.path #=> caller_locations.rb\n</code></pre>	http://ruby-doc.org/core/Thread/Backtrace/Location.html#method-i-path
Thread::Backtrace::Location#to_s	A			instance methods							Returns a Kernel#caller style string representing this frame.	http://ruby-doc.org/core/Thread/Backtrace/Location.html#method-i-to_s
UncaughtThrowError	A			classes							Raised when throw is called with a tag which does not have corresponding catch block.<pre><code>throw "foo", "bar"\n</code></pre>raises the exception:	http://ruby-doc.org/core/UncaughtThrowError.html
UncaughtThrowError::new	A			class methods							Document-class: UncaughtThrowError<br>Raised when throw is called with a tag which does not have corresponding catch block.<pre><code>throw "foo", "bar"\n</code></pre>raises the exception:	http://ruby-doc.org/core/UncaughtThrowError.html#method-c-new
UncaughtThrowError#tag	A			instance methods							<pre><code>tag   → obj</code></pre>Return the tag object which was called for.	http://ruby-doc.org/core/UncaughtThrowError.html#method-i-tag
UncaughtThrowError#to_s	A			instance methods							<pre><code>to_s   →  string</code></pre>Returns formatted message with the inspected tag.	http://ruby-doc.org/core/UncaughtThrowError.html#method-i-to_s
UncaughtThrowError#value	A			instance methods							<pre><code>value   → obj</code></pre>Return the return value which was called for.	http://ruby-doc.org/core/UncaughtThrowError.html#method-i-value
TracePoint	A			classes							A class that provides the functionality of Kernel#set_trace_func in a nice Object-Oriented API.	http://ruby-doc.org/core/TracePoint.html
TracePoint::new	A			class methods							<pre><code>new(*events) { |obj| block }          → obj</code></pre>Returns a new TracePoint object, not enabled by default.<br>Next, in order to activate the trace, you must use #enable<pre><code>trace = TracePoint.new(:call) do |tp|\n    p [tp.lineno, tp.defined_class, tp.method_id, tp.event]\nend\n#=> #<TracePoint:disabled>\n\ntrace.enable\n#=> false\n\nputs "Hello, TracePoint!"\n# ...\n# [48, IRB::Notifier::AbstractNotifier, :printf, :call]\n# ...\n</code></pre>When you want to deactivate the trace, you must use #disable<pre><code>trace.disable\n</code></pre>See Events at TracePoint for possible events and more information.<br>A block must be given, otherwise a ThreadError is raised.<br>If the trace method isn’t included in the given events filter, a RuntimeError is raised.<pre><code>TracePoint.trace(:line) do |tp|\n    p tp.raised_exception\nend\n#=> RuntimeError: 'raised_exception' not supported by this event\n</code></pre>If the trace method is called outside block, a RuntimeError is raised.<pre><code>TracePoint.trace(:line) do |tp|\n  $tp = tp\nend\n$tp.line #=> access from outside (RuntimeError)\n</code></pre>Access from other threads is also forbidden.	http://ruby-doc.org/core/TracePoint.html#method-c-new
TracePoint::stat	A			class methods							<pre><code>stat → obj</code></pre>Returns internal information of TracePoint.<br>The contents of the returned value are implementation specific. It may be changed in future.<br>This method is only for debugging TracePoint itself.	http://ruby-doc.org/core/TracePoint.html#method-c-stat
TracePoint::trace	A			class methods							<pre><code>trace(*events) { |obj| block }        → obj</code></pre>A convenience method for ::new, that activates the trace automatically.<pre><code>trace = TracePoint.trace(:call) { |tp| [tp.lineno, tp.event] }\n#=> #<TracePoint:enabled>\n\ntrace.enabled? #=> true\n</code></pre>	http://ruby-doc.org/core/TracePoint.html#method-c-trace
TracePoint#binding	A			instance methods							Return the generated binding object from event	http://ruby-doc.org/core/TracePoint.html#method-i-binding
TracePoint#defined_class	A			instance methods							Return class or module of the method being called.<pre><code>class C; def foo; end; end\ntrace = TracePoint.new(:call) do |tp|\n  p tp.defined_class #=> C\nend.enable do\n  C.new.foo\nend\n</code></pre>If method is defined by a module, then that module is returned.<pre><code>module M; def foo; end; end\nclass C; include M; end;\ntrace = TracePoint.new(:call) do |tp|\n  p tp.defined_class #=> M\nend.enable do\n  C.new.foo\nend\n</code></pre>Note: defined_class returns singleton class.<br>6th block parameter of Kernel#set_trace_func passes original class of attached by singleton class.<br>This is a difference between Kernel#set_trace_func and TracePoint.<pre><code>class C; def self.foo; end; end\ntrace = TracePoint.new(:call) do |tp|\n  p tp.defined_class #=> #<Class:C>\nend.enable do\n  C.foo\nend\n</code></pre>	http://ruby-doc.org/core/TracePoint.html#method-i-defined_class
TracePoint#disable	A			instance methods							<pre><code>disable                → true or false\ndisable { block } → obj</code></pre>Deactivates the trace<br>Return true if trace was enabled. Return false if trace was disabled.<pre><code>trace.enabled?       #=> true\ntrace.disable        #=> false (previous status)\ntrace.enabled?       #=> false\ntrace.disable        #=> false\n</code></pre>If a block is given, the trace will only be disable within the scope of the block.<pre><code>trace.enabled?\n#=> true\n\ntrace.disable do\n    trace.enabled?\n    # only disabled for this block\nend\n\ntrace.enabled?\n#=> true\n</code></pre>Note: You cannot access event hooks within the block.<pre><code>trace.disable { p tp.lineno }\n#=> RuntimeError: access from outside\n</code></pre>	http://ruby-doc.org/core/TracePoint.html#method-i-disable
TracePoint#enable	A			instance methods							<pre><code>enable         → true or false\nenable { block }       → obj</code></pre>Activates the trace<br>Return true if trace was enabled. Return false if trace was disabled.<pre><code>trace.enabled?  #=> false\ntrace.enable    #=> false (previous state)\n                #   trace is enabled\ntrace.enabled?  #=> true\ntrace.enable    #=> true (previous state)\n                #   trace is still enabled\n</code></pre>If a block is given, the trace will only be enabled within the scope of the block.<pre><code>trace.enabled?\n#=> false\n\ntrace.enable do\n    trace.enabled?\n    # only enabled for this block\nend\n\ntrace.enabled?\n#=> false\n</code></pre>Note: You cannot access event hooks within the block.<pre><code>trace.enable { p tp.lineno }\n#=> RuntimeError: access from outside\n</code></pre>	http://ruby-doc.org/core/TracePoint.html#method-i-enable
TracePoint#enabled?	A			instance methods							<pre><code>enabled?           → true or false</code></pre>The current status of the trace	http://ruby-doc.org/core/TracePoint.html#method-i-enabled-3F
TracePoint#event	A			instance methods							Type of event<br>See Events at TracePoint for more information.	http://ruby-doc.org/core/TracePoint.html#method-i-event
TracePoint#inspect	A			instance methods							<pre><code>inspect  → string</code></pre>Return a string containing a human-readable TracePoint status.	http://ruby-doc.org/core/TracePoint.html#method-i-inspect
TracePoint#lineno	A			instance methods							Line number of the event	http://ruby-doc.org/core/TracePoint.html#method-i-lineno
TracePoint#method_id	A			instance methods							Return the name of the method being called	http://ruby-doc.org/core/TracePoint.html#method-i-method_id
TracePoint#path	A			instance methods							Path of the file being run	http://ruby-doc.org/core/TracePoint.html#method-i-path
TracePoint#raised_exception	A			instance methods							Value from exception raised on the :raise event	http://ruby-doc.org/core/TracePoint.html#method-i-raised_exception
TracePoint#return_value	A			instance methods							Return value from :return, c_return, and b_return event	http://ruby-doc.org/core/TracePoint.html#method-i-return_value
TracePoint#self	A			instance methods							Return the trace object during event<br>Same as #binding:<pre><code>trace.binding.eval('self')\n</code></pre>	http://ruby-doc.org/core/TracePoint.html#method-i-self
Comparable	A			modules							The Comparable mixin is used by classes whose objects may be ordered. The class must define the <=> operator, which compares the receiver against another object, returning -1, 0, or +1 depending on whether the receiver is less than, equal to, or greater than the other object. If the other object is not comparable then the <=> operator should return nil. Comparable uses <=> to implement the conventional comparison operators (<, <=, ==, >=, and >) and the method between?.<pre><code>class SizeMatters\n  include Comparable\n  attr :str\n  def <=>(other)\n    str.size <=> other.str.size\n  end\n  def initialize(str)\n    @str = str\n  end\n  def inspect\n    @str\n  end\nend\n\ns1 = SizeMatters.new("Z")\ns2 = SizeMatters.new("YY")\ns3 = SizeMatters.new("XXX")\ns4 = SizeMatters.new("WWWW")\ns5 = SizeMatters.new("VVVVV")\n\ns1 < s2                       #=> true\ns4.between?(s1, s3)           #=> false\ns4.between?(s3, s5)           #=> true\n[ s3, s2, s5, s4, s1 ].sort   #=> [Z, YY, XXX, WWWW, VVVVV]\n</code></pre>	http://ruby-doc.org/core/Comparable.html
Comparable#<	A			instance methods							<pre><code>obj < other    → true or false</code></pre>Compares two objects based on the receiver’s <=> method, returning true if it returns -1.	http://ruby-doc.org/core/Comparable.html#method-i-3C
Comparable#<=	A			instance methods							<pre><code>obj <= other    → true or false</code></pre>Compares two objects based on the receiver’s <=> method, returning true if it returns -1 or 0.	http://ruby-doc.org/core/Comparable.html#method-i-3C-3D
Comparable#==	A			instance methods							<pre><code>obj == other    → true or false</code></pre>Compares two objects based on the receiver’s <=> method, returning true if it returns 0. Also returns true if obj and other are the same object.	http://ruby-doc.org/core/Comparable.html#method-i-3D-3D
Comparable#>	A			instance methods							<pre><code>obj > other    → true or false</code></pre>Compares two objects based on the receiver’s <=> method, returning true if it returns 1.	http://ruby-doc.org/core/Comparable.html#method-i-3E
Comparable#>=	A			instance methods							<pre><code>obj >= other    → true or false</code></pre>Compares two objects based on the receiver’s <=> method, returning true if it returns 0 or 1.	http://ruby-doc.org/core/Comparable.html#method-i-3E-3D
Comparable#between?	A			instance methods							<pre><code>between?(min, max)    → true or false</code></pre>Returns false if obj <=> min is less than zero or if anObject <=> max is greater than zero, true otherwise.<pre><code>3.between?(1, 5)               #=> true\n6.between?(1, 5)               #=> false\n'cat'.between?('ant', 'dog')   #=> true\n'gnu'.between?('ant', 'dog')   #=> false\n</code></pre>	http://ruby-doc.org/core/Comparable.html#method-i-between-3F
Kernel	A			modules							The Kernel module is included by class Object, so its methods are available in every Ruby object.<br>The Kernel instance methods are documented in class Object while the module methods are documented here. These methods are called without a receiver and thus can be called in functional form:<pre><code>sprintf "%.1f", 1.234 #=> "1.2"\n</code></pre>	http://ruby-doc.org/core/Kernel.html
Kernel#Array	A			instance methods							<pre><code>Array(arg)    → array</code></pre>Returns arg as an Array.<br>First tries to call to_ary on arg, then to_a.<pre><code>Array(1..5)   #=> [1, 2, 3, 4, 5]\n</code></pre>	http://ruby-doc.org/core/Kernel.html#method-i-Array
Kernel#Complex	A			instance methods							<pre><code>Complex(x[, y])  →  numeric</code></pre>Returns x+i*y;<pre><code>Complex(1, 2)    #=> (1+2i)\nComplex('1+2i')  #=> (1+2i)\nComplex(nil)     #=> TypeError\nComplex(1, nil)  #=> TypeError\n</code></pre>Syntax of string form:<br>See String#to_c.	http://ruby-doc.org/core/Kernel.html#method-i-Complex
Kernel#Float	A			instance methods								http://ruby-doc.org/core/Kernel.html#method-i-Float
Kernel#Hash	A			instance methods							<pre><code>Hash(arg)    → hash</code></pre>Converts arg to a Hash by calling arg.to_hash. Returns an empty Hash when arg is nil or [].<pre><code>Hash([])          #=> {}\nHash(nil)         #=> {}\nHash(key: :value) #=> {:key => :value}\nHash([1, 2, 3])   #=> TypeError\n</code></pre>	http://ruby-doc.org/core/Kernel.html#method-i-Hash
Kernel#Integer	A			instance methods							<pre><code>Integer(arg, base=0)    → integer</code></pre>Converts arg to a Fixnum or Bignum. Numeric types are converted directly (with floating point numbers being truncated). base (0, or between 2 and 36) is a base for integer string representation. If arg is a String, when base is omitted or equals zero, radix indicators (0, 0b, and 0x) are honored. In any case, strings should be strictly conformed to numeric representation. This behavior is different from that of String#to_i. Non string values will be converted by first trying to_int, then to_i. Passing nil raises a TypeError.<pre><code>Integer(123.999)    #=> 123\nInteger("0x1a")     #=> 26\nInteger(Time.new)   #=> 1204973019\nInteger("0930", 10) #=> 930\nInteger("111", 2)   #=> 7\nInteger(nil)        #=> TypeError\n</code></pre>	http://ruby-doc.org/core/Kernel.html#method-i-Integer
Kernel#Rational	A			instance methods							<pre><code>Rational(x[, y])  →  numeric</code></pre>Returns x/y;<pre><code>Rational(1, 2)   #=> (1/2)\nRational('1/2')  #=> (1/2)\nRational(nil)    #=> TypeError\nRational(1, nil) #=> TypeError\n</code></pre>Syntax of string form:<br>See String#to_r.	http://ruby-doc.org/core/Kernel.html#method-i-Rational
Kernel#String	A			instance methods							<pre><code>String(arg)   → string</code></pre>Returns arg as a String.<br>First tries to call its to_str method, then its to_s method.<pre><code>String(self)        #=> "main"\nString(self.class)  #=> "Object"\nString(123456)      #=> "123456"\n</code></pre>	http://ruby-doc.org/core/Kernel.html#method-i-String
Kernel#__callee__	A			instance methods							<pre><code>__callee__         → symbol</code></pre>Returns the called name of the current method as a Symbol. If called outside of a method, it returns nil.	http://ruby-doc.org/core/Kernel.html#method-i-__callee__
Kernel#__dir__	A			instance methods							<pre><code>__dir__         → string</code></pre>Returns the canonicalized absolute path of the directory of the file from which this method is called. It means symlinks in the path is resolved. If __FILE__ is nil, it returns nil. The return value equals to File.dirname(File.realpath(__FILE__)).	http://ruby-doc.org/core/Kernel.html#method-i-__dir__
Kernel#__method__	A			instance methods							<pre><code>__method__         → symbol</code></pre>Returns the name at the definition of the current method as a Symbol. If called outside of a method, it returns nil.	http://ruby-doc.org/core/Kernel.html#method-i-__method__
Kernel#`	A			instance methods							<pre><code>`cmd`    → string</code></pre>Returns the standard output of running cmd in a subshell. The built-in syntax %x{...} uses this method. Sets $? to the process status.<pre><code>%x`date`                   #=> "Wed Apr  9 08:56:30 CDT 2003\n"\n%x`ls testdir`.split[1]    #=> "main.rb"\n%x`echo oops && exit 99`   #=> "oops\n"\n$?.exitstatus            #=> 99\n</code></pre>	http://ruby-doc.org/core/Kernel.html#method-i-60
Kernel#abort	A			instance methods							<pre><code>abort\nKernel::abort([msg])\nProcess::abort([msg])</code></pre>Terminate execution immediately, effectively by calling Kernel.exit(false). If msg is given, it is written to STDERR prior to terminating.	http://ruby-doc.org/core/Kernel.html#method-i-abort
Kernel#at_exit	A			instance methods							<pre><code>at_exit { block } → proc</code></pre>Converts block to a Proc object (and therefore binds it at the point of call) and registers it for execution when the program exits. If multiple handlers are registered, they are executed in reverse order of registration.<pre><code>def do_at_exit(str1)\n  at_exit { print str1 }\nend\nat_exit { puts "cruel world" }\ndo_at_exit("goodbye ")\nexit\n</code></pre>produces:<pre><code>goodbye cruel world\n</code></pre>	http://ruby-doc.org/core/Kernel.html#method-i-at_exit
Kernel#autoload	A			instance methods							<pre><code>autoload(module, filename)   → nil</code></pre>Registers filename to be loaded (using Kernel::require) the first time that module (which may be a String or a symbol) is accessed.<pre><code>autoload(:MyModule, "/usr/local/lib/modules/my_module.rb")\n</code></pre>	http://ruby-doc.org/core/Kernel.html#method-i-autoload
Kernel#autoload?	A			instance methods							<pre><code>autoload?(name)   → String or nil</code></pre>Returns filename to be loaded if name is registered as autoload.<pre><code>autoload(:B, "b")\nautoload?(:B)            #=> "b"\n</code></pre>	http://ruby-doc.org/core/Kernel.html#method-i-autoload-3F
Kernel#binding	A			instance methods							<pre><code>binding → a_binding</code></pre>Returns a Binding object, describing the variable and method bindings at the point of call. This object can be used when calling eval to execute the evaluated command in this environment. See also the description of class Binding.<pre><code>def get_binding(param)\n  return binding\nend\nb = get_binding("hello")\neval("param", b)   #=> "hello"\n</code></pre>	http://ruby-doc.org/core/Kernel.html#method-i-binding
Kernel#block_given?	A			instance methods							<pre><code>block_given?   → true or false</code></pre>Returns true if yield would execute a block in the current context. The iterator? form is mildly deprecated.<pre><code>def try\n  if block_given?\n    yield\n  else\n    "no block"\n  end\nend\ntry                  #=> "no block"\ntry { "hello" }      #=> "hello"\ntry do "hello" end   #=> "hello"\n</code></pre>	http://ruby-doc.org/core/Kernel.html#method-i-block_given-3F
Kernel#callcc	A			instance methods							<pre><code>callcc {|cont| block }   →  obj</code></pre>Generates a Continuation object, which it passes to the associated block. You need to require 'continuation' before using this method. Performing a cont.call will cause the callcc to return (as will falling through the end of the block). The value returned by the callcc is the value of the block, or the value passed to cont.call. See class Continuation for more details. Also see #throw for an alternative mechanism for unwinding a call stack.	http://ruby-doc.org/core/Kernel.html#method-i-callcc
Kernel#caller	A			instance methods							<pre><code>caller(start=1, length=nil)  → array or nil\ncaller(range)                → array or nil</code></pre>Returns the current execution stack—an array containing strings in the form file:line or file:line: in `method'.<br>The optional start parameter determines the number of initial stack entries to omit from the top of the stack.<br>A second optional length parameter can be used to limit how many entries are returned from the stack.<br>Returns nil if start is greater than the size of current execution stack.<br>Optionally you can pass a range, which will return an array containing the entries within the specified range.<pre><code>def a(skip)\n  caller(skip)\nend\ndef b(skip)\n  a(skip)\nend\ndef c(skip)\n  b(skip)\nend\nc(0)   #=> ["prog:2:in `a'", "prog:5:in `b'", "prog:8:in `c'", "prog:10:in `<main>'"]\nc(1)   #=> ["prog:5:in `b'", "prog:8:in `c'", "prog:11:in `<main>'"]\nc(2)   #=> ["prog:8:in `c'", "prog:12:in `<main>'"]\nc(3)   #=> ["prog:13:in `<main>'"]\nc(4)   #=> []\nc(5)   #=> nil\n</code></pre>	http://ruby-doc.org/core/Kernel.html#method-i-caller
Kernel#caller_locations	A			instance methods							<pre><code>caller_locations(start=1, length=nil)    → array or nil\ncaller_locations(range)                  → array or nil</code></pre>Returns the current execution stack—an array containing backtrace location objects.<br>See Thread::Backtrace::Location for more information.<br>The optional start parameter determines the number of initial stack entries to omit from the top of the stack.<br>A second optional length parameter can be used to limit how many entries are returned from the stack.<br>Returns nil if start is greater than the size of current execution stack.<br>Optionally you can pass a range, which will return an array containing the entries within the specified range.	http://ruby-doc.org/core/Kernel.html#method-i-caller_locations
Kernel#catch	A			instance methods							<pre><code>catch([tag]) {|tag| block }  → obj</code></pre>catch executes its block. If throw is not called, the block executes normally, and catch returns the value of the last expression evaluated.<pre><code>catch(1) { 123 }            # => 123\n</code></pre>If throw(tag2, val) is called, Ruby searches up its stack for a catch block whose tag has the same object_id as tag2. When found, the block stops executing and returns val (or nil if no second argument was given to throw).<pre><code>catch(1) { throw(1, 456) }  # => 456\ncatch(1) { throw(1) }       # => nil\n</code></pre>When tag is passed as the first argument, catch yields it as the parameter of the block.<pre><code>catch(1) {|x| x + 2 }       # => 3\n</code></pre>When no tag is given, catch yields a new unique object (as from Object.new) as the block parameter. This object can then be used as the argument to throw, and will match the correct catch block.<pre><code>catch do |obj_A|\n  catch do |obj_B|\n    throw(obj_B, 123)\n    puts "This puts is not reached"\n  end\n\n  puts "This puts is displayed"\n  456\nend\n\n# => 456\n\ncatch do |obj_A|\n  catch do |obj_B|\n    throw(obj_A, 123)\n    puts "This puts is still not reached"\n  end\n\n  puts "Now this puts is also not reached"\n  456\nend\n\n# => 123\n</code></pre>	http://ruby-doc.org/core/Kernel.html#method-i-catch
Kernel#chomp	A			instance methods							<pre><code>chomp            → $_\nchomp(string)    → $_</code></pre>Equivalent to $_ = $_.chomp(string). See String#chomp. Available only when -p/-n command line option specified.	http://ruby-doc.org/core/Kernel.html#method-i-chomp
Kernel#chop	A			instance methods							<pre><code>chop   → $_</code></pre>Equivalent to ($_.dup).chop!, except nil is never returned. See String#chop!. Available only when -p/-n command line option specified.	http://ruby-doc.org/core/Kernel.html#method-i-chop
Kernel#eval	A			instance methods							<pre><code>eval(string [, binding [, filename [,lineno]]])  → obj</code></pre>Evaluates the Ruby expression(s) in string. If binding is given, which must be a Binding object, the evaluation is performed in its context. If the optional filename and lineno parameters are present, they will be used when reporting syntax errors.<pre><code>def get_binding(str)\n  return binding\nend\nstr = "hello"\neval "str + ' Fred'"                      #=> "hello Fred"\neval "str + ' Fred'", get_binding("bye")  #=> "bye Fred"\n</code></pre>	http://ruby-doc.org/core/Kernel.html#method-i-eval
Kernel#exec	A			instance methods							<pre><code>exec([env,] command... [,options])</code></pre>Replaces the current process by running the given external command, which can take one of the following forms:<br>command line string which is passed to the standard shell<br>command name and one or more arguments (no shell)<br>command name, argv and zero or more arguments (no shell)<br>In the first form, the string is taken as a command line that is subject to shell expansion before being executed.<br>The standard shell always means "/bin/sh" on Unix-like systems, same as ENV["RUBYSHELL"] (or ENV["COMSPEC"] on Windows NT series), and similar.<br>If the string from the first form (exec("command")) follows these simple rules:<br>no meta characters<br>no shell reserved word and no special built-in<br>Ruby invokes the command directly without shell<br>You can force shell invocation by adding “;” to the string (because “;” is a meta character).<br>Note that this behavior is observable by pid obtained (return value of spawn() and IO#pid for IO.popen) is the pid of the invoked command, not shell.<br>In the second form (exec("command1", "arg1", ...)), the first is taken as a command name and the rest are passed as parameters to command with no shell expansion.<br>In the third form (exec(["command", "argv0"], "arg1", ...)), starting a two-element array at the beginning of the command, the first element is the command to be executed, and the second argument is used as the argv[0] value, which may show up in process listings.<br>In order to execute the command, one of the exec(2) system calls are used, so the running command may inherit some of the environment of the original program (including open file descriptors).<br>This behavior is modified by the given env and options parameters. See ::spawn for details.<br>If the command fails to execute (typically Errno::ENOENT when it was not found) a SystemCallError exception is raised.<br>This method modifies process attributes according to given options before exec(2) system call. See ::spawn for more details about the given options.<br>The modified attributes may be retained when exec(2) system call fails.<br>For example, hard resource limits are not restorable.<br>Consider to create a child process using ::spawn or #system if this is not acceptable.<pre><code>exec "echo *"       # echoes list of files in current directory\n# never get here\n\nexec "echo", "*"    # echoes an asterisk\n# never get here\n</code></pre>	http://ruby-doc.org/core/Kernel.html#method-i-exec
Kernel#exit	A			instance methods							<pre><code>exit(status=true)\nKernel::exit(status=true)\nProcess::exit(status=true)</code></pre>Initiates the termination of the Ruby script by raising the SystemExit exception. This exception may be caught. The optional parameter is used to return a status code to the invoking environment. true and FALSE of status means success and failure respectively. The interpretation of other integer values are system dependent.<pre><code>begin\n  exit\n  puts "never get here"\nrescue SystemExit\n  puts "rescued a SystemExit exception"\nend\nputs "after begin block"\n</code></pre>produces:<br>Just prior to termination, Ruby executes any at_exit functions (see Kernel::at_exit) and runs any object finalizers (see ObjectSpace.define_finalizer).<pre><code>at_exit { puts "at_exit function" }\nObjectSpace.define_finalizer("string",  proc { puts "in finalizer" })\nexit\n</code></pre>produces:	http://ruby-doc.org/core/Kernel.html#method-i-exit
Kernel#exit!	A			instance methods							<pre><code>exit!(status=false)</code></pre>Exits the process immediately. No exit handlers are run. status is returned to the underlying system as the exit status.<pre><code>Process.exit!(true)\n</code></pre>	http://ruby-doc.org/core/Kernel.html#method-i-exit-21
Kernel#fail	A			instance methods							<pre><code>fail\nfail(string)\nfail(exception [, string [, array]])</code></pre>With no arguments, raises the exception in $! or raises a RuntimeError if $! is nil. With a single String argument, raises a RuntimeError with the string as a message. Otherwise, the first parameter should be the name of an Exception class (or an object that returns an Exception object when sent an exception message). The optional second parameter sets the message associated with the exception, and the third parameter is an array of callback information. Exceptions are caught by the rescue clause of begin...end blocks.<pre><code>raise "Failed to create socket"\nraise ArgumentError, "No parameters", caller\n</code></pre>	http://ruby-doc.org/core/Kernel.html#method-i-fail
Kernel#fork	A			instance methods							<pre><code>fork  [{ block }]   → fixnum or nil\nfork [{ block }]   → fixnum or nil</code></pre>Creates a subprocess. If a block is specified, that block is run in the subprocess, and the subprocess terminates with a status of zero. Otherwise, the fork call returns twice, once in the parent, returning the process ID of the child, and once in the child, returning nil. The child process can exit using Kernel.exit! to avoid running any at_exit functions. The parent process should use Process.wait to collect the termination statuses of its children or use Process.detach to register disinterest in their status; otherwise, the operating system may accumulate zombie processes.<br>The thread calling fork is the only thread in the created child process. fork doesn’t copy other threads.<br>If fork is not usable, Process.respond_to?(:fork) returns false.<br>Note that fork(2) is not available on some platforms like Windows and NetBSD 4. Therefore you should use spawn() instead of fork().	http://ruby-doc.org/core/Kernel.html#method-i-fork
Kernel#format	A			instance methods							<pre><code>format(format_string [, arguments...] )   → string</code></pre>Returns the string resulting from applying format_string to any additional arguments. Within the format string, any characters other than format sequences are copied to the result.<br>The syntax of a format sequence is follows.<br>A format sequence consists of a percent sign, followed by optional flags, width, and precision indicators, then terminated with a field type character. The field type controls how the corresponding sprintf argument is to be interpreted, while the flags modify that interpretation.<br>The field type characters are:<br>The flags modifies the behavior of the formats. The flag characters are:<br>Examples of flags:<pre><code># `+' and space flag specifies the sign of non-negative numbers.\nsprintf("%d", 123)  #=> "123"\nsprintf("%+d", 123) #=> "+123"\nsprintf("% d", 123) #=> " 123"\n\n# `#' flag for `o' increases number of digits to show `0'.\n# `+' and space flag changes format of negative numbers.\nsprintf("%o", 123)   #=> "173"\nsprintf("%#o", 123)  #=> "0173"\nsprintf("%+o", -123) #=> "-173"\nsprintf("%o", -123)  #=> "..7605"\nsprintf("%#o", -123) #=> "..7605"\n\n# `#' flag for `x' add a prefix `0x' for non-zero numbers.\n# `+' and space flag disables complements for negative numbers.\nsprintf("%x", 123)   #=> "7b"\nsprintf("%#x", 123)  #=> "0x7b"\nsprintf("%+x", -123) #=> "-7b"\nsprintf("%x", -123)  #=> "..f85"\nsprintf("%#x", -123) #=> "0x..f85"\nsprintf("%#x", 0)    #=> "0"\n\n# `#' for `X' uses the prefix `0X'.\nsprintf("%X", 123)  #=> "7B"\nsprintf("%#X", 123) #=> "0X7B"\n\n# `#' flag for `b' add a prefix `0b' for non-zero numbers.\n# `+' and space flag disables complements for negative numbers.\nsprintf("%b", 123)   #=> "1111011"\nsprintf("%#b", 123)  #=> "0b1111011"\nsprintf("%+b", -123) #=> "-1111011"\nsprintf("%b", -123)  #=> "..10000101"\nsprintf("%#b", -123) #=> "0b..10000101"\nsprintf("%#b", 0)    #=> "0"\n\n# `#' for `B' uses the prefix `0B'.\nsprintf("%B", 123)  #=> "1111011"\nsprintf("%#B", 123) #=> "0B1111011"\n\n# `#' for `e' forces to show the decimal point.\nsprintf("%.0e", 1)  #=> "1e+00"\nsprintf("%#.0e", 1) #=> "1.e+00"\n\n# `#' for `f' forces to show the decimal point.\nsprintf("%.0f", 1234)  #=> "1234"\nsprintf("%#.0f", 1234) #=> "1234."\n\n# `#' for `g' forces to show the decimal point.\n# It also disables stripping lowest zeros.\nsprintf("%g", 123.4)   #=> "123.4"\nsprintf("%#g", 123.4)  #=> "123.400"\nsprintf("%g", 123456)  #=> "123456"\nsprintf("%#g", 123456) #=> "123456."\n</code></pre>The field width is an optional integer, followed optionally by a period and a precision. The width specifies the minimum number of characters that will be written to the result for this field.<br>Examples of width:<pre><code># padding is done by spaces,       width=20\n# 0 or radix-1.             <------------------>\nsprintf("%20d", 123)   #=> "                 123"\nsprintf("%+20d", 123)  #=> "                +123"\nsprintf("%020d", 123)  #=> "00000000000000000123"\nsprintf("%+020d", 123) #=> "+0000000000000000123"\nsprintf("% 020d", 123) #=> " 0000000000000000123"\nsprintf("%-20d", 123)  #=> "123                 "\nsprintf("%-+20d", 123) #=> "+123                "\nsprintf("%- 20d", 123) #=> " 123                "\nsprintf("%020x", -123) #=> "..ffffffffffffffff85"\n</code></pre>For numeric fields, the precision controls the number of decimal places displayed. For string fields, the precision determines the maximum number of characters to be copied from the string. (Thus, the format sequence %10.10s will always contribute exactly ten characters to the result.)<br>Examples of precisions:<pre><code># precision for `d', 'o', 'x' and 'b' is\n# minimum number of digits               <------>\nsprintf("%20.8d", 123)  #=> "            00000123"\nsprintf("%20.8o", 123)  #=> "            00000173"\nsprintf("%20.8x", 123)  #=> "            0000007b"\nsprintf("%20.8b", 123)  #=> "            01111011"\nsprintf("%20.8d", -123) #=> "           -00000123"\nsprintf("%20.8o", -123) #=> "            ..777605"\nsprintf("%20.8x", -123) #=> "            ..ffff85"\nsprintf("%20.8b", -11)  #=> "            ..110101"\n\n# "0x" and "0b" for `#x' and `#b' is not counted for\n# precision but "0" for `#o' is counted.  <------>\nsprintf("%#20.8d", 123)  #=> "            00000123"\nsprintf("%#20.8o", 123)  #=> "            00000173"\nsprintf("%#20.8x", 123)  #=> "          0x0000007b"\nsprintf("%#20.8b", 123)  #=> "          0b01111011"\nsprintf("%#20.8d", -123) #=> "           -00000123"\nsprintf("%#20.8o", -123) #=> "            ..777605"\nsprintf("%#20.8x", -123) #=> "          0x..ffff85"\nsprintf("%#20.8b", -11)  #=> "          0b..110101"\n\n# precision for `e' is number of\n# digits after the decimal point           <------>\nsprintf("%20.8e", 1234.56789) #=> "      1.23456789e+03"\n\n# precision for `f' is number of\n# digits after the decimal point               <------>\nsprintf("%20.8f", 1234.56789) #=> "       1234.56789000"\n\n# precision for `g' is number of\n# significant digits                          <------->\nsprintf("%20.8g", 1234.56789) #=> "           1234.5679"\n\n#                                         <------->\nsprintf("%20.8g", 123456789)  #=> "       1.2345679e+08"\n\n# precision for `s' is\n# maximum number of characters                    <------>\nsprintf("%20.8s", "string test") #=> "            string t"\n</code></pre>Examples:<pre><code>sprintf("%d %04x", 123, 123)               #=> "123 007b"\nsprintf("%08b '%4s'", 123, 123)            #=> "01111011 ' 123'"\nsprintf("%1$*2$s %2$d %1$s", "hello", 8)   #=> "   hello 8 hello"\nsprintf("%1$*2$s %2$d", "hello", -8)       #=> "hello    -8"\nsprintf("%+g:% g:%-g", 1.23, 1.23, 1.23)   #=> "+1.23: 1.23:1.23"\nsprintf("%u", -123)                        #=> "-123"\n</code></pre>For more complex formatting, Ruby supports a reference by name. %<name>s style uses format style, but %{name} style doesn't.<br>Examples:<pre><code>sprintf("%<foo>d : %<bar>f", { :foo => 1, :bar => 2 })\n  #=> 1 : 2.000000\nsprintf("%{foo}f", { :foo => 1 })\n  # => "1f"\n</code></pre>	http://ruby-doc.org/core/Kernel.html#method-i-format
Kernel#gets	A			instance methods							<pre><code>gets(sep=$/)    → string or nil\ngets(limit)     → string or nil\ngets(sep,limit) → string or nil</code></pre>Returns (and assigns to $_) the next line from the list of files in ARGV (or $*), or from standard input if no files are present on the command line. Returns nil at end of file. The optional argument specifies the record separator. The separator is included with the contents of each record. A separator of nil reads the entire contents, and a zero-length separator reads the input one paragraph at a time, where paragraphs are divided by two consecutive newlines. If the first argument is an integer, or optional second argument is given, the returning string would not be longer than the given value in bytes. If multiple filenames are present in ARGV, +gets(nil)+ will read the contents one file at a time.<pre><code>ARGV << "testfile"\nprint while gets\n</code></pre>produces:<br>The style of programming using $_ as an implicit parameter is gradually losing favor in the Ruby community.	http://ruby-doc.org/core/Kernel.html#method-i-gets
Kernel#global_variables	A			instance methods							<pre><code>global_variables    → array</code></pre>Returns an array of the names of global variables.<pre><code>global_variables.grep /std/   #=> [:$stdin, :$stdout, :$stderr]\n</code></pre>	http://ruby-doc.org/core/Kernel.html#method-i-global_variables
Kernel#gsub	A			instance methods							<pre><code>gsub(pattern, replacement)    → $_\ngsub(pattern) {|...| block }  → $_</code></pre>Equivalent to $_.gsub..., except that $_ will be updated if substitution occurs. Available only when -p/-n command line option specified.	http://ruby-doc.org/core/Kernel.html#method-i-gsub
Kernel#iterator?	A			instance methods							<pre><code>iterator?      → true or false</code></pre>Returns true if yield would execute a block in the current context. The iterator? form is mildly deprecated.<pre><code>def try\n  if block_given?\n    yield\n  else\n    "no block"\n  end\nend\ntry                  #=> "no block"\ntry { "hello" }      #=> "hello"\ntry do "hello" end   #=> "hello"\n</code></pre>	http://ruby-doc.org/core/Kernel.html#method-i-iterator-3F
Kernel#lambda	A			instance methods							<pre><code>lambda { |...| block }  → a_proc</code></pre>Equivalent to Proc.new, except the resulting Proc objects check the number of parameters passed when called.	http://ruby-doc.org/core/Kernel.html#method-i-lambda
Kernel#load	A			instance methods							<pre><code>load(filename, wrap=false)   → true</code></pre>Loads and executes the Ruby program in the file filename. If the filename does not resolve to an absolute path, the file is searched for in the library directories listed in $:. If the optional wrap parameter is true, the loaded script will be executed under an anonymous module, protecting the calling program’s global namespace. In no circumstance will any local variables in the loaded file be propagated to the loading environment.	http://ruby-doc.org/core/Kernel.html#method-i-load
Kernel#local_variables	A			instance methods							<pre><code>local_variables    → array</code></pre>Returns the names of the current local variables.<pre><code>fred = 1\nfor i in 1..10\n   # ...\nend\nlocal_variables   #=> [:fred, :i]\n</code></pre>	http://ruby-doc.org/core/Kernel.html#method-i-local_variables
Kernel#loop	A			instance methods							<pre><code>loop { block }\nloop            → an_enumerator</code></pre>Repeatedly executes the block.<br>If no block is given, an enumerator is returned instead.<pre><code>loop do\n  print "Input: "\n  line = gets\n  break if !line or line =~ /^qQ/\n  # ...\nend\n</code></pre>StopIteration raised in the block breaks the loop. In this case, loop returns the "result" value stored in the exception.<pre><code>enum = Enumerator.new { |y|\n  y << "one"\n  y << "two"\n  :ok\n}\n\nresult = loop {\n  puts enum.next\n} #=> :ok\n</code></pre>	http://ruby-doc.org/core/Kernel.html#method-i-loop
Kernel#open	A			instance methods							<pre><code>open(path [, mode [, perm]] [, opt])                → io or nil\nopen(path [, mode [, perm]] [, opt]) {|io| block }  → obj</code></pre>Creates an IO object connected to the given stream, file, or subprocess.<br>If path does not start with a pipe character (|), treat it as the name of a file to open using the specified mode (defaulting to “r”).<br>The mode is either a string or an integer. If it is an integer, it must be bitwise-or of open(2) flags, such as File::RDWR or File::EXCL. If it is a string, it is either “fmode”, “fmode:ext_enc”, or “fmode:ext_enc:int_enc”.<br>See the documentation of IO.new for full documentation of the mode string directives.<br>If a file is being created, its initial permissions may be set using the perm parameter. See File.new and the open(2) and chmod(2) man pages for a description of permissions.<br>If a block is specified, it will be invoked with the IO object as a parameter, and the IO will be automatically closed when the block terminates. The call returns the value of the block.<br>If path starts with a pipe character ("|"), a subprocess is created, connected to the caller by a pair of pipes. The returned IO object may be used to write to the standard input and read from the standard output of this subprocess.<br>If the command following the pipe is a single minus sign ("|-"), Ruby forks, and this subprocess is connected to the parent. If the command is not "-", the subprocess runs the command.<br>When the subprocess is ruby (opened via "|-"), the open call returns nil. If a block is associated with the open call, that block will run twice — once in the parent and once in the child.<br>The block parameter will be an IO object in the parent and nil in the child. The parent’s IO object will be connected to the child’s $stdin and $stdout. The subprocess will be terminated at the end of the block.<br>Reading from “testfile”:<pre><code>open("testfile") do |f|\n  print f.gets\nend\n</code></pre>Produces:<pre><code>This is line one\n</code></pre>Open a subprocess and read its output:<pre><code>cmd = open("|date")\nprint cmd.gets\ncmd.close\n</code></pre>Produces:<br>Open a subprocess running the same Ruby program:<pre><code>f = open("|-", "w+")\nif f == nil\n  puts "in Child"\n  exit\nelse\n  puts "Got: #{f.gets}"\nend\n</code></pre>Produces:<br>Open a subprocess using a block to receive the IO object:<pre><code>open "|-" do |f|\n  if f then\n    # parent process\n    puts "Got: #{f.gets}"\n  else\n    # child process\n    puts "in Child"\n  end\nend\n</code></pre>Produces:	http://ruby-doc.org/core/Kernel.html#method-i-open
Kernel#p	A			instance methods							<pre><code>p(obj)              → obj\np(obj1, obj2, ...)  → [obj, ...]\np()                 → nil</code></pre>For each object, directly writes obj.inspect followed by a newline to the program’s standard output.<pre><code>S = Struct.new(:name, :state)\ns = S['dave', 'TX']\np s\n</code></pre>produces:<pre><code>#<S name="dave", state="TX">\n</code></pre>	http://ruby-doc.org/core/Kernel.html#method-i-p
Kernel#print	A			instance methods							<pre><code>print(obj, ...)    → nil</code></pre>Prints each object in turn to $stdout. If the output field separator ($,) is not nil, its contents will appear between each field. If the output record separator ($\) is not nil, it will be appended to the output. If no arguments are given, prints $_. Objects that aren’t strings will be converted by calling their to_s method.<pre><code>print "cat", [1,2,3], 99, "\n"\n$, = ", "\n$\ = "\n"\nprint "cat", [1,2,3], 99\n</code></pre>produces:	http://ruby-doc.org/core/Kernel.html#method-i-print
Kernel#printf	A			instance methods							<pre><code>printf(io, string [, obj ... ])    → nil\nprintf(string [, obj ... ])        → nil</code></pre>Equivalent to:<br>or	http://ruby-doc.org/core/Kernel.html#method-i-printf
Kernel#proc	A			instance methods							<pre><code>proc   { |...| block }  → a_proc</code></pre>Equivalent to Proc.new.	http://ruby-doc.org/core/Kernel.html#method-i-proc
Kernel#putc	A			instance methods							<pre><code>putc(int)   → int</code></pre><pre><code>Equivalent to:\n\n  $stdout.putc(int)\n</code></pre>Refer to the documentation for IO#putc for important information regarding multi-byte characters.	http://ruby-doc.org/core/Kernel.html#method-i-putc
Kernel#puts	A			instance methods							<pre><code>puts(obj, ...)    → nil</code></pre>Equivalent to	http://ruby-doc.org/core/Kernel.html#method-i-puts
Kernel#raise	A			instance methods							<pre><code>raise\nraise(string)\nraise(exception [, string [, array]])</code></pre>With no arguments, raises the exception in $! or raises a RuntimeError if $! is nil. With a single String argument, raises a RuntimeError with the string as a message. Otherwise, the first parameter should be the name of an Exception class (or an object that returns an Exception object when sent an exception message). The optional second parameter sets the message associated with the exception, and the third parameter is an array of callback information. Exceptions are caught by the rescue clause of begin...end blocks.<pre><code>raise "Failed to create socket"\nraise ArgumentError, "No parameters", caller\n</code></pre>	http://ruby-doc.org/core/Kernel.html#method-i-raise
Kernel#rand	A			instance methods							<pre><code>rand(max=0)    → number</code></pre>If called without an argument, or if max.to_i.abs == 0, rand returns a pseudo-random floating point number between 0.0 and 1.0, including 0.0 and excluding 1.0.<pre><code>rand        #=> 0.2725926052826416\n</code></pre>When max.abs is greater than or equal to 1, rand returns a pseudo-random integer greater than or equal to 0 and less than max.to_i.abs.<pre><code>rand(100)   #=> 12\n</code></pre>When max is a Range, rand returns a random number where range.member?(number) == true.<br>Negative or floating point values for max are allowed, but may give surprising results.<pre><code>rand(-100) # => 87\nrand(-0.5) # => 0.8130921818028143\nrand(1.9)  # equivalent to rand(1), which is always 0\n</code></pre>#srand may be used to ensure that sequences of random numbers are reproducible between different runs of a program.<br>See also Random#rand.	http://ruby-doc.org/core/Kernel.html#method-i-rand
Kernel#readline	A			instance methods							<pre><code>readline(sep=$/)     → string\nreadline(limit)      → string\nreadline(sep, limit) → string</code></pre>Equivalent to Kernel::gets, except readline raises EOFError at end of file.	http://ruby-doc.org/core/Kernel.html#method-i-readline
Kernel#readlines	A			instance methods							<pre><code>readlines(sep=$/)    → array\nreadlines(limit)     → array\nreadlines(sep,limit) → array</code></pre>Returns an array containing the lines returned by calling Kernel.gets(sep) until the end of file.	http://ruby-doc.org/core/Kernel.html#method-i-readlines
Kernel#require	A			instance methods							<pre><code>require(name)    → true or false</code></pre>Loads the given name, returning true if successful and false if the feature is already loaded.<br>If the filename does not resolve to an absolute path, it will be searched for in the directories listed in $LOAD_PATH ($:).<br>If the filename has the extension “.rb”, it is loaded as a source file; if the extension is “.so”, “.o”, or “.dll”, or the default shared library extension on the current platform, Ruby loads the shared library as a Ruby extension. Otherwise, Ruby tries adding “.rb”, “.so”, and so on to the name until found. If the file named cannot be found, a LoadError will be raised.<br>For Ruby extensions the filename given may use any shared library extension. For example, on Linux the socket extension is “socket.so” and require 'socket.dll' will load the socket extension.<br>The absolute path of the loaded file is added to $LOADED_FEATURES ($"). A file will not be loaded again if its path already appears in $". For example, require 'a'; require './a' will not load a.rb again.<pre><code>require "my-library.rb"\nrequire "db-driver"\n</code></pre>Any constants or globals within the loaded source file will be available in the calling program’s global namespace. However, local variables will not be propagated to the loading environment.	http://ruby-doc.org/core/Kernel.html#method-i-require
Kernel#require_relative	A			instance methods							<pre><code>require_relative(string) → true or false</code></pre>Ruby tries to load the library named string relative to the requiring file’s path. If the file’s path cannot be determined a LoadError is raised. If a file is loaded true is returned and false otherwise.	http://ruby-doc.org/core/Kernel.html#method-i-require_relative
Kernel#select	A			instance methods							<pre><code>select(read_array [, write_array [, error_array [, timeout]]]) → array  or  nil</code></pre>Calls select(2) system call. It monitors given arrays of IO objects, waits until one or more of IO objects are ready for reading, are ready for writing, and have pending exceptions respectively, and returns an array that contains arrays of those IO objects. It will return nil if optional timeout value is given and no IO object is ready in timeout seconds.<br>IO.select peeks the buffer of IO objects for testing readability. If the IO buffer is not empty, IO.select immediately notifies readability. This "peek" only happens for IO objects. It does not happen for IO-like objects such as OpenSSL::SSL::SSLSocket.<br>The best way to use IO.select is invoking it after nonblocking methods such as read_nonblock, write_nonblock, etc. The methods raise an exception which is extended by IO::WaitReadable or IO::WaitWritable. The modules notify how the caller should wait with IO.select. If IO::WaitReadable is raised, the caller should wait for reading. If IO::WaitWritable is raised, the caller should wait for writing.<br>So, blocking read (readpartial) can be emulated using read_nonblock and IO.select as follows:<pre><code>begin\n  result = io_like.read_nonblock(maxlen)\nrescue IO::WaitReadable\n  IO.select([io_like])\n  retry\nrescue IO::WaitWritable\n  IO.select(nil, [io_like])\n  retry\nend\n</code></pre>Especially, the combination of nonblocking methods and IO.select is preferred for IO like objects such as OpenSSL::SSL::SSLSocket. It has to_io method to return underlying IO object. IO.select calls to_io to obtain the file descriptor to wait.<br>This means that readability notified by IO.select doesn’t mean readability from OpenSSL::SSL::SSLSocket object.<br>The most likely situation is that OpenSSL::SSL::SSLSocket buffers some data. IO.select doesn’t see the buffer. So IO.select can block when OpenSSL::SSL::SSLSocket#readpartial doesn’t block.<br>However, several more complicated situations exist.<br>SSL is a protocol which is sequence of records. The record consists of multiple bytes. So, the remote side of SSL sends a partial record, IO.select notifies readability but OpenSSL::SSL::SSLSocket cannot decrypt a byte and OpenSSL::SSL::SSLSocket#readpartial will blocks.<br>Also, the remote side can request SSL renegotiation which forces the local SSL engine to write some data. This means OpenSSL::SSL::SSLSocket#readpartial may invoke write system call and it can block. In such a situation, OpenSSL::SSL::SSLSocket#read_nonblock raises IO::WaitWritable instead of blocking. So, the caller should wait for ready for writability as above example.<br>The combination of nonblocking methods and IO.select is also useful for streams such as tty, pipe socket socket when multiple processes read from a stream.<br>Finally, Linux kernel developers don’t guarantee that readability of select(2) means readability of following read(2) even for a single process. See select(2) manual on GNU/Linux system.<br>Invoking IO.select before IO#readpartial works well as usual. However it is not the best way to use IO.select.<br>The writability notified by select(2) doesn’t show how many bytes writable. IO#write method blocks until given whole string is written. So, IO#write(two or more bytes) can block after writability is notified by IO.select. IO#write_nonblock is required to avoid the blocking.<br>Blocking write (write) can be emulated using write_nonblock and IO.select as follows: IO::WaitReadable should also be rescued for SSL renegotiation in OpenSSL::SSL::SSLSocket.<pre><code>while 0 < string.bytesize\n  begin\n    written = io_like.write_nonblock(string)\n  rescue IO::WaitReadable\n    IO.select([io_like])\n    retry\n  rescue IO::WaitWritable\n    IO.select(nil, [io_like])\n    retry\n  end\n  string = string.byteslice(written..-1)\nend\n</code></pre>an array of IO objects that wait until ready for read<br>an array of IO objects that wait until ready for write<br>an array of IO objects that wait for exceptions<br>a numeric value in second<pre><code>rp, wp = IO.pipe\nmesg = "ping "\n100.times {\n  # IO.select follows IO#read.  Not the best way to use IO.select.\n  rs, ws, = IO.select([rp], [wp])\n  if r = rs[0]\n    ret = r.read(5)\n    print ret\n    case ret\n    when /ping/\n      mesg = "pong\n"\n    when /pong/\n      mesg = "ping "\n    end\n  end\n  if w = ws[0]\n    w.write(mesg)\n  end\n}\n</code></pre>produces:<pre><code>ping pong\nping pong\nping pong\n(snipped)\nping\n</code></pre>	http://ruby-doc.org/core/Kernel.html#method-i-select
Kernel#set_trace_func	A			instance methods							<pre><code>set_trace_func(proc)    → proc\nset_trace_func(nil)     → nil</code></pre>Establishes proc as the handler for tracing, or disables tracing if the parameter is nil.<br>Note: this method is obsolete, please use TracePoint instead.<br>proc takes up to six parameters:<br>an event name<br>a filename<br>a line number<br>an object id<br>a binding<br>the name of a class<br>proc is invoked whenever an event occurs.<br>Events are:<br>call a C-language routine<br>return from a C-language routine<br>call a Ruby method<br>start a class or module definition),<br>finish a class or module definition),<br>execute code on a new line<br>raise an exception<br>return from a Ruby method<br>Tracing is disabled within the context of proc.	http://ruby-doc.org/core/Kernel.html#method-i-set_trace_func
Kernel#sleep	A			instance methods							<pre><code>sleep([duration])    → fixnum</code></pre>Suspends the current thread for duration seconds (which may be any number, including a Float with fractional seconds). Returns the actual number of seconds slept (rounded), which may be less than that asked for if another thread calls Thread#run. Called without an argument, sleep() will sleep forever.<pre><code>Time.new    #=> 2008-03-08 19:56:19 +0900\nsleep 1.2   #=> 1\nTime.new    #=> 2008-03-08 19:56:20 +0900\nsleep 1.9   #=> 2\nTime.new    #=> 2008-03-08 19:56:22 +0900\n</code></pre>	http://ruby-doc.org/core/Kernel.html#method-i-sleep
Kernel#spawn	A			instance methods							<pre><code>spawn([env,] command... [,options])     → pid\nspawn([env,] command... [,options])     → pid</code></pre>spawn executes specified command and return its pid.<pre><code>pid = spawn("tar xf ruby-2.0.0-p195.tar.bz2")\nProcess.wait pid\n\npid = spawn(RbConfig.ruby, "-eputs'Hello, world!'")\nProcess.wait pid\n</code></pre>This method is similar to #system but it doesn’t wait for the command to finish.<br>The parent process should use Process.wait to collect the termination status of its child or use Process.detach to register disinterest in their status; otherwise, the operating system may accumulate zombie processes.<br>spawn has bunch of options to specify process attributes:<br>If a hash is given as env, the environment is updated by env before exec(2) in the child process. If a pair in env has nil as the value, the variable is deleted.<pre><code># set FOO as BAR and unset BAZ.\npid = spawn({"FOO"=>"BAR", "BAZ"=>nil}, command)\n</code></pre>If a hash is given as options, it specifies process group, create new process group, resource limit, current directory, umask and redirects for the child process. Also, it can be specified to clear environment variables.<br>The :unsetenv_others key in options specifies to clear environment variables, other than specified by env.<pre><code>pid = spawn(command, :unsetenv_others=>true) # no environment variable\npid = spawn({"FOO"=>"BAR"}, command, :unsetenv_others=>true) # FOO only\n</code></pre>The :pgroup key in options specifies a process group. The corresponding value should be true, zero, a positive integer, or nil. true and zero cause the process to be a process leader of a new process group. A non-zero positive integer causes the process to join the provided process group. The default value, nil, causes the process to remain in the same process group.<pre><code>pid = spawn(command, :pgroup=>true) # process leader\npid = spawn(command, :pgroup=>10) # belongs to the process group 10\n</code></pre>The :new_pgroup key in options specifies to pass CREATE_NEW_PROCESS_GROUP flag to CreateProcessW() that is Windows API. This option is only for Windows. true means the new process is the root process of the new process group. The new process has CTRL+C disabled. This flag is necessary for Process.kill(:SIGINT, pid) on the subprocess. :new_pgroup is false by default.<pre><code>pid = spawn(command, :new_pgroup=>true)  # new process group\npid = spawn(command, :new_pgroup=>false) # same process group\n</code></pre>The :rlimit_foo key specifies a resource limit. foo should be one of resource types such as core. The corresponding value should be an integer or an array which have one or two integers: same as cur_limit and max_limit arguments for Process.setrlimit.<pre><code>cur, max = Process.getrlimit(:CORE)\npid = spawn(command, :rlimit_core=>[0,max]) # disable core temporary.\npid = spawn(command, :rlimit_core=>max) # enable core dump\npid = spawn(command, :rlimit_core=>0) # never dump core.\n</code></pre>The :umask key in options specifies the umask.<pre><code>pid = spawn(command, :umask=>077)\n</code></pre>The :in, :out, :err, a fixnum, an IO and an array key specifies a redirection. The redirection maps a file descriptor in the child process.<br>For example, stderr can be merged into stdout as follows:<pre><code>pid = spawn(command, :err=>:out)\npid = spawn(command, 2=>1)\npid = spawn(command, STDERR=>:out)\npid = spawn(command, STDERR=>STDOUT)\n</code></pre>The hash keys specifies a file descriptor in the child process started by spawn. :err, 2 and STDERR specifies the standard error stream (stderr).<br>The hash values specifies a file descriptor in the parent process which invokes spawn. :out, 1 and STDOUT specifies the standard output stream (stdout).<br>In the above example, the standard output in the child process is not specified. So it is inherited from the parent process.<br>The standard input stream (stdin) can be specified by :in, 0 and STDIN.<br>A filename can be specified as a hash value.<pre><code>pid = spawn(command, :in=>"/dev/null") # read mode\npid = spawn(command, :out=>"/dev/null") # write mode\npid = spawn(command, :err=>"log") # write mode\npid = spawn(command, [:out, :err]=>"/dev/null") # write mode\npid = spawn(command, 3=>"/dev/null") # read mode\n</code></pre>For stdout and stderr (and combination of them), it is opened in write mode. Otherwise read mode is used.<br>For specifying flags and permission of file creation explicitly, an array is used instead.<pre><code>pid = spawn(command, :in=>["file"]) # read mode is assumed\npid = spawn(command, :in=>["file", "r"])\npid = spawn(command, :out=>["log", "w"]) # 0644 assumed\npid = spawn(command, :out=>["log", "w", 0600])\npid = spawn(command, :out=>["log", File::WRONLY|File::EXCL|File::CREAT, 0600])\n</code></pre>The array specifies a filename, flags and permission. The flags can be a string or an integer. If the flags is omitted or nil, File::RDONLY is assumed. The permission should be an integer. If the permission is omitted or nil, 0644 is assumed.<br>If an array of IOs and integers are specified as a hash key, all the elements are redirected.<pre><code># stdout and stderr is redirected to log file.\n# The file "log" is opened just once.\npid = spawn(command, [:out, :err]=>["log", "w"])\n</code></pre>Another way to merge multiple file descriptors is [:child, fd]. [:child, fd] means the file descriptor in the child process. This is different from fd. For example, :err=>:out means redirecting child stderr to parent stdout. But :err=>[:child, :out] means redirecting child stderr to child stdout. They differ if stdout is redirected in the child process as follows.<pre><code># stdout and stderr is redirected to log file.\n# The file "log" is opened just once.\npid = spawn(command, :out=>["log", "w"], :err=>[:child, :out])\n</code></pre>[:child, :out] can be used to merge stderr into stdout in IO.popen. In this case, IO.popen redirects stdout to a pipe in the child process and [:child, :out] refers the redirected stdout.<pre><code>io = IO.popen(["sh", "-c", "echo out; echo err >&2", :err=>[:child, :out]])\np io.read #=> "out\nerr\n"\n</code></pre>The :chdir key in options specifies the current directory.<pre><code>pid = spawn(command, :chdir=>"/var/tmp")\n</code></pre>spawn closes all non-standard unspecified descriptors by default. The “standard” descriptors are 0, 1 and 2. This behavior is specified by :close_others option. :close_others doesn’t affect the standard descriptors which are closed only if :close is specified explicitly.<pre><code>pid = spawn(command, :close_others=>true)  # close 3,4,5,... (default)\npid = spawn(command, :close_others=>false) # don't close 3,4,5,...\n</code></pre>:close_others is true by default for spawn and IO.popen.<br>Note that fds which close-on-exec flag is already set are closed regardless of :close_others option.<br>So IO.pipe and spawn can be used as IO.popen.<pre><code># similar to r = IO.popen(command)\nr, w = IO.pipe\npid = spawn(command, :out=>w)   # r, w is closed in the child process.\nw.close\n</code></pre>:close is specified as a hash value to close a fd individually.<pre><code>f = open(foo)\nsystem(command, f=>:close)        # don't inherit f.\n</code></pre>If a file descriptor need to be inherited, io=>io can be used.<pre><code># valgrind has --log-fd option for log destination.\n# log_w=>log_w indicates log_w.fileno inherits to child process.\nlog_r, log_w = IO.pipe\npid = spawn("valgrind", "--log-fd=#{log_w.fileno}", "echo", "a", log_w=>log_w)\nlog_w.close\np log_r.read\n</code></pre>It is also possible to exchange file descriptors.<pre><code>pid = spawn(command, :out=>:err, :err=>:out)\n</code></pre>The hash keys specify file descriptors in the child process. The hash values specifies file descriptors in the parent process. So the above specifies exchanging stdout and stderr. Internally, spawn uses an extra file descriptor to resolve such cyclic file descriptor mapping.<br>See Kernel.exec for the standard shell.	http://ruby-doc.org/core/Kernel.html#method-i-spawn
Kernel#sprintf	A			instance methods							<pre><code>sprintf(format_string [, arguments...] )  → string</code></pre>Returns the string resulting from applying format_string to any additional arguments. Within the format string, any characters other than format sequences are copied to the result.<br>The syntax of a format sequence is follows.<br>A format sequence consists of a percent sign, followed by optional flags, width, and precision indicators, then terminated with a field type character. The field type controls how the corresponding sprintf argument is to be interpreted, while the flags modify that interpretation.<br>The field type characters are:<br>The flags modifies the behavior of the formats. The flag characters are:<br>Examples of flags:<pre><code># `+' and space flag specifies the sign of non-negative numbers.\nsprintf("%d", 123)  #=> "123"\nsprintf("%+d", 123) #=> "+123"\nsprintf("% d", 123) #=> " 123"\n\n# `#' flag for `o' increases number of digits to show `0'.\n# `+' and space flag changes format of negative numbers.\nsprintf("%o", 123)   #=> "173"\nsprintf("%#o", 123)  #=> "0173"\nsprintf("%+o", -123) #=> "-173"\nsprintf("%o", -123)  #=> "..7605"\nsprintf("%#o", -123) #=> "..7605"\n\n# `#' flag for `x' add a prefix `0x' for non-zero numbers.\n# `+' and space flag disables complements for negative numbers.\nsprintf("%x", 123)   #=> "7b"\nsprintf("%#x", 123)  #=> "0x7b"\nsprintf("%+x", -123) #=> "-7b"\nsprintf("%x", -123)  #=> "..f85"\nsprintf("%#x", -123) #=> "0x..f85"\nsprintf("%#x", 0)    #=> "0"\n\n# `#' for `X' uses the prefix `0X'.\nsprintf("%X", 123)  #=> "7B"\nsprintf("%#X", 123) #=> "0X7B"\n\n# `#' flag for `b' add a prefix `0b' for non-zero numbers.\n# `+' and space flag disables complements for negative numbers.\nsprintf("%b", 123)   #=> "1111011"\nsprintf("%#b", 123)  #=> "0b1111011"\nsprintf("%+b", -123) #=> "-1111011"\nsprintf("%b", -123)  #=> "..10000101"\nsprintf("%#b", -123) #=> "0b..10000101"\nsprintf("%#b", 0)    #=> "0"\n\n# `#' for `B' uses the prefix `0B'.\nsprintf("%B", 123)  #=> "1111011"\nsprintf("%#B", 123) #=> "0B1111011"\n\n# `#' for `e' forces to show the decimal point.\nsprintf("%.0e", 1)  #=> "1e+00"\nsprintf("%#.0e", 1) #=> "1.e+00"\n\n# `#' for `f' forces to show the decimal point.\nsprintf("%.0f", 1234)  #=> "1234"\nsprintf("%#.0f", 1234) #=> "1234."\n\n# `#' for `g' forces to show the decimal point.\n# It also disables stripping lowest zeros.\nsprintf("%g", 123.4)   #=> "123.4"\nsprintf("%#g", 123.4)  #=> "123.400"\nsprintf("%g", 123456)  #=> "123456"\nsprintf("%#g", 123456) #=> "123456."\n</code></pre>The field width is an optional integer, followed optionally by a period and a precision. The width specifies the minimum number of characters that will be written to the result for this field.<br>Examples of width:<pre><code># padding is done by spaces,       width=20\n# 0 or radix-1.             <------------------>\nsprintf("%20d", 123)   #=> "                 123"\nsprintf("%+20d", 123)  #=> "                +123"\nsprintf("%020d", 123)  #=> "00000000000000000123"\nsprintf("%+020d", 123) #=> "+0000000000000000123"\nsprintf("% 020d", 123) #=> " 0000000000000000123"\nsprintf("%-20d", 123)  #=> "123                 "\nsprintf("%-+20d", 123) #=> "+123                "\nsprintf("%- 20d", 123) #=> " 123                "\nsprintf("%020x", -123) #=> "..ffffffffffffffff85"\n</code></pre>For numeric fields, the precision controls the number of decimal places displayed. For string fields, the precision determines the maximum number of characters to be copied from the string. (Thus, the format sequence %10.10s will always contribute exactly ten characters to the result.)<br>Examples of precisions:<pre><code># precision for `d', 'o', 'x' and 'b' is\n# minimum number of digits               <------>\nsprintf("%20.8d", 123)  #=> "            00000123"\nsprintf("%20.8o", 123)  #=> "            00000173"\nsprintf("%20.8x", 123)  #=> "            0000007b"\nsprintf("%20.8b", 123)  #=> "            01111011"\nsprintf("%20.8d", -123) #=> "           -00000123"\nsprintf("%20.8o", -123) #=> "            ..777605"\nsprintf("%20.8x", -123) #=> "            ..ffff85"\nsprintf("%20.8b", -11)  #=> "            ..110101"\n\n# "0x" and "0b" for `#x' and `#b' is not counted for\n# precision but "0" for `#o' is counted.  <------>\nsprintf("%#20.8d", 123)  #=> "            00000123"\nsprintf("%#20.8o", 123)  #=> "            00000173"\nsprintf("%#20.8x", 123)  #=> "          0x0000007b"\nsprintf("%#20.8b", 123)  #=> "          0b01111011"\nsprintf("%#20.8d", -123) #=> "           -00000123"\nsprintf("%#20.8o", -123) #=> "            ..777605"\nsprintf("%#20.8x", -123) #=> "          0x..ffff85"\nsprintf("%#20.8b", -11)  #=> "          0b..110101"\n\n# precision for `e' is number of\n# digits after the decimal point           <------>\nsprintf("%20.8e", 1234.56789) #=> "      1.23456789e+03"\n\n# precision for `f' is number of\n# digits after the decimal point               <------>\nsprintf("%20.8f", 1234.56789) #=> "       1234.56789000"\n\n# precision for `g' is number of\n# significant digits                          <------->\nsprintf("%20.8g", 1234.56789) #=> "           1234.5679"\n\n#                                         <------->\nsprintf("%20.8g", 123456789)  #=> "       1.2345679e+08"\n\n# precision for `s' is\n# maximum number of characters                    <------>\nsprintf("%20.8s", "string test") #=> "            string t"\n</code></pre>Examples:<pre><code>sprintf("%d %04x", 123, 123)               #=> "123 007b"\nsprintf("%08b '%4s'", 123, 123)            #=> "01111011 ' 123'"\nsprintf("%1$*2$s %2$d %1$s", "hello", 8)   #=> "   hello 8 hello"\nsprintf("%1$*2$s %2$d", "hello", -8)       #=> "hello    -8"\nsprintf("%+g:% g:%-g", 1.23, 1.23, 1.23)   #=> "+1.23: 1.23:1.23"\nsprintf("%u", -123)                        #=> "-123"\n</code></pre>For more complex formatting, Ruby supports a reference by name. %<name>s style uses format style, but %{name} style doesn't.<br>Examples:<pre><code>sprintf("%<foo>d : %<bar>f", { :foo => 1, :bar => 2 })\n  #=> 1 : 2.000000\nsprintf("%{foo}f", { :foo => 1 })\n  # => "1f"\n</code></pre>	http://ruby-doc.org/core/Kernel.html#method-i-sprintf
Kernel#srand	A			instance methods							<pre><code>srand(number = Random.new_seed) → old_seed</code></pre>Seeds the system pseudo-random number generator, Random::DEFAULT, with number. The previous seed value is returned.<br>If number is omitted, seeds the generator using a source of entropy provided by the operating system, if available (/dev/urandom on Unix systems or the RSA cryptographic provider on Windows), which is then combined with the time, the process id, and a sequence number.<br>srand may be used to ensure repeatable sequences of pseudo-random numbers between different runs of the program. By setting the seed to a known value, programs can be made deterministic during testing.<pre><code>srand 1234               # => 268519324636777531569100071560086917274\n[ rand, rand ]           # => [0.1915194503788923, 0.6221087710398319]\n[ rand(10), rand(1000) ] # => [4, 664]\nsrand 1234               # => 1234\n[ rand, rand ]           # => [0.1915194503788923, 0.6221087710398319]\n</code></pre>	http://ruby-doc.org/core/Kernel.html#method-i-srand
Kernel#sub	A			instance methods							<pre><code>sub(pattern, replacement)   → $_\nsub(pattern) {|...| block } → $_</code></pre>Equivalent to $_.sub(args), except that $_ will be updated if substitution occurs. Available only when -p/-n command line option specified.	http://ruby-doc.org/core/Kernel.html#method-i-sub
Kernel#syscall	A			instance methods							<pre><code>syscall(num [, args...])   → integer</code></pre>syscall is essentially unsafe and unportable. Feel free to shoot your foot. DL (Fiddle) library is preferred for safer and a bit more portable programming.	http://ruby-doc.org/core/Kernel.html#method-i-syscall
Kernel#system	A			instance methods							<pre><code>system([env,] command... [,options])    → true, false or nil</code></pre>Executes command… in a subshell. command… is one of following forms.<br>system returns true if the command gives zero exit status, false for non zero exit status. Returns nil if command execution fails. An error status is available in $?. The arguments are processed in the same way as for Kernel.spawn.<br>The hash arguments, env and options, are same as exec and spawn. See Kernel.spawn for details.<pre><code>system("echo *")\nsystem("echo", "*")\n</code></pre>produces:<br>See Kernel.exec for the standard shell.	http://ruby-doc.org/core/Kernel.html#method-i-system
Kernel#test	A			instance methods							<pre><code>test(cmd, file1 [, file2] ) → obj</code></pre>Uses the character cmd to perform various tests on file1 (first table below) or on file1 and file2 (second table).<br>File tests on a single file:<br>Tests that take two files:	http://ruby-doc.org/core/Kernel.html#method-i-test
Kernel#throw	A			instance methods							<pre><code>throw(tag [, obj])</code></pre>Transfers control to the end of the active catch block waiting for tag. Raises UncaughtThrowError if there is no catch block for the tag. The optional second parameter supplies a return value for the catch block, which otherwise defaults to nil. For examples, see Kernel::catch.	http://ruby-doc.org/core/Kernel.html#method-i-throw
Kernel#trace_var	A			instance methods							<pre><code>trace_var(symbol, cmd )             → nil\ntrace_var(symbol) {|val| block }    → nil</code></pre>Controls tracing of assignments to global variables. The parameter symbol identifies the variable (as either a string name or a symbol identifier). cmd (which may be a string or a Proc object) or block is executed whenever the variable is assigned. The block or Proc object receives the variable's new value as a parameter. Also see Kernel::untrace_var.<pre><code>trace_var :$_, proc {|v| puts "$_ is now '#{v}'" }\n$_ = "hello"\n$_ = ' there'\n</code></pre>produces:	http://ruby-doc.org/core/Kernel.html#method-i-trace_var
Kernel#trap	A			instance methods							<pre><code>trap( signal, command ) → obj\ntrap( signal ) {| | block } → obj</code></pre>Specifies the handling of signals. The first parameter is a signal name (a string such as “SIGALRM”, “SIGUSR1”, and so on) or a signal number. The characters “SIG” may be omitted from the signal name. The command or block specifies code to be run when the signal is raised. If the command is the string “IGNORE” or “SIG_IGN”, the signal will be ignored. If the command is “DEFAULT” or “SIG_DFL”, the Ruby’s default handler will be invoked. If the command is “EXIT”, the script will be terminated by the signal. If the command is “SYSTEM_DEFAULT”, the operating system’s default handler will be invoked. Otherwise, the given command or block will be run. The special signal name “EXIT” or signal number zero will be invoked just prior to program termination. trap returns the previous handler for the given signal.<pre><code>Signal.trap(0, proc { puts "Terminating: #{$$}" })\nSignal.trap("CLD")  { puts "Child died" }\nfork && Process.wait\n</code></pre>produces:	http://ruby-doc.org/core/Kernel.html#method-i-trap
Kernel#untrace_var	A			instance methods							<pre><code>untrace_var(symbol [, cmd] )   → array or nil</code></pre>Removes tracing for the specified command on the given global variable and returns nil. If no command is specified, removes all tracing for that variable and returns an array containing the commands actually removed.	http://ruby-doc.org/core/Kernel.html#method-i-untrace_var
Kernel#warn	A			instance methods							<pre><code>warn(msg, ...)   → nil</code></pre>Displays each of the given messages followed by a record separator on STDERR unless warnings have been disabled (for example with the -W0 flag).	http://ruby-doc.org/core/Kernel.html#method-i-warn
File::Constants	A			modules							File::Constants provides file-related constants. All possible file constants are listed in the documentation but they may not all be present on your platform.<br>If the underlying platform doesn't define a constant the corresponding Ruby constant is not defined.<br>Your platform documentations (e.g. man open(2)) may describe more detailed information.	http://ruby-doc.org/core/File/Constants.html
Enumerable	A			modules							The Enumerable mixin provides collection classes with several traversal and searching methods, and with the ability to sort. The class must provide a method each, which yields successive members of the collection. If Enumerable#max, #min, or #sort is used, the objects in the collection must also implement a meaningful <=> operator, as these methods rely on an ordering between members of the collection.	http://ruby-doc.org/core/Enumerable.html
Enumerable#all?	A			instance methods							<pre><code>all? [{ |obj| block } ]   → true or false</code></pre>Passes each element of the collection to the given block. The method returns true if the block never returns false or nil. If the block is not given, Ruby adds an implicit block of { |obj| obj } which will cause all? to return true when none of the collection members are false or nil.<pre><code>%w[ant bear cat].all? { |word| word.length >= 3 } #=> true\n%w[ant bear cat].all? { |word| word.length >= 4 } #=> false\n[nil, true, 99].all?                              #=> false\n</code></pre>	http://ruby-doc.org/core/Enumerable.html#method-i-all-3F
Enumerable#any?	A			instance methods							<pre><code>any? [{ |obj| block }]   → true or false</code></pre>Passes each element of the collection to the given block. The method returns true if the block ever returns a value other than false or nil. If the block is not given, Ruby adds an implicit block of { |obj| obj } that will cause any? to return true if at least one of the collection members is not false or nil.<pre><code>%w[ant bear cat].any? { |word| word.length >= 3 } #=> true\n%w[ant bear cat].any? { |word| word.length >= 4 } #=> true\n[nil, true, 99].any?                              #=> true\n</code></pre>	http://ruby-doc.org/core/Enumerable.html#method-i-any-3F
Enumerable#chunk	A			instance methods							<pre><code>chunk { |elt| ... }                       → an_enumerator</code></pre>Enumerates over the items, chunking them together based on the return value of the block.<br>Consecutive elements which return the same block value are chunked together.<br>For example, consecutive even numbers and odd numbers can be chunked as follows.<pre><code>[3, 1, 4, 1, 5, 9, 2, 6, 5, 3, 5].chunk { |n|\n  n.even?\n}.each { |even, ary|\n  p [even, ary]\n}\n#=> [false, [3, 1]]\n#   [true, [4]]\n#   [false, [1, 5, 9]]\n#   [true, [2, 6]]\n#   [false, [5, 3, 5]]\n</code></pre>This method is especially useful for sorted series of elements. The following example counts words for each initial letter.<pre><code>open("/usr/share/dict/words", "r:iso-8859-1") { |f|\n  f.chunk { |line| line.ord }.each { |ch, lines| p [ch.chr, lines.length] }\n}\n#=> ["\n", 1]\n#   ["A", 1327]\n#   ["B", 1372]\n#   ["C", 1507]\n#   ["D", 791]\n#   ...\n</code></pre>The following key values have special meaning:<br>nil and :_separator specifies that the elements should be dropped.<br>:_alone specifies that the element should be chunked by itself.<br>Any other symbols that begin with an underscore will raise an error:<pre><code>items.chunk { |item| :_underscore }\n#=> RuntimeError: symbols beginning with an underscore are reserved\n</code></pre>nil and :_separator can be used to ignore some elements.<br>For example, the sequence of hyphens in svn log can be eliminated as follows:<pre><code>sep = "-"*72 + "\n"\nIO.popen("svn log README") { |f|\n  f.chunk { |line|\n    line != sep || nil\n  }.each { |_, lines|\n    pp lines\n  }\n}\n#=> ["r20018 | knu | 2008-10-29 13:20:42 +0900 (Wed, 29 Oct 2008) | 2 lines\n",\n#    "\n",\n#    "* README, README.ja: Update the portability section.\n",\n#    "\n"]\n#   ["r16725 | knu | 2008-05-31 23:34:23 +0900 (Sat, 31 May 2008) | 2 lines\n",\n#    "\n",\n#    "* README, README.ja: Add a note about default C flags.\n",\n#    "\n"]\n#   ...\n</code></pre>Paragraphs separated by empty lines can be parsed as follows:<pre><code>File.foreach("README").chunk { |line|\n  /\A\s*\z/ !~ line || nil\n}.each { |_, lines|\n  pp lines\n}\n</code></pre>:_alone can be used to force items into their own chunk. For example, you can put lines that contain a URL by themselves, and chunk the rest of the lines together, like this:<pre><code>pattern = /http/\nopen(filename) { |f|\n  f.chunk { |line| line =~ pattern ? :_alone : true }.each { |key, lines|\n    pp lines\n  }\n}\n</code></pre>	http://ruby-doc.org/core/Enumerable.html#method-i-chunk
Enumerable#chunk_while	A			instance methods							<pre><code>chunk_while {|elt_before, elt_after| bool } → an_enumerator</code></pre>Creates an enumerator for each chunked elements. The beginnings of chunks are defined by the block.<br>This method split each chunk using adjacent elements, elt_before and elt_after, in the receiver enumerator. This method split chunks between elt_before and elt_after where the block returns false.<br>The block is called the length of the receiver enumerator minus one.<br>The result enumerator yields the chunked elements as an array. So each method can be called as follows:<br>Other methods of the Enumerator class and Enumerable module, such as to_a, map, etc., are also usable.<br>For example, one-by-one increasing subsequence can be chunked as follows:<pre><code>a = [1,2,4,9,10,11,12,15,16,19,20,21]\nb = a.chunk_while {|i, j| i+1 == j }\np b.to_a #=> [[1, 2], [4], [9, 10, 11, 12], [15, 16], [19, 20, 21]]\nc = b.map {|a| a.length < 3 ? a : "#{a.first}-#{a.last}" }\np c #=> [[1, 2], [4], "9-12", [15, 16], "19-21"]\nd = c.join(",")\np d #=> "1,2,4,9-12,15,16,19-21"\n</code></pre>Increasing (non-decreasing) subsequence can be chunked as follows:<pre><code>a = [0, 9, 2, 2, 3, 2, 7, 5, 9, 5]\np a.chunk_while {|i, j| i <= j }.to_a\n#=> [[0, 9], [2, 2, 3], [2, 7], [5, 9], [5]]\n</code></pre>Adjacent evens and odds can be chunked as follows: (Enumerable#chunk is another way to do it.)<pre><code>a = [7, 5, 9, 2, 0, 7, 9, 4, 2, 0]\np a.chunk_while {|i, j| i.even? == j.even? }.to_a\n#=> [[7, 5, 9], [2, 0], [7, 9], [4, 2, 0]]\n</code></pre>	http://ruby-doc.org/core/Enumerable.html#method-i-chunk_while
Enumerable#collect	A			instance methods							<pre><code>collect { |obj| block } → array\ncollect                 → an_enumerator</code></pre>Returns a new array with the results of running block once for every element in enum.<br>If no block is given, an enumerator is returned instead.<pre><code>(1..4).map { |i| i*i }      #=> [1, 4, 9, 16]\n(1..4).collect { "cat"  }   #=> ["cat", "cat", "cat", "cat"]\n</code></pre>	http://ruby-doc.org/core/Enumerable.html#method-i-collect
Enumerable#collect_concat	A			instance methods							<pre><code>collect_concat { |obj| block } → array\ncollect_concat                 → an_enumerator</code></pre>Returns a new array with the concatenated results of running block once for every element in enum.<br>If no block is given, an enumerator is returned instead.<pre><code>[1, 2, 3, 4].flat_map { |e| [e, -e] } #=> [1, -1, 2, -2, 3, -3, 4, -4]\n[[1, 2], [3, 4]].flat_map { |e| e + [100] } #=> [1, 2, 100, 3, 4, 100]\n</code></pre>	http://ruby-doc.org/core/Enumerable.html#method-i-collect_concat
Enumerable#count	A			instance methods							<pre><code>count                 → int\ncount(item)           → int\ncount { |obj| block } → int</code></pre>Returns the number of items in enum through enumeration. If an argument is given, the number of items in enum that are equal to item are counted. If a block is given, it counts the number of elements yielding a true value.<pre><code>ary = [1, 2, 4, 2]\nary.count               #=> 4\nary.count(2)            #=> 2\nary.count{ |x| x%2==0 } #=> 3\n</code></pre>	http://ruby-doc.org/core/Enumerable.html#method-i-count
Enumerable#cycle	A			instance methods							<pre><code>cycle(n=nil) { |obj| block }  →  nil\ncycle(n=nil)                  →  an_enumerator</code></pre>Calls block for each element of enum repeatedly n times or forever if none or nil is given. If a non-positive number is given or the collection is empty, does nothing. Returns nil if the loop has finished without getting interrupted.<br>#cycle saves elements in an internal array so changes to enum after the first pass have no effect.<br>If no block is given, an enumerator is returned instead.<pre><code>a = ["a", "b", "c"]\na.cycle { |x| puts x }  # print, a, b, c, a, b, c,.. forever.\na.cycle(2) { |x| puts x }  # print, a, b, c, a, b, c.\n</code></pre>	http://ruby-doc.org/core/Enumerable.html#method-i-cycle
Enumerable#detect	A			instance methods							<pre><code>detect(ifnone = nil) { |obj| block } → obj or nil\ndetect(ifnone = nil)                 → an_enumerator</code></pre>Passes each entry in enum to block. Returns the first for which block is not false. If no object matches, calls ifnone and returns its result when it is specified, or returns nil otherwise.<br>If no block is given, an enumerator is returned instead.<pre><code>(1..10).detect   { |i| i % 5 == 0 and i % 7 == 0 }   #=> nil\n(1..100).find    { |i| i % 5 == 0 and i % 7 == 0 }   #=> 35\n</code></pre>	http://ruby-doc.org/core/Enumerable.html#method-i-detect
Enumerable#drop	A			instance methods							<pre><code>drop(n)               → array</code></pre>Drops first n elements from enum, and returns rest elements in an array.<pre><code>a = [1, 2, 3, 4, 5, 0]\na.drop(3)             #=> [4, 5, 0]\n</code></pre>	http://ruby-doc.org/core/Enumerable.html#method-i-drop
Enumerable#drop_while	A			instance methods							<pre><code>drop_while { |arr| block }  → array\ndrop_while                  → an_enumerator</code></pre>Drops elements up to, but not including, the first element for which the block returns nil or false and returns an array containing the remaining elements.<br>If no block is given, an enumerator is returned instead.<pre><code>a = [1, 2, 3, 4, 5, 0]\na.drop_while { |i| i < 3 }   #=> [3, 4, 5, 0]\n</code></pre>	http://ruby-doc.org/core/Enumerable.html#method-i-drop_while
Enumerable#each_cons	A			instance methods							<pre><code>each_cons(n) { ... } →  nil\neach_cons(n)         →  an_enumerator</code></pre>Iterates the given block for each array of consecutive <n> elements. If no block is given, returns an enumerator.<br>e.g.:<pre><code>(1..10).each_cons(3) { |a| p a }\n# outputs below\n[1, 2, 3]\n[2, 3, 4]\n[3, 4, 5]\n[4, 5, 6]\n[5, 6, 7]\n[6, 7, 8]\n[7, 8, 9]\n[8, 9, 10]\n</code></pre>	http://ruby-doc.org/core/Enumerable.html#method-i-each_cons
Enumerable#each_entry	A			instance methods							<pre><code>each_entry { |obj| block }  → enum\neach_entry                  → an_enumerator</code></pre>Calls block once for each element in self, passing that element as a parameter, converting multiple values from yield to an array.<br>If no block is given, an enumerator is returned instead.<pre><code>class Foo\n  include Enumerable\n  def each\n    yield 1\n    yield 1, 2\n    yield\n  end\nend\nFoo.new.each_entry{ |o| p o }\n</code></pre>produces:<pre><code>1\n[1, 2]\nnil\n</code></pre>	http://ruby-doc.org/core/Enumerable.html#method-i-each_entry
Enumerable#each_slice	A			instance methods							<pre><code>each_slice(n) { ... }  →  nil\neach_slice(n)          →  an_enumerator</code></pre>Iterates the given block for each slice of <n> elements. If no block is given, returns an enumerator.<pre><code>(1..10).each_slice(3) { |a| p a }\n# outputs below\n[1, 2, 3]\n[4, 5, 6]\n[7, 8, 9]\n[10]\n</code></pre>	http://ruby-doc.org/core/Enumerable.html#method-i-each_slice
Enumerable#each_with_index	A			instance methods							<pre><code>each_with_index(*args) { |obj, i| block } →  enum\neach_with_index(*args)                    →  an_enumerator</code></pre>Calls block with two arguments, the item and its index, for each item in enum. Given arguments are passed through to each().<br>If no block is given, an enumerator is returned instead.<pre><code>hash = Hash.new\n%w(cat dog wombat).each_with_index { |item, index|\n  hash[item] = index\n}\nhash   #=> {"cat"=>0, "dog"=>1, "wombat"=>2}\n</code></pre>	http://ruby-doc.org/core/Enumerable.html#method-i-each_with_index
Enumerable#each_with_object	A			instance methods							<pre><code>each_with_object(obj) { |(*args), memo_obj| ... }  →  obj\neach_with_object(obj)                              →  an_enumerator</code></pre>Iterates the given block for each element with an arbitrary object given, and returns the initially given object.<br>If no block is given, returns an enumerator.<pre><code>evens = (1..10).each_with_object([]) { |i, a| a << i*2 }\n#=> [2, 4, 6, 8, 10, 12, 14, 16, 18, 20]\n</code></pre>	http://ruby-doc.org/core/Enumerable.html#method-i-each_with_object
Enumerable#entries	A			instance methods							<pre><code>entries(*args)   → array</code></pre>Returns an array containing the items in enum.<pre><code>(1..7).to_a                       #=> [1, 2, 3, 4, 5, 6, 7]\n{ 'a'=>1, 'b'=>2, 'c'=>3 }.to_a   #=> [["a", 1], ["b", 2], ["c", 3]]\n\nrequire 'prime'\nPrime.entries 10                  #=> [2, 3, 5, 7]\n</code></pre>	http://ruby-doc.org/core/Enumerable.html#method-i-entries
Enumerable#find	A			instance methods							<pre><code>find(ifnone = nil)   { |obj| block } → obj or nil\nfind(ifnone = nil)                   → an_enumerator</code></pre>Passes each entry in enum to block. Returns the first for which block is not false. If no object matches, calls ifnone and returns its result when it is specified, or returns nil otherwise.<br>If no block is given, an enumerator is returned instead.<pre><code>(1..10).detect   { |i| i % 5 == 0 and i % 7 == 0 }   #=> nil\n(1..100).find    { |i| i % 5 == 0 and i % 7 == 0 }   #=> 35\n</code></pre>	http://ruby-doc.org/core/Enumerable.html#method-i-find
Enumerable#find_all	A			instance methods							<pre><code>find_all { |obj| block } → array\nfind_all                 → an_enumerator</code></pre>Returns an array containing all elements of enum for which the given block returns a true value.<br>If no block is given, an Enumerator is returned instead.<pre><code>(1..10).find_all { |i|  i % 3 == 0 }   #=> [3, 6, 9]\n\n[1,2,3,4,5].select { |num|  num.even?  }   #=> [2, 4]\n</code></pre>See also #reject.	http://ruby-doc.org/core/Enumerable.html#method-i-find_all
Enumerable#find_index	A			instance methods							<pre><code>find_index(value)          → int or nil\nfind_index { |obj| block } → int or nil\nfind_index                 → an_enumerator</code></pre>Compares each entry in enum with value or passes to block. Returns the index for the first for which the evaluated value is non-false. If no object matches, returns nil<br>If neither block nor argument is given, an enumerator is returned instead.<pre><code>(1..10).find_index  { |i| i % 5 == 0 and i % 7 == 0 }  #=> nil\n(1..100).find_index { |i| i % 5 == 0 and i % 7 == 0 }  #=> 34\n(1..100).find_index(50)                                #=> 49\n</code></pre>	http://ruby-doc.org/core/Enumerable.html#method-i-find_index
Enumerable#first	A			instance methods							<pre><code>first       →  obj or nil\nfirst(n)    →  an_array</code></pre>Returns the first element, or the first n elements, of the enumerable. If the enumerable is empty, the first form returns nil, and the second form returns an empty array.<pre><code>%w[foo bar baz].first     #=> "foo"\n%w[foo bar baz].first(2)  #=> ["foo", "bar"]\n%w[foo bar baz].first(10) #=> ["foo", "bar", "baz"]\n[].first                  #=> nil\n[].first(10)              #=> []\n</code></pre>	http://ruby-doc.org/core/Enumerable.html#method-i-first
Enumerable#flat_map	A			instance methods							<pre><code>flat_map       { |obj| block } → array\nflat_map                       → an_enumerator</code></pre>Returns a new array with the concatenated results of running block once for every element in enum.<br>If no block is given, an enumerator is returned instead.<pre><code>[1, 2, 3, 4].flat_map { |e| [e, -e] } #=> [1, -1, 2, -2, 3, -3, 4, -4]\n[[1, 2], [3, 4]].flat_map { |e| e + [100] } #=> [1, 2, 100, 3, 4, 100]\n</code></pre>	http://ruby-doc.org/core/Enumerable.html#method-i-flat_map
Enumerable#grep	A			instance methods							<pre><code>grep(pattern)                  → array\ngrep(pattern) { |obj| block }  → array</code></pre>Returns an array of every element in enum for which Pattern === element. If the optional block is supplied, each matching element is passed to it, and the block’s result is stored in the output array.<pre><code>(1..100).grep 38..44   #=> [38, 39, 40, 41, 42, 43, 44]\nc = IO.constants\nc.grep(/SEEK/)         #=> [:SEEK_SET, :SEEK_CUR, :SEEK_END]\nres = c.grep(/SEEK/) { |v| IO.const_get(v) }\nres                    #=> [0, 1, 2]\n</code></pre>	http://ruby-doc.org/core/Enumerable.html#method-i-grep
Enumerable#grep_v	A			instance methods							<pre><code>grep_v(pattern)                  → array\ngrep_v(pattern) { |obj| block }  → array</code></pre>Inverted version of #grep. Returns an array of every element in enum for which not Pattern === element.<pre><code>(1..10).grep_v 2..5   #=> [1, 6, 7, 8, 9, 10]\nres =(1..10).grep_v(2..5) { |v| v * 2 }\nres                    #=> [2, 12, 14, 16, 18, 20]\n</code></pre>	http://ruby-doc.org/core/Enumerable.html#method-i-grep_v
Enumerable#group_by	A			instance methods							<pre><code>group_by { |obj| block } → a_hash\ngroup_by                 → an_enumerator</code></pre>Groups the collection by result of the block. Returns a hash where the keys are the evaluated result from the block and the values are arrays of elements in the collection that correspond to the key.<br>If no block is given an enumerator is returned.<pre><code>(1..6).group_by { |i| i%3 }   #=> {0=>[3, 6], 1=>[1, 4], 2=>[2, 5]}\n</code></pre>	http://ruby-doc.org/core/Enumerable.html#method-i-group_by
Enumerable#include?	A			instance methods							<pre><code>include?(obj)     → true or false</code></pre>Returns true if any member of enum equals obj. Equality is tested using ==.<pre><code>IO.constants.include? :SEEK_SET          #=> true\nIO.constants.include? :SEEK_NO_FURTHER   #=> false\nIO.constants.member? :SEEK_SET          #=> true\nIO.constants.member? :SEEK_NO_FURTHER   #=> false\n</code></pre>	http://ruby-doc.org/core/Enumerable.html#method-i-include-3F
Enumerable#inject	A			instance methods							<pre><code>inject(initial, sym) → obj\ninject(sym)          → obj\ninject(initial) { |memo, obj| block }  → obj\ninject          { |memo, obj| block }  → obj</code></pre>Combines all elements of enum by applying a binary operation, specified by a block or a symbol that names a method or operator.<br>If you specify a block, then for each element in enum the block is passed an accumulator value (memo) and the element. If you specify a symbol instead, then each element in the collection will be passed to the named method of memo. In either case, the result becomes the new value for memo. At the end of the iteration, the final value of memo is the return value for the method.<br>If you do not explicitly specify an initial value for memo, then the first element of collection is used as the initial value of memo.<pre><code># Sum some numbers\n(5..10).reduce(:+)                             #=> 45\n# Same using a block and inject\n(5..10).inject { |sum, n| sum + n }            #=> 45\n# Multiply some numbers\n(5..10).reduce(1, :*)                          #=> 151200\n# Same using a block\n(5..10).inject(1) { |product, n| product * n } #=> 151200\n# find the longest word\nlongest = %w{ cat sheep bear }.inject do |memo, word|\n   memo.length > word.length ? memo : word\nend\nlongest                                        #=> "sheep"\n</code></pre>	http://ruby-doc.org/core/Enumerable.html#method-i-inject
Enumerable#lazy	A			instance methods							<pre><code>lazy → lazy_enumerator</code></pre>Returns a lazy enumerator, whose methods map/collect, flat_map/collect_concat, select/find_all, reject, grep, #grep_v, zip, take, #take_while, drop, and #drop_while enumerate values only on an as-needed basis. However, if a block is given to zip, values are enumerated immediately.<br>The following program finds pythagorean triples:<pre><code>def pythagorean_triples\n  (1..Float::INFINITY).lazy.flat_map {|z|\n    (1..z).flat_map {|x|\n      (x..z).select {|y|\n        x**2 + y**2 == z**2\n      }.map {|y|\n        [x, y, z]\n      }\n    }\n  }\nend\n# show first ten pythagorean triples\np pythagorean_triples.take(10).force # take is lazy, so force is needed\np pythagorean_triples.first(10)      # first is eager\n# show pythagorean triples less than 100\np pythagorean_triples.take_while { |*, z| z < 100 }.force\n</code></pre>	http://ruby-doc.org/core/Enumerable.html#method-i-lazy
Enumerable#map	A			instance methods							<pre><code>map     { |obj| block } → array\nmap                     → an_enumerator</code></pre>Returns a new array with the results of running block once for every element in enum.<br>If no block is given, an enumerator is returned instead.<pre><code>(1..4).map { |i| i*i }      #=> [1, 4, 9, 16]\n(1..4).collect { "cat"  }   #=> ["cat", "cat", "cat", "cat"]\n</code></pre>	http://ruby-doc.org/core/Enumerable.html#method-i-map
Enumerable#max	A			instance methods							<pre><code>max                   → obj\nmax { |a, b| block }  → obj\nmax(n)                → obj\nmax(n) {|a,b| block } → obj</code></pre>Returns the object in enum with the maximum value. The first form assumes all objects implement Comparable; the second uses the block to return a <=> b.<pre><code>a = %w(albatross dog horse)\na.max                                   #=> "horse"\na.max { |a, b| a.length <=> b.length }  #=> "albatross"\n</code></pre>If the n argument is given, maximum n elements are returned as an array.<pre><code>a = %w[albatross dog horse]\na.max(2)                                  #=> ["horse", "dog"]\na.max(2) {|a, b| a.length <=> b.length }  #=> ["albatross", "horse"]\n</code></pre>	http://ruby-doc.org/core/Enumerable.html#method-i-max
Enumerable#max_by	A			instance methods							<pre><code>max_by {|obj| block }      → obj\nmax_by                     → an_enumerator\nmax_by(n) {|obj| block }   → obj\nmax_by(n)                  → an_enumerator</code></pre>Returns the object in enum that gives the maximum value from the given block.<br>If no block is given, an enumerator is returned instead.<pre><code>a = %w(albatross dog horse)\na.max_by { |x| x.length }   #=> "albatross"\n</code></pre>If the n argument is given, minimum n elements are returned as an array.<pre><code>a = %w[albatross dog horse]\na.max_by(2) {|x| x.length } #=> ["albatross", "horse"]\n</code></pre>enum.max_by(n) can be used to implement weighted random sampling. Following example implements and use Enumerable#wsample.<pre><code>module Enumerable\n  # weighted random sampling.\n  #\n  # Pavlos S. Efraimidis, Paul G. Spirakis\n  # Weighted random sampling with a reservoir\n  # Information Processing Letters\n  # Volume 97, Issue 5 (16 March 2006)\n  def wsample(n)\n    self.max_by(n) {|v| rand ** (1.0/yield(v)) }\n  end\nend\ne = (-20..20).to_a*10000\na = e.wsample(20000) {|x|\n  Math.exp(-(x/5.0)**2) # normal distribution\n}\n# a is 20000 samples from e.\np a.length #=> 20000\nh = a.group_by {|x| x }\n-10.upto(10) {|x| puts "*" * (h[x].length/30.0).to_i if h[x] }\n#=> *\n#   ***\n#   ******\n#   ***********\n#   ******************\n#   *****************************\n#   *****************************************\n#   ****************************************************\n#   ***************************************************************\n#   ********************************************************************\n#   ***********************************************************************\n#   ***********************************************************************\n#   **************************************************************\n#   ****************************************************\n#   ***************************************\n#   ***************************\n#   ******************\n#   ***********\n#   *******\n#   ***\n#   *\n</code></pre>	http://ruby-doc.org/core/Enumerable.html#method-i-max_by
Enumerable#member?	A			instance methods							<pre><code>member?(obj)      → true or false</code></pre>Returns true if any member of enum equals obj. Equality is tested using ==.<pre><code>IO.constants.include? :SEEK_SET          #=> true\nIO.constants.include? :SEEK_NO_FURTHER   #=> false\nIO.constants.member? :SEEK_SET          #=> true\nIO.constants.member? :SEEK_NO_FURTHER   #=> false\n</code></pre>	http://ruby-doc.org/core/Enumerable.html#method-i-member-3F
Enumerable#min	A			instance methods							<pre><code>min                     → obj\nmin {| a,b | block }    → obj\nmin(n)                  → array\nmin(n) {| a,b | block } → array</code></pre>Returns the object in enum with the minimum value. The first form assumes all objects implement Comparable; the second uses the block to return a <=> b.<pre><code>a = %w(albatross dog horse)\na.min                                   #=> "albatross"\na.min { |a, b| a.length <=> b.length }  #=> "dog"\n</code></pre>If the n argument is given, minimum n elements are returned as an array.<pre><code>a = %w[albatross dog horse]\na.min(2)                                  #=> ["albatross", "dog"]\na.min(2) {|a, b| a.length <=> b.length }  #=> ["dog", "horse"]\n</code></pre>	http://ruby-doc.org/core/Enumerable.html#method-i-min
Enumerable#min_by	A			instance methods							<pre><code>min_by {|obj| block }      → obj\nmin_by                     → an_enumerator\nmin_by(n) {|obj| block }   → array\nmin_by(n)                  → an_enumerator</code></pre>Returns the object in enum that gives the minimum value from the given block.<br>If no block is given, an enumerator is returned instead.<pre><code>a = %w(albatross dog horse)\na.min_by { |x| x.length }   #=> "dog"\n</code></pre>If the n argument is given, minimum n elements are returned as an array.<pre><code>a = %w[albatross dog horse]\np a.min_by(2) {|x| x.length } #=> ["dog", "horse"]\n</code></pre>	http://ruby-doc.org/core/Enumerable.html#method-i-min_by
Enumerable#minmax	A			instance methods							<pre><code>minmax                  → [min, max]\nminmax { |a, b| block } → [min, max]</code></pre>Returns a two element array which contains the minimum and the maximum value in the enumerable. The first form assumes all objects implement Comparable; the second uses the block to return a <=> b.<pre><code>a = %w(albatross dog horse)\na.minmax                                  #=> ["albatross", "horse"]\na.minmax { |a, b| a.length <=> b.length } #=> ["dog", "albatross"]\n</code></pre>	http://ruby-doc.org/core/Enumerable.html#method-i-minmax
Enumerable#minmax_by	A			instance methods							<pre><code>minmax_by { |obj| block } → [min, max]\nminmax_by                 → an_enumerator</code></pre>Returns a two element array containing the objects in enum that correspond to the minimum and maximum values respectively from the given block.<br>If no block is given, an enumerator is returned instead.<pre><code>a = %w(albatross dog horse)\na.minmax_by { |x| x.length }   #=> ["dog", "albatross"]\n</code></pre>	http://ruby-doc.org/core/Enumerable.html#method-i-minmax_by
Enumerable#none?	A			instance methods							<pre><code>none? [{ |obj| block }]   → true or false</code></pre>Passes each element of the collection to the given block. The method returns true if the block never returns true for all elements. If the block is not given, none? will return true only if none of the collection members is true.<pre><code>%w{ant bear cat}.none? { |word| word.length == 5 } #=> true\n%w{ant bear cat}.none? { |word| word.length >= 4 } #=> false\n[].none?                                           #=> true\n[nil].none?                                        #=> true\n[nil, false].none?                                 #=> true\n[nil, false, true].none?                           #=> false\n</code></pre>	http://ruby-doc.org/core/Enumerable.html#method-i-none-3F
Enumerable#one?	A			instance methods							<pre><code>one? [{ |obj| block }]   → true or false</code></pre>Passes each element of the collection to the given block. The method returns true if the block returns true exactly once. If the block is not given, one? will return true only if exactly one of the collection members is true.<pre><code>%w{ant bear cat}.one? { |word| word.length == 4 }  #=> true\n%w{ant bear cat}.one? { |word| word.length > 4 }   #=> false\n%w{ant bear cat}.one? { |word| word.length < 4 }   #=> false\n[ nil, true, 99 ].one?                             #=> false\n[ nil, true, false ].one?                          #=> true\n</code></pre>	http://ruby-doc.org/core/Enumerable.html#method-i-one-3F
Enumerable#partition	A			instance methods							<pre><code>partition { |obj| block } → [ true_array, false_array ]\npartition                 → an_enumerator</code></pre>Returns two arrays, the first containing the elements of enum for which the block evaluates to true, the second containing the rest.<br>If no block is given, an enumerator is returned instead.<pre><code>(1..6).partition { |v| v.even? }  #=> [[2, 4, 6], [1, 3, 5]]\n</code></pre>	http://ruby-doc.org/core/Enumerable.html#method-i-partition
Enumerable#reduce	A			instance methods							<pre><code>reduce(initial, sym) → obj\nreduce(sym)          → obj\nreduce(initial) { |memo, obj| block }  → obj\nreduce          { |memo, obj| block }  → obj</code></pre>Combines all elements of enum by applying a binary operation, specified by a block or a symbol that names a method or operator.<br>If you specify a block, then for each element in enum the block is passed an accumulator value (memo) and the element. If you specify a symbol instead, then each element in the collection will be passed to the named method of memo. In either case, the result becomes the new value for memo. At the end of the iteration, the final value of memo is the return value for the method.<br>If you do not explicitly specify an initial value for memo, then the first element of collection is used as the initial value of memo.<pre><code># Sum some numbers\n(5..10).reduce(:+)                             #=> 45\n# Same using a block and inject\n(5..10).inject { |sum, n| sum + n }            #=> 45\n# Multiply some numbers\n(5..10).reduce(1, :*)                          #=> 151200\n# Same using a block\n(5..10).inject(1) { |product, n| product * n } #=> 151200\n# find the longest word\nlongest = %w{ cat sheep bear }.inject do |memo, word|\n   memo.length > word.length ? memo : word\nend\nlongest                                        #=> "sheep"\n</code></pre>	http://ruby-doc.org/core/Enumerable.html#method-i-reduce
Enumerable#reject	A			instance methods							<pre><code>reject { |obj| block } → array\nreject                 → an_enumerator</code></pre>Returns an array for all elements of enum for which the given block returns false.<br>If no block is given, an Enumerator is returned instead.<pre><code>(1..10).reject { |i|  i % 3 == 0 }   #=> [1, 2, 4, 5, 7, 8, 10]\n\n[1, 2, 3, 4, 5].reject { |num| num.even? } #=> [1, 3, 5]\n</code></pre>See also #find_all.	http://ruby-doc.org/core/Enumerable.html#method-i-reject
Enumerable#reverse_each	A			instance methods							<pre><code>reverse_each(*args) { |item| block } →  enum\nreverse_each(*args)                  →  an_enumerator</code></pre>Builds a temporary array and traverses that array in reverse order.<br>If no block is given, an enumerator is returned instead.	http://ruby-doc.org/core/Enumerable.html#method-i-reverse_each
Enumerable#select	A			instance methods							<pre><code>select   { |obj| block } → array\nselect                   → an_enumerator</code></pre>Returns an array containing all elements of enum for which the given block returns a true value.<br>If no block is given, an Enumerator is returned instead.<pre><code>(1..10).find_all { |i|  i % 3 == 0 }   #=> [3, 6, 9]\n\n[1,2,3,4,5].select { |num|  num.even?  }   #=> [2, 4]\n</code></pre>See also #reject.	http://ruby-doc.org/core/Enumerable.html#method-i-select
Enumerable#slice_after	A			instance methods							<pre><code>slice_after(pattern)       → an_enumerator\nslice_after { |elt| bool } → an_enumerator</code></pre>Creates an enumerator for each chunked elements. The ends of chunks are defined by pattern and the block.<br>If pattern === elt returns true or the block returns true for the element, the element is end of a chunk.<br>The === and block is called from the first element to the last element of enum.<br>The result enumerator yields the chunked elements as an array. So each method can be called as follows:<br>Other methods of the Enumerator class and Enumerable module, such as map, etc., are also usable.<br>For example, continuation lines (lines end with backslash) can be concatenated as follows:<pre><code>lines = ["foo\n", "bar\\\n", "baz\n", "\n", "qux\n"]\ne = lines.slice_after(/(?<!\)\n\z/)\np e.to_a\n#=> [["foo\n"], ["bar\\\n", "baz\n"], ["\n"], ["qux\n"]]\np e.map {|ll| ll[0...-1].map {|l| l.sub(/\\n\z/, "") }.join + ll.last }\n#=>["foo\n", "barbaz\n", "\n", "qux\n"]\n</code></pre>	http://ruby-doc.org/core/Enumerable.html#method-i-slice_after
Enumerable#slice_before	A			instance methods							<pre><code>slice_before(pattern)                             → an_enumerator\nslice_before { |elt| bool }                       → an_enumerator</code></pre>Creates an enumerator for each chunked elements. The beginnings of chunks are defined by pattern and the block.<br>If pattern === elt returns true or the block returns true for the element, the element is beginning of a chunk.<br>The === and block is called from the first element to the last element of enum. The result for the first element is ignored.<br>The result enumerator yields the chunked elements as an array. So each method can be called as follows:<br>Other methods of the Enumerator class and Enumerable module, such as map, etc., are also usable.<br>For example, iteration over ChangeLog entries can be implemented as follows:<pre><code># iterate over ChangeLog entries.\nopen("ChangeLog") { |f|\n  f.slice_before(/\A\S/).each { |e| pp e }\n}\n\n# same as above.  block is used instead of pattern argument.\nopen("ChangeLog") { |f|\n  f.slice_before { |line| /\A\S/ === line }.each { |e| pp e }\n}\n</code></pre>“svn proplist -R” produces multiline output for each file. They can be chunked as follows:<pre><code>IO.popen([{"LC_ALL"=>"C"}, "svn", "proplist", "-R"]) { |f|\n  f.lines.slice_before(/\AProp/).each { |lines| p lines }\n}\n#=> ["Properties on '.':\n", "  svn:ignore\n", "  svk:merge\n"]\n#   ["Properties on 'goruby.c':\n", "  svn:eol-style\n"]\n#   ["Properties on 'complex.c':\n", "  svn:mime-type\n", "  svn:eol-style\n"]\n#   ["Properties on 'regparse.c':\n", "  svn:eol-style\n"]\n#   ...\n</code></pre>If the block needs to maintain state over multiple elements, local variables can be used. For example, three or more consecutive increasing numbers can be squashed as follows:<pre><code>a = [0, 2, 3, 4, 6, 7, 9]\nprev = a[0]\np a.slice_before { |e|\n  prev, prev2 = e, prev\n  prev2 + 1 != e\n}.map { |es|\n  es.length <= 2 ? es.join(",") : "#{es.first}-#{es.last}"\n}.join(",")\n#=> "0,2-4,6,7,9"\n</code></pre>However local variables should be used carefully if the result enumerator is enumerated twice or more. The local variables should be initialized for each enumeration. Enumerator.new can be used to do it.<pre><code># Word wrapping.  This assumes all characters have same width.\ndef wordwrap(words, maxwidth)\n  Enumerator.new {|y|\n    # cols is initialized in Enumerator.new.\n    cols = 0\n    words.slice_before { |w|\n      cols += 1 if cols != 0\n      cols += w.length\n      if maxwidth < cols\n        cols = w.length\n        true\n      else\n        false\n      end\n    }.each {|ws| y.yield ws }\n  }\nend\ntext = (1..20).to_a.join(" ")\nenum = wordwrap(text.split(/\s+/), 10)\nputs "-"*10\nenum.each { |ws| puts ws.join(" ") } # first enumeration.\nputs "-"*10\nenum.each { |ws| puts ws.join(" ") } # second enumeration generates same result as the first.\nputs "-"*10\n#=> ----------\n#   1 2 3 4 5\n#   6 7 8 9 10\n#   11 12 13\n#   14 15 16\n#   17 18 19\n#   20\n#   ----------\n#   1 2 3 4 5\n#   6 7 8 9 10\n#   11 12 13\n#   14 15 16\n#   17 18 19\n#   20\n#   ----------\n</code></pre>mbox contains series of mails which start with Unix From line. So each mail can be extracted by slice before Unix From line.<pre><code># parse mbox\nopen("mbox") { |f|\n  f.slice_before { |line|\n    line.start_with? "From "\n  }.each { |mail|\n    unix_from = mail.shift\n    i = mail.index("\n")\n    header = mail[0...i]\n    body = mail[(i+1)..-1]\n    body.pop if body.last == "\n"\n    fields = header.slice_before { |line| !" \t".include?(line[0]) }.to_a\n    p unix_from\n    pp fields\n    pp body\n  }\n}\n\n# split mails in mbox (slice before Unix From line after an empty line)\nopen("mbox") { |f|\n  f.slice_before(emp: true) { |line, h|\n    prevemp = h[:emp]\n    h[:emp] = line == "\n"\n    prevemp && line.start_with?("From ")\n  }.each { |mail|\n    mail.pop if mail.last == "\n"\n    pp mail\n  }\n}\n</code></pre>	http://ruby-doc.org/core/Enumerable.html#method-i-slice_before
Enumerable#slice_when	A			instance methods							<pre><code>slice_when {|elt_before, elt_after| bool } → an_enumerator</code></pre>Creates an enumerator for each chunked elements. The beginnings of chunks are defined by the block.<br>This method split each chunk using adjacent elements, elt_before and elt_after, in the receiver enumerator. This method split chunks between elt_before and elt_after where the block returns true.<br>The block is called the length of the receiver enumerator minus one.<br>The result enumerator yields the chunked elements as an array. So each method can be called as follows:<br>Other methods of the Enumerator class and Enumerable module, such as to_a, map, etc., are also usable.<br>For example, one-by-one increasing subsequence can be chunked as follows:<pre><code>a = [1,2,4,9,10,11,12,15,16,19,20,21]\nb = a.slice_when {|i, j| i+1 != j }\np b.to_a #=> [[1, 2], [4], [9, 10, 11, 12], [15, 16], [19, 20, 21]]\nc = b.map {|a| a.length < 3 ? a : "#{a.first}-#{a.last}" }\np c #=> [[1, 2], [4], "9-12", [15, 16], "19-21"]\nd = c.join(",")\np d #=> "1,2,4,9-12,15,16,19-21"\n</code></pre>Near elements (threshold: 6) in sorted array can be chunked as follows:<pre><code>a = [3, 11, 14, 25, 28, 29, 29, 41, 55, 57]\np a.slice_when {|i, j| 6 < j - i }.to_a\n#=> [[3], [11, 14], [25, 28, 29, 29], [41], [55, 57]]\n</code></pre>Increasing (non-decreasing) subsequence can be chunked as follows:<pre><code>a = [0, 9, 2, 2, 3, 2, 7, 5, 9, 5]\np a.slice_when {|i, j| i > j }.to_a\n#=> [[0, 9], [2, 2, 3], [2, 7], [5, 9], [5]]\n</code></pre>Adjacent evens and odds can be chunked as follows: (Enumerable#chunk is another way to do it.)<pre><code>a = [7, 5, 9, 2, 0, 7, 9, 4, 2, 0]\np a.slice_when {|i, j| i.even? != j.even? }.to_a\n#=> [[7, 5, 9], [2, 0], [7, 9], [4, 2, 0]]\n</code></pre>Paragraphs (non-empty lines with trailing empty lines) can be chunked as follows: (See #chunk to ignore empty lines.)<pre><code>lines = ["foo\n", "bar\n", "\n", "baz\n", "qux\n"]\np lines.slice_when {|l1, l2| /\A\s*\z/ =~ l1 && /\S/ =~ l2 }.to_a\n#=> [["foo\n", "bar\n", "\n"], ["baz\n", "qux\n"]]\n</code></pre>	http://ruby-doc.org/core/Enumerable.html#method-i-slice_when
Enumerable#sort	A			instance methods							<pre><code>sort                  → array\nsort { |a, b| block } → array</code></pre>Returns an array containing the items in enum sorted, either according to their own <=> method, or by using the results of the supplied block. The block should return -1, 0, or +1 depending on the comparison between a and b. As of Ruby 1.8, the method Enumerable#sort_by implements a built-in Schwartzian Transform, useful when key computation or comparison is expensive.<pre><code>%w(rhea kea flea).sort          #=> ["flea", "kea", "rhea"]\n(1..10).sort { |a, b| b <=> a }  #=> [10, 9, 8, 7, 6, 5, 4, 3, 2, 1]\n</code></pre>	http://ruby-doc.org/core/Enumerable.html#method-i-sort
Enumerable#sort_by	A			instance methods							<pre><code>sort_by { |obj| block }   → array\nsort_by                   → an_enumerator</code></pre>Sorts enum using a set of keys generated by mapping the values in enum through the given block.<br>If no block is given, an enumerator is returned instead.<pre><code>%w{apple pear fig}.sort_by { |word| word.length}\n              #=> ["fig", "pear", "apple"]\n</code></pre>The current implementation of sort_by generates an array of tuples containing the original collection element and the mapped value. This makes sort_by fairly expensive when the keysets are simple.<pre><code>require 'benchmark'\n\na = (1..100000).map { rand(100000) }\n\nBenchmark.bm(10) do |b|\n  b.report("Sort")    { a.sort }\n  b.report("Sort by") { a.sort_by { |a| a } }\nend\n</code></pre>produces:<br>However, consider the case where comparing the keys is a non-trivial operation. The following code sorts some files on modification time using the basic sort method.<pre><code>files = Dir["*"]\nsorted = files.sort { |a, b| File.new(a).mtime <=> File.new(b).mtime }\nsorted   #=> ["mon", "tues", "wed", "thurs"]\n</code></pre>This sort is inefficient: it generates two new File objects during every comparison. A slightly better technique is to use the Kernel#test method to generate the modification times directly.<pre><code>files = Dir["*"]\nsorted = files.sort { |a, b|\n  test(?M, a) <=> test(?M, b)\n}\nsorted   #=> ["mon", "tues", "wed", "thurs"]\n</code></pre>This still generates many unnecessary Time objects. A more efficient technique is to cache the sort keys (modification times in this case) before the sort. Perl users often call this approach a Schwartzian Transform, after Randal Schwartz. We construct a temporary array, where each element is an array containing our sort key along with the filename. We sort this array, and then extract the filename from the result.<pre><code>sorted = Dir["*"].collect { |f|\n   [test(?M, f), f]\n}.sort.collect { |f| f[1] }\nsorted   #=> ["mon", "tues", "wed", "thurs"]\n</code></pre>This is exactly what sort_by does internally.<pre><code>sorted = Dir["*"].sort_by { |f| test(?M, f) }\nsorted   #=> ["mon", "tues", "wed", "thurs"]\n</code></pre>	http://ruby-doc.org/core/Enumerable.html#method-i-sort_by
Enumerable#take	A			instance methods							<pre><code>take(n)               → array</code></pre>Returns first n elements from enum.<pre><code>a = [1, 2, 3, 4, 5, 0]\na.take(3)             #=> [1, 2, 3]\na.take(30)            #=> [1, 2, 3, 4, 5, 0]\n</code></pre>	http://ruby-doc.org/core/Enumerable.html#method-i-take
Enumerable#take_while	A			instance methods							<pre><code>take_while { |arr| block } → array\ntake_while                 → an_enumerator</code></pre>Passes elements to the block until the block returns nil or false, then stops iterating and returns an array of all prior elements.<br>If no block is given, an enumerator is returned instead.<pre><code>a = [1, 2, 3, 4, 5, 0]\na.take_while { |i| i < 3 }   #=> [1, 2]\n</code></pre>	http://ruby-doc.org/core/Enumerable.html#method-i-take_while
Enumerable#to_a	A			instance methods							<pre><code>to_a(*args)      → array</code></pre>Returns an array containing the items in enum.<pre><code>(1..7).to_a                       #=> [1, 2, 3, 4, 5, 6, 7]\n{ 'a'=>1, 'b'=>2, 'c'=>3 }.to_a   #=> [["a", 1], ["b", 2], ["c", 3]]\n\nrequire 'prime'\nPrime.entries 10                  #=> [2, 3, 5, 7]\n</code></pre>	http://ruby-doc.org/core/Enumerable.html#method-i-to_a
Enumerable#to_h	A			instance methods							<pre><code>to_h(*args)  → hash</code></pre>Returns the result of interpreting enum as a list of [key, value] pairs.	http://ruby-doc.org/core/Enumerable.html#method-i-to_h
Enumerable#zip	A			instance methods							<pre><code>zip(arg, ...)                  → an_array_of_array\nzip(arg, ...) { |arr| block }  → nil</code></pre>Takes one element from enum and merges corresponding elements from each args. This generates a sequence of n-element arrays, where n is one more than the count of arguments. The length of the resulting sequence will be enum#size. If the size of any argument is less than enum#size, nil values are supplied. If a block is given, it is invoked for each output array, otherwise an array of arrays is returned.<pre><code>a = [ 4, 5, 6 ]\nb = [ 7, 8, 9 ]\n\na.zip(b)                 #=> [[4, 7], [5, 8], [6, 9]]\n[1, 2, 3].zip(a, b)      #=> [[1, 4, 7], [2, 5, 8], [3, 6, 9]]\n[1, 2].zip(a, b)         #=> [[1, 4, 7], [2, 5, 8]]\na.zip([1, 2], [8])       #=> [[4, 1, 8], [5, 2, nil], [6, nil, nil]]\n\nc = []\na.zip(b) { |x, y| c << x + y }  #=> nil\nc                               #=> [11, 13, 15]\n</code></pre>	http://ruby-doc.org/core/Enumerable.html#method-i-zip
Errno	A			modules							Ruby exception objects are subclasses of Exception. However, operating systems typically report errors using plain integers. Module Errno is created dynamically to map these operating system errors to Ruby classes, with each error number generating its own subclass of SystemCallError. As the subclass is created in module Errno, its name will start Errno::.<br>The names of the Errno:: classes depend on the environment in which Ruby runs. On a typical Unix or Windows platform, there are Errno classes such as Errno::EACCES, Errno::EAGAIN, Errno::EINTR, and so on.<br>The integer operating system error number corresponding to a particular error is available as the class constant Errno::error::Errno.<pre><code>Errno::EACCES::Errno   #=> 13\nErrno::EAGAIN::Errno   #=> 11\nErrno::EINTR::Errno    #=> 4\n</code></pre>The full list of operating system errors on your particular platform are available as the constants of Errno.<pre><code>Errno.constants   #=> :E2BIG, :EACCES, :EADDRINUSE, :EADDRNOTAVAIL, ...\n</code></pre>	http://ruby-doc.org/core/Errno.html
FileTest	A			modules							FileTest implements file test operations similar to those used in File::Stat. It exists as a standalone module, and its methods are also insinuated into the File class. (Note that this is not done by inclusion: the interpreter cheats).	http://ruby-doc.org/core/FileTest.html
FileTest#blockdev?	A			instance methods							<pre><code>blockdev?(file_name)   →  true or false</code></pre>Returns true if the named file is a block device.<br>file_name can be an IO object.	http://ruby-doc.org/core/FileTest.html#method-i-blockdev-3F
FileTest#chardev?	A			instance methods							<pre><code>chardev?(file_name)   →  true or false</code></pre>Returns true if the named file is a character device.<br>file_name can be an IO object.	http://ruby-doc.org/core/FileTest.html#method-i-chardev-3F
FileTest#directory?	A			instance methods							<pre><code>directory?(file_name)   →  true or false</code></pre>Returns true if the named file is a directory, or a symlink that points at a directory, and false otherwise.<br>file_name can be an IO object.<pre><code>File.directory?(".")\n</code></pre>	http://ruby-doc.org/core/FileTest.html#method-i-directory-3F
FileTest#executable?	A			instance methods							<pre><code>executable?(file_name)   → true or false</code></pre>Returns true if the named file is executable by the effective user and group id of this process. See eaccess(3).	http://ruby-doc.org/core/FileTest.html#method-i-executable-3F
FileTest#executable_real?	A			instance methods							<pre><code>executable_real?(file_name)   → true or false</code></pre>Returns true if the named file is executable by the real user and group id of this process. See access(3).	http://ruby-doc.org/core/FileTest.html#method-i-executable_real-3F
FileTest#exist?	A			instance methods							<pre><code>exist?(file_name)    →  true or false</code></pre>Return true if the named file exists.<br>file_name can be an IO object.<br>“file exists” means that stat() or fstat() system call is successful.	http://ruby-doc.org/core/FileTest.html#method-i-exist-3F
FileTest#exists?	A			instance methods							<pre><code>exists?(file_name)   →  true or false</code></pre>Deprecated method. Don’t use.	http://ruby-doc.org/core/FileTest.html#method-i-exists-3F
FileTest#file?	A			instance methods							<pre><code>file?(file) → true or false</code></pre>Returns true if the named file exists and is a regular file.<br>file can be an IO object.<br>If the file argument is a symbolic link, it will resolve the symbolic link and use the file referenced by the link.	http://ruby-doc.org/core/FileTest.html#method-i-file-3F
FileTest#grpowned?	A			instance methods							<pre><code>grpowned?(file_name)   → true or false</code></pre>Returns true if the named file exists and the effective group id of the calling process is the owner of the file. Returns false on Windows.<br>file_name can be an IO object.	http://ruby-doc.org/core/FileTest.html#method-i-grpowned-3F
FileTest#identical?	A			instance methods							<pre><code>identical?(file_1, file_2)   →  true or false</code></pre>Returns true if the named files are identical.<br>file_1 and file_2 can be an IO object.<pre><code>open("a", "w") {}\np File.identical?("a", "a")      #=> true\np File.identical?("a", "./a")    #=> true\nFile.link("a", "b")\np File.identical?("a", "b")      #=> true\nFile.symlink("a", "c")\np File.identical?("a", "c")      #=> true\nopen("d", "w") {}\np File.identical?("a", "d")      #=> false\n</code></pre>	http://ruby-doc.org/core/FileTest.html#method-i-identical-3F
FileTest#owned?	A			instance methods							<pre><code>owned?(file_name)   → true or false</code></pre>Returns true if the named file exists and the effective used id of the calling process is the owner of the file.<br>file_name can be an IO object.	http://ruby-doc.org/core/FileTest.html#method-i-owned-3F
FileTest#pipe?	A			instance methods							<pre><code>pipe?(file_name)   →  true or false</code></pre>Returns true if the named file is a pipe.<br>file_name can be an IO object.	http://ruby-doc.org/core/FileTest.html#method-i-pipe-3F
FileTest#readable?	A			instance methods							<pre><code>readable?(file_name)   → true or false</code></pre>Returns true if the named file is readable by the effective user and group id of this process. See eaccess(3).	http://ruby-doc.org/core/FileTest.html#method-i-readable-3F
FileTest#readable_real?	A			instance methods							<pre><code>readable_real?(file_name)   → true or false</code></pre>Returns true if the named file is readable by the real user and group id of this process. See access(3).	http://ruby-doc.org/core/FileTest.html#method-i-readable_real-3F
FileTest#setgid?	A			instance methods							<pre><code>setgid?(file_name)   →  true or false</code></pre>Returns true if the named file has the setgid bit set.	http://ruby-doc.org/core/FileTest.html#method-i-setgid-3F
FileTest#setuid?	A			instance methods							<pre><code>setuid?(file_name)   →  true or false</code></pre>Returns true if the named file has the setuid bit set.	http://ruby-doc.org/core/FileTest.html#method-i-setuid-3F
FileTest#size	A			instance methods							<pre><code>size(file_name)   → integer</code></pre>Returns the size of file_name.<br>file_name can be an IO object.	http://ruby-doc.org/core/FileTest.html#method-i-size
FileTest#size?	A			instance methods							<pre><code>size?(file_name)   → Integer or nil</code></pre>Returns nil if file_name doesn’t exist or has zero size, the size of the file otherwise.<br>file_name can be an IO object.	http://ruby-doc.org/core/FileTest.html#method-i-size-3F
FileTest#socket?	A			instance methods							<pre><code>socket?(file_name)   →  true or false</code></pre>Returns true if the named file is a socket.<br>file_name can be an IO object.	http://ruby-doc.org/core/FileTest.html#method-i-socket-3F
FileTest#sticky?	A			instance methods							<pre><code>sticky?(file_name)   →  true or false</code></pre>Returns true if the named file has the sticky bit set.	http://ruby-doc.org/core/FileTest.html#method-i-sticky-3F
FileTest#symlink?	A			instance methods							<pre><code>symlink?(file_name)   →  true or false</code></pre>Returns true if the named file is a symbolic link.	http://ruby-doc.org/core/FileTest.html#method-i-symlink-3F
FileTest#world_readable?	A			instance methods							<pre><code>world_readable?(file_name)   → fixnum or nil</code></pre>If file_name is readable by others, returns an integer representing the file permission bits of file_name. Returns nil otherwise. The meaning of the bits is platform dependent; on Unix systems, see stat(2).<br>file_name can be an IO object.<pre><code>File.world_readable?("/etc/passwd")           #=> 420\nm = File.world_readable?("/etc/passwd")\nsprintf("%o", m)                              #=> "644"\n</code></pre>	http://ruby-doc.org/core/FileTest.html#method-i-world_readable-3F
FileTest#world_writable?	A			instance methods							<pre><code>world_writable?(file_name)   → fixnum or nil</code></pre>If file_name is writable by others, returns an integer representing the file permission bits of file_name. Returns nil otherwise. The meaning of the bits is platform dependent; on Unix systems, see stat(2).<br>file_name can be an IO object.<pre><code>File.world_writable?("/tmp")                  #=> 511\nm = File.world_writable?("/tmp")\nsprintf("%o", m)                              #=> "777"\n</code></pre>	http://ruby-doc.org/core/FileTest.html#method-i-world_writable-3F
FileTest#writable?	A			instance methods							<pre><code>writable?(file_name)   → true or false</code></pre>Returns true if the named file is writable by the effective user and group id of this process. See eaccess(3).	http://ruby-doc.org/core/FileTest.html#method-i-writable-3F
FileTest#writable_real?	A			instance methods							<pre><code>writable_real?(file_name)   → true or false</code></pre>Returns true if the named file is writable by the real user and group id of this process. See access(3)	http://ruby-doc.org/core/FileTest.html#method-i-writable_real-3F
FileTest#zero?	A			instance methods							<pre><code>zero?(file_name)   → true or false</code></pre>Returns true if the named file exists and has a zero size.<br>file_name can be an IO object.	http://ruby-doc.org/core/FileTest.html#method-i-zero-3F
GC	A			modules							The GC module provides an interface to Ruby’s mark and sweep garbage collection mechanism.<br>Some of the underlying methods are also available via the ObjectSpace module.<br>You may obtain information about the operation of the GC through GC::Profiler.	http://ruby-doc.org/core/GC.html
GC::add_stress_to_class	A			class methods								http://ruby-doc.org/core/GC.html#method-c-add_stress_to_class
GC::count	A			class methods							<pre><code>count → Integer</code></pre>The number of times GC occurred.<br>It returns the number of times GC occurred since the process started.	http://ruby-doc.org/core/GC.html#method-c-count
GC::disable	A			class methods							<pre><code>disable    → true or false</code></pre>Disables garbage collection, returning true if garbage collection was already disabled.<pre><code>GC.disable   #=> false\nGC.disable   #=> true\n</code></pre>	http://ruby-doc.org/core/GC.html#method-c-disable
GC::enable	A			class methods							<pre><code>enable    → true or false</code></pre>Enables garbage collection, returning true if garbage collection was previously disabled.<pre><code>GC.disable   #=> false\nGC.enable    #=> true\nGC.enable    #=> false\n</code></pre>	http://ruby-doc.org/core/GC.html#method-c-enable
GC::latest_gc_info	A			class methods							<pre><code>latest_gc_info → {:gc_by=>:newobj}\nlatest_gc_info(hash) → hash\nlatest_gc_info(:major_by) → :malloc</code></pre>Returns information about the most recent garbage collection.	http://ruby-doc.org/core/GC.html#method-c-latest_gc_info
GC::malloc_allocated_size	A			class methods							<pre><code>malloc_allocated_size → Integer</code></pre>Returns the size of memory allocated by malloc().<br>Only available if ruby was built with CALC_EXACT_MALLOC_SIZE.	http://ruby-doc.org/core/GC.html#method-c-malloc_allocated_size
GC::malloc_allocations	A			class methods							<pre><code>malloc_allocations → Integer</code></pre>Returns the number of malloc() allocations.<br>Only available if ruby was built with CALC_EXACT_MALLOC_SIZE.	http://ruby-doc.org/core/GC.html#method-c-malloc_allocations
GC::remove_stress_to_class	A			class methods								http://ruby-doc.org/core/GC.html#method-c-remove_stress_to_class
GC::start	A			class methods							<pre><code>start                     → nil\nstart(full_mark: true, immediate_sweep: true)           → nil</code></pre>Initiates garbage collection, unless manually disabled.<br>This method is defined with keyword arguments that default to true:<br>Use full_mark: false to perform a minor GC. Use immediate_sweep: false to defer sweeping (use lazy sweep).<br>Note: These keyword arguments are implementation and version dependent. They are not guaranteed to be future-compatible, and may be ignored if the underlying implementation does not support them.	http://ruby-doc.org/core/GC.html#method-c-start
GC::stat	A			class methods							<pre><code>stat → Hash\nstat(hash) → hash\nstat(:key) → Numeric</code></pre>Returns a Hash containing information about the GC.<br>The hash includes information about internal statistics about GC such as:<pre><code>{\n    :count=>0,\n    :heap_allocated_pages=>24,\n    :heap_sorted_length=>24,\n    :heap_allocatable_pages=>0,\n    :heap_available_slots=>9783,\n    :heap_live_slots=>7713,\n    :heap_free_slots=>2070,\n    :heap_final_slots=>0,\n    :heap_marked_slots=>0,\n    :heap_swept_slots=>0,\n    :heap_eden_pages=>24,\n    :heap_tomb_pages=>0,\n    :total_allocated_pages=>24,\n    :total_freed_pages=>0,\n    :total_allocated_objects=>7796,\n    :total_freed_objects=>83,\n    :malloc_increase_bytes=>2389312,\n    :malloc_increase_bytes_limit=>16777216,\n    :minor_gc_count=>0,\n    :major_gc_count=>0,\n    :remembered_wb_unprotected_objects=>0,\n    :remembered_wb_unprotected_objects_limit=>0,\n    :old_objects=>0,\n    :old_objects_limit=>0,\n    :oldmalloc_increase_bytes=>2389760,\n    :oldmalloc_increase_bytes_limit=>16777216\n}\n</code></pre>The contents of the hash are implementation specific and may be changed in the future.<br>This method is only expected to work on C Ruby.	http://ruby-doc.org/core/GC.html#method-c-stat
GC::stress	A			class methods							<pre><code>stress     → fixnum, true or false</code></pre>Returns current status of GC stress mode.	http://ruby-doc.org/core/GC.html#method-c-stress
GC::stress=	A			class methods							<pre><code>stress = flag          → flag</code></pre>Updates the GC stress mode.<br>When stress mode is enabled, the GC is invoked at every GC opportunity: all memory and object allocations.<br>Enabling stress mode will degrade performance, it is only for debugging.<br>flag can be true, false, or a fixnum bit-ORed following flags.<pre><code>0x01:: no major GC\n0x02:: no immediate sweep\n0x04:: full mark after malloc/calloc/realloc\n</code></pre>	http://ruby-doc.org/core/GC.html#method-c-stress-3D
GC::verify_internal_consistency	A			class methods							<pre><code>verify_internal_consistency                  → nil</code></pre>Verify internal consistency.<br>This method is implementation specific. Now this method checks generational consistency if RGenGC is supported.	http://ruby-doc.org/core/GC.html#method-c-verify_internal_consistency
GC#garbage_collect	A			instance methods							<pre><code>garbage_collect           → nil\ngarbage_collect(full_mark: true, immediate_sweep: true) → nil</code></pre>Initiates garbage collection, unless manually disabled.<br>This method is defined with keyword arguments that default to true:<br>Use full_mark: false to perform a minor GC. Use immediate_sweep: false to defer sweeping (use lazy sweep).<br>Note: These keyword arguments are implementation and version dependent. They are not guaranteed to be future-compatible, and may be ignored if the underlying implementation does not support them.	http://ruby-doc.org/core/GC.html#method-i-garbage_collect
ObjectSpace	A			modules							The ObjectSpace module contains a number of routines that interact with the garbage collection facility and allow you to traverse all living objects with an iterator.<br>ObjectSpace also provides support for object finalizers, procs that will be called when a specific object is about to be destroyed by garbage collection.<pre><code>require 'objspace'\n\na = "A"\nb = "B"\n\nObjectSpace.define_finalizer(a, proc {|id| puts "Finalizer one on #{id}" })\nObjectSpace.define_finalizer(b, proc {|id| puts "Finalizer two on #{id}" })\n</code></pre>produces:<pre><code>Finalizer two on 537763470\nFinalizer one on 537763480\n</code></pre>	http://ruby-doc.org/core/ObjectSpace.html
ObjectSpace::_id2ref	A			class methods							<pre><code>_id2ref(object_id) → an_object</code></pre>Converts an object id to a reference to the object. May not be called on an object id passed as a parameter to a finalizer.<pre><code>s = "I am a string"                    #=> "I am a string"\nr = ObjectSpace._id2ref(s.object_id)   #=> "I am a string"\nr == s                                 #=> true\n</code></pre>	http://ruby-doc.org/core/ObjectSpace.html#method-c-_id2ref
ObjectSpace::count_objects	A			class methods							<pre><code>count_objects([result_hash]) → hash</code></pre>Counts all objects grouped by type.<br>It returns a hash, such as:<pre><code>{\n  :TOTAL=>10000,\n  :FREE=>3011,\n  :T_OBJECT=>6,\n  :T_CLASS=>404,\n  # ...\n}\n</code></pre>The contents of the returned hash are implementation specific. It may be changed in future.<br>The keys starting with :T_ means live objects. For example, :T_ARRAY is the number of arrays. :FREE means object slots which is not used now. :TOTAL means sum of above.<br>If the optional argument result_hash is given, it is overwritten and returned. This is intended to avoid probe effect.<pre><code>h = {}\nObjectSpace.count_objects(h)\nputs h\n# => { :TOTAL=>10000, :T_CLASS=>158280, :T_MODULE=>20672, :T_STRING=>527249 }\n</code></pre>This method is only expected to work on C Ruby.	http://ruby-doc.org/core/ObjectSpace.html#method-c-count_objects
ObjectSpace::define_finalizer	A			class methods							<pre><code>define_finalizer(obj, aProc=proc())</code></pre>Adds aProc as a finalizer, to be called after obj was destroyed. The object ID of the obj will be passed as an argument to aProc. If aProc is a lambda or method, make sure it can be called with a single argument.	http://ruby-doc.org/core/ObjectSpace.html#method-c-define_finalizer
ObjectSpace::each_object	A			class methods							<pre><code>each_object([module]) {|obj| ... } → fixnum\neach_object([module])              → an_enumerator</code></pre>Calls the block once for each living, nonimmediate object in this Ruby process. If module is specified, calls the block for only those classes or modules that match (or are a subclass of) module. Returns the number of objects found. Immediate objects (Fixnums, Symbols true, false, and nil) are never returned. In the example below, each_object returns both the numbers we defined and several constants defined in the Math module.<br>If no block is given, an enumerator is returned instead.<pre><code>a = 102.7\nb = 95       # Won't be returned\nc = 12345678987654321\ncount = ObjectSpace.each_object(Numeric) {|x| p x }\nputs "Total count: #{count}"\n</code></pre>produces:<pre><code>12345678987654321\n102.7\n2.71828182845905\n3.14159265358979\n2.22044604925031e-16\n1.7976931348623157e+308\n2.2250738585072e-308\nTotal count: 7\n</code></pre>	http://ruby-doc.org/core/ObjectSpace.html#method-c-each_object
ObjectSpace::garbage_collect	A			class methods							<pre><code>start                     → nil\ngarbage_collect           → nil\nstart(full_mark: true, immediate_sweep: true)           → nil\ngarbage_collect(full_mark: true, immediate_sweep: true) → nil</code></pre>Initiates garbage collection, unless manually disabled.<br>This method is defined with keyword arguments that default to true:<br>Use full_mark: false to perform a minor GC. Use immediate_sweep: false to defer sweeping (use lazy sweep).<br>Note: These keyword arguments are implementation and version dependent. They are not guaranteed to be future-compatible, and may be ignored if the underlying implementation does not support them.	http://ruby-doc.org/core/ObjectSpace.html#method-c-garbage_collect
ObjectSpace::undefine_finalizer	A			class methods							<pre><code>undefine_finalizer(obj)</code></pre>Removes all finalizers for obj.	http://ruby-doc.org/core/ObjectSpace.html#method-c-undefine_finalizer
GC::Profiler	A			modules							The GC profiler provides access to information on GC runs including time, length and object space size.<br>Example:<pre><code>GC::Profiler.enable\n\nrequire 'rdoc/rdoc'\n\nGC::Profiler.report\n\nGC::Profiler.disable\n</code></pre>See also GC.count, GC.malloc_allocated_size and GC.malloc_allocations	http://ruby-doc.org/core/GC/Profiler.html
GC::Profiler::clear	A			class methods							<pre><code>GC::Profiler.clear          → nil</code></pre>Clears the GC profiler data.	http://ruby-doc.org/core/GC/Profiler.html#method-c-clear
GC::Profiler::disable	A			class methods							<pre><code>GC::Profiler.disable      → nil</code></pre>Stops the GC profiler.	http://ruby-doc.org/core/GC/Profiler.html#method-c-disable
GC::Profiler::enable	A			class methods							<pre><code>GC::Profiler.enable       → nil</code></pre>Starts the GC profiler.	http://ruby-doc.org/core/GC/Profiler.html#method-c-enable
GC::Profiler::enabled?	A			class methods							<pre><code>GC::Profiler.enabled?     → true or false</code></pre>The current status of GC profile mode.	http://ruby-doc.org/core/GC/Profiler.html#method-c-enabled-3F
GC::Profiler::raw_data	A			class methods							<pre><code>GC::Profiler.raw_data    → [Hash, ...]</code></pre>Returns an Array of individual raw profile data Hashes ordered from earliest to latest by :GC_INVOKE_TIME.<br>For example:<pre><code>[\n  {\n     :GC_TIME=>1.3000000000000858e-05,\n     :GC_INVOKE_TIME=>0.010634999999999999,\n     :HEAP_USE_SIZE=>289640,\n     :HEAP_TOTAL_SIZE=>588960,\n     :HEAP_TOTAL_OBJECTS=>14724,\n     :GC_IS_MARKED=>false\n  },\n  # ...\n]\n</code></pre>The keys mean:<br>Time elapsed in seconds for this GC run<br>Time elapsed in seconds from startup to when the GC was invoked<br>Total bytes of heap used<br>Total size of heap in bytes<br>Total number of objects<br>Returns true if the GC is in mark phase<br>If ruby was built with GC_PROFILE_MORE_DETAIL, you will also have access to the following hash keys:	http://ruby-doc.org/core/GC/Profiler.html#method-c-raw_data
GC::Profiler::report	A			class methods							<pre><code>GC::Profiler.report\nGC::Profiler.report(io)</code></pre>Writes the ::result to $stdout or the given IO object.	http://ruby-doc.org/core/GC/Profiler.html#method-c-report
GC::Profiler::result	A			class methods							<pre><code>GC::Profiler.result  → String</code></pre>Returns a profile data report such as:	http://ruby-doc.org/core/GC/Profiler.html#method-c-result
GC::Profiler::total_time	A			class methods							<pre><code>GC::Profiler.total_time  → float</code></pre>The total time used for garbage collection in seconds	http://ruby-doc.org/core/GC/Profiler.html#method-c-total_time
Marshal	A			modules							The marshaling library converts collections of Ruby objects into a byte stream, allowing them to be stored outside the currently active script. This data may subsequently be read and the original objects reconstituted.<br>Marshaled data has major and minor version numbers stored along with the object information. In normal use, marshaling can only load data written with the same major version number and an equal or lower minor version number. If Ruby’s “verbose” flag is set (normally using -d, -v, -w, or –verbose) the major and minor numbers must match exactly. Marshal versioning is independent of Ruby’s version numbers. You can extract the version by reading the first two bytes of marshaled data.<pre><code>str = Marshal.dump("thing")\nRUBY_VERSION   #=> "1.9.0"\nstr[0].ord     #=> 4\nstr[1].ord     #=> 8\n</code></pre>Some objects cannot be dumped: if the objects to be dumped include bindings, procedure or method objects, instances of class IO, or singleton objects, a TypeError will be raised.<br>If your class has special serialization needs (for example, if you want to serialize in some specific format), or if it contains objects that would otherwise not be serializable, you can implement your own serialization strategy.<br>There are two methods of doing this, your object can define either marshal_dump and marshal_load or _dump and _load. marshal_dump will take precedence over _dump if both are defined. marshal_dump may result in smaller Marshal strings.	http://ruby-doc.org/core/Marshal.html
Marshal::dump	A			class methods							<pre><code>dump( obj [, anIO] , limit=-1 ) → anIO</code></pre>Serializes obj and all descendant objects. If anIO is specified, the serialized data will be written to it, otherwise the data will be returned as a String. If limit is specified, the traversal of subobjects will be limited to that depth. If limit is negative, no checking of depth will be performed.<pre><code>class Klass\n  def initialize(str)\n    @str = str\n  end\n  def say_hello\n    @str\n  end\nend\n</code></pre>(produces no output)<pre><code>o = Klass.new("hello\n")\ndata = Marshal.dump(o)\nobj = Marshal.load(data)\nobj.say_hello  #=> "hello\n"\n</code></pre>Marshal can't dump following objects:<br>anonymous Class/Module.<br>objects which are related to system (ex: Dir, File::Stat, IO, File, Socket and so on)<br>an instance of MatchData, Data, Method, UnboundMethod, Proc, Thread, ThreadGroup, Continuation<br>objects which define singleton methods	http://ruby-doc.org/core/Marshal.html#method-c-dump
Marshal::load	A			class methods							<pre><code>load( source [, proc] ) → obj</code></pre>Returns the result of converting the serialized data in source into a Ruby object (possibly with associated subordinate objects). source may be either an instance of IO or an object that responds to to_str. If proc is specified, each object will be passed to the proc, as the object is being deserialized.<br>Never pass untrusted data (including user supplied input) to this method. Please see the overview for further details.	http://ruby-doc.org/core/Marshal.html#method-c-load
Marshal::restore	A			class methods							<pre><code>restore( source [, proc] ) → obj</code></pre>Returns the result of converting the serialized data in source into a Ruby object (possibly with associated subordinate objects). source may be either an instance of IO or an object that responds to to_str. If proc is specified, each object will be passed to the proc, as the object is being deserialized.<br>Never pass untrusted data (including user supplied input) to this method. Please see the overview for further details.	http://ruby-doc.org/core/Marshal.html#method-c-restore
Math	A			modules							The Math module contains module functions for basic trigonometric and transcendental functions. See class Float for a list of constants that define Ruby's floating point accuracy.<br>Domains and codomains are given only for real (not complex) numbers.	http://ruby-doc.org/core/Math.html
Math::acos	A			class methods							<pre><code>acos(x)    → Float</code></pre>Computes the arc cosine of x. Returns 0..PI.<br>Domain: [-1, 1]<br>Codomain: [0, PI]<pre><code>Math.acos(0) == Math::PI/2  #=> true\n</code></pre>	http://ruby-doc.org/core/Math.html#method-c-acos
Math::acosh	A			class methods							<pre><code>acosh(x)    → Float</code></pre>Computes the inverse hyperbolic cosine of x.<br>Domain: [1, INFINITY)<br>Codomain: [0, INFINITY)<pre><code>Math.acosh(1) #=> 0.0\n</code></pre>	http://ruby-doc.org/core/Math.html#method-c-acosh
Math::asin	A			class methods							<pre><code>asin(x)    → Float</code></pre>Computes the arc sine of x. Returns -PI/2..PI/2.<br>Domain: [-1, -1]<br>Codomain: [-PI/2, PI/2]<pre><code>Math.asin(1) == Math::PI/2  #=> true\n</code></pre>	http://ruby-doc.org/core/Math.html#method-c-asin
Math::asinh	A			class methods							<pre><code>asinh(x)    → Float</code></pre>Computes the inverse hyperbolic sine of x.<br>Domain: (-INFINITY, INFINITY)<br>Codomain: (-INFINITY, INFINITY)<pre><code>Math.asinh(1) #=> 0.881373587019543\n</code></pre>	http://ruby-doc.org/core/Math.html#method-c-asinh
Math::atan	A			class methods							<pre><code>atan(x)    → Float</code></pre>Computes the arc tangent of x. Returns -PI/2..PI/2.<br>Domain: (-INFINITY, INFINITY)<br>Codomain: (-PI/2, PI/2)<pre><code>Math.atan(0) #=> 0.0\n</code></pre>	http://ruby-doc.org/core/Math.html#method-c-atan
Math::atan2	A			class methods							<pre><code>atan2(y, x)  → Float</code></pre>Computes the arc tangent given y and x. Returns a Float in the range -PI..PI. Return value is a angle in radians between the positive x-axis of cartesian plane and the point given by the coordinates (x, y) on it.<br>Domain: (-INFINITY, INFINITY)<br>Codomain: [-PI, PI]<pre><code>Math.atan2(-0.0, -1.0) #=> -3.141592653589793\nMath.atan2(-1.0, -1.0) #=> -2.356194490192345\nMath.atan2(-1.0, 0.0)  #=> -1.5707963267948966\nMath.atan2(-1.0, 1.0)  #=> -0.7853981633974483\nMath.atan2(-0.0, 1.0)  #=> -0.0\nMath.atan2(0.0, 1.0)   #=> 0.0\nMath.atan2(1.0, 1.0)   #=> 0.7853981633974483\nMath.atan2(1.0, 0.0)   #=> 1.5707963267948966\nMath.atan2(1.0, -1.0)  #=> 2.356194490192345\nMath.atan2(0.0, -1.0)  #=> 3.141592653589793\nMath.atan2(INFINITY, INFINITY)   #=> 0.7853981633974483\nMath.atan2(INFINITY, -INFINITY)  #=> 2.356194490192345\nMath.atan2(-INFINITY, INFINITY)  #=> -0.7853981633974483\nMath.atan2(-INFINITY, -INFINITY) #=> -2.356194490192345\n</code></pre>	http://ruby-doc.org/core/Math.html#method-c-atan2
Math::atanh	A			class methods							<pre><code>atanh(x)    → Float</code></pre>Computes the inverse hyperbolic tangent of x.<br>Domain: (-1, 1)<br>Codomain: (-INFINITY, INFINITY)<pre><code>Math.atanh(1) #=> Infinity\n</code></pre>	http://ruby-doc.org/core/Math.html#method-c-atanh
Math::cbrt	A			class methods							<pre><code>cbrt(x)    → Float</code></pre>Returns the cube root of x.<br>Domain: (-INFINITY, INFINITY)<br>Codomain: (-INFINITY, INFINITY)<pre><code>-9.upto(9) {|x|\n  p [x, Math.cbrt(x), Math.cbrt(x)**3]\n}\n#=> [-9, -2.0800838230519, -9.0]\n#   [-8, -2.0, -8.0]\n#   [-7, -1.91293118277239, -7.0]\n#   [-6, -1.81712059283214, -6.0]\n#   [-5, -1.7099759466767, -5.0]\n#   [-4, -1.5874010519682, -4.0]\n#   [-3, -1.44224957030741, -3.0]\n#   [-2, -1.25992104989487, -2.0]\n#   [-1, -1.0, -1.0]\n#   [0, 0.0, 0.0]\n#   [1, 1.0, 1.0]\n#   [2, 1.25992104989487, 2.0]\n#   [3, 1.44224957030741, 3.0]\n#   [4, 1.5874010519682, 4.0]\n#   [5, 1.7099759466767, 5.0]\n#   [6, 1.81712059283214, 6.0]\n#   [7, 1.91293118277239, 7.0]\n#   [8, 2.0, 8.0]\n#   [9, 2.0800838230519, 9.0]\n</code></pre>	http://ruby-doc.org/core/Math.html#method-c-cbrt
Math::cos	A			class methods							<pre><code>cos(x)    → Float</code></pre>Computes the cosine of x (expressed in radians). Returns a Float in the range -1.0..1.0.<br>Domain: (-INFINITY, INFINITY)<br>Codomain: [-1, 1]<pre><code>Math.cos(Math::PI) #=> -1.0\n</code></pre>	http://ruby-doc.org/core/Math.html#method-c-cos
Math::cosh	A			class methods							<pre><code>cosh(x)    → Float</code></pre>Computes the hyperbolic cosine of x (expressed in radians).<br>Domain: (-INFINITY, INFINITY)<br>Codomain: [1, INFINITY)<pre><code>Math.cosh(0) #=> 1.0\n</code></pre>	http://ruby-doc.org/core/Math.html#method-c-cosh
Math::erf	A			class methods							<pre><code>erf(x)  → Float</code></pre>Calculates the error function of x.<br>Domain: (-INFINITY, INFINITY)<br>Codomain: (-1, 1)<pre><code>Math.erf(0) #=> 0.0\n</code></pre>	http://ruby-doc.org/core/Math.html#method-c-erf
Math::erfc	A			class methods							<pre><code>erfc(x)  → Float</code></pre>Calculates the complementary error function of x.<br>Domain: (-INFINITY, INFINITY)<br>Codomain: (0, 2)<pre><code>Math.erfc(0) #=> 1.0\n</code></pre>	http://ruby-doc.org/core/Math.html#method-c-erfc
Math::exp	A			class methods							<pre><code>exp(x)    → Float</code></pre>Returns e**x.<br>Domain: (-INFINITY, INFINITY)<br>Codomain: (0, INFINITY)<pre><code>Math.exp(0)       #=> 1.0\nMath.exp(1)       #=> 2.718281828459045\nMath.exp(1.5)     #=> 4.4816890703380645\n</code></pre>	http://ruby-doc.org/core/Math.html#method-c-exp
Math::frexp	A			class methods							<pre><code>frexp(x)    → [fraction, exponent]</code></pre>Returns a two-element array containing the normalized fraction (a Float) and exponent (a Fixnum) of x.<pre><code>fraction, exponent = Math.frexp(1234)   #=> [0.6025390625, 11]\nfraction * 2**exponent                  #=> 1234.0\n</code></pre>	http://ruby-doc.org/core/Math.html#method-c-frexp
Math::gamma	A			class methods							<pre><code>gamma(x)  → Float</code></pre>Calculates the gamma function of x.<br>Note that gamma(n) is same as fact(n-1) for integer n > 0. However gamma(n) returns float and can be an approximation.<pre><code>def fact(n) (1..n).inject(1) {|r,i| r*i } end\n1.upto(26) {|i| p [i, Math.gamma(i), fact(i-1)] }\n#=> [1, 1.0, 1]\n#   [2, 1.0, 1]\n#   [3, 2.0, 2]\n#   [4, 6.0, 6]\n#   [5, 24.0, 24]\n#   [6, 120.0, 120]\n#   [7, 720.0, 720]\n#   [8, 5040.0, 5040]\n#   [9, 40320.0, 40320]\n#   [10, 362880.0, 362880]\n#   [11, 3628800.0, 3628800]\n#   [12, 39916800.0, 39916800]\n#   [13, 479001600.0, 479001600]\n#   [14, 6227020800.0, 6227020800]\n#   [15, 87178291200.0, 87178291200]\n#   [16, 1307674368000.0, 1307674368000]\n#   [17, 20922789888000.0, 20922789888000]\n#   [18, 355687428096000.0, 355687428096000]\n#   [19, 6.402373705728e+15, 6402373705728000]\n#   [20, 1.21645100408832e+17, 121645100408832000]\n#   [21, 2.43290200817664e+18, 2432902008176640000]\n#   [22, 5.109094217170944e+19, 51090942171709440000]\n#   [23, 1.1240007277776077e+21, 1124000727777607680000]\n#   [24, 2.5852016738885062e+22, 25852016738884976640000]\n#   [25, 6.204484017332391e+23, 620448401733239439360000]\n#   [26, 1.5511210043330954e+25, 15511210043330985984000000]\n</code></pre>	http://ruby-doc.org/core/Math.html#method-c-gamma
Math::hypot	A			class methods							<pre><code>hypot(x, y)    → Float</code></pre>Returns sqrt(x**2 + y**2), the hypotenuse of a right-angled triangle with sides x and y.<pre><code>Math.hypot(3, 4)   #=> 5.0\n</code></pre>	http://ruby-doc.org/core/Math.html#method-c-hypot
Math::ldexp	A			class methods							<pre><code>ldexp(fraction, exponent) → float</code></pre>Returns the value of fraction*(2**exponent).<pre><code>fraction, exponent = Math.frexp(1234)\nMath.ldexp(fraction, exponent)   #=> 1234.0\n</code></pre>	http://ruby-doc.org/core/Math.html#method-c-ldexp
Math::lgamma	A			class methods							<pre><code>lgamma(x)  → [float, -1 or 1]</code></pre>Calculates the logarithmic gamma of x and the sign of gamma of x.<br>::lgamma is same as<pre><code>[Math.log(Math.gamma(x).abs), Math.gamma(x) < 0 ? -1 : 1]\n</code></pre>but avoid overflow by ::gamma for large x.<pre><code>Math.lgamma(0) #=> [Infinity, 1]\n</code></pre>	http://ruby-doc.org/core/Math.html#method-c-lgamma
Math::log	A			class methods							<pre><code>log(x)          → Float\nlog(x, base)    → Float</code></pre>Returns the logarithm of x. If additional second argument is given, it will be the base of logarithm. Otherwise it is e (for the natural logarithm).<br>Domain: (0, INFINITY)<br>Codomain: (-INFINITY, INFINITY)<pre><code>Math.log(0)          #=> -Infinity\nMath.log(1)          #=> 0.0\nMath.log(Math::E)    #=> 1.0\nMath.log(Math::E**3) #=> 3.0\nMath.log(12, 3)      #=> 2.2618595071429146\n</code></pre>	http://ruby-doc.org/core/Math.html#method-c-log
Math::log10	A			class methods							<pre><code>log10(x)    → Float</code></pre>Returns the base 10 logarithm of x.<br>Domain: (0, INFINITY)<br>Codomain: (-INFINITY, INFINITY)<pre><code>Math.log10(1)       #=> 0.0\nMath.log10(10)      #=> 1.0\nMath.log10(10**100) #=> 100.0\n</code></pre>	http://ruby-doc.org/core/Math.html#method-c-log10
Math::log2	A			class methods							<pre><code>log2(x)    → Float</code></pre>Returns the base 2 logarithm of x.<br>Domain: (0, INFINITY)<br>Codomain: (-INFINITY, INFINITY)<pre><code>Math.log2(1)      #=> 0.0\nMath.log2(2)      #=> 1.0\nMath.log2(32768)  #=> 15.0\nMath.log2(65536)  #=> 16.0\n</code></pre>	http://ruby-doc.org/core/Math.html#method-c-log2
Math::sin	A			class methods							<pre><code>sin(x)    → Float</code></pre>Computes the sine of x (expressed in radians). Returns a Float in the range -1.0..1.0.<br>Domain: (-INFINITY, INFINITY)<br>Codomain: [-1, 1]<pre><code>Math.sin(Math::PI/2) #=> 1.0\n</code></pre>	http://ruby-doc.org/core/Math.html#method-c-sin
Math::sinh	A			class methods							<pre><code>sinh(x)    → Float</code></pre>Computes the hyperbolic sine of x (expressed in radians).<br>Domain: (-INFINITY, INFINITY)<br>Codomain: (-INFINITY, INFINITY)<pre><code>Math.sinh(0) #=> 0.0\n</code></pre>	http://ruby-doc.org/core/Math.html#method-c-sinh
Math::sqrt	A			class methods							<pre><code>sqrt(x)    → Float</code></pre>Returns the non-negative square root of x.<br>Domain: [0, INFINITY)<br>Codomain:[0, INFINITY)<pre><code>0.upto(10) {|x|\n  p [x, Math.sqrt(x), Math.sqrt(x)**2]\n}\n#=> [0, 0.0, 0.0]\n#   [1, 1.0, 1.0]\n#   [2, 1.4142135623731, 2.0]\n#   [3, 1.73205080756888, 3.0]\n#   [4, 2.0, 4.0]\n#   [5, 2.23606797749979, 5.0]\n#   [6, 2.44948974278318, 6.0]\n#   [7, 2.64575131106459, 7.0]\n#   [8, 2.82842712474619, 8.0]\n#   [9, 3.0, 9.0]\n#   [10, 3.16227766016838, 10.0]\n</code></pre>	http://ruby-doc.org/core/Math.html#method-c-sqrt
Math::tan	A			class methods							<pre><code>tan(x)    → Float</code></pre>Computes the tangent of x (expressed in radians).<br>Domain: (-INFINITY, INFINITY)<br>Codomain: (-INFINITY, INFINITY)<pre><code>Math.tan(0) #=> 0.0\n</code></pre>	http://ruby-doc.org/core/Math.html#method-c-tan
Math::tanh	A			class methods							<pre><code>tanh(x)    → Float</code></pre>Computes the hyperbolic tangent of x (expressed in radians).<br>Domain: (-INFINITY, INFINITY)<br>Codomain: (-1, 1)<pre><code>Math.tanh(0) #=> 0.0\n</code></pre>	http://ruby-doc.org/core/Math.html#method-c-tanh
Process	A			modules								http://ruby-doc.org/core/Process.html
Process::abort	A			class methods							<pre><code>abort\nKernel::abort([msg])\nProcess::abort([msg])</code></pre>Terminate execution immediately, effectively by calling Kernel.exit(false). If msg is given, it is written to STDERR prior to terminating.	http://ruby-doc.org/core/Process.html#method-c-abort
Process::argv0	A			class methods							<pre><code>argv0  → frozen_string</code></pre>Returns the name of the script being executed. The value is not affected by assigning a new value to $0.<br>This method first appeared in Ruby 2.1 to serve as a global variable free means to get the script name.	http://ruby-doc.org/core/Process.html#method-c-argv0
Process::clock_getres	A			class methods							<pre><code>clock_getres(clock_id [, unit])   → number</code></pre>Returns the time resolution returned by POSIX ::clock_getres() function.<br>clock_id specifies a kind of clock. See the document of Process.clock_gettime for details.<br>clock_id can be a symbol as Process.clock_gettime. However the result may not be accurate. For example, +Process.clock_getres(:GETTIMEOFDAY_BASED_CLOCK_REALTIME)+ returns 1.0e-06 which means 1 microsecond, but actual resolution can be more coarse.<br>If the given clock_id is not supported, Errno::EINVAL is raised.<br>unit specifies a type of the return value. Process.clock_getres accepts unit as Process.clock_gettime. The default value, :float_second, is also same as Process.clock_gettime.<br>Process.clock_getres also accepts :hertz as unit. :hertz means a the reciprocal of :float_second.<br>:hertz can be used to obtain the exact value of the clock ticks per second for times() function and CLOCKS_PER_SEC for clock() function.<br>+Process.clock_getres(:TIMES_BASED_CLOCK_PROCESS_CPUTIME_ID, :hertz)+ returns the clock ticks per second.<br>+Process.clock_getres(:CLOCK_BASED_CLOCK_PROCESS_CPUTIME_ID, :hertz)+ returns CLOCKS_PER_SEC.<pre><code>p Process.clock_getres(Process::CLOCK_MONOTONIC)\n#=> 1.0e-09\n</code></pre>	http://ruby-doc.org/core/Process.html#method-c-clock_getres
Process::clock_gettime	A			class methods							<pre><code>clock_gettime(clock_id [, unit])   → number</code></pre>Returns a time returned by POSIX ::clock_gettime() function.<pre><code>p Process.clock_gettime(Process::CLOCK_MONOTONIC)\n#=> 896053.968060096\n</code></pre>clock_id specifies a kind of clock. It is specified as a constant which begins with Process::CLOCK_ such as Process::CLOCK_REALTIME and Process::CLOCK_MONOTONIC.<br>The supported constants depends on OS and version. Ruby provides following types of clock_id if available.<br>SUSv2 to 4, Linux 2.5.63, FreeBSD 3.0, NetBSD 2.0, OpenBSD 2.1<br>SUSv3 to 4, Linux 2.5.63, FreeBSD 3.0, NetBSD 2.0, OpenBSD 3.4<br>SUSv3 to 4, Linux 2.5.63, OpenBSD 5.4<br>SUSv3 to 4, Linux 2.5.63, FreeBSD 7.1, OpenBSD 5.4<br>FreeBSD 3.0, OpenBSD 2.1<br>FreeBSD 3.0, OpenBSD 2.1<br>FreeBSD 8.1<br>FreeBSD 8.1<br>Linux 2.6.32<br>Linux 3.0<br>FreeBSD 8.1<br>FreeBSD 8.1<br>Linux 2.6.32<br>Linux 2.6.28<br>Linux 2.6.39<br>Linux 3.0<br>FreeBSD 7.0, OpenBSD 5.5<br>FreeBSD 8.1<br>FreeBSD 8.1<br>FreeBSD 8.1<br>Note that SUS stands for Single Unix Specification. SUS contains POSIX and ::clock_gettime is defined in the POSIX part. SUS defines CLOCK_REALTIME mandatory but CLOCK_MONOTONIC, CLOCK_PROCESS_CPUTIME_ID and CLOCK_THREAD_CPUTIME_ID are optional.<br>Also, several symbols are accepted as clock_id. There are emulations for ::clock_gettime().<br>For example, Process::CLOCK_REALTIME is defined as :GETTIMEOFDAY_BASED_CLOCK_REALTIME when ::clock_gettime() is not available.<br>Emulations for CLOCK_REALTIME:<br>Use gettimeofday() defined by SUS. (SUSv4 obsoleted it, though.) The resolution is 1 microsecond.<br>Use time() defined by ISO C. The resolution is 1 second.<br>Emulations for CLOCK_MONOTONIC:<br>Use mach_absolute_time(), available on Darwin. The resolution is CPU dependent.<br>Use the result value of times() defined by POSIX. POSIX defines it as “times() shall return the elapsed real time, in clock ticks, since an arbitrary point in the past (for example, system start-up time)”. For example, GNU/Linux returns a value based on jiffies and it is monotonic. However, 4.4BSD uses gettimeofday() and it is not monotonic. (FreeBSD uses ::clock_gettime(CLOCK_MONOTONIC) instead, though.) The resolution is the clock tick. “getconf CLK_TCK” command shows the clock ticks per second. (The clock ticks per second is defined by HZ macro in older systems.) If it is 100 and clock_t is 32 bits integer type, the resolution is 10 millisecond and cannot represent over 497 days.<br>Emulations for CLOCK_PROCESS_CPUTIME_ID:<br>Use getrusage() defined by SUS. getrusage() is used with RUSAGE_SELF to obtain the time only for the calling process (excluding the time for child processes). The result is addition of user time (ru_utime) and system time (ru_stime). The resolution is 1 microsecond.<br>Use times() defined by POSIX. The result is addition of user time (tms_utime) and system time (tms_stime). tms_cutime and tms_cstime are ignored to exclude the time for child processes. The resolution is the clock tick. “getconf CLK_TCK” command shows the clock ticks per second. (The clock ticks per second is defined by HZ macro in older systems.) If it is 100, the resolution is 10 millisecond.<br>Use clock() defined by ISO C. The resolution is 1/CLOCKS_PER_SEC. CLOCKS_PER_SEC is the C-level macro defined by time.h. SUS defines CLOCKS_PER_SEC is 1000000. Non-Unix systems may define it a different value, though. If CLOCKS_PER_SEC is 1000000 as SUS, the resolution is 1 microsecond. If CLOCKS_PER_SEC is 1000000 and clock_t is 32 bits integer type, it cannot represent over 72 minutes.<br>If the given clock_id is not supported, Errno::EINVAL is raised.<br>unit specifies a type of the return value.<br>number of seconds as a float (default)<br>number of milliseconds as a float<br>number of microseconds as a float<br>number of seconds as an integer<br>number of milliseconds as an integer<br>number of microseconds as an integer<br>number of nanoseconds as an integer<br>The underlying function, ::clock_gettime(), returns a number of nanoseconds. Float object (IEEE 754 double) is not enough to represent the return value for CLOCK_REALTIME. If the exact nanoseconds value is required, use :nanoseconds as the unit.<br>The origin (zero) of the returned value varies. For example, system start up time, process start up time, the Epoch, etc.<br>The origin in CLOCK_REALTIME is defined as the Epoch (1970-01-01 00:00:00 UTC). But some systems count leap seconds and others doesn’t. So the result can be interpreted differently across systems. Time.now is recommended over CLOCK_REALTIME.	http://ruby-doc.org/core/Process.html#method-c-clock_gettime
Process::daemon	A			class methods							<pre><code>daemon()                        → 0\ndaemon(nochdir=nil,noclose=nil) → 0</code></pre>Detach the process from controlling terminal and run in the background as system daemon. Unless the argument nochdir is true (i.e. non false), it changes the current working directory to the root (“/”). Unless the argument noclose is true, daemon() will redirect standard input, standard output and standard error to /dev/null. Return zero on success, or raise one of Errno::*.	http://ruby-doc.org/core/Process.html#method-c-daemon
Process::detach	A			class methods							<pre><code>detach(pid)   → thread</code></pre>Some operating systems retain the status of terminated child processes until the parent collects that status (normally using some variant of wait()). If the parent never collects this status, the child stays around as a zombie process. Process::detach prevents this by setting up a separate Ruby thread whose sole job is to reap the status of the process pid when it terminates. Use detach only when you do not intend to explicitly wait for the child to terminate.<br>The waiting thread returns the exit status of the detached process when it terminates, so you can use Thread#join to know the result. If specified pid is not a valid child process ID, the thread returns nil immediately.<br>The waiting thread has pid method which returns the pid.<br>In this first example, we don’t reap the first child process, so it appears as a zombie in the process status display.<pre><code>p1 = fork { sleep 0.1 }\np2 = fork { sleep 0.2 }\nProcess.waitpid(p2)\nsleep 2\nsystem("ps -ho pid,state -p #{p1}")\n</code></pre>produces:<br>In the next example, Process::detach is used to reap the child automatically.<pre><code>p1 = fork { sleep 0.1 }\np2 = fork { sleep 0.2 }\nProcess.detach(p1)\nProcess.waitpid(p2)\nsleep 2\nsystem("ps -ho pid,state -p #{p1}")\n</code></pre>(produces no output)	http://ruby-doc.org/core/Process.html#method-c-detach
Process::egid	A			class methods							<pre><code>egid          → fixnum\nProcess::GID.eid      → fixnum\nProcess::Sys.geteid   → fixnum</code></pre>Returns the effective group ID for this process. Not available on all platforms.<pre><code>Process.egid   #=> 500\n</code></pre>	http://ruby-doc.org/core/Process.html#method-c-egid
Process::egid=	A			class methods							<pre><code>egid = fixnum   → fixnum</code></pre>Sets the effective group ID for this process. Not available on all platforms.	http://ruby-doc.org/core/Process.html#method-c-egid-3D
Process::euid	A			class methods							<pre><code>euid           → fixnum\nProcess::UID.eid       → fixnum\nProcess::Sys.geteuid   → fixnum</code></pre>Returns the effective user ID for this process.<pre><code>Process.euid   #=> 501\n</code></pre>	http://ruby-doc.org/core/Process.html#method-c-euid
Process::euid=	A			class methods							<pre><code>euid= user</code></pre>Sets the effective user ID for this process. Not available on all platforms.	http://ruby-doc.org/core/Process.html#method-c-euid-3D
Process::exec	A			class methods							<pre><code>exec([env,] command... [,options])</code></pre>Replaces the current process by running the given external command, which can take one of the following forms:<br>command line string which is passed to the standard shell<br>command name and one or more arguments (no shell)<br>command name, argv and zero or more arguments (no shell)<br>In the first form, the string is taken as a command line that is subject to shell expansion before being executed.<br>The standard shell always means "/bin/sh" on Unix-like systems, same as ENV["RUBYSHELL"] (or ENV["COMSPEC"] on Windows NT series), and similar.<br>If the string from the first form (exec("command")) follows these simple rules:<br>no meta characters<br>no shell reserved word and no special built-in<br>Ruby invokes the command directly without shell<br>You can force shell invocation by adding “;” to the string (because “;” is a meta character).<br>Note that this behavior is observable by pid obtained (return value of spawn() and IO#pid for IO.popen) is the pid of the invoked command, not shell.<br>In the second form (exec("command1", "arg1", ...)), the first is taken as a command name and the rest are passed as parameters to command with no shell expansion.<br>In the third form (exec(["command", "argv0"], "arg1", ...)), starting a two-element array at the beginning of the command, the first element is the command to be executed, and the second argument is used as the argv[0] value, which may show up in process listings.<br>In order to execute the command, one of the exec(2) system calls are used, so the running command may inherit some of the environment of the original program (including open file descriptors).<br>This behavior is modified by the given env and options parameters. See ::spawn for details.<br>If the command fails to execute (typically Errno::ENOENT when it was not found) a SystemCallError exception is raised.<br>This method modifies process attributes according to given options before exec(2) system call. See ::spawn for more details about the given options.<br>The modified attributes may be retained when exec(2) system call fails.<br>For example, hard resource limits are not restorable.<br>Consider to create a child process using ::spawn or Kernel#system if this is not acceptable.<pre><code>exec "echo *"       # echoes list of files in current directory\n# never get here\n\nexec "echo", "*"    # echoes an asterisk\n# never get here\n</code></pre>	http://ruby-doc.org/core/Process.html#method-c-exec
Process::exit	A			class methods							<pre><code>exit(status=true)\nKernel::exit(status=true)\nProcess::exit(status=true)</code></pre>Initiates the termination of the Ruby script by raising the SystemExit exception. This exception may be caught. The optional parameter is used to return a status code to the invoking environment. true and FALSE of status means success and failure respectively. The interpretation of other integer values are system dependent.<pre><code>begin\n  exit\n  puts "never get here"\nrescue SystemExit\n  puts "rescued a SystemExit exception"\nend\nputs "after begin block"\n</code></pre>produces:<br>Just prior to termination, Ruby executes any at_exit functions (see Kernel::at_exit) and runs any object finalizers (see ObjectSpace.define_finalizer).<pre><code>at_exit { puts "at_exit function" }\nObjectSpace.define_finalizer("string",  proc { puts "in finalizer" })\nexit\n</code></pre>produces:	http://ruby-doc.org/core/Process.html#method-c-exit
Process::exit!	A			class methods							<pre><code>exit!(status=false)</code></pre>Exits the process immediately. No exit handlers are run. status is returned to the underlying system as the exit status.<pre><code>Process.exit!(true)\n</code></pre>	http://ruby-doc.org/core/Process.html#method-c-exit-21
Process::fork	A			class methods							<pre><code>fork  [{ block }]   → fixnum or nil\nfork [{ block }]   → fixnum or nil</code></pre>Creates a subprocess. If a block is specified, that block is run in the subprocess, and the subprocess terminates with a status of zero. Otherwise, the fork call returns twice, once in the parent, returning the process ID of the child, and once in the child, returning nil. The child process can exit using Kernel.exit! to avoid running any at_exit functions. The parent process should use Process.wait to collect the termination statuses of its children or use Process.detach to register disinterest in their status; otherwise, the operating system may accumulate zombie processes.<br>The thread calling fork is the only thread in the created child process. fork doesn’t copy other threads.<br>If fork is not usable, Process.respond_to?(:fork) returns false.<br>Note that fork(2) is not available on some platforms like Windows and NetBSD 4. Therefore you should use spawn() instead of fork().	http://ruby-doc.org/core/Process.html#method-c-fork
Process::getpgid	A			class methods							<pre><code>getpgid(pid)   → integer</code></pre>Returns the process group ID for the given process id. Not available on all platforms.<pre><code>Process.getpgid(Process.ppid())   #=> 25527\n</code></pre>	http://ruby-doc.org/core/Process.html#method-c-getpgid
Process::getpgrp	A			class methods							<pre><code>getpgrp   → integer</code></pre>Returns the process group ID for this process. Not available on all platforms.<pre><code>Process.getpgid(0)   #=> 25527\nProcess.getpgrp      #=> 25527\n</code></pre>	http://ruby-doc.org/core/Process.html#method-c-getpgrp
Process::getpriority	A			class methods							<pre><code>getpriority(kind, integer)   → fixnum</code></pre>Gets the scheduling priority for specified process, process group, or user. kind indicates the kind of entity to find: one of Process::PRIO_PGRP, Process::PRIO_USER, or Process::PRIO_PROCESS. integer is an id indicating the particular process, process group, or user (an id of 0 means current). Lower priorities are more favorable for scheduling. Not available on all platforms.<pre><code>Process.getpriority(Process::PRIO_USER, 0)      #=> 19\nProcess.getpriority(Process::PRIO_PROCESS, 0)   #=> 19\n</code></pre>	http://ruby-doc.org/core/Process.html#method-c-getpriority
Process::getrlimit	A			class methods							<pre><code>getrlimit(resource)   → [cur_limit, max_limit]</code></pre>Gets the resource limit of the process. cur_limit means current (soft) limit and max_limit means maximum (hard) limit.<br>resource indicates the kind of resource to limit. It is specified as a symbol such as :CORE, a string such as "CORE" or a constant such as Process::RLIMIT_CORE. See ::setrlimit for details.<br>cur_limit and max_limit may be Process::RLIM_INFINITY, Process::RLIM_SAVED_MAX or Process::RLIM_SAVED_CUR. See ::setrlimit and the system getrlimit(2) manual for details.	http://ruby-doc.org/core/Process.html#method-c-getrlimit
Process::getsid	A			class methods							<pre><code>getsid()      → integer\ngetsid(pid)   → integer</code></pre>Returns the session ID for the given process id. If not given, return current process sid. Not available on all platforms.<pre><code>Process.getsid()                #=> 27422\nProcess.getsid(0)               #=> 27422\nProcess.getsid(Process.pid())   #=> 27422\n</code></pre>	http://ruby-doc.org/core/Process.html#method-c-getsid
Process::gid	A			class methods							<pre><code>gid           → fixnum\nProcess::GID.rid      → fixnum\nProcess::Sys.getgid   → fixnum</code></pre>Returns the (real) group ID for this process.<pre><code>Process.gid   #=> 500\n</code></pre>	http://ruby-doc.org/core/Process.html#method-c-gid
Process::gid=	A			class methods							<pre><code>gid= fixnum   → fixnum</code></pre>Sets the group ID for this process.	http://ruby-doc.org/core/Process.html#method-c-gid-3D
Process::groups	A			class methods							<pre><code>groups   → array</code></pre>Get an Array of the gids of groups in the supplemental group access list for this process.<pre><code>Process.groups   #=> [27, 6, 10, 11]\n</code></pre>	http://ruby-doc.org/core/Process.html#method-c-groups
Process::groups=	A			class methods							<pre><code>groups= array   → array</code></pre>Set the supplemental group access list to the given Array of group IDs.<pre><code>Process.groups   #=> [0, 1, 2, 3, 4, 6, 10, 11, 20, 26, 27]\nProcess.groups = [27, 6, 10, 11]   #=> [27, 6, 10, 11]\nProcess.groups   #=> [27, 6, 10, 11]\n</code></pre>	http://ruby-doc.org/core/Process.html#method-c-groups-3D
Process::initgroups	A			class methods							<pre><code>initgroups(username, gid)   → array</code></pre>Initializes the supplemental group access list by reading the system group database and using all groups of which the given user is a member. The group with the specified gid is also added to the list. Returns the resulting Array of the gids of all the groups in the supplementary group access list. Not available on all platforms.<pre><code>Process.groups   #=> [0, 1, 2, 3, 4, 6, 10, 11, 20, 26, 27]\nProcess.initgroups( "mgranger", 30 )   #=> [30, 6, 10, 11]\nProcess.groups   #=> [30, 6, 10, 11]\n</code></pre>	http://ruby-doc.org/core/Process.html#method-c-initgroups
Process::kill	A			class methods							<pre><code>kill(signal, pid, ...)    → fixnum</code></pre>Sends the given signal to the specified process id(s) if pid is positive. If pid is zero signal is sent to all processes whose group ID is equal to the group ID of the process. signal may be an integer signal number or a POSIX signal name (either with or without a SIG prefix). If signal is negative (or starts with a minus sign), kills process groups instead of processes. Not all signals are available on all platforms. The keys and values of Signal.list are known signal names and numbers, respectively.<pre><code>pid = fork do\n   Signal.trap("HUP") { puts "Ouch!"; exit }\n   # ... do some work ...\nend\n# ...\nProcess.kill("HUP", pid)\nProcess.wait\n</code></pre>produces:<pre><code>Ouch!\n</code></pre>If signal is an integer but wrong for signal, Errno::EINVAL or RangeError will be raised. Otherwise unless signal is a String or a Symbol, and a known signal name, ArgumentError will be raised.<br>Also, Errno::ESRCH or RangeError for invalid pid, Errno::EPERM when failed because of no privilege, will be raised. In these cases, signals may have been sent to preceding processes.	http://ruby-doc.org/core/Process.html#method-c-kill
Process::maxgroups	A			class methods							<pre><code>maxgroups   → fixnum</code></pre>Returns the maximum number of gids allowed in the supplemental group access list.<pre><code>Process.maxgroups   #=> 32\n</code></pre>	http://ruby-doc.org/core/Process.html#method-c-maxgroups
Process::maxgroups=	A			class methods							<pre><code>maxgroups= fixnum   → fixnum</code></pre>Sets the maximum number of gids allowed in the supplemental group access list.	http://ruby-doc.org/core/Process.html#method-c-maxgroups-3D
Process::pid	A			class methods							<pre><code>pid   → fixnum</code></pre>Returns the process id of this process. Not available on all platforms.<pre><code>Process.pid   #=> 27415\n</code></pre>	http://ruby-doc.org/core/Process.html#method-c-pid
Process::ppid	A			class methods							<pre><code>ppid   → fixnum</code></pre>Returns the process id of the parent of this process. Returns untrustworthy value on Win32/64. Not available on all platforms.<pre><code>puts "I am #{Process.pid}"\nProcess.fork { puts "Dad is #{Process.ppid}" }\n</code></pre>produces:<pre><code>I am 27417\nDad is 27417\n</code></pre>	http://ruby-doc.org/core/Process.html#method-c-ppid
Process::setpgid	A			class methods							<pre><code>setpgid(pid, integer)   → 0</code></pre>Sets the process group ID of pid (0 indicates this process) to integer. Not available on all platforms.	http://ruby-doc.org/core/Process.html#method-c-setpgid
Process::setpgrp	A			class methods							<pre><code>setpgrp   → 0</code></pre>Equivalent to setpgid(0,0). Not available on all platforms.	http://ruby-doc.org/core/Process.html#method-c-setpgrp
Process::setpriority	A			class methods							<pre><code>setpriority(kind, integer, priority)   → 0</code></pre>See Process#getpriority.<pre><code>Process.setpriority(Process::PRIO_USER, 0, 19)      #=> 0\nProcess.setpriority(Process::PRIO_PROCESS, 0, 19)   #=> 0\nProcess.getpriority(Process::PRIO_USER, 0)          #=> 19\nProcess.getpriority(Process::PRIO_PROCESS, 0)       #=> 19\n</code></pre>	http://ruby-doc.org/core/Process.html#method-c-setpriority
Process::setproctitle	A			class methods							<pre><code>setproctitle(string)  → string</code></pre>Sets the process title that appears on the ps(1) command. Not necessarily effective on all platforms. No exception will be raised regardless of the result, nor will NotImplementedError be raised even if the platform does not support the feature.<br>Calling this method does not affect the value of $0.<pre><code>Process.setproctitle('myapp: worker #%d' % worker_id)\n</code></pre>This method first appeared in Ruby 2.1 to serve as a global variable free means to change the process title.	http://ruby-doc.org/core/Process.html#method-c-setproctitle
Process::setrlimit	A			class methods							<pre><code>setrlimit(resource, cur_limit, max_limit)        → nil\nsetrlimit(resource, cur_limit)                   → nil</code></pre>Sets the resource limit of the process. cur_limit means current (soft) limit and max_limit means maximum (hard) limit.<br>If max_limit is not given, cur_limit is used.<br>resource indicates the kind of resource to limit. It should be a symbol such as :CORE, a string such as "CORE" or a constant such as Process::RLIMIT_CORE. The available resources are OS dependent. Ruby may support following resources.<br>total available memory (bytes) (SUSv3, NetBSD, FreeBSD, OpenBSD but 4.4BSD-Lite)<br>core size (bytes) (SUSv3)<br>CPU time (seconds) (SUSv3)<br>data segment (bytes) (SUSv3)<br>file size (bytes) (SUSv3)<br>total size for mlock(2) (bytes) (4.4BSD, GNU/Linux)<br>allocation for POSIX message queues (bytes) (GNU/Linux)<br>ceiling on process’s nice(2) value (number) (GNU/Linux)<br>file descriptors (number) (SUSv3)<br>number of processes for the user (number) (4.4BSD, GNU/Linux)<br>resident memory size (bytes) (4.2BSD, GNU/Linux)<br>ceiling on the process’s real-time priority (number) (GNU/Linux)<br>CPU time for real-time process (us) (GNU/Linux)<br>all socket buffers (bytes) (NetBSD, FreeBSD)<br>number of queued signals allowed (signals) (GNU/Linux)<br>stack size (bytes) (SUSv3)<br>cur_limit and max_limit may be :INFINITY, "INFINITY" or Process::RLIM_INFINITY, which means that the resource is not limited. They may be Process::RLIM_SAVED_MAX, Process::RLIM_SAVED_CUR and corresponding symbols and strings too. See system setrlimit(2) manual for details.<br>The following example raises the soft limit of core size to the hard limit to try to make core dump possible.<pre><code>Process.setrlimit(:CORE, Process.getrlimit(:CORE)[1])\n</code></pre>	http://ruby-doc.org/core/Process.html#method-c-setrlimit
Process::setsid	A			class methods							<pre><code>setsid   → fixnum</code></pre>Establishes this process as a new session and process group leader, with no controlling tty. Returns the session id. Not available on all platforms.<pre><code>Process.setsid   #=> 27422\n</code></pre>	http://ruby-doc.org/core/Process.html#method-c-setsid
Process::spawn	A			class methods							<pre><code>spawn([env,] command... [,options])     → pid\nspawn([env,] command... [,options])     → pid</code></pre>spawn executes specified command and return its pid.<pre><code>pid = spawn("tar xf ruby-2.0.0-p195.tar.bz2")\nProcess.wait pid\n\npid = spawn(RbConfig.ruby, "-eputs'Hello, world!'")\nProcess.wait pid\n</code></pre>This method is similar to Kernel#system but it doesn’t wait for the command to finish.<br>The parent process should use Process.wait to collect the termination status of its child or use Process.detach to register disinterest in their status; otherwise, the operating system may accumulate zombie processes.<br>spawn has bunch of options to specify process attributes:<br>If a hash is given as env, the environment is updated by env before exec(2) in the child process. If a pair in env has nil as the value, the variable is deleted.<pre><code># set FOO as BAR and unset BAZ.\npid = spawn({"FOO"=>"BAR", "BAZ"=>nil}, command)\n</code></pre>If a hash is given as options, it specifies process group, create new process group, resource limit, current directory, umask and redirects for the child process. Also, it can be specified to clear environment variables.<br>The :unsetenv_others key in options specifies to clear environment variables, other than specified by env.<pre><code>pid = spawn(command, :unsetenv_others=>true) # no environment variable\npid = spawn({"FOO"=>"BAR"}, command, :unsetenv_others=>true) # FOO only\n</code></pre>The :pgroup key in options specifies a process group. The corresponding value should be true, zero, a positive integer, or nil. true and zero cause the process to be a process leader of a new process group. A non-zero positive integer causes the process to join the provided process group. The default value, nil, causes the process to remain in the same process group.<pre><code>pid = spawn(command, :pgroup=>true) # process leader\npid = spawn(command, :pgroup=>10) # belongs to the process group 10\n</code></pre>The :new_pgroup key in options specifies to pass CREATE_NEW_PROCESS_GROUP flag to CreateProcessW() that is Windows API. This option is only for Windows. true means the new process is the root process of the new process group. The new process has CTRL+C disabled. This flag is necessary for Process.kill(:SIGINT, pid) on the subprocess. :new_pgroup is false by default.<pre><code>pid = spawn(command, :new_pgroup=>true)  # new process group\npid = spawn(command, :new_pgroup=>false) # same process group\n</code></pre>The :rlimit_foo key specifies a resource limit. foo should be one of resource types such as core. The corresponding value should be an integer or an array which have one or two integers: same as cur_limit and max_limit arguments for ::setrlimit.<pre><code>cur, max = Process.getrlimit(:CORE)\npid = spawn(command, :rlimit_core=>[0,max]) # disable core temporary.\npid = spawn(command, :rlimit_core=>max) # enable core dump\npid = spawn(command, :rlimit_core=>0) # never dump core.\n</code></pre>The :umask key in options specifies the umask.<pre><code>pid = spawn(command, :umask=>077)\n</code></pre>The :in, :out, :err, a fixnum, an IO and an array key specifies a redirection. The redirection maps a file descriptor in the child process.<br>For example, stderr can be merged into stdout as follows:<pre><code>pid = spawn(command, :err=>:out)\npid = spawn(command, 2=>1)\npid = spawn(command, STDERR=>:out)\npid = spawn(command, STDERR=>STDOUT)\n</code></pre>The hash keys specifies a file descriptor in the child process started by spawn. :err, 2 and STDERR specifies the standard error stream (stderr).<br>The hash values specifies a file descriptor in the parent process which invokes spawn. :out, 1 and STDOUT specifies the standard output stream (stdout).<br>In the above example, the standard output in the child process is not specified. So it is inherited from the parent process.<br>The standard input stream (stdin) can be specified by :in, 0 and STDIN.<br>A filename can be specified as a hash value.<pre><code>pid = spawn(command, :in=>"/dev/null") # read mode\npid = spawn(command, :out=>"/dev/null") # write mode\npid = spawn(command, :err=>"log") # write mode\npid = spawn(command, [:out, :err]=>"/dev/null") # write mode\npid = spawn(command, 3=>"/dev/null") # read mode\n</code></pre>For stdout and stderr (and combination of them), it is opened in write mode. Otherwise read mode is used.<br>For specifying flags and permission of file creation explicitly, an array is used instead.<pre><code>pid = spawn(command, :in=>["file"]) # read mode is assumed\npid = spawn(command, :in=>["file", "r"])\npid = spawn(command, :out=>["log", "w"]) # 0644 assumed\npid = spawn(command, :out=>["log", "w", 0600])\npid = spawn(command, :out=>["log", File::WRONLY|File::EXCL|File::CREAT, 0600])\n</code></pre>The array specifies a filename, flags and permission. The flags can be a string or an integer. If the flags is omitted or nil, File::RDONLY is assumed. The permission should be an integer. If the permission is omitted or nil, 0644 is assumed.<br>If an array of IOs and integers are specified as a hash key, all the elements are redirected.<pre><code># stdout and stderr is redirected to log file.\n# The file "log" is opened just once.\npid = spawn(command, [:out, :err]=>["log", "w"])\n</code></pre>Another way to merge multiple file descriptors is [:child, fd]. [:child, fd] means the file descriptor in the child process. This is different from fd. For example, :err=>:out means redirecting child stderr to parent stdout. But :err=>[:child, :out] means redirecting child stderr to child stdout. They differ if stdout is redirected in the child process as follows.<pre><code># stdout and stderr is redirected to log file.\n# The file "log" is opened just once.\npid = spawn(command, :out=>["log", "w"], :err=>[:child, :out])\n</code></pre>[:child, :out] can be used to merge stderr into stdout in IO.popen. In this case, IO.popen redirects stdout to a pipe in the child process and [:child, :out] refers the redirected stdout.<pre><code>io = IO.popen(["sh", "-c", "echo out; echo err >&2", :err=>[:child, :out]])\np io.read #=> "out\nerr\n"\n</code></pre>The :chdir key in options specifies the current directory.<pre><code>pid = spawn(command, :chdir=>"/var/tmp")\n</code></pre>spawn closes all non-standard unspecified descriptors by default. The “standard” descriptors are 0, 1 and 2. This behavior is specified by :close_others option. :close_others doesn’t affect the standard descriptors which are closed only if :close is specified explicitly.<pre><code>pid = spawn(command, :close_others=>true)  # close 3,4,5,... (default)\npid = spawn(command, :close_others=>false) # don't close 3,4,5,...\n</code></pre>:close_others is true by default for spawn and IO.popen.<br>Note that fds which close-on-exec flag is already set are closed regardless of :close_others option.<br>So IO.pipe and spawn can be used as IO.popen.<pre><code># similar to r = IO.popen(command)\nr, w = IO.pipe\npid = spawn(command, :out=>w)   # r, w is closed in the child process.\nw.close\n</code></pre>:close is specified as a hash value to close a fd individually.<pre><code>f = open(foo)\nsystem(command, f=>:close)        # don't inherit f.\n</code></pre>If a file descriptor need to be inherited, io=>io can be used.<pre><code># valgrind has --log-fd option for log destination.\n# log_w=>log_w indicates log_w.fileno inherits to child process.\nlog_r, log_w = IO.pipe\npid = spawn("valgrind", "--log-fd=#{log_w.fileno}", "echo", "a", log_w=>log_w)\nlog_w.close\np log_r.read\n</code></pre>It is also possible to exchange file descriptors.<pre><code>pid = spawn(command, :out=>:err, :err=>:out)\n</code></pre>The hash keys specify file descriptors in the child process. The hash values specifies file descriptors in the parent process. So the above specifies exchanging stdout and stderr. Internally, spawn uses an extra file descriptor to resolve such cyclic file descriptor mapping.<br>See Kernel.exec for the standard shell.	http://ruby-doc.org/core/Process.html#method-c-spawn
Process::times	A			class methods							<pre><code>times   → aProcessTms</code></pre>Returns a Tms structure (see Process::Tms) that contains user and system CPU times for this process, and also for children processes.<pre><code>t = Process.times\n[ t.utime, t.stime, t.cutime, t.cstime ]   #=> [0.0, 0.02, 0.00, 0.00]\n</code></pre>	http://ruby-doc.org/core/Process.html#method-c-times
Process::uid	A			class methods							<pre><code>uid           → fixnum\nProcess::UID.rid      → fixnum\nProcess::Sys.getuid   → fixnum</code></pre>Returns the (real) user ID of this process.<pre><code>Process.uid   #=> 501\n</code></pre>	http://ruby-doc.org/core/Process.html#method-c-uid
Process::uid=	A			class methods							<pre><code>uid= user   → numeric</code></pre>Sets the (user) user ID for this process. Not available on all platforms.	http://ruby-doc.org/core/Process.html#method-c-uid-3D
Process::wait	A			class methods							<pre><code>wait()                     → fixnum\nwait(pid=-1, flags=0)      → fixnum\nwaitpid(pid=-1, flags=0)   → fixnum</code></pre>Waits for a child process to exit, returns its process id, and sets $? to a Process::Status object containing information on that process. Which child it waits on depends on the value of pid:<br>Waits for the child whose process ID equals pid.<br>Waits for any child whose process group ID equals that of the calling process.<br>Waits for any child process (the default if no pid is given).<br>Waits for any child whose process group ID equals the absolute value of pid.<br>The flags argument may be a logical or of the flag values Process::WNOHANG (do not block if no child available) or Process::WUNTRACED (return stopped children that haven’t been reported). Not all flags are available on all platforms, but a flag value of zero will work on all platforms.<br>Calling this method raises a SystemCallError if there are no child processes. Not available on all platforms.<pre><code>include Process\nfork { exit 99 }                 #=> 27429\nwait                             #=> 27429\n$?.exitstatus                    #=> 99\n\npid = fork { sleep 3 }           #=> 27440\nTime.now                         #=> 2008-03-08 19:56:16 +0900\nwaitpid(pid, Process::WNOHANG)   #=> nil\nTime.now                         #=> 2008-03-08 19:56:16 +0900\nwaitpid(pid, 0)                  #=> 27440\nTime.now                         #=> 2008-03-08 19:56:19 +0900\n</code></pre>	http://ruby-doc.org/core/Process.html#method-c-wait
Process::wait2	A			class methods							<pre><code>wait2(pid=-1, flags=0)      → [pid, status]</code></pre>Waits for a child process to exit (see ::waitpid for exact semantics) and returns an array containing the process id and the exit status (a Process::Status object) of that child. Raises a SystemCallError if there are no child processes.<pre><code>Process.fork { exit 99 }   #=> 27437\npid, status = Process.wait2\npid                        #=> 27437\nstatus.exitstatus          #=> 99\n</code></pre>	http://ruby-doc.org/core/Process.html#method-c-wait2
Process::waitall	A			class methods							<pre><code>waitall   → [ [pid1,status1], ...]</code></pre>Waits for all children, returning an array of pid/status pairs (where status is a Process::Status object).<pre><code>fork { sleep 0.2; exit 2 }   #=> 27432\nfork { sleep 0.1; exit 1 }   #=> 27433\nfork {            exit 0 }   #=> 27434\np Process.waitall\n</code></pre>produces:	http://ruby-doc.org/core/Process.html#method-c-waitall
Process::waitpid	A			class methods							<pre><code>waitpid(pid=-1, flags=0)   → fixnum</code></pre>Waits for a child process to exit, returns its process id, and sets $? to a Process::Status object containing information on that process. Which child it waits on depends on the value of pid:<br>Waits for the child whose process ID equals pid.<br>Waits for any child whose process group ID equals that of the calling process.<br>Waits for any child process (the default if no pid is given).<br>Waits for any child whose process group ID equals the absolute value of pid.<br>The flags argument may be a logical or of the flag values Process::WNOHANG (do not block if no child available) or Process::WUNTRACED (return stopped children that haven’t been reported). Not all flags are available on all platforms, but a flag value of zero will work on all platforms.<br>Calling this method raises a SystemCallError if there are no child processes. Not available on all platforms.<pre><code>include Process\nfork { exit 99 }                 #=> 27429\nwait                             #=> 27429\n$?.exitstatus                    #=> 99\n\npid = fork { sleep 3 }           #=> 27440\nTime.now                         #=> 2008-03-08 19:56:16 +0900\nwaitpid(pid, Process::WNOHANG)   #=> nil\nTime.now                         #=> 2008-03-08 19:56:16 +0900\nwaitpid(pid, 0)                  #=> 27440\nTime.now                         #=> 2008-03-08 19:56:19 +0900\n</code></pre>	http://ruby-doc.org/core/Process.html#method-c-waitpid
Process::waitpid2	A			class methods							<pre><code>waitpid2(pid=-1, flags=0)   → [pid, status]</code></pre>Waits for a child process to exit (see ::waitpid for exact semantics) and returns an array containing the process id and the exit status (a Process::Status object) of that child. Raises a SystemCallError if there are no child processes.<pre><code>Process.fork { exit 99 }   #=> 27437\npid, status = Process.wait2\npid                        #=> 27437\nstatus.exitstatus          #=> 99\n</code></pre>	http://ruby-doc.org/core/Process.html#method-c-waitpid2
Process::UID	A			modules							The Process::UID module contains a collection of module functions which can be used to portably get, set, and switch the current process's real, effective, and saved user IDs.	http://ruby-doc.org/core/Process/UID.html
Process::UID::change_privilege	A			class methods							<pre><code>Process::UID.change_privilege(user)   → fixnum</code></pre>Change the current process’s real and effective user ID to that specified by user. Returns the new user ID. Not available on all platforms.<pre><code>[Process.uid, Process.euid]          #=> [0, 0]\nProcess::UID.change_privilege(31)    #=> 31\n[Process.uid, Process.euid]          #=> [31, 31]\n</code></pre>	http://ruby-doc.org/core/Process/UID.html#method-c-change_privilege
Process::UID::eid	A			class methods							<pre><code>euid           → fixnum\nProcess::UID.eid       → fixnum\nProcess::Sys.geteuid   → fixnum</code></pre>Returns the effective user ID for this process.<pre><code>Process.euid   #=> 501\n</code></pre>	http://ruby-doc.org/core/Process/UID.html#method-c-eid
Process::UID::from_name	A			class methods							<pre><code>Process::UID.from_name(name)   → uid</code></pre>Get the user ID by the name. If the user is not found, ArgumentError will be raised.<pre><code>Process::UID.from_name("root") #=> 0\nProcess::UID.from_name("nosuchuser") #=> can't find user for nosuchuser (ArgumentError)\n</code></pre>	http://ruby-doc.org/core/Process/UID.html#method-c-from_name
Process::UID::grant_privilege	A			class methods							<pre><code>Process::UID.grant_privilege(user)   → fixnum\nProcess::UID.eid= user               → fixnum</code></pre>Set the effective user ID, and if possible, the saved user ID of the process to the given user. Returns the new effective user ID. Not available on all platforms.<pre><code>[Process.uid, Process.euid]          #=> [0, 0]\nProcess::UID.grant_privilege(31)     #=> 31\n[Process.uid, Process.euid]          #=> [0, 31]\n</code></pre>	http://ruby-doc.org/core/Process/UID.html#method-c-grant_privilege
Process::UID::re_exchange	A			class methods							<pre><code>Process::UID.re_exchange   → fixnum</code></pre>Exchange real and effective user IDs and return the new effective user ID. Not available on all platforms.<pre><code>[Process.uid, Process.euid]   #=> [0, 31]\nProcess::UID.re_exchange      #=> 0\n[Process.uid, Process.euid]   #=> [31, 0]\n</code></pre>	http://ruby-doc.org/core/Process/UID.html#method-c-re_exchange
Process::UID::re_exchangeable?	A			class methods							<pre><code>Process::UID.re_exchangeable?   → true or false</code></pre>Returns true if the real and effective user IDs of a process may be exchanged on the current platform.	http://ruby-doc.org/core/Process/UID.html#method-c-re_exchangeable-3F
Process::UID::rid	A			class methods							<pre><code>uid           → fixnum\nProcess::UID.rid      → fixnum\nProcess::Sys.getuid   → fixnum</code></pre>Returns the (real) user ID of this process.<pre><code>Process.uid   #=> 501\n</code></pre>	http://ruby-doc.org/core/Process/UID.html#method-c-rid
Process::UID::sid_available?	A			class methods							<pre><code>Process::UID.sid_available?   → true or false</code></pre>Returns true if the current platform has saved user ID functionality.	http://ruby-doc.org/core/Process/UID.html#method-c-sid_available-3F
Process::UID::switch	A			class methods							<pre><code>Process::UID.switch              → fixnum\nProcess::UID.switch {|| block}   → object</code></pre>Switch the effective and real user IDs of the current process. If a block is given, the user IDs will be switched back after the block is executed. Returns the new effective user ID if called without a block, and the return value of the block if one is given.	http://ruby-doc.org/core/Process/UID.html#method-c-switch
Process::GID	A			modules							The Process::GID module contains a collection of module functions which can be used to portably get, set, and switch the current process's real, effective, and saved group IDs.	http://ruby-doc.org/core/Process/GID.html
Process::GID::change_privilege	A			class methods							<pre><code>Process::GID.change_privilege(group)   → fixnum</code></pre>Change the current process’s real and effective group ID to that specified by group. Returns the new group ID. Not available on all platforms.<pre><code>[Process.gid, Process.egid]          #=> [0, 0]\nProcess::GID.change_privilege(33)    #=> 33\n[Process.gid, Process.egid]          #=> [33, 33]\n</code></pre>	http://ruby-doc.org/core/Process/GID.html#method-c-change_privilege
Process::GID::eid	A			class methods							<pre><code>egid          → fixnum\nProcess::GID.eid      → fixnum\nProcess::Sys.geteid   → fixnum</code></pre>Returns the effective group ID for this process. Not available on all platforms.<pre><code>Process.egid   #=> 500\n</code></pre>	http://ruby-doc.org/core/Process/GID.html#method-c-eid
Process::GID::from_name	A			class methods							<pre><code>Process::GID.from_name(name)   → gid</code></pre>Get the group ID by the name. If the group is not found, ArgumentError will be raised.<pre><code>Process::GID.from_name("wheel") #=> 0\nProcess::GID.from_name("nosuchgroup") #=> can't find group for nosuchgroup (ArgumentError)\n</code></pre>	http://ruby-doc.org/core/Process/GID.html#method-c-from_name
Process::GID::grant_privilege	A			class methods							<pre><code>Process::GID.grant_privilege(group)    → fixnum\nProcess::GID.eid = group               → fixnum</code></pre>Set the effective group ID, and if possible, the saved group ID of the process to the given group. Returns the new effective group ID. Not available on all platforms.<pre><code>[Process.gid, Process.egid]          #=> [0, 0]\nProcess::GID.grant_privilege(31)     #=> 33\n[Process.gid, Process.egid]          #=> [0, 33]\n</code></pre>	http://ruby-doc.org/core/Process/GID.html#method-c-grant_privilege
Process::GID::re_exchange	A			class methods							<pre><code>Process::GID.re_exchange   → fixnum</code></pre>Exchange real and effective group IDs and return the new effective group ID. Not available on all platforms.<pre><code>[Process.gid, Process.egid]   #=> [0, 33]\nProcess::GID.re_exchange      #=> 0\n[Process.gid, Process.egid]   #=> [33, 0]\n</code></pre>	http://ruby-doc.org/core/Process/GID.html#method-c-re_exchange
Process::GID::re_exchangeable?	A			class methods							<pre><code>Process::GID.re_exchangeable?   → true or false</code></pre>Returns true if the real and effective group IDs of a process may be exchanged on the current platform.	http://ruby-doc.org/core/Process/GID.html#method-c-re_exchangeable-3F
Process::GID::rid	A			class methods							<pre><code>gid           → fixnum\nProcess::GID.rid      → fixnum\nProcess::Sys.getgid   → fixnum</code></pre>Returns the (real) group ID for this process.<pre><code>Process.gid   #=> 500\n</code></pre>	http://ruby-doc.org/core/Process/GID.html#method-c-rid
Process::GID::sid_available?	A			class methods							<pre><code>Process::GID.sid_available?   → true or false</code></pre>Returns true if the current platform has saved group ID functionality.	http://ruby-doc.org/core/Process/GID.html#method-c-sid_available-3F
Process::GID::switch	A			class methods							<pre><code>Process::GID.switch              → fixnum\nProcess::GID.switch {|| block}   → object</code></pre>Switch the effective and real group IDs of the current process. If a block is given, the group IDs will be switched back after the block is executed. Returns the new effective group ID if called without a block, and the return value of the block if one is given.	http://ruby-doc.org/core/Process/GID.html#method-c-switch
Process::Sys	A			modules							The Process::Sys module contains UID and GID functions which provide direct bindings to the system calls of the same names instead of the more-portable versions of the same functionality found in the Process, Process::UID, and Process::GID modules.	http://ruby-doc.org/core/Process/Sys.html
Process::Sys::getegid	A			class methods							<pre><code>egid          → fixnum\nProcess::GID.eid      → fixnum\nProcess::Sys.geteid   → fixnum</code></pre>Returns the effective group ID for this process. Not available on all platforms.<pre><code>Process.egid   #=> 500\n</code></pre>	http://ruby-doc.org/core/Process/Sys.html#method-c-getegid
Process::Sys::geteuid	A			class methods							<pre><code>euid           → fixnum\nProcess::UID.eid       → fixnum\nProcess::Sys.geteuid   → fixnum</code></pre>Returns the effective user ID for this process.<pre><code>Process.euid   #=> 501\n</code></pre>	http://ruby-doc.org/core/Process/Sys.html#method-c-geteuid
Process::Sys::getgid	A			class methods							<pre><code>gid           → fixnum\nProcess::GID.rid      → fixnum\nProcess::Sys.getgid   → fixnum</code></pre>Returns the (real) group ID for this process.<pre><code>Process.gid   #=> 500\n</code></pre>	http://ruby-doc.org/core/Process/Sys.html#method-c-getgid
Process::Sys::getuid	A			class methods							<pre><code>uid           → fixnum\nProcess::UID.rid      → fixnum\nProcess::Sys.getuid   → fixnum</code></pre>Returns the (real) user ID of this process.<pre><code>Process.uid   #=> 501\n</code></pre>	http://ruby-doc.org/core/Process/Sys.html#method-c-getuid
Process::Sys::issetugid	A			class methods							<pre><code>Process::Sys.issetugid   → true or false</code></pre>Returns true if the process was created as a result of an execve(2) system call which had either of the setuid or setgid bits set (and extra privileges were given as a result) or if it has changed any of its real, effective or saved user or group IDs since it began execution.	http://ruby-doc.org/core/Process/Sys.html#method-c-issetugid
Process::Sys::setegid	A			class methods							<pre><code>Process::Sys.setegid(group)   → nil</code></pre>Set the effective group ID of the calling process to group. Not available on all platforms.	http://ruby-doc.org/core/Process/Sys.html#method-c-setegid
Process::Sys::seteuid	A			class methods							<pre><code>Process::Sys.seteuid(user)   → nil</code></pre>Set the effective user ID of the calling process to user. Not available on all platforms.	http://ruby-doc.org/core/Process/Sys.html#method-c-seteuid
Process::Sys::setgid	A			class methods							<pre><code>Process::Sys.setgid(group)   → nil</code></pre>Set the group ID of the current process to group. Not available on all platforms.	http://ruby-doc.org/core/Process/Sys.html#method-c-setgid
Process::Sys::setregid	A			class methods							<pre><code>Process::Sys.setregid(rid, eid)   → nil</code></pre>Sets the (group) real and/or effective group IDs of the current process to rid and eid, respectively. A value of -1 for either means to leave that ID unchanged. Not available on all platforms.	http://ruby-doc.org/core/Process/Sys.html#method-c-setregid
Process::Sys::setresgid	A			class methods							<pre><code>Process::Sys.setresgid(rid, eid, sid)   → nil</code></pre>Sets the (group) real, effective, and saved user IDs of the current process to rid, eid, and sid respectively. A value of -1 for any value means to leave that ID unchanged. Not available on all platforms.	http://ruby-doc.org/core/Process/Sys.html#method-c-setresgid
Process::Sys::setresuid	A			class methods							<pre><code>Process::Sys.setresuid(rid, eid, sid)   → nil</code></pre>Sets the (user) real, effective, and saved user IDs of the current process to rid, eid, and sid respectively. A value of -1 for any value means to leave that ID unchanged. Not available on all platforms.	http://ruby-doc.org/core/Process/Sys.html#method-c-setresuid
Process::Sys::setreuid	A			class methods							<pre><code>Process::Sys.setreuid(rid, eid)   → nil</code></pre>Sets the (user) real and/or effective user IDs of the current process to rid and eid, respectively. A value of -1 for either means to leave that ID unchanged. Not available on all platforms.	http://ruby-doc.org/core/Process/Sys.html#method-c-setreuid
Process::Sys::setrgid	A			class methods							<pre><code>Process::Sys.setrgid(group)   → nil</code></pre>Set the real group ID of the calling process to group. Not available on all platforms.	http://ruby-doc.org/core/Process/Sys.html#method-c-setrgid
Process::Sys::setruid	A			class methods							<pre><code>Process::Sys.setruid(user)   → nil</code></pre>Set the real user ID of the calling process to user. Not available on all platforms.	http://ruby-doc.org/core/Process/Sys.html#method-c-setruid
Process::Sys::setuid	A			class methods							<pre><code>Process::Sys.setuid(user)   → nil</code></pre>Set the user ID of the current process to user. Not available on all platforms.	http://ruby-doc.org/core/Process/Sys.html#method-c-setuid
Random::Formatter	A			modules								http://ruby-doc.org/core/Random/Formatter.html
Random::Formatter#random_number	A			instance methods								http://ruby-doc.org/core/Random/Formatter.html#method-i-random_number
Signal	A			modules							Many operating systems allow signals to be sent to running processes. Some signals have a defined effect on the process, while others may be trapped at the code level and acted upon. For example, your process may trap the USR1 signal and use it to toggle debugging, and may use TERM to initiate a controlled shutdown.<pre><code>pid = fork do\n  Signal.trap("USR1") do\n    $debug = !$debug\n    puts "Debug now: #$debug"\n  end\n  Signal.trap("TERM") do\n    puts "Terminating..."\n    shutdown()\n  end\n  # . . . do some work . . .\nend\n\nProcess.detach(pid)\n\n# Controlling program:\nProcess.kill("USR1", pid)\n# ...\nProcess.kill("USR1", pid)\n# ...\nProcess.kill("TERM", pid)\n</code></pre>produces:<br>The list of available signal names and their interpretation is system dependent. Signal delivery semantics may also vary between systems; in particular signal delivery may not always be reliable.	http://ruby-doc.org/core/Signal.html
Signal::list	A			class methods							<pre><code>list → a_hash</code></pre>Returns a list of signal names mapped to the corresponding underlying signal numbers.<pre><code>Signal.list   #=> {"EXIT"=>0, "HUP"=>1, "INT"=>2, "QUIT"=>3, "ILL"=>4, "TRAP"=>5, "IOT"=>6, "ABRT"=>6, "FPE"=>8, "KILL"=>9, "BUS"=>7, "SEGV"=>11, "SYS"=>31, "PIPE"=>13, "ALRM"=>14, "TERM"=>15, "URG"=>23, "STOP"=>19, "TSTP"=>20, "CONT"=>18, "CHLD"=>17, "CLD"=>17, "TTIN"=>21, "TTOU"=>22, "IO"=>29, "XCPU"=>24, "XFSZ"=>25, "VTALRM"=>26, "PROF"=>27, "WINCH"=>28, "USR1"=>10, "USR2"=>12, "PWR"=>30, "POLL"=>29}\n</code></pre>	http://ruby-doc.org/core/Signal.html#method-c-list
Signal::signame	A			class methods							<pre><code>signame(signo)  →  string</code></pre>convert signal number to signal name<pre><code>Signal.trap("INT") { |signo| puts Signal.signame(signo) }\nProcess.kill("INT", 0)\n</code></pre>produces:<pre><code>INT\n</code></pre>	http://ruby-doc.org/core/Signal.html#method-c-signame
Signal::trap	A			class methods							<pre><code>trap( signal, command ) → obj\ntrap( signal ) {| | block } → obj</code></pre>Specifies the handling of signals. The first parameter is a signal name (a string such as “SIGALRM”, “SIGUSR1”, and so on) or a signal number. The characters “SIG” may be omitted from the signal name. The command or block specifies code to be run when the signal is raised. If the command is the string “IGNORE” or “SIG_IGN”, the signal will be ignored. If the command is “DEFAULT” or “SIG_DFL”, the Ruby’s default handler will be invoked. If the command is “EXIT”, the script will be terminated by the signal. If the command is “SYSTEM_DEFAULT”, the operating system’s default handler will be invoked. Otherwise, the given command or block will be run. The special signal name “EXIT” or signal number zero will be invoked just prior to program termination. trap returns the previous handler for the given signal.<pre><code>Signal.trap(0, proc { puts "Terminating: #{$$}" })\nSignal.trap("CLD")  { puts "Child died" }\nfork && Process.wait\n</code></pre>produces:	http://ruby-doc.org/core/Signal.html#method-c-trap
