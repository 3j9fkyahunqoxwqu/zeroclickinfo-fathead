_PyObject_New	A							https://docs.python.org			<pre><code>
PyObject* _PyObject_New(PyTypeObject *type)</code></pre><br>	https://docs.python.org/3.4/c-api/allocation.html#c._PyObject_New
_PyObject_NewVar	A							https://docs.python.org			<pre><code>
PyVarObject* _PyObject_NewVar(PyTypeObject *type, Py_ssize_t size)</code></pre><br>	https://docs.python.org/3.4/c-api/allocation.html#c._PyObject_NewVar
PyObject_Init	A							https://docs.python.org			<pre><code>
PyObject* PyObject_Init(PyObject *op, PyTypeObject *type)</code></pre><br>Initialize a newly-allocated object op with its type and initial reference. Returns the initialized object. If type indicates that the object participates in the cyclic garbage detector, it is added to the detector’s set of observed objects. Other fields of the object are not affected.	https://docs.python.org/3.4/c-api/allocation.html#c.PyObject_Init
PyObject_InitVar	A							https://docs.python.org			<pre><code>
PyVarObject* PyObject_InitVar(PyVarObject *op, PyTypeObject *type, Py_ssize_t size)</code></pre><br>This does everything PyObject_Init() does, and also initializes the length information for a variable-size object.	https://docs.python.org/3.4/c-api/allocation.html#c.PyObject_InitVar
PyObject_New	A							https://docs.python.org			<pre><code>
TYPE* PyObject_New(TYPE, PyTypeObject *type)</code></pre><br>Allocate a new Python object using the C structure type TYPE and the Python type object type. Fields not defined by the Python object header are not initialized; the object’s reference count will be one. The size of the memory allocation is determined from the tp_basicsize field of the type object.	https://docs.python.org/3.4/c-api/allocation.html#c.PyObject_New
PyObject_NewVar	A							https://docs.python.org			<pre><code>
TYPE* PyObject_NewVar(TYPE, PyTypeObject *type, Py_ssize_t size)</code></pre><br>Allocate a new Python object using the C structure type TYPE and the Python type object type. Fields not defined by the Python object header are not initialized. The allocated memory allows for the TYPE structure plus size fields of the size given by the tp_itemsize field of type. This is useful for implementing objects like tuples, which are able to determine their size at construction time. Embedding the array of fields into the same allocation decreases the number of allocations, improving the memory management efficiency.	https://docs.python.org/3.4/c-api/allocation.html#c.PyObject_NewVar
PyObject_Del	A							https://docs.python.org			<pre><code>
void PyObject_Del(PyObject *op)</code></pre><br>Releases memory allocated to an object using PyObject_New() or PyObject_NewVar(). This is normally called from the tp_dealloc handler specified in the object’s type. The fields of the object should not be accessed after this call as the memory is no longer a valid Python object.	https://docs.python.org/3.4/c-api/allocation.html#c.PyObject_Del
PyArg_ParseTuple	A							https://docs.python.org			<pre><code>
int PyArg_ParseTuple(PyObject *args, const char *format, ...)</code></pre><br>Parse the parameters of a function that takes only positional parameters into local variables. Returns true on success; on failure, it returns false and raises the appropriate exception.	https://docs.python.org/3.4/c-api/arg.html#c.PyArg_ParseTuple
PyArg_VaParse	A							https://docs.python.org			<pre><code>
int PyArg_VaParse(PyObject *args, const char *format, va_list vargs)</code></pre><br>Identical to PyArg_ParseTuple(), except that it accepts a va_list rather than a variable number of arguments.	https://docs.python.org/3.4/c-api/arg.html#c.PyArg_VaParse
PyArg_ParseTupleAndKeywords	A							https://docs.python.org			<pre><code>
int PyArg_ParseTupleAndKeywords(PyObject *args, PyObject *kw, const char *format, char *keywords[], ...)</code></pre><br>Parse the parameters of a function that takes both positional and keyword parameters into local variables. Returns true on success; on failure, it returns false and raises the appropriate exception.	https://docs.python.org/3.4/c-api/arg.html#c.PyArg_ParseTupleAndKeywords
PyArg_VaParseTupleAndKeywords	A							https://docs.python.org			<pre><code>
int PyArg_VaParseTupleAndKeywords(PyObject *args, PyObject *kw, const char *format, char *keywords[], va_list vargs)</code></pre><br>Identical to PyArg_ParseTupleAndKeywords(), except that it accepts a va_list rather than a variable number of arguments.	https://docs.python.org/3.4/c-api/arg.html#c.PyArg_VaParseTupleAndKeywords
PyArg_ValidateKeywordArguments	A							https://docs.python.org			<pre><code>
int PyArg_ValidateKeywordArguments(PyObject *)</code></pre><br>Ensure that the keys in the keywords argument dictionary are strings. This is only needed if PyArg_ParseTupleAndKeywords() is not used, since the latter already does this check.	https://docs.python.org/3.4/c-api/arg.html#c.PyArg_ValidateKeywordArguments
PyArg_Parse	A							https://docs.python.org			<pre><code>
int PyArg_Parse(PyObject *args, const char *format, ...)</code></pre><br>Function used to deconstruct the argument lists of “old-style” functions — these are functions which use the METH_OLDARGS parameter parsing method, which has been removed in Python 3. This is not recommended for use in parameter parsing in new code, and most code in the standard interpreter has been modified to no longer use this for that purpose. It does remain a convenient way to decompose other tuples, however, and may continue to be used for that purpose.	https://docs.python.org/3.4/c-api/arg.html#c.PyArg_Parse
PyArg_UnpackTuple	A							https://docs.python.org			<pre><code>
int PyArg_UnpackTuple(PyObject *args, const char *name, Py_ssize_t min, Py_ssize_t max, ...)</code></pre><br>A simpler form of parameter retrieval which does not use a format string to specify the types of the arguments. Functions which use this method to retrieve their parameters should be declared as METH_VARARGS in function or method tables. The tuple containing the actual parameters should be passed as args; it must actually be a tuple. The length of the tuple must be at least min and no more than max; min and max may be equal. Additional arguments must be passed to the function, each of which should be a pointer to a PyObject* variable; these will be filled in with the values from args; they will contain borrowed references. The variables which correspond to optional parameters not given by args will not be filled in; these should be initialized by the caller. This function returns true on success and false if args is not a tuple or contains the wrong number of elements; an exception will be set if there was a failure.	https://docs.python.org/3.4/c-api/arg.html#c.PyArg_UnpackTuple
Py_BuildValue	A							https://docs.python.org			<pre><code>
PyObject* Py_BuildValue(const char *format, ...)</code></pre><br>Create a new value based on a format string similar to those accepted by the PyArg_Parse*() family of functions and a sequence of values. Returns the value or NULL in the case of an error; an exception will be raised if NULL is returned.	https://docs.python.org/3.4/c-api/arg.html#c.Py_BuildValue
Py_VaBuildValue	A							https://docs.python.org			<pre><code>
PyObject* Py_VaBuildValue(const char *format, va_list vargs)</code></pre><br>Identical to Py_BuildValue(), except that it accepts a va_list rather than a variable number of arguments.	https://docs.python.org/3.4/c-api/arg.html#c.Py_VaBuildValue
PyArg_ParseTuple	A							https://docs.python.org			<pre><code>
int PyArg_ParseTuple(PyObject *args, const char *format, ...)</code></pre><br>Parse the parameters of a function that takes only positional parameters into local variables. Returns true on success; on failure, it returns false and raises the appropriate exception.	https://docs.python.org/3.4/c-api/arg.html#c.PyArg_ParseTuple
PyArg_VaParse	A							https://docs.python.org			<pre><code>
int PyArg_VaParse(PyObject *args, const char *format, va_list vargs)</code></pre><br>Identical to PyArg_ParseTuple(), except that it accepts a va_list rather than a variable number of arguments.	https://docs.python.org/3.4/c-api/arg.html#c.PyArg_VaParse
PyArg_ParseTupleAndKeywords	A							https://docs.python.org			<pre><code>
int PyArg_ParseTupleAndKeywords(PyObject *args, PyObject *kw, const char *format, char *keywords[], ...)</code></pre><br>Parse the parameters of a function that takes both positional and keyword parameters into local variables. Returns true on success; on failure, it returns false and raises the appropriate exception.	https://docs.python.org/3.4/c-api/arg.html#c.PyArg_ParseTupleAndKeywords
PyArg_VaParseTupleAndKeywords	A							https://docs.python.org			<pre><code>
int PyArg_VaParseTupleAndKeywords(PyObject *args, PyObject *kw, const char *format, char *keywords[], va_list vargs)</code></pre><br>Identical to PyArg_ParseTupleAndKeywords(), except that it accepts a va_list rather than a variable number of arguments.	https://docs.python.org/3.4/c-api/arg.html#c.PyArg_VaParseTupleAndKeywords
PyArg_ValidateKeywordArguments	A							https://docs.python.org			<pre><code>
int PyArg_ValidateKeywordArguments(PyObject *)</code></pre><br>Ensure that the keys in the keywords argument dictionary are strings. This is only needed if PyArg_ParseTupleAndKeywords() is not used, since the latter already does this check.	https://docs.python.org/3.4/c-api/arg.html#c.PyArg_ValidateKeywordArguments
PyArg_Parse	A							https://docs.python.org			<pre><code>
int PyArg_Parse(PyObject *args, const char *format, ...)</code></pre><br>Function used to deconstruct the argument lists of “old-style” functions — these are functions which use the METH_OLDARGS parameter parsing method, which has been removed in Python 3. This is not recommended for use in parameter parsing in new code, and most code in the standard interpreter has been modified to no longer use this for that purpose. It does remain a convenient way to decompose other tuples, however, and may continue to be used for that purpose.	https://docs.python.org/3.4/c-api/arg.html#c.PyArg_Parse
PyArg_UnpackTuple	A							https://docs.python.org			<pre><code>
int PyArg_UnpackTuple(PyObject *args, const char *name, Py_ssize_t min, Py_ssize_t max, ...)</code></pre><br>A simpler form of parameter retrieval which does not use a format string to specify the types of the arguments. Functions which use this method to retrieve their parameters should be declared as METH_VARARGS in function or method tables. The tuple containing the actual parameters should be passed as args; it must actually be a tuple. The length of the tuple must be at least min and no more than max; min and max may be equal. Additional arguments must be passed to the function, each of which should be a pointer to a PyObject* variable; these will be filled in with the values from args; they will contain borrowed references. The variables which correspond to optional parameters not given by args will not be filled in; these should be initialized by the caller. This function returns true on success and false if args is not a tuple or contains the wrong number of elements; an exception will be set if there was a failure.	https://docs.python.org/3.4/c-api/arg.html#c.PyArg_UnpackTuple
PyArg_ParseTuple	A							https://docs.python.org			<pre><code>
int PyArg_ParseTuple(PyObject *args, const char *format, ...)</code></pre><br>Parse the parameters of a function that takes only positional parameters into local variables. Returns true on success; on failure, it returns false and raises the appropriate exception.	https://docs.python.org/3.4/c-api/arg.html#c.PyArg_ParseTuple
PyArg_VaParse	A							https://docs.python.org			<pre><code>
int PyArg_VaParse(PyObject *args, const char *format, va_list vargs)</code></pre><br>Identical to PyArg_ParseTuple(), except that it accepts a va_list rather than a variable number of arguments.	https://docs.python.org/3.4/c-api/arg.html#c.PyArg_VaParse
PyArg_ParseTupleAndKeywords	A							https://docs.python.org			<pre><code>
int PyArg_ParseTupleAndKeywords(PyObject *args, PyObject *kw, const char *format, char *keywords[], ...)</code></pre><br>Parse the parameters of a function that takes both positional and keyword parameters into local variables. Returns true on success; on failure, it returns false and raises the appropriate exception.	https://docs.python.org/3.4/c-api/arg.html#c.PyArg_ParseTupleAndKeywords
PyArg_VaParseTupleAndKeywords	A							https://docs.python.org			<pre><code>
int PyArg_VaParseTupleAndKeywords(PyObject *args, PyObject *kw, const char *format, char *keywords[], va_list vargs)</code></pre><br>Identical to PyArg_ParseTupleAndKeywords(), except that it accepts a va_list rather than a variable number of arguments.	https://docs.python.org/3.4/c-api/arg.html#c.PyArg_VaParseTupleAndKeywords
PyArg_ValidateKeywordArguments	A							https://docs.python.org			<pre><code>
int PyArg_ValidateKeywordArguments(PyObject *)</code></pre><br>Ensure that the keys in the keywords argument dictionary are strings. This is only needed if PyArg_ParseTupleAndKeywords() is not used, since the latter already does this check.	https://docs.python.org/3.4/c-api/arg.html#c.PyArg_ValidateKeywordArguments
PyArg_Parse	A							https://docs.python.org			<pre><code>
int PyArg_Parse(PyObject *args, const char *format, ...)</code></pre><br>Function used to deconstruct the argument lists of “old-style” functions — these are functions which use the METH_OLDARGS parameter parsing method, which has been removed in Python 3. This is not recommended for use in parameter parsing in new code, and most code in the standard interpreter has been modified to no longer use this for that purpose. It does remain a convenient way to decompose other tuples, however, and may continue to be used for that purpose.	https://docs.python.org/3.4/c-api/arg.html#c.PyArg_Parse
PyArg_UnpackTuple	A							https://docs.python.org			<pre><code>
int PyArg_UnpackTuple(PyObject *args, const char *name, Py_ssize_t min, Py_ssize_t max, ...)</code></pre><br>A simpler form of parameter retrieval which does not use a format string to specify the types of the arguments. Functions which use this method to retrieve their parameters should be declared as METH_VARARGS in function or method tables. The tuple containing the actual parameters should be passed as args; it must actually be a tuple. The length of the tuple must be at least min and no more than max; min and max may be equal. Additional arguments must be passed to the function, each of which should be a pointer to a PyObject* variable; these will be filled in with the values from args; they will contain borrowed references. The variables which correspond to optional parameters not given by args will not be filled in; these should be initialized by the caller. This function returns true on success and false if args is not a tuple or contains the wrong number of elements; an exception will be set if there was a failure.	https://docs.python.org/3.4/c-api/arg.html#c.PyArg_UnpackTuple
Py_BuildValue	A							https://docs.python.org			<pre><code>
PyObject* Py_BuildValue(const char *format, ...)</code></pre><br>Create a new value based on a format string similar to those accepted by the PyArg_Parse*() family of functions and a sequence of values. Returns the value or NULL in the case of an error; an exception will be raised if NULL is returned.	https://docs.python.org/3.4/c-api/arg.html#c.Py_BuildValue
Py_VaBuildValue	A							https://docs.python.org			<pre><code>
PyObject* Py_VaBuildValue(const char *format, va_list vargs)</code></pre><br>Identical to Py_BuildValue(), except that it accepts a va_list rather than a variable number of arguments.	https://docs.python.org/3.4/c-api/arg.html#c.Py_VaBuildValue
PyBool_Check	A							https://docs.python.org			<pre><code>
int PyBool_Check(PyObject *o)</code></pre><br>Return true if o is of type PyBool_Type.	https://docs.python.org/3.4/c-api/bool.html#c.PyBool_Check
PyBool_FromLong	A							https://docs.python.org			<pre><code>
PyObject* PyBool_FromLong(long v)</code></pre><br>Return a new reference to Py_True or Py_False depending on the truth value of v.	https://docs.python.org/3.4/c-api/bool.html#c.PyBool_FromLong
PyObject_CheckBuffer	A							https://docs.python.org			<pre><code>
int PyObject_CheckBuffer(PyObject *obj)</code></pre><br>Return 1 if obj supports the buffer interface otherwise 0. When 1 is returned, it doesn’t guarantee that PyObject_GetBuffer() will succeed.	https://docs.python.org/3.4/c-api/buffer.html#c.PyObject_CheckBuffer
PyObject_GetBuffer	A							https://docs.python.org			<pre><code>
int PyObject_GetBuffer(PyObject *exporter, Py_buffer *view, int flags)</code></pre><br>Send a request to exporter to fill in view as specified by flags. If the exporter cannot provide a buffer of the exact type, it MUST raise PyExc_BufferError, set view->obj to NULL and return -1.	https://docs.python.org/3.4/c-api/buffer.html#c.PyObject_GetBuffer
PyBuffer_Release	A							https://docs.python.org			<pre><code>
void PyBuffer_Release(Py_buffer *view)</code></pre><br>Release the buffer view and decrement the reference count for view->obj. This function MUST be called when the buffer is no longer being used, otherwise reference leaks may occur.	https://docs.python.org/3.4/c-api/buffer.html#c.PyBuffer_Release
PyBuffer_SizeFromFormat	A							https://docs.python.org			<pre><code>
Py_ssize_t PyBuffer_SizeFromFormat(const char *)</code></pre><br>Return the implied itemsize from format. This function is not yet implemented.	https://docs.python.org/3.4/c-api/buffer.html#c.PyBuffer_SizeFromFormat
PyBuffer_IsContiguous	A							https://docs.python.org			<pre><code>
int PyBuffer_IsContiguous(Py_buffer *view, char order)</code></pre><br>Return 1 if the memory defined by the view is C-style (order is 'C') or Fortran-style (order is 'F') contiguous or either one (order is 'A'). Return 0 otherwise.	https://docs.python.org/3.4/c-api/buffer.html#c.PyBuffer_IsContiguous
PyBuffer_FillContiguousStrides	A							https://docs.python.org			<pre><code>
void PyBuffer_FillContiguousStrides(int ndim, Py_ssize_t *shape, Py_ssize_t *strides, Py_ssize_t itemsize, char order)</code></pre><br>Fill the strides array with byte-strides of a contiguous (C-style if order is 'C' or Fortran-style if order is 'F') array of the given shape with the given number of bytes per element.	https://docs.python.org/3.4/c-api/buffer.html#c.PyBuffer_FillContiguousStrides
PyBuffer_FillInfo	A							https://docs.python.org			<pre><code>
int PyBuffer_FillInfo(Py_buffer *view, PyObject *exporter, void *buf, Py_ssize_t len, int readonly, int flags)</code></pre><br>Handle buffer requests for an exporter that wants to expose buf of size len with writability set according to readonly. buf is interpreted as a sequence of unsigned bytes.	https://docs.python.org/3.4/c-api/buffer.html#c.PyBuffer_FillInfo
PyObject_CheckBuffer	A							https://docs.python.org			<pre><code>
int PyObject_CheckBuffer(PyObject *obj)</code></pre><br>Return 1 if obj supports the buffer interface otherwise 0. When 1 is returned, it doesn’t guarantee that PyObject_GetBuffer() will succeed.	https://docs.python.org/3.4/c-api/buffer.html#c.PyObject_CheckBuffer
PyObject_GetBuffer	A							https://docs.python.org			<pre><code>
int PyObject_GetBuffer(PyObject *exporter, Py_buffer *view, int flags)</code></pre><br>Send a request to exporter to fill in view as specified by flags. If the exporter cannot provide a buffer of the exact type, it MUST raise PyExc_BufferError, set view->obj to NULL and return -1.	https://docs.python.org/3.4/c-api/buffer.html#c.PyObject_GetBuffer
PyBuffer_Release	A							https://docs.python.org			<pre><code>
void PyBuffer_Release(Py_buffer *view)</code></pre><br>Release the buffer view and decrement the reference count for view->obj. This function MUST be called when the buffer is no longer being used, otherwise reference leaks may occur.	https://docs.python.org/3.4/c-api/buffer.html#c.PyBuffer_Release
PyBuffer_SizeFromFormat	A							https://docs.python.org			<pre><code>
Py_ssize_t PyBuffer_SizeFromFormat(const char *)</code></pre><br>Return the implied itemsize from format. This function is not yet implemented.	https://docs.python.org/3.4/c-api/buffer.html#c.PyBuffer_SizeFromFormat
PyBuffer_IsContiguous	A							https://docs.python.org			<pre><code>
int PyBuffer_IsContiguous(Py_buffer *view, char order)</code></pre><br>Return 1 if the memory defined by the view is C-style (order is 'C') or Fortran-style (order is 'F') contiguous or either one (order is 'A'). Return 0 otherwise.	https://docs.python.org/3.4/c-api/buffer.html#c.PyBuffer_IsContiguous
PyBuffer_FillContiguousStrides	A							https://docs.python.org			<pre><code>
void PyBuffer_FillContiguousStrides(int ndim, Py_ssize_t *shape, Py_ssize_t *strides, Py_ssize_t itemsize, char order)</code></pre><br>Fill the strides array with byte-strides of a contiguous (C-style if order is 'C' or Fortran-style if order is 'F') array of the given shape with the given number of bytes per element.	https://docs.python.org/3.4/c-api/buffer.html#c.PyBuffer_FillContiguousStrides
PyBuffer_FillInfo	A							https://docs.python.org			<pre><code>
int PyBuffer_FillInfo(Py_buffer *view, PyObject *exporter, void *buf, Py_ssize_t len, int readonly, int flags)</code></pre><br>Handle buffer requests for an exporter that wants to expose buf of size len with writability set according to readonly. buf is interpreted as a sequence of unsigned bytes.	https://docs.python.org/3.4/c-api/buffer.html#c.PyBuffer_FillInfo
PyByteArray_Check	A							https://docs.python.org			<pre><code>
int PyByteArray_Check(PyObject *o)</code></pre><br>Return true if the object o is a bytearray object or an instance of a subtype of the bytearray type.	https://docs.python.org/3.4/c-api/bytearray.html#c.PyByteArray_Check
PyByteArray_CheckExact	A							https://docs.python.org			<pre><code>
int PyByteArray_CheckExact(PyObject *o)</code></pre><br>Return true if the object o is a bytearray object, but not an instance of a subtype of the bytearray type.	https://docs.python.org/3.4/c-api/bytearray.html#c.PyByteArray_CheckExact
PyByteArray_FromObject	A							https://docs.python.org			<pre><code>
PyObject* PyByteArray_FromObject(PyObject *o)</code></pre><br>Return a new bytearray object from any object, o, that implements the buffer protocol.	https://docs.python.org/3.4/c-api/bytearray.html#c.PyByteArray_FromObject
PyByteArray_FromStringAndSize	A							https://docs.python.org			<pre><code>
PyObject* PyByteArray_FromStringAndSize(const char *string, Py_ssize_t len)</code></pre><br>Create a new bytearray object from string and its length, len. On failure, NULL is returned.	https://docs.python.org/3.4/c-api/bytearray.html#c.PyByteArray_FromStringAndSize
PyByteArray_Concat	A							https://docs.python.org			<pre><code>
PyObject* PyByteArray_Concat(PyObject *a, PyObject *b)</code></pre><br>Concat bytearrays a and b and return a new bytearray with the result.	https://docs.python.org/3.4/c-api/bytearray.html#c.PyByteArray_Concat
PyByteArray_Size	A							https://docs.python.org			<pre><code>
Py_ssize_t PyByteArray_Size(PyObject *bytearray)</code></pre><br>Return the size of bytearray after checking for a NULL pointer.	https://docs.python.org/3.4/c-api/bytearray.html#c.PyByteArray_Size
PyByteArray_AsString	A							https://docs.python.org			<pre><code>
char* PyByteArray_AsString(PyObject *bytearray)</code></pre><br>Return the contents of bytearray as a char array after checking for a NULL pointer. The returned array always has an extra null byte appended.	https://docs.python.org/3.4/c-api/bytearray.html#c.PyByteArray_AsString
PyByteArray_Resize	A							https://docs.python.org			<pre><code>
int PyByteArray_Resize(PyObject *bytearray, Py_ssize_t len)</code></pre><br>Resize the internal buffer of bytearray to len.	https://docs.python.org/3.4/c-api/bytearray.html#c.PyByteArray_Resize
PyByteArray_AS_STRING	A							https://docs.python.org			<pre><code>
char* PyByteArray_AS_STRING(PyObject *bytearray)</code></pre><br>Macro version of PyByteArray_AsString().	https://docs.python.org/3.4/c-api/bytearray.html#c.PyByteArray_AS_STRING
PyByteArray_GET_SIZE	A							https://docs.python.org			<pre><code>
Py_ssize_t PyByteArray_GET_SIZE(PyObject *bytearray)</code></pre><br>Macro version of PyByteArray_Size().	https://docs.python.org/3.4/c-api/bytearray.html#c.PyByteArray_GET_SIZE
PyByteArray_Check	A							https://docs.python.org			<pre><code>
int PyByteArray_Check(PyObject *o)</code></pre><br>Return true if the object o is a bytearray object or an instance of a subtype of the bytearray type.	https://docs.python.org/3.4/c-api/bytearray.html#c.PyByteArray_Check
PyByteArray_CheckExact	A							https://docs.python.org			<pre><code>
int PyByteArray_CheckExact(PyObject *o)</code></pre><br>Return true if the object o is a bytearray object, but not an instance of a subtype of the bytearray type.	https://docs.python.org/3.4/c-api/bytearray.html#c.PyByteArray_CheckExact
PyByteArray_FromObject	A							https://docs.python.org			<pre><code>
PyObject* PyByteArray_FromObject(PyObject *o)</code></pre><br>Return a new bytearray object from any object, o, that implements the buffer protocol.	https://docs.python.org/3.4/c-api/bytearray.html#c.PyByteArray_FromObject
PyByteArray_FromStringAndSize	A							https://docs.python.org			<pre><code>
PyObject* PyByteArray_FromStringAndSize(const char *string, Py_ssize_t len)</code></pre><br>Create a new bytearray object from string and its length, len. On failure, NULL is returned.	https://docs.python.org/3.4/c-api/bytearray.html#c.PyByteArray_FromStringAndSize
PyByteArray_Concat	A							https://docs.python.org			<pre><code>
PyObject* PyByteArray_Concat(PyObject *a, PyObject *b)</code></pre><br>Concat bytearrays a and b and return a new bytearray with the result.	https://docs.python.org/3.4/c-api/bytearray.html#c.PyByteArray_Concat
PyByteArray_Size	A							https://docs.python.org			<pre><code>
Py_ssize_t PyByteArray_Size(PyObject *bytearray)</code></pre><br>Return the size of bytearray after checking for a NULL pointer.	https://docs.python.org/3.4/c-api/bytearray.html#c.PyByteArray_Size
PyByteArray_AsString	A							https://docs.python.org			<pre><code>
char* PyByteArray_AsString(PyObject *bytearray)</code></pre><br>Return the contents of bytearray as a char array after checking for a NULL pointer. The returned array always has an extra null byte appended.	https://docs.python.org/3.4/c-api/bytearray.html#c.PyByteArray_AsString
PyByteArray_Resize	A							https://docs.python.org			<pre><code>
int PyByteArray_Resize(PyObject *bytearray, Py_ssize_t len)</code></pre><br>Resize the internal buffer of bytearray to len.	https://docs.python.org/3.4/c-api/bytearray.html#c.PyByteArray_Resize
PyByteArray_AS_STRING	A							https://docs.python.org			<pre><code>
char* PyByteArray_AS_STRING(PyObject *bytearray)</code></pre><br>Macro version of PyByteArray_AsString().	https://docs.python.org/3.4/c-api/bytearray.html#c.PyByteArray_AS_STRING
PyByteArray_GET_SIZE	A							https://docs.python.org			<pre><code>
Py_ssize_t PyByteArray_GET_SIZE(PyObject *bytearray)</code></pre><br>Macro version of PyByteArray_Size().	https://docs.python.org/3.4/c-api/bytearray.html#c.PyByteArray_GET_SIZE
PyBytes_Check	A							https://docs.python.org			<pre><code>
int PyBytes_Check(PyObject *o)</code></pre><br>Return true if the object o is a bytes object or an instance of a subtype of the bytes type.	https://docs.python.org/3.4/c-api/bytes.html#c.PyBytes_Check
PyBytes_CheckExact	A							https://docs.python.org			<pre><code>
int PyBytes_CheckExact(PyObject *o)</code></pre><br>Return true if the object o is a bytes object, but not an instance of a subtype of the bytes type.	https://docs.python.org/3.4/c-api/bytes.html#c.PyBytes_CheckExact
PyBytes_FromString	A							https://docs.python.org			<pre><code>
PyObject* PyBytes_FromString(const char *v)</code></pre><br>Return a new bytes object with a copy of the string v as value on success, and NULL on failure. The parameter v must not be NULL; it will not be checked.	https://docs.python.org/3.4/c-api/bytes.html#c.PyBytes_FromString
PyBytes_FromStringAndSize	A							https://docs.python.org			<pre><code>
PyObject* PyBytes_FromStringAndSize(const char *v, Py_ssize_t len)</code></pre><br>Return a new bytes object with a copy of the string v as value and length len on success, and NULL on failure. If v is NULL, the contents of the bytes object are uninitialized.	https://docs.python.org/3.4/c-api/bytes.html#c.PyBytes_FromStringAndSize
PyBytes_FromFormat	A							https://docs.python.org			<pre><code>
PyObject* PyBytes_FromFormat(const char *format, ...)</code></pre><br>Take a C printf()-style format string and a variable number of arguments, calculate the size of the resulting Python bytes object and return a bytes object with the values formatted into it. The variable arguments must be C types and must correspond exactly to the format characters in the format string. The following format characters are allowed:	https://docs.python.org/3.4/c-api/bytes.html#c.PyBytes_FromFormat
PyBytes_FromFormatV	A							https://docs.python.org			<pre><code>
PyObject* PyBytes_FromFormatV(const char *format, va_list vargs)</code></pre><br>Identical to PyBytes_FromFormat() except that it takes exactly two arguments.	https://docs.python.org/3.4/c-api/bytes.html#c.PyBytes_FromFormatV
PyBytes_FromObject	A							https://docs.python.org			<pre><code>
PyObject* PyBytes_FromObject(PyObject *o)</code></pre><br>Return the bytes representation of object o that implements the buffer protocol.	https://docs.python.org/3.4/c-api/bytes.html#c.PyBytes_FromObject
PyBytes_Size	A							https://docs.python.org			<pre><code>
Py_ssize_t PyBytes_Size(PyObject *o)</code></pre><br>Return the length of the bytes in bytes object o.	https://docs.python.org/3.4/c-api/bytes.html#c.PyBytes_Size
PyBytes_GET_SIZE	A							https://docs.python.org			<pre><code>
Py_ssize_t PyBytes_GET_SIZE(PyObject *o)</code></pre><br>Macro form of PyBytes_Size() but without error checking.	https://docs.python.org/3.4/c-api/bytes.html#c.PyBytes_GET_SIZE
PyBytes_AsString	A							https://docs.python.org			<pre><code>
char* PyBytes_AsString(PyObject *o)</code></pre><br>Return a pointer to the contents of o. The pointer refers to the internal buffer of o, which consists of len(o) + 1 bytes. The last byte in the buffer is always null, regardless of whether there are any other null bytes. The data must not be modified in any way, unless the object was just created using PyBytes_FromStringAndSize(NULL, size). It must not be deallocated. If o is not a bytes object at all, PyBytes_AsString() returns NULL and raises TypeError.	https://docs.python.org/3.4/c-api/bytes.html#c.PyBytes_AsString
PyBytes_AS_STRING	A							https://docs.python.org			<pre><code>
char* PyBytes_AS_STRING(PyObject *string)</code></pre><br>Macro form of PyBytes_AsString() but without error checking.	https://docs.python.org/3.4/c-api/bytes.html#c.PyBytes_AS_STRING
PyBytes_AsStringAndSize	A							https://docs.python.org			<pre><code>
int PyBytes_AsStringAndSize(PyObject *obj, char **buffer, Py_ssize_t *length)</code></pre><br>Return the null-terminated contents of the object obj through the output variables buffer and length.	https://docs.python.org/3.4/c-api/bytes.html#c.PyBytes_AsStringAndSize
PyBytes_Concat	A							https://docs.python.org			<pre><code>
void PyBytes_Concat(PyObject **bytes, PyObject *newpart)</code></pre><br>Create a new bytes object in *bytes containing the contents of newpart appended to bytes; the caller will own the new reference. The reference to the old value of bytes will be stolen. If the new object cannot be created, the old reference to bytes will still be discarded and the value of *bytes will be set to NULL; the appropriate exception will be set.	https://docs.python.org/3.4/c-api/bytes.html#c.PyBytes_Concat
PyBytes_ConcatAndDel	A							https://docs.python.org			<pre><code>
void PyBytes_ConcatAndDel(PyObject **bytes, PyObject *newpart)</code></pre><br>Create a new bytes object in *bytes containing the contents of newpart appended to bytes. This version decrements the reference count of newpart.	https://docs.python.org/3.4/c-api/bytes.html#c.PyBytes_ConcatAndDel
_PyBytes_Resize	A							https://docs.python.org			<pre><code>
int _PyBytes_Resize(PyObject **bytes, Py_ssize_t newsize)</code></pre><br>A way to resize a bytes object even though it is “immutable”. Only use this to build up a brand new bytes object; don’t use this if the bytes may already be known in other parts of the code. It is an error to call this function if the refcount on the input bytes object is not one. Pass the address of an existing bytes object as an lvalue (it may be written into), and the new size desired. On success, *bytes holds the resized bytes object and 0 is returned; the address in *bytes may differ from its input value. If the reallocation fails, the original bytes object at *bytes is deallocated, *bytes is set to NULL, a memory exception is set, and -1 is returned.	https://docs.python.org/3.4/c-api/bytes.html#c._PyBytes_Resize
PyCapsule_CheckExact	A							https://docs.python.org			<pre><code>
int PyCapsule_CheckExact(PyObject *p)</code></pre><br>Return true if its argument is a PyCapsule.	https://docs.python.org/3.4/c-api/capsule.html#c.PyCapsule_CheckExact
PyCapsule_New	A							https://docs.python.org			<pre><code>
PyObject* PyCapsule_New(void *pointer, const char *name, PyCapsule_Destructor destructor)</code></pre><br>Create a PyCapsule encapsulating the pointer. The pointer argument may not be NULL.	https://docs.python.org/3.4/c-api/capsule.html#c.PyCapsule_New
PyCapsule_GetPointer	A							https://docs.python.org			<pre><code>
void* PyCapsule_GetPointer(PyObject *capsule, const char *name)</code></pre><br>Retrieve the pointer stored in the capsule. On failure, set an exception and return NULL.	https://docs.python.org/3.4/c-api/capsule.html#c.PyCapsule_GetPointer
PyCapsule_GetDestructor	A							https://docs.python.org			<pre><code>
PyCapsule_Destructor PyCapsule_GetDestructor(PyObject *capsule)</code></pre><br>Return the current destructor stored in the capsule. On failure, set an exception and return NULL.	https://docs.python.org/3.4/c-api/capsule.html#c.PyCapsule_GetDestructor
PyCapsule_GetContext	A							https://docs.python.org			<pre><code>
void* PyCapsule_GetContext(PyObject *capsule)</code></pre><br>Return the current context stored in the capsule. On failure, set an exception and return NULL.	https://docs.python.org/3.4/c-api/capsule.html#c.PyCapsule_GetContext
PyCapsule_GetName	A							https://docs.python.org			<pre><code>
const char* PyCapsule_GetName(PyObject *capsule)</code></pre><br>Return the current name stored in the capsule. On failure, set an exception and return NULL.	https://docs.python.org/3.4/c-api/capsule.html#c.PyCapsule_GetName
PyCapsule_Import	A							https://docs.python.org			<pre><code>
void* PyCapsule_Import(const char *name, int no_block)</code></pre><br>Import a pointer to a C object from a capsule attribute in a module. The name parameter should specify the full name to the attribute, as in module.attribute. The name stored in the capsule must match this string exactly. If no_block is true, import the module without blocking (using PyImport_ImportModuleNoBlock()). If no_block is false, import the module conventionally (using PyImport_ImportModule()).	https://docs.python.org/3.4/c-api/capsule.html#c.PyCapsule_Import
PyCapsule_IsValid	A							https://docs.python.org			<pre><code>
int PyCapsule_IsValid(PyObject *capsule, const char *name)</code></pre><br>Determines whether or not capsule is a valid capsule. A valid capsule is non-NULL, passes PyCapsule_CheckExact(), has a non-NULL pointer stored in it, and its internal name matches the name parameter. (See PyCapsule_GetPointer() for information on how capsule names are compared.)	https://docs.python.org/3.4/c-api/capsule.html#c.PyCapsule_IsValid
PyCapsule_SetContext	A							https://docs.python.org			<pre><code>
int PyCapsule_SetContext(PyObject *capsule, void *context)</code></pre><br>Set the context pointer inside capsule to context.	https://docs.python.org/3.4/c-api/capsule.html#c.PyCapsule_SetContext
PyCapsule_SetDestructor	A							https://docs.python.org			<pre><code>
int PyCapsule_SetDestructor(PyObject *capsule, PyCapsule_Destructor destructor)</code></pre><br>Set the destructor inside capsule to destructor.	https://docs.python.org/3.4/c-api/capsule.html#c.PyCapsule_SetDestructor
PyCapsule_SetName	A							https://docs.python.org			<pre><code>
int PyCapsule_SetName(PyObject *capsule, const char *name)</code></pre><br>Set the name inside capsule to name. If non-NULL, the name must outlive the capsule. If the previous name stored in the capsule was not NULL, no attempt is made to free it.	https://docs.python.org/3.4/c-api/capsule.html#c.PyCapsule_SetName
PyCapsule_SetPointer	A							https://docs.python.org			<pre><code>
int PyCapsule_SetPointer(PyObject *capsule, void *pointer)</code></pre><br>Set the void pointer inside capsule to pointer. The pointer may not be NULL.	https://docs.python.org/3.4/c-api/capsule.html#c.PyCapsule_SetPointer
PyCell_Check	A							https://docs.python.org			<pre><code>
int PyCell_Check(ob)</code></pre><br>Return true if ob is a cell object; ob must not be NULL.	https://docs.python.org/3.4/c-api/cell.html#c.PyCell_Check
PyCell_New	A							https://docs.python.org			<pre><code>
PyObject* PyCell_New(PyObject *ob)</code></pre><br>Create and return a new cell object containing the value ob. The parameter may be NULL.	https://docs.python.org/3.4/c-api/cell.html#c.PyCell_New
PyCell_Get	A							https://docs.python.org			<pre><code>
PyObject* PyCell_Get(PyObject *cell)</code></pre><br>Return the contents of the cell cell.	https://docs.python.org/3.4/c-api/cell.html#c.PyCell_Get
PyCell_GET	A							https://docs.python.org			<pre><code>
PyObject* PyCell_GET(PyObject *cell)</code></pre><br>Return the contents of the cell cell, but without checking that cell is non-NULL and a cell object.	https://docs.python.org/3.4/c-api/cell.html#c.PyCell_GET
PyCell_Set	A							https://docs.python.org			<pre><code>
int PyCell_Set(PyObject *cell, PyObject *value)</code></pre><br>Set the contents of the cell object cell to value. This releases the reference to any current content of the cell. value may be NULL. cell must be non-NULL; if it is not a cell object, -1 will be returned. On success, 0 will be returned.	https://docs.python.org/3.4/c-api/cell.html#c.PyCell_Set
PyCell_SET	A							https://docs.python.org			<pre><code>
void PyCell_SET(PyObject *cell, PyObject *value)</code></pre><br>Sets the value of the cell object cell to value. No reference counts are adjusted, and no checks are made for safety; cell must be non-NULL and must be a cell object.	https://docs.python.org/3.4/c-api/cell.html#c.PyCell_SET
PyCode_Check	A							https://docs.python.org			<pre><code>
int PyCode_Check(PyObject *co)</code></pre><br>Return true if co is a code object.	https://docs.python.org/3.4/c-api/code.html#c.PyCode_Check
PyCode_GetNumFree	A							https://docs.python.org			<pre><code>
int PyCode_GetNumFree(PyCodeObject *co)</code></pre><br>Return the number of free variables in co.	https://docs.python.org/3.4/c-api/code.html#c.PyCode_GetNumFree
PyCode_New	A							https://docs.python.org			<pre><code>
PyCodeObject* PyCode_New(int argcount, int kwonlyargcount, int nlocals, int stacksize, int flags, PyObject *code, PyObject *consts, PyObject *names, PyObject *varnames, PyObject *freevars, PyObject *cellvars, PyObject *filename, PyObject *name, int firstlineno, PyObject *lnotab)</code></pre><br>Return a new code object. If you need a dummy code object to create a frame, use PyCode_NewEmpty() instead. Calling PyCode_New() directly can bind you to a precise Python version since the definition of the bytecode changes often.	https://docs.python.org/3.4/c-api/code.html#c.PyCode_New
PyCode_NewEmpty	A							https://docs.python.org			<pre><code>
PyCodeObject* PyCode_NewEmpty(const char *filename, const char *funcname, int firstlineno)</code></pre><br>Return a new empty code object with the specified filename, function name, and first line number. It is illegal to exec() or eval() the resulting code object.	https://docs.python.org/3.4/c-api/code.html#c.PyCode_NewEmpty
PyCodec_Register	A							https://docs.python.org			<pre><code>
int PyCodec_Register(PyObject *search_function)</code></pre><br>Register a new codec search function.	https://docs.python.org/3.4/c-api/codec.html#c.PyCodec_Register
PyCodec_KnownEncoding	A							https://docs.python.org			<pre><code>
int PyCodec_KnownEncoding(const char *encoding)</code></pre><br>Return 1 or 0 depending on whether there is a registered codec for the given encoding.	https://docs.python.org/3.4/c-api/codec.html#c.PyCodec_KnownEncoding
PyCodec_Encode	A							https://docs.python.org			<pre><code>
PyObject* PyCodec_Encode(PyObject *object, const char *encoding, const char *errors)</code></pre><br>Generic codec based encoding API.	https://docs.python.org/3.4/c-api/codec.html#c.PyCodec_Encode
PyCodec_Decode	A							https://docs.python.org			<pre><code>
PyObject* PyCodec_Decode(PyObject *object, const char *encoding, const char *errors)</code></pre><br>Generic codec based decoding API.	https://docs.python.org/3.4/c-api/codec.html#c.PyCodec_Decode
PyCodec_Encoder	A							https://docs.python.org			<pre><code>
PyObject* PyCodec_Encoder(const char *encoding)</code></pre><br>Get an encoder function for the given encoding.	https://docs.python.org/3.4/c-api/codec.html#c.PyCodec_Encoder
PyCodec_Decoder	A							https://docs.python.org			<pre><code>
PyObject* PyCodec_Decoder(const char *encoding)</code></pre><br>Get a decoder function for the given encoding.	https://docs.python.org/3.4/c-api/codec.html#c.PyCodec_Decoder
PyCodec_IncrementalEncoder	A							https://docs.python.org			<pre><code>
PyObject* PyCodec_IncrementalEncoder(const char *encoding, const char *errors)</code></pre><br>Get an IncrementalEncoder object for the given encoding.	https://docs.python.org/3.4/c-api/codec.html#c.PyCodec_IncrementalEncoder
PyCodec_IncrementalDecoder	A							https://docs.python.org			<pre><code>
PyObject* PyCodec_IncrementalDecoder(const char *encoding, const char *errors)</code></pre><br>Get an IncrementalDecoder object for the given encoding.	https://docs.python.org/3.4/c-api/codec.html#c.PyCodec_IncrementalDecoder
PyCodec_StreamReader	A							https://docs.python.org			<pre><code>
PyObject* PyCodec_StreamReader(const char *encoding, PyObject *stream, const char *errors)</code></pre><br>Get a StreamReader factory function for the given encoding.	https://docs.python.org/3.4/c-api/codec.html#c.PyCodec_StreamReader
PyCodec_StreamWriter	A							https://docs.python.org			<pre><code>
PyObject* PyCodec_StreamWriter(const char *encoding, PyObject *stream, const char *errors)</code></pre><br>Get a StreamWriter factory function for the given encoding.	https://docs.python.org/3.4/c-api/codec.html#c.PyCodec_StreamWriter
PyCodec_RegisterError	A							https://docs.python.org			<pre><code>
int PyCodec_RegisterError(const char *name, PyObject *error)</code></pre><br>Register the error handling callback function error under the given name. This callback function will be called by a codec when it encounters unencodable characters/undecodable bytes and name is specified as the error parameter in the call to the encode/decode function.	https://docs.python.org/3.4/c-api/codec.html#c.PyCodec_RegisterError
PyCodec_LookupError	A							https://docs.python.org			<pre><code>
PyObject* PyCodec_LookupError(const char *name)</code></pre><br>Lookup the error handling callback function registered under name. As a special case NULL can be passed, in which case the error handling callback for “strict” will be returned.	https://docs.python.org/3.4/c-api/codec.html#c.PyCodec_LookupError
PyCodec_StrictErrors	A							https://docs.python.org			<pre><code>
PyObject* PyCodec_StrictErrors(PyObject *exc)</code></pre><br>Raise exc as an exception.	https://docs.python.org/3.4/c-api/codec.html#c.PyCodec_StrictErrors
PyCodec_IgnoreErrors	A							https://docs.python.org			<pre><code>
PyObject* PyCodec_IgnoreErrors(PyObject *exc)</code></pre><br>Ignore the unicode error, skipping the faulty input.	https://docs.python.org/3.4/c-api/codec.html#c.PyCodec_IgnoreErrors
PyCodec_ReplaceErrors	A							https://docs.python.org			<pre><code>
PyObject* PyCodec_ReplaceErrors(PyObject *exc)</code></pre><br>Replace the unicode encode error with ? or U+FFFD.	https://docs.python.org/3.4/c-api/codec.html#c.PyCodec_ReplaceErrors
PyCodec_XMLCharRefReplaceErrors	A							https://docs.python.org			<pre><code>
PyObject* PyCodec_XMLCharRefReplaceErrors(PyObject *exc)</code></pre><br>Replace the unicode encode error with XML character references.	https://docs.python.org/3.4/c-api/codec.html#c.PyCodec_XMLCharRefReplaceErrors
PyCodec_BackslashReplaceErrors	A							https://docs.python.org			<pre><code>
PyObject* PyCodec_BackslashReplaceErrors(PyObject *exc)</code></pre><br>Replace the unicode encode error with backslash escapes (\x, \u and \U).	https://docs.python.org/3.4/c-api/codec.html#c.PyCodec_BackslashReplaceErrors
PyCodec_Encoder	A							https://docs.python.org			<pre><code>
PyObject* PyCodec_Encoder(const char *encoding)</code></pre><br>Get an encoder function for the given encoding.	https://docs.python.org/3.4/c-api/codec.html#c.PyCodec_Encoder
PyCodec_Decoder	A							https://docs.python.org			<pre><code>
PyObject* PyCodec_Decoder(const char *encoding)</code></pre><br>Get a decoder function for the given encoding.	https://docs.python.org/3.4/c-api/codec.html#c.PyCodec_Decoder
PyCodec_IncrementalEncoder	A							https://docs.python.org			<pre><code>
PyObject* PyCodec_IncrementalEncoder(const char *encoding, const char *errors)</code></pre><br>Get an IncrementalEncoder object for the given encoding.	https://docs.python.org/3.4/c-api/codec.html#c.PyCodec_IncrementalEncoder
PyCodec_IncrementalDecoder	A							https://docs.python.org			<pre><code>
PyObject* PyCodec_IncrementalDecoder(const char *encoding, const char *errors)</code></pre><br>Get an IncrementalDecoder object for the given encoding.	https://docs.python.org/3.4/c-api/codec.html#c.PyCodec_IncrementalDecoder
PyCodec_StreamReader	A							https://docs.python.org			<pre><code>
PyObject* PyCodec_StreamReader(const char *encoding, PyObject *stream, const char *errors)</code></pre><br>Get a StreamReader factory function for the given encoding.	https://docs.python.org/3.4/c-api/codec.html#c.PyCodec_StreamReader
PyCodec_StreamWriter	A							https://docs.python.org			<pre><code>
PyObject* PyCodec_StreamWriter(const char *encoding, PyObject *stream, const char *errors)</code></pre><br>Get a StreamWriter factory function for the given encoding.	https://docs.python.org/3.4/c-api/codec.html#c.PyCodec_StreamWriter
PyCodec_RegisterError	A							https://docs.python.org			<pre><code>
int PyCodec_RegisterError(const char *name, PyObject *error)</code></pre><br>Register the error handling callback function error under the given name. This callback function will be called by a codec when it encounters unencodable characters/undecodable bytes and name is specified as the error parameter in the call to the encode/decode function.	https://docs.python.org/3.4/c-api/codec.html#c.PyCodec_RegisterError
PyCodec_LookupError	A							https://docs.python.org			<pre><code>
PyObject* PyCodec_LookupError(const char *name)</code></pre><br>Lookup the error handling callback function registered under name. As a special case NULL can be passed, in which case the error handling callback for “strict” will be returned.	https://docs.python.org/3.4/c-api/codec.html#c.PyCodec_LookupError
PyCodec_StrictErrors	A							https://docs.python.org			<pre><code>
PyObject* PyCodec_StrictErrors(PyObject *exc)</code></pre><br>Raise exc as an exception.	https://docs.python.org/3.4/c-api/codec.html#c.PyCodec_StrictErrors
PyCodec_IgnoreErrors	A							https://docs.python.org			<pre><code>
PyObject* PyCodec_IgnoreErrors(PyObject *exc)</code></pre><br>Ignore the unicode error, skipping the faulty input.	https://docs.python.org/3.4/c-api/codec.html#c.PyCodec_IgnoreErrors
PyCodec_ReplaceErrors	A							https://docs.python.org			<pre><code>
PyObject* PyCodec_ReplaceErrors(PyObject *exc)</code></pre><br>Replace the unicode encode error with ? or U+FFFD.	https://docs.python.org/3.4/c-api/codec.html#c.PyCodec_ReplaceErrors
PyCodec_XMLCharRefReplaceErrors	A							https://docs.python.org			<pre><code>
PyObject* PyCodec_XMLCharRefReplaceErrors(PyObject *exc)</code></pre><br>Replace the unicode encode error with XML character references.	https://docs.python.org/3.4/c-api/codec.html#c.PyCodec_XMLCharRefReplaceErrors
PyCodec_BackslashReplaceErrors	A							https://docs.python.org			<pre><code>
PyObject* PyCodec_BackslashReplaceErrors(PyObject *exc)</code></pre><br>Replace the unicode encode error with backslash escapes (\x, \u and \U).	https://docs.python.org/3.4/c-api/codec.html#c.PyCodec_BackslashReplaceErrors
_Py_c_sum	A							https://docs.python.org			<pre><code>
Py_complex _Py_c_sum(Py_complex left, Py_complex right)</code></pre><br>Return the sum of two complex numbers, using the C Py_complex representation.	https://docs.python.org/3.4/c-api/complex.html#c._Py_c_sum
_Py_c_diff	A							https://docs.python.org			<pre><code>
Py_complex _Py_c_diff(Py_complex left, Py_complex right)</code></pre><br>Return the difference between two complex numbers, using the C Py_complex representation.	https://docs.python.org/3.4/c-api/complex.html#c._Py_c_diff
_Py_c_neg	A							https://docs.python.org			<pre><code>
Py_complex _Py_c_neg(Py_complex complex)</code></pre><br>Return the negation of the complex number complex, using the C Py_complex representation.	https://docs.python.org/3.4/c-api/complex.html#c._Py_c_neg
_Py_c_prod	A							https://docs.python.org			<pre><code>
Py_complex _Py_c_prod(Py_complex left, Py_complex right)</code></pre><br>Return the product of two complex numbers, using the C Py_complex representation.	https://docs.python.org/3.4/c-api/complex.html#c._Py_c_prod
_Py_c_quot	A							https://docs.python.org			<pre><code>
Py_complex _Py_c_quot(Py_complex dividend, Py_complex divisor)</code></pre><br>Return the quotient of two complex numbers, using the C Py_complex representation.	https://docs.python.org/3.4/c-api/complex.html#c._Py_c_quot
_Py_c_pow	A							https://docs.python.org			<pre><code>
Py_complex _Py_c_pow(Py_complex num, Py_complex exp)</code></pre><br>Return the exponentiation of num by exp, using the C Py_complex representation.	https://docs.python.org/3.4/c-api/complex.html#c._Py_c_pow
PyComplex_Check	A							https://docs.python.org			<pre><code>
int PyComplex_Check(PyObject *p)</code></pre><br>Return true if its argument is a PyComplexObject or a subtype of PyComplexObject.	https://docs.python.org/3.4/c-api/complex.html#c.PyComplex_Check
PyComplex_CheckExact	A							https://docs.python.org			<pre><code>
int PyComplex_CheckExact(PyObject *p)</code></pre><br>Return true if its argument is a PyComplexObject, but not a subtype of PyComplexObject.	https://docs.python.org/3.4/c-api/complex.html#c.PyComplex_CheckExact
PyComplex_FromCComplex	A							https://docs.python.org			<pre><code>
PyObject* PyComplex_FromCComplex(Py_complex v)</code></pre><br>Create a new Python complex number object from a C Py_complex value.	https://docs.python.org/3.4/c-api/complex.html#c.PyComplex_FromCComplex
PyComplex_FromDoubles	A							https://docs.python.org			<pre><code>
PyObject* PyComplex_FromDoubles(double real, double imag)</code></pre><br>Return a new PyComplexObject object from real and imag.	https://docs.python.org/3.4/c-api/complex.html#c.PyComplex_FromDoubles
PyComplex_RealAsDouble	A							https://docs.python.org			<pre><code>
double PyComplex_RealAsDouble(PyObject *op)</code></pre><br>Return the real part of op as a C double.	https://docs.python.org/3.4/c-api/complex.html#c.PyComplex_RealAsDouble
PyComplex_ImagAsDouble	A							https://docs.python.org			<pre><code>
double PyComplex_ImagAsDouble(PyObject *op)</code></pre><br>Return the imaginary part of op as a C double.	https://docs.python.org/3.4/c-api/complex.html#c.PyComplex_ImagAsDouble
PyComplex_AsCComplex	A							https://docs.python.org			<pre><code>
Py_complex PyComplex_AsCComplex(PyObject *op)</code></pre><br>Return the Py_complex value of the complex number op.	https://docs.python.org/3.4/c-api/complex.html#c.PyComplex_AsCComplex
_Py_c_sum	A							https://docs.python.org			<pre><code>
Py_complex _Py_c_sum(Py_complex left, Py_complex right)</code></pre><br>Return the sum of two complex numbers, using the C Py_complex representation.	https://docs.python.org/3.4/c-api/complex.html#c._Py_c_sum
_Py_c_diff	A							https://docs.python.org			<pre><code>
Py_complex _Py_c_diff(Py_complex left, Py_complex right)</code></pre><br>Return the difference between two complex numbers, using the C Py_complex representation.	https://docs.python.org/3.4/c-api/complex.html#c._Py_c_diff
_Py_c_neg	A							https://docs.python.org			<pre><code>
Py_complex _Py_c_neg(Py_complex complex)</code></pre><br>Return the negation of the complex number complex, using the C Py_complex representation.	https://docs.python.org/3.4/c-api/complex.html#c._Py_c_neg
_Py_c_prod	A							https://docs.python.org			<pre><code>
Py_complex _Py_c_prod(Py_complex left, Py_complex right)</code></pre><br>Return the product of two complex numbers, using the C Py_complex representation.	https://docs.python.org/3.4/c-api/complex.html#c._Py_c_prod
_Py_c_quot	A							https://docs.python.org			<pre><code>
Py_complex _Py_c_quot(Py_complex dividend, Py_complex divisor)</code></pre><br>Return the quotient of two complex numbers, using the C Py_complex representation.	https://docs.python.org/3.4/c-api/complex.html#c._Py_c_quot
_Py_c_pow	A							https://docs.python.org			<pre><code>
Py_complex _Py_c_pow(Py_complex num, Py_complex exp)</code></pre><br>Return the exponentiation of num by exp, using the C Py_complex representation.	https://docs.python.org/3.4/c-api/complex.html#c._Py_c_pow
PyComplex_Check	A							https://docs.python.org			<pre><code>
int PyComplex_Check(PyObject *p)</code></pre><br>Return true if its argument is a PyComplexObject or a subtype of PyComplexObject.	https://docs.python.org/3.4/c-api/complex.html#c.PyComplex_Check
PyComplex_CheckExact	A							https://docs.python.org			<pre><code>
int PyComplex_CheckExact(PyObject *p)</code></pre><br>Return true if its argument is a PyComplexObject, but not a subtype of PyComplexObject.	https://docs.python.org/3.4/c-api/complex.html#c.PyComplex_CheckExact
PyComplex_FromCComplex	A							https://docs.python.org			<pre><code>
PyObject* PyComplex_FromCComplex(Py_complex v)</code></pre><br>Create a new Python complex number object from a C Py_complex value.	https://docs.python.org/3.4/c-api/complex.html#c.PyComplex_FromCComplex
PyComplex_FromDoubles	A							https://docs.python.org			<pre><code>
PyObject* PyComplex_FromDoubles(double real, double imag)</code></pre><br>Return a new PyComplexObject object from real and imag.	https://docs.python.org/3.4/c-api/complex.html#c.PyComplex_FromDoubles
PyComplex_RealAsDouble	A							https://docs.python.org			<pre><code>
double PyComplex_RealAsDouble(PyObject *op)</code></pre><br>Return the real part of op as a C double.	https://docs.python.org/3.4/c-api/complex.html#c.PyComplex_RealAsDouble
PyComplex_ImagAsDouble	A							https://docs.python.org			<pre><code>
double PyComplex_ImagAsDouble(PyObject *op)</code></pre><br>Return the imaginary part of op as a C double.	https://docs.python.org/3.4/c-api/complex.html#c.PyComplex_ImagAsDouble
PyComplex_AsCComplex	A							https://docs.python.org			<pre><code>
Py_complex PyComplex_AsCComplex(PyObject *op)</code></pre><br>Return the Py_complex value of the complex number op.	https://docs.python.org/3.4/c-api/complex.html#c.PyComplex_AsCComplex
PyOS_snprintf	A							https://docs.python.org			<pre><code>
int PyOS_snprintf(char *str, size_t size, const char *format, ...)</code></pre><br>Output not more than size bytes to str according to the format string format and the extra arguments. See the Unix man page snprintf(2).	https://docs.python.org/3.4/c-api/conversion.html#c.PyOS_snprintf
PyOS_vsnprintf	A							https://docs.python.org			<pre><code>
int PyOS_vsnprintf(char *str, size_t size, const char *format, va_list va)</code></pre><br>Output not more than size bytes to str according to the format string format and the variable argument list va. Unix man page vsnprintf(2).	https://docs.python.org/3.4/c-api/conversion.html#c.PyOS_vsnprintf
PyOS_string_to_double	A							https://docs.python.org			<pre><code>
double PyOS_string_to_double(const char *s, char **endptr, PyObject *overflow_exception)</code></pre><br>Convert a string s to a double, raising a Python exception on failure. The set of accepted strings corresponds to the set of strings accepted by Python’s float() constructor, except that s must not have leading or trailing whitespace. The conversion is independent of the current locale.	https://docs.python.org/3.4/c-api/conversion.html#c.PyOS_string_to_double
PyOS_double_to_string	A							https://docs.python.org			<pre><code>
char* PyOS_double_to_string(double val, char format_code, int precision, int flags, int *ptype)</code></pre><br>Convert a double val to a string using supplied format_code, precision, and flags.	https://docs.python.org/3.4/c-api/conversion.html#c.PyOS_double_to_string
PyOS_stricmp	A							https://docs.python.org			<pre><code>
int PyOS_stricmp(const char *s1, const char *s2)</code></pre><br>Case insensitive comparison of strings. The function works almost identically to strcmp() except that it ignores the case.	https://docs.python.org/3.4/c-api/conversion.html#c.PyOS_stricmp
PyOS_strnicmp	A							https://docs.python.org			<pre><code>
int PyOS_strnicmp(const char *s1, const char *s2, Py_ssize_t  size)</code></pre><br>Case insensitive comparison of strings. The function works almost identically to strncmp() except that it ignores the case.	https://docs.python.org/3.4/c-api/conversion.html#c.PyOS_strnicmp
PyDate_Check	A							https://docs.python.org			<pre><code>
int PyDate_Check(PyObject *ob)</code></pre><br>Return true if ob is of type PyDateTime_DateType or a subtype of PyDateTime_DateType. ob must not be NULL.	https://docs.python.org/3.4/c-api/datetime.html#c.PyDate_Check
PyDate_CheckExact	A							https://docs.python.org			<pre><code>
int PyDate_CheckExact(PyObject *ob)</code></pre><br>Return true if ob is of type PyDateTime_DateType. ob must not be NULL.	https://docs.python.org/3.4/c-api/datetime.html#c.PyDate_CheckExact
PyDateTime_Check	A							https://docs.python.org			<pre><code>
int PyDateTime_Check(PyObject *ob)</code></pre><br>Return true if ob is of type PyDateTime_DateTimeType or a subtype of PyDateTime_DateTimeType. ob must not be NULL.	https://docs.python.org/3.4/c-api/datetime.html#c.PyDateTime_Check
PyDateTime_CheckExact	A							https://docs.python.org			<pre><code>
int PyDateTime_CheckExact(PyObject *ob)</code></pre><br>Return true if ob is of type PyDateTime_DateTimeType. ob must not be NULL.	https://docs.python.org/3.4/c-api/datetime.html#c.PyDateTime_CheckExact
PyTime_Check	A							https://docs.python.org			<pre><code>
int PyTime_Check(PyObject *ob)</code></pre><br>Return true if ob is of type PyDateTime_TimeType or a subtype of PyDateTime_TimeType. ob must not be NULL.	https://docs.python.org/3.4/c-api/datetime.html#c.PyTime_Check
PyTime_CheckExact	A							https://docs.python.org			<pre><code>
int PyTime_CheckExact(PyObject *ob)</code></pre><br>Return true if ob is of type PyDateTime_TimeType. ob must not be NULL.	https://docs.python.org/3.4/c-api/datetime.html#c.PyTime_CheckExact
PyDelta_Check	A							https://docs.python.org			<pre><code>
int PyDelta_Check(PyObject *ob)</code></pre><br>Return true if ob is of type PyDateTime_DeltaType or a subtype of PyDateTime_DeltaType. ob must not be NULL.	https://docs.python.org/3.4/c-api/datetime.html#c.PyDelta_Check
PyDelta_CheckExact	A							https://docs.python.org			<pre><code>
int PyDelta_CheckExact(PyObject *ob)</code></pre><br>Return true if ob is of type PyDateTime_DeltaType. ob must not be NULL.	https://docs.python.org/3.4/c-api/datetime.html#c.PyDelta_CheckExact
PyTZInfo_Check	A							https://docs.python.org			<pre><code>
int PyTZInfo_Check(PyObject *ob)</code></pre><br>Return true if ob is of type PyDateTime_TZInfoType or a subtype of PyDateTime_TZInfoType. ob must not be NULL.	https://docs.python.org/3.4/c-api/datetime.html#c.PyTZInfo_Check
PyTZInfo_CheckExact	A							https://docs.python.org			<pre><code>
int PyTZInfo_CheckExact(PyObject *ob)</code></pre><br>Return true if ob is of type PyDateTime_TZInfoType. ob must not be NULL.	https://docs.python.org/3.4/c-api/datetime.html#c.PyTZInfo_CheckExact
PyDate_FromDate	A							https://docs.python.org			<pre><code>
PyObject* PyDate_FromDate(int year, int month, int day)</code></pre><br>Return a datetime.date object with the specified year, month and day.	https://docs.python.org/3.4/c-api/datetime.html#c.PyDate_FromDate
PyDateTime_FromDateAndTime	A							https://docs.python.org			<pre><code>
PyObject* PyDateTime_FromDateAndTime(int year, int month, int day, int hour, int minute, int second, int usecond)</code></pre><br>Return a datetime.datetime object with the specified year, month, day, hour, minute, second and microsecond.	https://docs.python.org/3.4/c-api/datetime.html#c.PyDateTime_FromDateAndTime
PyTime_FromTime	A							https://docs.python.org			<pre><code>
PyObject* PyTime_FromTime(int hour, int minute, int second, int usecond)</code></pre><br>Return a datetime.time object with the specified hour, minute, second and microsecond.	https://docs.python.org/3.4/c-api/datetime.html#c.PyTime_FromTime
PyDelta_FromDSU	A							https://docs.python.org			<pre><code>
PyObject* PyDelta_FromDSU(int days, int seconds, int useconds)</code></pre><br>Return a datetime.timedelta object representing the given number of days, seconds and microseconds. Normalization is performed so that the resulting number of microseconds and seconds lie in the ranges documented for datetime.timedelta objects.	https://docs.python.org/3.4/c-api/datetime.html#c.PyDelta_FromDSU
PyDateTime_GET_YEAR	A							https://docs.python.org			<pre><code>
int PyDateTime_GET_YEAR(PyDateTime_Date *o)</code></pre><br>Return the year, as a positive int.	https://docs.python.org/3.4/c-api/datetime.html#c.PyDateTime_GET_YEAR
PyDateTime_GET_MONTH	A							https://docs.python.org			<pre><code>
int PyDateTime_GET_MONTH(PyDateTime_Date *o)</code></pre><br>Return the month, as an int from 1 through 12.	https://docs.python.org/3.4/c-api/datetime.html#c.PyDateTime_GET_MONTH
PyDateTime_GET_DAY	A							https://docs.python.org			<pre><code>
int PyDateTime_GET_DAY(PyDateTime_Date *o)</code></pre><br>Return the day, as an int from 1 through 31.	https://docs.python.org/3.4/c-api/datetime.html#c.PyDateTime_GET_DAY
PyDateTime_DATE_GET_HOUR	A							https://docs.python.org			<pre><code>
int PyDateTime_DATE_GET_HOUR(PyDateTime_DateTime *o)</code></pre><br>Return the hour, as an int from 0 through 23.	https://docs.python.org/3.4/c-api/datetime.html#c.PyDateTime_DATE_GET_HOUR
PyDateTime_DATE_GET_MINUTE	A							https://docs.python.org			<pre><code>
int PyDateTime_DATE_GET_MINUTE(PyDateTime_DateTime *o)</code></pre><br>Return the minute, as an int from 0 through 59.	https://docs.python.org/3.4/c-api/datetime.html#c.PyDateTime_DATE_GET_MINUTE
PyDateTime_DATE_GET_SECOND	A							https://docs.python.org			<pre><code>
int PyDateTime_DATE_GET_SECOND(PyDateTime_DateTime *o)</code></pre><br>Return the second, as an int from 0 through 59.	https://docs.python.org/3.4/c-api/datetime.html#c.PyDateTime_DATE_GET_SECOND
PyDateTime_DATE_GET_MICROSECOND	A							https://docs.python.org			<pre><code>
int PyDateTime_DATE_GET_MICROSECOND(PyDateTime_DateTime *o)</code></pre><br>Return the microsecond, as an int from 0 through 999999.	https://docs.python.org/3.4/c-api/datetime.html#c.PyDateTime_DATE_GET_MICROSECOND
PyDateTime_TIME_GET_HOUR	A							https://docs.python.org			<pre><code>
int PyDateTime_TIME_GET_HOUR(PyDateTime_Time *o)</code></pre><br>Return the hour, as an int from 0 through 23.	https://docs.python.org/3.4/c-api/datetime.html#c.PyDateTime_TIME_GET_HOUR
PyDateTime_TIME_GET_MINUTE	A							https://docs.python.org			<pre><code>
int PyDateTime_TIME_GET_MINUTE(PyDateTime_Time *o)</code></pre><br>Return the minute, as an int from 0 through 59.	https://docs.python.org/3.4/c-api/datetime.html#c.PyDateTime_TIME_GET_MINUTE
PyDateTime_TIME_GET_SECOND	A							https://docs.python.org			<pre><code>
int PyDateTime_TIME_GET_SECOND(PyDateTime_Time *o)</code></pre><br>Return the second, as an int from 0 through 59.	https://docs.python.org/3.4/c-api/datetime.html#c.PyDateTime_TIME_GET_SECOND
PyDateTime_TIME_GET_MICROSECOND	A							https://docs.python.org			<pre><code>
int PyDateTime_TIME_GET_MICROSECOND(PyDateTime_Time *o)</code></pre><br>Return the microsecond, as an int from 0 through 999999.	https://docs.python.org/3.4/c-api/datetime.html#c.PyDateTime_TIME_GET_MICROSECOND
PyDateTime_DELTA_GET_DAYS	A							https://docs.python.org			<pre><code>
int PyDateTime_DELTA_GET_DAYS(PyDateTime_Delta *o)</code></pre><br>Return the number of days, as an int from -999999999 to 999999999.	https://docs.python.org/3.4/c-api/datetime.html#c.PyDateTime_DELTA_GET_DAYS
PyDateTime_DELTA_GET_SECONDS	A							https://docs.python.org			<pre><code>
int PyDateTime_DELTA_GET_SECONDS(PyDateTime_Delta *o)</code></pre><br>Return the number of seconds, as an int from 0 through 86399.	https://docs.python.org/3.4/c-api/datetime.html#c.PyDateTime_DELTA_GET_SECONDS
PyDateTime_DELTA_GET_MICROSECOND	A							https://docs.python.org			<pre><code>
int PyDateTime_DELTA_GET_MICROSECOND(PyDateTime_Delta *o)</code></pre><br>Return the number of microseconds, as an int from 0 through 999999.	https://docs.python.org/3.4/c-api/datetime.html#c.PyDateTime_DELTA_GET_MICROSECOND
PyDateTime_FromTimestamp	A							https://docs.python.org			<pre><code>
PyObject* PyDateTime_FromTimestamp(PyObject *args)</code></pre><br>Create and return a new datetime.datetime object given an argument tuple suitable for passing to datetime.datetime.fromtimestamp().	https://docs.python.org/3.4/c-api/datetime.html#c.PyDateTime_FromTimestamp
PyDate_FromTimestamp	A							https://docs.python.org			<pre><code>
PyObject* PyDate_FromTimestamp(PyObject *args)</code></pre><br>Create and return a new datetime.date object given an argument tuple suitable for passing to datetime.date.fromtimestamp().	https://docs.python.org/3.4/c-api/datetime.html#c.PyDate_FromTimestamp
PyDescr_NewGetSet	A							https://docs.python.org			<pre><code>
PyObject* PyDescr_NewGetSet(PyTypeObject *type, struct PyGetSetDef *getset)</code></pre><br>	https://docs.python.org/3.4/c-api/descriptor.html#c.PyDescr_NewGetSet
PyDescr_NewMember	A							https://docs.python.org			<pre><code>
PyObject* PyDescr_NewMember(PyTypeObject *type, struct PyMemberDef *meth)</code></pre><br>	https://docs.python.org/3.4/c-api/descriptor.html#c.PyDescr_NewMember
PyDescr_NewMethod	A							https://docs.python.org			<pre><code>
PyObject* PyDescr_NewMethod(PyTypeObject *type, struct PyMethodDef *meth)</code></pre><br>	https://docs.python.org/3.4/c-api/descriptor.html#c.PyDescr_NewMethod
PyDescr_NewWrapper	A							https://docs.python.org			<pre><code>
PyObject* PyDescr_NewWrapper(PyTypeObject *type, struct wrapperbase *wrapper, void *wrapped)</code></pre><br>	https://docs.python.org/3.4/c-api/descriptor.html#c.PyDescr_NewWrapper
PyDescr_NewClassMethod	A							https://docs.python.org			<pre><code>
PyObject* PyDescr_NewClassMethod(PyTypeObject *type, PyMethodDef *method)</code></pre><br>	https://docs.python.org/3.4/c-api/descriptor.html#c.PyDescr_NewClassMethod
PyDescr_IsData	A							https://docs.python.org			<pre><code>
int PyDescr_IsData(PyObject *descr)</code></pre><br>Return true if the descriptor objects descr describes a data attribute, or false if it describes a method. descr must be a descriptor object; there is no error checking.	https://docs.python.org/3.4/c-api/descriptor.html#c.PyDescr_IsData
PyWrapper_New	A							https://docs.python.org			<pre><code>
PyObject* PyWrapper_New(PyObject *, PyObject *)</code></pre><br>	https://docs.python.org/3.4/c-api/descriptor.html#c.PyWrapper_New
PyDict_Check	A							https://docs.python.org			<pre><code>
int PyDict_Check(PyObject *p)</code></pre><br>Return true if p is a dict object or an instance of a subtype of the dict type.	https://docs.python.org/3.4/c-api/dict.html#c.PyDict_Check
PyDict_CheckExact	A							https://docs.python.org			<pre><code>
int PyDict_CheckExact(PyObject *p)</code></pre><br>Return true if p is a dict object, but not an instance of a subtype of the dict type.	https://docs.python.org/3.4/c-api/dict.html#c.PyDict_CheckExact
PyDict_New	A							https://docs.python.org			<pre><code>
PyObject* PyDict_New()</code></pre><br>Return a new empty dictionary, or NULL on failure.	https://docs.python.org/3.4/c-api/dict.html#c.PyDict_New
PyDictProxy_New	A							https://docs.python.org			<pre><code>
PyObject* PyDictProxy_New(PyObject *mapping)</code></pre><br>Return a types.MappingProxyType object for a mapping which enforces read-only behavior. This is normally used to create a view to prevent modification of the dictionary for non-dynamic class types.	https://docs.python.org/3.4/c-api/dict.html#c.PyDictProxy_New
PyDict_Clear	A							https://docs.python.org			<pre><code>
void PyDict_Clear(PyObject *p)</code></pre><br>Empty an existing dictionary of all key-value pairs.	https://docs.python.org/3.4/c-api/dict.html#c.PyDict_Clear
PyDict_Contains	A							https://docs.python.org			<pre><code>
int PyDict_Contains(PyObject *p, PyObject *key)</code></pre><br>Determine if dictionary p contains key. If an item in p is matches key, return 1, otherwise return 0. On error, return -1. This is equivalent to the Python expression key in p.	https://docs.python.org/3.4/c-api/dict.html#c.PyDict_Contains
PyDict_Copy	A							https://docs.python.org			<pre><code>
PyObject* PyDict_Copy(PyObject *p)</code></pre><br>Return a new dictionary that contains the same key-value pairs as p.	https://docs.python.org/3.4/c-api/dict.html#c.PyDict_Copy
PyDict_SetItem	A							https://docs.python.org			<pre><code>
int PyDict_SetItem(PyObject *p, PyObject *key, PyObject *val)</code></pre><br>Insert value into the dictionary p with a key of key. key must be hashable; if it isn’t, TypeError will be raised. Return 0 on success or -1 on failure.	https://docs.python.org/3.4/c-api/dict.html#c.PyDict_SetItem
PyDict_SetItemString	A							https://docs.python.org			<pre><code>
int PyDict_SetItemString(PyObject *p, const char *key, PyObject *val)</code></pre><br>Insert value into the dictionary p using key as a key. key should be a char*. The key object is created using PyUnicode_FromString(key). Return 0 on success or -1 on failure.	https://docs.python.org/3.4/c-api/dict.html#c.PyDict_SetItemString
PyDict_DelItem	A							https://docs.python.org			<pre><code>
int PyDict_DelItem(PyObject *p, PyObject *key)</code></pre><br>Remove the entry in dictionary p with key key. key must be hashable; if it isn’t, TypeError is raised. Return 0 on success or -1 on failure.	https://docs.python.org/3.4/c-api/dict.html#c.PyDict_DelItem
PyDict_DelItemString	A							https://docs.python.org			<pre><code>
int PyDict_DelItemString(PyObject *p, const char *key)</code></pre><br>Remove the entry in dictionary p which has a key specified by the string key. Return 0 on success or -1 on failure.	https://docs.python.org/3.4/c-api/dict.html#c.PyDict_DelItemString
PyDict_GetItem	A							https://docs.python.org			<pre><code>
PyObject* PyDict_GetItem(PyObject *p, PyObject *key)</code></pre><br>Return the object from dictionary p which has a key key. Return NULL if the key key is not present, but without setting an exception.	https://docs.python.org/3.4/c-api/dict.html#c.PyDict_GetItem
PyDict_GetItemWithError	A							https://docs.python.org			<pre><code>
PyObject* PyDict_GetItemWithError(PyObject *p, PyObject *key)</code></pre><br>Variant of PyDict_GetItem() that does not suppress exceptions. Return NULL with an exception set if an exception occurred. Return NULL without an exception set if the key wasn’t present.	https://docs.python.org/3.4/c-api/dict.html#c.PyDict_GetItemWithError
PyDict_GetItemString	A							https://docs.python.org			<pre><code>
PyObject* PyDict_GetItemString(PyObject *p, const char *key)</code></pre><br>This is the same as PyDict_GetItem(), but key is specified as a char*, rather than a PyObject*.	https://docs.python.org/3.4/c-api/dict.html#c.PyDict_GetItemString
PyDict_SetDefault	A							https://docs.python.org			<pre><code>
PyObject* PyDict_SetDefault(PyObject *p, PyObject *key, PyObject *default)</code></pre><br>This is the same as the Python-level dict.setdefault(). If present, it returns the value corresponding to key from the dictionary p. If the key is not in the dict, it is inserted with value defaultobj and defaultobj is returned. This function evaluates the hash function of key only once, instead of evaluating it independently for the lookup and the insertion.	https://docs.python.org/3.4/c-api/dict.html#c.PyDict_SetDefault
PyDict_Items	A							https://docs.python.org			<pre><code>
PyObject* PyDict_Items(PyObject *p)</code></pre><br>Return a PyListObject containing all the items from the dictionary.	https://docs.python.org/3.4/c-api/dict.html#c.PyDict_Items
PyDict_Keys	A							https://docs.python.org			<pre><code>
PyObject* PyDict_Keys(PyObject *p)</code></pre><br>Return a PyListObject containing all the keys from the dictionary.	https://docs.python.org/3.4/c-api/dict.html#c.PyDict_Keys
PyDict_Values	A							https://docs.python.org			<pre><code>
PyObject* PyDict_Values(PyObject *p)</code></pre><br>Return a PyListObject containing all the values from the dictionary p.	https://docs.python.org/3.4/c-api/dict.html#c.PyDict_Values
PyDict_Size	A							https://docs.python.org			<pre><code>
Py_ssize_t PyDict_Size(PyObject *p)</code></pre><br>Return the number of items in the dictionary. This is equivalent to len(p) on a dictionary.	https://docs.python.org/3.4/c-api/dict.html#c.PyDict_Size
PyDict_Next	A							https://docs.python.org			<pre><code>
int PyDict_Next(PyObject *p, Py_ssize_t *ppos, PyObject **pkey, PyObject **pvalue)</code></pre><br>Iterate over all key-value pairs in the dictionary p. The Py_ssize_t referred to by ppos must be initialized to 0 prior to the first call to this function to start the iteration; the function returns true for each pair in the dictionary, and false once all pairs have been reported. The parameters pkey and pvalue should either point to PyObject* variables that will be filled in with each key and value, respectively, or may be NULL. Any references returned through them are borrowed. ppos should not be altered during iteration. Its value represents offsets within the internal dictionary structure, and since the structure is sparse, the offsets are not consecutive.	https://docs.python.org/3.4/c-api/dict.html#c.PyDict_Next
PyDict_Merge	A							https://docs.python.org			<pre><code>
int PyDict_Merge(PyObject *a, PyObject *b, int override)</code></pre><br>Iterate over mapping object b adding key-value pairs to dictionary a. b may be a dictionary, or any object supporting PyMapping_Keys() and PyObject_GetItem(). If override is true, existing pairs in a will be replaced if a matching key is found in b, otherwise pairs will only be added if there is not a matching key in a. Return 0 on success or -1 if an exception was raised.	https://docs.python.org/3.4/c-api/dict.html#c.PyDict_Merge
PyDict_Update	A							https://docs.python.org			<pre><code>
int PyDict_Update(PyObject *a, PyObject *b)</code></pre><br>This is the same as PyDict_Merge(a, b, 1) in C, and is similar to a.update(b) in Python except that PyDict_Update() doesn’t fall back to the iterating over a sequence of key value pairs if the second argument has no “keys” attribute. Return 0 on success or -1 if an exception was raised.	https://docs.python.org/3.4/c-api/dict.html#c.PyDict_Update
PyDict_MergeFromSeq2	A							https://docs.python.org			<pre><code>
int PyDict_MergeFromSeq2(PyObject *a, PyObject *seq2, int override)</code></pre><br>Update or merge into dictionary a, from the key-value pairs in seq2. seq2 must be an iterable object producing iterable objects of length 2, viewed as key-value pairs. In case of duplicate keys, the last wins if override is true, else the first wins. Return 0 on success or -1 if an exception was raised. Equivalent Python (except for the return value):	https://docs.python.org/3.4/c-api/dict.html#c.PyDict_MergeFromSeq2
PyDict_ClearFreeList	A							https://docs.python.org			<pre><code>
int PyDict_ClearFreeList()</code></pre><br>Clear the free list. Return the total number of freed items.	https://docs.python.org/3.4/c-api/dict.html#c.PyDict_ClearFreeList
PyErr_PrintEx	A							https://docs.python.org			<pre><code>
void PyErr_PrintEx(int set_sys_last_vars)</code></pre><br>Print a standard traceback to sys.stderr and clear the error indicator. Call this function only when the error indicator is set. (Otherwise it will cause a fatal error!)	https://docs.python.org/3.4/c-api/exceptions.html#c.PyErr_PrintEx
PyErr_Print	A							https://docs.python.org			<pre><code>
void PyErr_Print()</code></pre><br>Alias for PyErr_PrintEx(1).	https://docs.python.org/3.4/c-api/exceptions.html#c.PyErr_Print
PyErr_Occurred	A							https://docs.python.org			<pre><code>
PyObject* PyErr_Occurred()</code></pre><br>Test whether the error indicator is set. If set, return the exception type (the first argument to the last call to one of the PyErr_Set*() functions or to PyErr_Restore()). If not set, return NULL. You do not own a reference to the return value, so you do not need to Py_DECREF() it.	https://docs.python.org/3.4/c-api/exceptions.html#c.PyErr_Occurred
PyErr_ExceptionMatches	A							https://docs.python.org			<pre><code>
int PyErr_ExceptionMatches(PyObject *exc)</code></pre><br>Equivalent to PyErr_GivenExceptionMatches(PyErr_Occurred(), exc). This should only be called when an exception is actually set; a memory access violation will occur if no exception has been raised.	https://docs.python.org/3.4/c-api/exceptions.html#c.PyErr_ExceptionMatches
PyErr_GivenExceptionMatches	A							https://docs.python.org			<pre><code>
int PyErr_GivenExceptionMatches(PyObject *given, PyObject *exc)</code></pre><br>Return true if the given exception matches the exception in exc. If exc is a class object, this also returns true when given is an instance of a subclass. If exc is a tuple, all exceptions in the tuple (and recursively in subtuples) are searched for a match.	https://docs.python.org/3.4/c-api/exceptions.html#c.PyErr_GivenExceptionMatches
PyErr_NormalizeException	A							https://docs.python.org			<pre><code>
void PyErr_NormalizeException(PyObject**exc, PyObject**val, PyObject**tb)</code></pre><br>Under certain circumstances, the values returned by PyErr_Fetch() below can be “unnormalized”, meaning that *exc is a class object but *val is not an instance of the same class. This function can be used to instantiate the class in that case. If the values are already normalized, nothing happens. The delayed normalization is implemented to improve performance.	https://docs.python.org/3.4/c-api/exceptions.html#c.PyErr_NormalizeException
PyErr_Clear	A							https://docs.python.org			<pre><code>
void PyErr_Clear()</code></pre><br>Clear the error indicator. If the error indicator is not set, there is no effect.	https://docs.python.org/3.4/c-api/exceptions.html#c.PyErr_Clear
PyErr_Fetch	A							https://docs.python.org			<pre><code>
void PyErr_Fetch(PyObject **ptype, PyObject **pvalue, PyObject **ptraceback)</code></pre><br>Retrieve the error indicator into three variables whose addresses are passed. If the error indicator is not set, set all three variables to NULL. If it is set, it will be cleared and you own a reference to each object retrieved. The value and traceback object may be NULL even when the type object is not.	https://docs.python.org/3.4/c-api/exceptions.html#c.PyErr_Fetch
PyErr_Restore	A							https://docs.python.org			<pre><code>
void PyErr_Restore(PyObject *type, PyObject *value, PyObject *traceback)</code></pre><br>Set the error indicator from the three objects. If the error indicator is already set, it is cleared first. If the objects are NULL, the error indicator is cleared. Do not pass a NULL type and non-NULL value or traceback. The exception type should be a class. Do not pass an invalid exception type or value. (Violating these rules will cause subtle problems later.) This call takes away a reference to each object: you must own a reference to each object before the call and after the call you no longer own these references. (If you don’t understand this, don’t use this function. I warned you.)	https://docs.python.org/3.4/c-api/exceptions.html#c.PyErr_Restore
PyErr_GetExcInfo	A							https://docs.python.org			<pre><code>
void PyErr_GetExcInfo(PyObject **ptype, PyObject **pvalue, PyObject **ptraceback)</code></pre><br>Retrieve the exception info, as known from sys.exc_info(). This refers to an exception that was already caught, not to an exception that was freshly raised. Returns new references for the three objects, any of which may be NULL. Does not modify the exception info state.	https://docs.python.org/3.4/c-api/exceptions.html#c.PyErr_GetExcInfo
PyErr_SetExcInfo	A							https://docs.python.org			<pre><code>
void PyErr_SetExcInfo(PyObject *type, PyObject *value, PyObject *traceback)</code></pre><br>Set the exception info, as known from sys.exc_info(). This refers to an exception that was already caught, not to an exception that was freshly raised. This function steals the references of the arguments. To clear the exception state, pass NULL for all three arguments. For general rules about the three arguments, see PyErr_Restore().	https://docs.python.org/3.4/c-api/exceptions.html#c.PyErr_SetExcInfo
PyErr_SetString	A							https://docs.python.org			<pre><code>
void PyErr_SetString(PyObject *type, const char *message)</code></pre><br>This is the most common way to set the error indicator. The first argument specifies the exception type; it is normally one of the standard exceptions, e.g. PyExc_RuntimeError. You need not increment its reference count. The second argument is an error message; it is decoded from 'utf-8‘.	https://docs.python.org/3.4/c-api/exceptions.html#c.PyErr_SetString
PyErr_SetObject	A							https://docs.python.org			<pre><code>
void PyErr_SetObject(PyObject *type, PyObject *value)</code></pre><br>This function is similar to PyErr_SetString() but lets you specify an arbitrary Python object for the “value” of the exception.	https://docs.python.org/3.4/c-api/exceptions.html#c.PyErr_SetObject
PyErr_Format	A							https://docs.python.org			<pre><code>
PyObject* PyErr_Format(PyObject *exception, const char *format, ...)</code></pre><br>This function sets the error indicator and returns NULL. exception should be a Python exception class. The format and subsequent parameters help format the error message; they have the same meaning and values as in PyUnicode_FromFormat(). format is an ASCII-encoded string.	https://docs.python.org/3.4/c-api/exceptions.html#c.PyErr_Format
PyErr_SetNone	A							https://docs.python.org			<pre><code>
void PyErr_SetNone(PyObject *type)</code></pre><br>This is a shorthand for PyErr_SetObject(type, Py_None).	https://docs.python.org/3.4/c-api/exceptions.html#c.PyErr_SetNone
PyErr_BadArgument	A							https://docs.python.org			<pre><code>
int PyErr_BadArgument()</code></pre><br>This is a shorthand for PyErr_SetString(PyExc_TypeError, message), where message indicates that a built-in operation was invoked with an illegal argument. It is mostly for internal use.	https://docs.python.org/3.4/c-api/exceptions.html#c.PyErr_BadArgument
PyErr_NoMemory	A							https://docs.python.org			<pre><code>
PyObject* PyErr_NoMemory()</code></pre><br>This is a shorthand for PyErr_SetNone(PyExc_MemoryError); it returns NULL so an object allocation function can write return PyErr_NoMemory(); when it runs out of memory.	https://docs.python.org/3.4/c-api/exceptions.html#c.PyErr_NoMemory
PyErr_SetFromErrno	A							https://docs.python.org			<pre><code>
PyObject* PyErr_SetFromErrno(PyObject *type)</code></pre><br>This is a convenience function to raise an exception when a C library function has returned an error and set the C variable errno. It constructs a tuple object whose first item is the integer errno value and whose second item is the corresponding error message (gotten from strerror()), and then calls PyErr_SetObject(type, object). On Unix, when the errno value is EINTR, indicating an interrupted system call, this calls PyErr_CheckSignals(), and if that set the error indicator, leaves it set to that. The function always returns NULL, so a wrapper function around a system call can write return PyErr_SetFromErrno(type); when the system call returns an error.	https://docs.python.org/3.4/c-api/exceptions.html#c.PyErr_SetFromErrno
PyErr_SetFromErrnoWithFilenameObject	A							https://docs.python.org			<pre><code>
PyObject* PyErr_SetFromErrnoWithFilenameObject(PyObject *type, PyObject *filenameObject)</code></pre><br>Similar to PyErr_SetFromErrno(), with the additional behavior that if filenameObject is not NULL, it is passed to the constructor of type as a third parameter. In the case of OSError exception, this is used to define the filename attribute of the exception instance.	https://docs.python.org/3.4/c-api/exceptions.html#c.PyErr_SetFromErrnoWithFilenameObject
PyErr_SetFromErrnoWithFilenameObjects	A							https://docs.python.org			<pre><code>
PyObject* PyErr_SetFromErrnoWithFilenameObjects(PyObject *type, PyObject *filenameObject, PyObject *filenameObject2)</code></pre><br>Similar to PyErr_SetFromErrnoWithFilenameObject(), but takes a second filename object, for raising errors when a function that takes two filenames fails.	https://docs.python.org/3.4/c-api/exceptions.html#c.PyErr_SetFromErrnoWithFilenameObjects
PyErr_SetFromErrnoWithFilename	A							https://docs.python.org			<pre><code>
PyObject* PyErr_SetFromErrnoWithFilename(PyObject *type, const char *filename)</code></pre><br>Similar to PyErr_SetFromErrnoWithFilenameObject(), but the filename is given as a C string. filename is decoded from the filesystem encoding (os.fsdecode()).	https://docs.python.org/3.4/c-api/exceptions.html#c.PyErr_SetFromErrnoWithFilename
PyErr_SetFromWindowsErr	A							https://docs.python.org			<pre><code>
PyObject* PyErr_SetFromWindowsErr(int ierr)</code></pre><br>This is a convenience function to raise WindowsError. If called with ierr of 0, the error code returned by a call to GetLastError() is used instead. It calls the Win32 function FormatMessage() to retrieve the Windows description of error code given by ierr or GetLastError(), then it constructs a tuple object whose first item is the ierr value and whose second item is the corresponding error message (gotten from FormatMessage()), and then calls PyErr_SetObject(PyExc_WindowsError, object). This function always returns NULL. Availability: Windows.	https://docs.python.org/3.4/c-api/exceptions.html#c.PyErr_SetFromWindowsErr
PyErr_SetExcFromWindowsErr	A							https://docs.python.org			<pre><code>
PyObject* PyErr_SetExcFromWindowsErr(PyObject *type, int ierr)</code></pre><br>Similar to PyErr_SetFromWindowsErr(), with an additional parameter specifying the exception type to be raised. Availability: Windows.	https://docs.python.org/3.4/c-api/exceptions.html#c.PyErr_SetExcFromWindowsErr
PyErr_SetFromWindowsErrWithFilename	A							https://docs.python.org			<pre><code>
PyObject* PyErr_SetFromWindowsErrWithFilename(int ierr, const char *filename)</code></pre><br>Similar to PyErr_SetFromWindowsErrWithFilenameObject(), but the filename is given as a C string. filename is decoded from the filesystem encoding (os.fsdecode()). Availability: Windows.	https://docs.python.org/3.4/c-api/exceptions.html#c.PyErr_SetFromWindowsErrWithFilename
PyErr_SetExcFromWindowsErrWithFilenameObject	A							https://docs.python.org			<pre><code>
PyObject* PyErr_SetExcFromWindowsErrWithFilenameObject(PyObject *type, int ierr, PyObject *filename)</code></pre><br>Similar to PyErr_SetFromWindowsErrWithFilenameObject(), with an additional parameter specifying the exception type to be raised. Availability: Windows.	https://docs.python.org/3.4/c-api/exceptions.html#c.PyErr_SetExcFromWindowsErrWithFilenameObject
PyErr_SetExcFromWindowsErrWithFilenameObjects	A							https://docs.python.org			<pre><code>
PyObject* PyErr_SetExcFromWindowsErrWithFilenameObjects(PyObject *type, int ierr, PyObject *filename, PyObject *filename2)</code></pre><br>Similar to PyErr_SetExcFromWindowsErrWithFilenameObject(), but accepts a second filename object. Availability: Windows.	https://docs.python.org/3.4/c-api/exceptions.html#c.PyErr_SetExcFromWindowsErrWithFilenameObjects
PyErr_SetExcFromWindowsErrWithFilename	A							https://docs.python.org			<pre><code>
PyObject* PyErr_SetExcFromWindowsErrWithFilename(PyObject *type, int ierr, const char *filename)</code></pre><br>Similar to PyErr_SetFromWindowsErrWithFilename(), with an additional parameter specifying the exception type to be raised. Availability: Windows.	https://docs.python.org/3.4/c-api/exceptions.html#c.PyErr_SetExcFromWindowsErrWithFilename
PyErr_SetImportError	A							https://docs.python.org			<pre><code>
PyObject* PyErr_SetImportError(PyObject *msg, PyObject *name, PyObject *path)</code></pre><br>This is a convenience function to raise ImportError. msg will be set as the exception’s message string. name and path, both of which can be NULL, will be set as the ImportError‘s respective name and path attributes.	https://docs.python.org/3.4/c-api/exceptions.html#c.PyErr_SetImportError
PyErr_SyntaxLocationObject	A							https://docs.python.org			<pre><code>
void PyErr_SyntaxLocationObject(PyObject *filename, int lineno, int col_offset)</code></pre><br>Set file, line, and offset information for the current exception. If the current exception is not a SyntaxError, then it sets additional attributes, which make the exception printing subsystem think the exception is a SyntaxError.	https://docs.python.org/3.4/c-api/exceptions.html#c.PyErr_SyntaxLocationObject
PyErr_SyntaxLocationEx	A							https://docs.python.org			<pre><code>
void PyErr_SyntaxLocationEx(const char *filename, int lineno, int col_offset)</code></pre><br>Like PyErr_SyntaxLocationObject(), but filename is a byte string decoded from the filesystem encoding (os.fsdecode()).	https://docs.python.org/3.4/c-api/exceptions.html#c.PyErr_SyntaxLocationEx
PyErr_SyntaxLocation	A							https://docs.python.org			<pre><code>
void PyErr_SyntaxLocation(const char *filename, int lineno)</code></pre><br>Like PyErr_SyntaxLocationEx(), but the col_offset parameter is omitted.	https://docs.python.org/3.4/c-api/exceptions.html#c.PyErr_SyntaxLocation
PyErr_BadInternalCall	A							https://docs.python.org			<pre><code>
void PyErr_BadInternalCall()</code></pre><br>This is a shorthand for PyErr_SetString(PyExc_SystemError, message), where message indicates that an internal operation (e.g. a Python/C API function) was invoked with an illegal argument. It is mostly for internal use.	https://docs.python.org/3.4/c-api/exceptions.html#c.PyErr_BadInternalCall
PyErr_WarnEx	A							https://docs.python.org			<pre><code>
int PyErr_WarnEx(PyObject *category, const char *message, Py_ssize_t stack_level)</code></pre><br>Issue a warning message. The category argument is a warning category (see below) or NULL; the message argument is an UTF-8 encoded string. stack_level is a positive number giving a number of stack frames; the warning will be issued from the currently executing line of code in that stack frame. A stack_level of 1 is the function calling PyErr_WarnEx(), 2 is the function above that, and so forth.	https://docs.python.org/3.4/c-api/exceptions.html#c.PyErr_WarnEx
PyErr_WarnExplicitObject	A							https://docs.python.org			<pre><code>
int PyErr_WarnExplicitObject(PyObject *category, PyObject *message, PyObject *filename, int lineno, PyObject *module, PyObject *registry)</code></pre><br>Issue a warning message with explicit control over all warning attributes. This is a straightforward wrapper around the Python function warnings.warn_explicit(), see there for more information. The module and registry arguments may be set to NULL to get the default effect described there.	https://docs.python.org/3.4/c-api/exceptions.html#c.PyErr_WarnExplicitObject
PyErr_WarnExplicit	A							https://docs.python.org			<pre><code>
int PyErr_WarnExplicit(PyObject *category, const char *message, const char *filename, int lineno, const char *module, PyObject *registry)</code></pre><br>Similar to PyErr_WarnExplicitObject() except that message and module are UTF-8 encoded strings, and filename is decoded from the filesystem encoding (os.fsdecode()).	https://docs.python.org/3.4/c-api/exceptions.html#c.PyErr_WarnExplicit
PyErr_WarnFormat	A							https://docs.python.org			<pre><code>
int PyErr_WarnFormat(PyObject *category, Py_ssize_t stack_level, const char *format, ...)</code></pre><br>Function similar to PyErr_WarnEx(), but use PyUnicode_FromFormat() to format the warning message. format is an ASCII-encoded string.	https://docs.python.org/3.4/c-api/exceptions.html#c.PyErr_WarnFormat
PyErr_CheckSignals	A							https://docs.python.org			<pre><code>
int PyErr_CheckSignals()</code></pre><br>This function interacts with Python’s signal handling. It checks whether a signal has been sent to the processes and if so, invokes the corresponding signal handler. If the signal module is supported, this can invoke a signal handler written in Python. In all cases, the default effect for SIGINT is to raise the KeyboardInterrupt exception. If an exception is raised the error indicator is set and the function returns -1; otherwise the function returns 0. The error indicator may or may not be cleared if it was previously set.	https://docs.python.org/3.4/c-api/exceptions.html#c.PyErr_CheckSignals
PyErr_SetInterrupt	A							https://docs.python.org			<pre><code>
void PyErr_SetInterrupt()</code></pre><br>This function simulates the effect of a SIGINT signal arriving — the next time PyErr_CheckSignals() is called, KeyboardInterrupt will be raised. It may be called without holding the interpreter lock.	https://docs.python.org/3.4/c-api/exceptions.html#c.PyErr_SetInterrupt
PySignal_SetWakeupFd	A							https://docs.python.org			<pre><code>
int PySignal_SetWakeupFd(int fd)</code></pre><br>This utility function specifies a file descriptor to which a '\0' byte will be written whenever a signal is received. It returns the previous such file descriptor. The value -1 disables the feature; this is the initial state. This is equivalent to signal.set_wakeup_fd() in Python, but without any error checking. fd should be a valid file descriptor. The function should only be called from the main thread.	https://docs.python.org/3.4/c-api/exceptions.html#c.PySignal_SetWakeupFd
PyErr_NewException	A							https://docs.python.org			<pre><code>
PyObject* PyErr_NewException(const char *name, PyObject *base, PyObject *dict)</code></pre><br>This utility function creates and returns a new exception class. The name argument must be the name of the new exception, a C string of the form module.classname. The base and dict arguments are normally NULL. This creates a class object derived from Exception (accessible in C as PyExc_Exception).	https://docs.python.org/3.4/c-api/exceptions.html#c.PyErr_NewException
PyErr_NewExceptionWithDoc	A							https://docs.python.org			<pre><code>
PyObject* PyErr_NewExceptionWithDoc(const char *name, const char *doc, PyObject *base, PyObject *dict)</code></pre><br>Same as PyErr_NewException(), except that the new exception class can easily be given a docstring: If doc is non-NULL, it will be used as the docstring for the exception class.	https://docs.python.org/3.4/c-api/exceptions.html#c.PyErr_NewExceptionWithDoc
PyErr_WriteUnraisable	A							https://docs.python.org			<pre><code>
void PyErr_WriteUnraisable(PyObject *obj)</code></pre><br>This utility function prints a warning message to sys.stderr when an exception has been set but it is impossible for the interpreter to actually raise the exception. It is used, for example, when an exception occurs in an __del__() method.	https://docs.python.org/3.4/c-api/exceptions.html#c.PyErr_WriteUnraisable
PyException_GetTraceback	A							https://docs.python.org			<pre><code>
PyObject* PyException_GetTraceback(PyObject *ex)</code></pre><br>Return the traceback associated with the exception as a new reference, as accessible from Python through __traceback__. If there is no traceback associated, this returns NULL.	https://docs.python.org/3.4/c-api/exceptions.html#c.PyException_GetTraceback
PyException_SetTraceback	A							https://docs.python.org			<pre><code>
int PyException_SetTraceback(PyObject *ex, PyObject *tb)</code></pre><br>Set the traceback associated with the exception to tb. Use Py_None to clear it.	https://docs.python.org/3.4/c-api/exceptions.html#c.PyException_SetTraceback
PyException_GetContext	A							https://docs.python.org			<pre><code>
PyObject* PyException_GetContext(PyObject *ex)</code></pre><br>Return the context (another exception instance during whose handling ex was raised) associated with the exception as a new reference, as accessible from Python through __context__. If there is no context associated, this returns NULL.	https://docs.python.org/3.4/c-api/exceptions.html#c.PyException_GetContext
PyException_SetContext	A							https://docs.python.org			<pre><code>
void PyException_SetContext(PyObject *ex, PyObject *ctx)</code></pre><br>Set the context associated with the exception to ctx. Use NULL to clear it. There is no type check to make sure that ctx is an exception instance. This steals a reference to ctx.	https://docs.python.org/3.4/c-api/exceptions.html#c.PyException_SetContext
PyException_GetCause	A							https://docs.python.org			<pre><code>
PyObject* PyException_GetCause(PyObject *ex)</code></pre><br>Return the cause (either an exception instance, or None, set by raise ... from ...) associated with the exception as a new reference, as accessible from Python through __cause__.	https://docs.python.org/3.4/c-api/exceptions.html#c.PyException_GetCause
PyException_SetCause	A							https://docs.python.org			<pre><code>
void PyException_SetCause(PyObject *ex, PyObject *cause)</code></pre><br>Set the cause associated with the exception to cause. Use NULL to clear it. There is no type check to make sure that cause is either an exception instance or None. This steals a reference to cause.	https://docs.python.org/3.4/c-api/exceptions.html#c.PyException_SetCause
PyUnicodeDecodeError_Create	A							https://docs.python.org			<pre><code>
PyObject* PyUnicodeDecodeError_Create(const char *encoding, const char *object, Py_ssize_t length, Py_ssize_t start, Py_ssize_t end, const char *reason)</code></pre><br>Create a UnicodeDecodeError object with the attributes encoding, object, length, start, end and reason. encoding and reason are UTF-8 encoded strings.	https://docs.python.org/3.4/c-api/exceptions.html#c.PyUnicodeDecodeError_Create
PyUnicodeEncodeError_Create	A							https://docs.python.org			<pre><code>
PyObject* PyUnicodeEncodeError_Create(const char *encoding, const Py_UNICODE *object, Py_ssize_t length, Py_ssize_t start, Py_ssize_t end, const char *reason)</code></pre><br>Create a UnicodeEncodeError object with the attributes encoding, object, length, start, end and reason. encoding and reason are UTF-8 encoded strings.	https://docs.python.org/3.4/c-api/exceptions.html#c.PyUnicodeEncodeError_Create
PyUnicodeTranslateError_Create	A							https://docs.python.org			<pre><code>
PyObject* PyUnicodeTranslateError_Create(const Py_UNICODE *object, Py_ssize_t length, Py_ssize_t start, Py_ssize_t end, const char *reason)</code></pre><br>Create a UnicodeTranslateError object with the attributes object, length, start, end and reason. reason is an UTF-8 encoded string.	https://docs.python.org/3.4/c-api/exceptions.html#c.PyUnicodeTranslateError_Create
PyUnicodeDecodeError_GetEncoding	A							https://docs.python.org			<pre><code>
PyObject* PyUnicodeDecodeError_GetEncoding(PyObject *exc)</code></pre><br>Return the encoding attribute of the given exception object.	https://docs.python.org/3.4/c-api/exceptions.html#c.PyUnicodeDecodeError_GetEncoding
PyUnicodeDecodeError_GetObject	A							https://docs.python.org			<pre><code>
PyObject* PyUnicodeDecodeError_GetObject(PyObject *exc)</code></pre><br>Return the object attribute of the given exception object.	https://docs.python.org/3.4/c-api/exceptions.html#c.PyUnicodeDecodeError_GetObject
PyUnicodeDecodeError_GetStart	A							https://docs.python.org			<pre><code>
int PyUnicodeDecodeError_GetStart(PyObject *exc, Py_ssize_t *start)</code></pre><br>Get the start attribute of the given exception object and place it into *start. start must not be NULL. Return 0 on success, -1 on failure.	https://docs.python.org/3.4/c-api/exceptions.html#c.PyUnicodeDecodeError_GetStart
PyUnicodeDecodeError_SetStart	A							https://docs.python.org			<pre><code>
int PyUnicodeDecodeError_SetStart(PyObject *exc, Py_ssize_t start)</code></pre><br>Set the start attribute of the given exception object to start. Return 0 on success, -1 on failure.	https://docs.python.org/3.4/c-api/exceptions.html#c.PyUnicodeDecodeError_SetStart
PyUnicodeDecodeError_GetEnd	A							https://docs.python.org			<pre><code>
int PyUnicodeDecodeError_GetEnd(PyObject *exc, Py_ssize_t *end)</code></pre><br>Get the end attribute of the given exception object and place it into *end. end must not be NULL. Return 0 on success, -1 on failure.	https://docs.python.org/3.4/c-api/exceptions.html#c.PyUnicodeDecodeError_GetEnd
PyUnicodeDecodeError_SetEnd	A							https://docs.python.org			<pre><code>
int PyUnicodeDecodeError_SetEnd(PyObject *exc, Py_ssize_t end)</code></pre><br>Set the end attribute of the given exception object to end. Return 0 on success, -1 on failure.	https://docs.python.org/3.4/c-api/exceptions.html#c.PyUnicodeDecodeError_SetEnd
PyUnicodeDecodeError_GetReason	A							https://docs.python.org			<pre><code>
PyObject* PyUnicodeDecodeError_GetReason(PyObject *exc)</code></pre><br>Return the reason attribute of the given exception object.	https://docs.python.org/3.4/c-api/exceptions.html#c.PyUnicodeDecodeError_GetReason
PyUnicodeDecodeError_SetReason	A							https://docs.python.org			<pre><code>
int PyUnicodeDecodeError_SetReason(PyObject *exc, const char *reason)</code></pre><br>Set the reason attribute of the given exception object to reason. Return 0 on success, -1 on failure.	https://docs.python.org/3.4/c-api/exceptions.html#c.PyUnicodeDecodeError_SetReason
Py_EnterRecursiveCall	A							https://docs.python.org			<pre><code>
int Py_EnterRecursiveCall(const char *where)</code></pre><br>Marks a point where a recursive C-level call is about to be performed.	https://docs.python.org/3.4/c-api/exceptions.html#c.Py_EnterRecursiveCall
Py_LeaveRecursiveCall	A							https://docs.python.org			<pre><code>
void Py_LeaveRecursiveCall()</code></pre><br>Ends a Py_EnterRecursiveCall(). Must be called once for each successful invocation of Py_EnterRecursiveCall().	https://docs.python.org/3.4/c-api/exceptions.html#c.Py_LeaveRecursiveCall
Py_ReprEnter	A							https://docs.python.org			<pre><code>
int Py_ReprEnter(PyObject *object)</code></pre><br>Called at the beginning of the tp_repr implementation to detect cycles.	https://docs.python.org/3.4/c-api/exceptions.html#c.Py_ReprEnter
Py_ReprLeave	A							https://docs.python.org			<pre><code>
void Py_ReprLeave(PyObject *object)</code></pre><br>Ends a Py_ReprEnter(). Must be called once for each invocation of Py_ReprEnter() that returns zero.	https://docs.python.org/3.4/c-api/exceptions.html#c.Py_ReprLeave
PyException_GetTraceback	A							https://docs.python.org			<pre><code>
PyObject* PyException_GetTraceback(PyObject *ex)</code></pre><br>Return the traceback associated with the exception as a new reference, as accessible from Python through __traceback__. If there is no traceback associated, this returns NULL.	https://docs.python.org/3.4/c-api/exceptions.html#c.PyException_GetTraceback
PyException_SetTraceback	A							https://docs.python.org			<pre><code>
int PyException_SetTraceback(PyObject *ex, PyObject *tb)</code></pre><br>Set the traceback associated with the exception to tb. Use Py_None to clear it.	https://docs.python.org/3.4/c-api/exceptions.html#c.PyException_SetTraceback
PyException_GetContext	A							https://docs.python.org			<pre><code>
PyObject* PyException_GetContext(PyObject *ex)</code></pre><br>Return the context (another exception instance during whose handling ex was raised) associated with the exception as a new reference, as accessible from Python through __context__. If there is no context associated, this returns NULL.	https://docs.python.org/3.4/c-api/exceptions.html#c.PyException_GetContext
PyException_SetContext	A							https://docs.python.org			<pre><code>
void PyException_SetContext(PyObject *ex, PyObject *ctx)</code></pre><br>Set the context associated with the exception to ctx. Use NULL to clear it. There is no type check to make sure that ctx is an exception instance. This steals a reference to ctx.	https://docs.python.org/3.4/c-api/exceptions.html#c.PyException_SetContext
PyException_GetCause	A							https://docs.python.org			<pre><code>
PyObject* PyException_GetCause(PyObject *ex)</code></pre><br>Return the cause (either an exception instance, or None, set by raise ... from ...) associated with the exception as a new reference, as accessible from Python through __cause__.	https://docs.python.org/3.4/c-api/exceptions.html#c.PyException_GetCause
PyException_SetCause	A							https://docs.python.org			<pre><code>
void PyException_SetCause(PyObject *ex, PyObject *cause)</code></pre><br>Set the cause associated with the exception to cause. Use NULL to clear it. There is no type check to make sure that cause is either an exception instance or None. This steals a reference to cause.	https://docs.python.org/3.4/c-api/exceptions.html#c.PyException_SetCause
PyUnicodeDecodeError_Create	A							https://docs.python.org			<pre><code>
PyObject* PyUnicodeDecodeError_Create(const char *encoding, const char *object, Py_ssize_t length, Py_ssize_t start, Py_ssize_t end, const char *reason)</code></pre><br>Create a UnicodeDecodeError object with the attributes encoding, object, length, start, end and reason. encoding and reason are UTF-8 encoded strings.	https://docs.python.org/3.4/c-api/exceptions.html#c.PyUnicodeDecodeError_Create
PyUnicodeEncodeError_Create	A							https://docs.python.org			<pre><code>
PyObject* PyUnicodeEncodeError_Create(const char *encoding, const Py_UNICODE *object, Py_ssize_t length, Py_ssize_t start, Py_ssize_t end, const char *reason)</code></pre><br>Create a UnicodeEncodeError object with the attributes encoding, object, length, start, end and reason. encoding and reason are UTF-8 encoded strings.	https://docs.python.org/3.4/c-api/exceptions.html#c.PyUnicodeEncodeError_Create
PyUnicodeTranslateError_Create	A							https://docs.python.org			<pre><code>
PyObject* PyUnicodeTranslateError_Create(const Py_UNICODE *object, Py_ssize_t length, Py_ssize_t start, Py_ssize_t end, const char *reason)</code></pre><br>Create a UnicodeTranslateError object with the attributes object, length, start, end and reason. reason is an UTF-8 encoded string.	https://docs.python.org/3.4/c-api/exceptions.html#c.PyUnicodeTranslateError_Create
PyUnicodeDecodeError_GetEncoding	A							https://docs.python.org			<pre><code>
PyObject* PyUnicodeDecodeError_GetEncoding(PyObject *exc)</code></pre><br>Return the encoding attribute of the given exception object.	https://docs.python.org/3.4/c-api/exceptions.html#c.PyUnicodeDecodeError_GetEncoding
PyUnicodeDecodeError_GetObject	A							https://docs.python.org			<pre><code>
PyObject* PyUnicodeDecodeError_GetObject(PyObject *exc)</code></pre><br>Return the object attribute of the given exception object.	https://docs.python.org/3.4/c-api/exceptions.html#c.PyUnicodeDecodeError_GetObject
PyUnicodeDecodeError_GetStart	A							https://docs.python.org			<pre><code>
int PyUnicodeDecodeError_GetStart(PyObject *exc, Py_ssize_t *start)</code></pre><br>Get the start attribute of the given exception object and place it into *start. start must not be NULL. Return 0 on success, -1 on failure.	https://docs.python.org/3.4/c-api/exceptions.html#c.PyUnicodeDecodeError_GetStart
PyUnicodeDecodeError_SetStart	A							https://docs.python.org			<pre><code>
int PyUnicodeDecodeError_SetStart(PyObject *exc, Py_ssize_t start)</code></pre><br>Set the start attribute of the given exception object to start. Return 0 on success, -1 on failure.	https://docs.python.org/3.4/c-api/exceptions.html#c.PyUnicodeDecodeError_SetStart
PyUnicodeDecodeError_GetEnd	A							https://docs.python.org			<pre><code>
int PyUnicodeDecodeError_GetEnd(PyObject *exc, Py_ssize_t *end)</code></pre><br>Get the end attribute of the given exception object and place it into *end. end must not be NULL. Return 0 on success, -1 on failure.	https://docs.python.org/3.4/c-api/exceptions.html#c.PyUnicodeDecodeError_GetEnd
PyUnicodeDecodeError_SetEnd	A							https://docs.python.org			<pre><code>
int PyUnicodeDecodeError_SetEnd(PyObject *exc, Py_ssize_t end)</code></pre><br>Set the end attribute of the given exception object to end. Return 0 on success, -1 on failure.	https://docs.python.org/3.4/c-api/exceptions.html#c.PyUnicodeDecodeError_SetEnd
PyUnicodeDecodeError_GetReason	A							https://docs.python.org			<pre><code>
PyObject* PyUnicodeDecodeError_GetReason(PyObject *exc)</code></pre><br>Return the reason attribute of the given exception object.	https://docs.python.org/3.4/c-api/exceptions.html#c.PyUnicodeDecodeError_GetReason
PyUnicodeDecodeError_SetReason	A							https://docs.python.org			<pre><code>
int PyUnicodeDecodeError_SetReason(PyObject *exc, const char *reason)</code></pre><br>Set the reason attribute of the given exception object to reason. Return 0 on success, -1 on failure.	https://docs.python.org/3.4/c-api/exceptions.html#c.PyUnicodeDecodeError_SetReason
Py_EnterRecursiveCall	A							https://docs.python.org			<pre><code>
int Py_EnterRecursiveCall(const char *where)</code></pre><br>Marks a point where a recursive C-level call is about to be performed.	https://docs.python.org/3.4/c-api/exceptions.html#c.Py_EnterRecursiveCall
Py_LeaveRecursiveCall	A							https://docs.python.org			<pre><code>
void Py_LeaveRecursiveCall()</code></pre><br>Ends a Py_EnterRecursiveCall(). Must be called once for each successful invocation of Py_EnterRecursiveCall().	https://docs.python.org/3.4/c-api/exceptions.html#c.Py_LeaveRecursiveCall
Py_ReprEnter	A							https://docs.python.org			<pre><code>
int Py_ReprEnter(PyObject *object)</code></pre><br>Called at the beginning of the tp_repr implementation to detect cycles.	https://docs.python.org/3.4/c-api/exceptions.html#c.Py_ReprEnter
Py_ReprLeave	A							https://docs.python.org			<pre><code>
void Py_ReprLeave(PyObject *object)</code></pre><br>Ends a Py_ReprEnter(). Must be called once for each invocation of Py_ReprEnter() that returns zero.	https://docs.python.org/3.4/c-api/exceptions.html#c.Py_ReprLeave
PyFile_FromFd	A							https://docs.python.org			<pre><code>
PyFile_FromFd(int fd, const char *name, const char *mode, int buffering, const char *encoding, const char *errors, const char *newline, int closefd)</code></pre><br>Create a Python file object from the file descriptor of an already opened file fd. The arguments name, encoding, errors and newline can be NULL to use the defaults; buffering can be -1 to use the default. name is ignored and kept for backward compatibility. Return NULL on failure. For a more comprehensive description of the arguments, please refer to the io.open() function documentation.	https://docs.python.org/3.4/c-api/file.html#c.PyFile_FromFd
PyObject_AsFileDescriptor	A							https://docs.python.org			<pre><code>
int PyObject_AsFileDescriptor(PyObject *p)</code></pre><br>Return the file descriptor associated with p as an int. If the object is an integer, its value is returned. If not, the object’s fileno() method is called if it exists; the method must return an integer, which is returned as the file descriptor value. Sets an exception and returns -1 on failure.	https://docs.python.org/3.4/c-api/file.html#c.PyObject_AsFileDescriptor
PyFile_GetLine	A							https://docs.python.org			<pre><code>
PyObject* PyFile_GetLine(PyObject *p, int n)</code></pre><br>Equivalent to p.readline([n]), this function reads one line from the object p. p may be a file object or any object with a readline() method. If n is 0, exactly one line is read, regardless of the length of the line. If n is greater than 0, no more than n bytes will be read from the file; a partial line can be returned. In both cases, an empty string is returned if the end of the file is reached immediately. If n is less than 0, however, one line is read regardless of length, but EOFError is raised if the end of the file is reached immediately.	https://docs.python.org/3.4/c-api/file.html#c.PyFile_GetLine
PyFile_WriteObject	A							https://docs.python.org			<pre><code>
int PyFile_WriteObject(PyObject *obj, PyObject *p, int flags)</code></pre><br>Write object obj to file object p. The only supported flag for flags is Py_PRINT_RAW; if given, the str() of the object is written instead of the repr(). Return 0 on success or -1 on failure; the appropriate exception will be set.	https://docs.python.org/3.4/c-api/file.html#c.PyFile_WriteObject
PyFile_WriteString	A							https://docs.python.org			<pre><code>
int PyFile_WriteString(const char *s, PyObject *p)</code></pre><br>Write string s to file object p. Return 0 on success or -1 on failure; the appropriate exception will be set.	https://docs.python.org/3.4/c-api/file.html#c.PyFile_WriteString
PyFloat_Check	A							https://docs.python.org			<pre><code>
int PyFloat_Check(PyObject *p)</code></pre><br>Return true if its argument is a PyFloatObject or a subtype of PyFloatObject.	https://docs.python.org/3.4/c-api/float.html#c.PyFloat_Check
PyFloat_CheckExact	A							https://docs.python.org			<pre><code>
int PyFloat_CheckExact(PyObject *p)</code></pre><br>Return true if its argument is a PyFloatObject, but not a subtype of PyFloatObject.	https://docs.python.org/3.4/c-api/float.html#c.PyFloat_CheckExact
PyFloat_FromString	A							https://docs.python.org			<pre><code>
PyObject* PyFloat_FromString(PyObject *str)</code></pre><br>Create a PyFloatObject object based on the string value in str, or NULL on failure.	https://docs.python.org/3.4/c-api/float.html#c.PyFloat_FromString
PyFloat_FromDouble	A							https://docs.python.org			<pre><code>
PyObject* PyFloat_FromDouble(double v)</code></pre><br>Create a PyFloatObject object from v, or NULL on failure.	https://docs.python.org/3.4/c-api/float.html#c.PyFloat_FromDouble
PyFloat_AsDouble	A							https://docs.python.org			<pre><code>
double PyFloat_AsDouble(PyObject *pyfloat)</code></pre><br>Return a C double representation of the contents of pyfloat. If pyfloat is not a Python floating point object but has a __float__() method, this method will first be called to convert pyfloat into a float. This method returns -1.0 upon failure, so one should call PyErr_Occurred() to check for errors.	https://docs.python.org/3.4/c-api/float.html#c.PyFloat_AsDouble
PyFloat_AS_DOUBLE	A							https://docs.python.org			<pre><code>
double PyFloat_AS_DOUBLE(PyObject *pyfloat)</code></pre><br>Return a C double representation of the contents of pyfloat, but without error checking.	https://docs.python.org/3.4/c-api/float.html#c.PyFloat_AS_DOUBLE
PyFloat_GetInfo	A							https://docs.python.org			<pre><code>
PyObject* PyFloat_GetInfo(void)</code></pre><br>Return a structseq instance which contains information about the precision, minimum and maximum values of a float. It’s a thin wrapper around the header file float.h.	https://docs.python.org/3.4/c-api/float.html#c.PyFloat_GetInfo
PyFloat_GetMax	A							https://docs.python.org			<pre><code>
double PyFloat_GetMax()</code></pre><br>Return the maximum representable finite float DBL_MAX as C double.	https://docs.python.org/3.4/c-api/float.html#c.PyFloat_GetMax
PyFloat_GetMin	A							https://docs.python.org			<pre><code>
double PyFloat_GetMin()</code></pre><br>Return the minimum normalized positive float DBL_MIN as C double.	https://docs.python.org/3.4/c-api/float.html#c.PyFloat_GetMin
PyFloat_ClearFreeList	A							https://docs.python.org			<pre><code>
int PyFloat_ClearFreeList()</code></pre><br>Clear the float free list. Return the number of items that could not be freed.	https://docs.python.org/3.4/c-api/float.html#c.PyFloat_ClearFreeList
PyFunction_Check	A							https://docs.python.org			<pre><code>
int PyFunction_Check(PyObject *o)</code></pre><br>Return true if o is a function object (has type PyFunction_Type). The parameter must not be NULL.	https://docs.python.org/3.4/c-api/function.html#c.PyFunction_Check
PyFunction_New	A							https://docs.python.org			<pre><code>
PyObject* PyFunction_New(PyObject *code, PyObject *globals)</code></pre><br>Return a new function object associated with the code object code. globals must be a dictionary with the global variables accessible to the function.	https://docs.python.org/3.4/c-api/function.html#c.PyFunction_New
PyFunction_NewWithQualName	A							https://docs.python.org			<pre><code>
PyObject* PyFunction_NewWithQualName(PyObject *code, PyObject *globals, PyObject *qualname)</code></pre><br>As PyFunction_New(), but also allows to set the function object’s __qualname__ attribute. qualname should be a unicode object or NULL; if NULL, the __qualname__ attribute is set to the same value as its __name__ attribute.	https://docs.python.org/3.4/c-api/function.html#c.PyFunction_NewWithQualName
PyFunction_GetCode	A							https://docs.python.org			<pre><code>
PyObject* PyFunction_GetCode(PyObject *op)</code></pre><br>Return the code object associated with the function object op.	https://docs.python.org/3.4/c-api/function.html#c.PyFunction_GetCode
PyFunction_GetGlobals	A							https://docs.python.org			<pre><code>
PyObject* PyFunction_GetGlobals(PyObject *op)</code></pre><br>Return the globals dictionary associated with the function object op.	https://docs.python.org/3.4/c-api/function.html#c.PyFunction_GetGlobals
PyFunction_GetModule	A							https://docs.python.org			<pre><code>
PyObject* PyFunction_GetModule(PyObject *op)</code></pre><br>Return the __module__ attribute of the function object op. This is normally a string containing the module name, but can be set to any other object by Python code.	https://docs.python.org/3.4/c-api/function.html#c.PyFunction_GetModule
PyFunction_GetDefaults	A							https://docs.python.org			<pre><code>
PyObject* PyFunction_GetDefaults(PyObject *op)</code></pre><br>Return the argument default values of the function object op. This can be a tuple of arguments or NULL.	https://docs.python.org/3.4/c-api/function.html#c.PyFunction_GetDefaults
PyFunction_SetDefaults	A							https://docs.python.org			<pre><code>
int PyFunction_SetDefaults(PyObject *op, PyObject *defaults)</code></pre><br>Set the argument default values for the function object op. defaults must be Py_None or a tuple.	https://docs.python.org/3.4/c-api/function.html#c.PyFunction_SetDefaults
PyFunction_GetClosure	A							https://docs.python.org			<pre><code>
PyObject* PyFunction_GetClosure(PyObject *op)</code></pre><br>Return the closure associated with the function object op. This can be NULL or a tuple of cell objects.	https://docs.python.org/3.4/c-api/function.html#c.PyFunction_GetClosure
PyFunction_SetClosure	A							https://docs.python.org			<pre><code>
int PyFunction_SetClosure(PyObject *op, PyObject *closure)</code></pre><br>Set the closure associated with the function object op. closure must be Py_None or a tuple of cell objects.	https://docs.python.org/3.4/c-api/function.html#c.PyFunction_SetClosure
PyFunction_GetAnnotations	A							https://docs.python.org			<pre><code>
PyObject *PyFunction_GetAnnotations(PyObject *op)</code></pre><br>Return the annotations of the function object op. This can be a mutable dictionary or NULL.	https://docs.python.org/3.4/c-api/function.html#c.PyFunction_GetAnnotations
PyFunction_SetAnnotations	A							https://docs.python.org			<pre><code>
int PyFunction_SetAnnotations(PyObject *op, PyObject *annotations)</code></pre><br>Set the annotations for the function object op. annotations must be a dictionary or Py_None.	https://docs.python.org/3.4/c-api/function.html#c.PyFunction_SetAnnotations
PyObject_GC_New	A							https://docs.python.org			<pre><code>
TYPE* PyObject_GC_New(TYPE, PyTypeObject *type)</code></pre><br>Analogous to PyObject_New() but for container objects with the Py_TPFLAGS_HAVE_GC flag set.	https://docs.python.org/3.4/c-api/gcsupport.html#c.PyObject_GC_New
PyObject_GC_NewVar	A							https://docs.python.org			<pre><code>
TYPE* PyObject_GC_NewVar(TYPE, PyTypeObject *type, Py_ssize_t size)</code></pre><br>Analogous to PyObject_NewVar() but for container objects with the Py_TPFLAGS_HAVE_GC flag set.	https://docs.python.org/3.4/c-api/gcsupport.html#c.PyObject_GC_NewVar
PyObject_GC_Resize	A							https://docs.python.org			<pre><code>
TYPE* PyObject_GC_Resize(TYPE, PyVarObject *op, Py_ssize_t newsize)</code></pre><br>Resize an object allocated by PyObject_NewVar(). Returns the resized object or NULL on failure.	https://docs.python.org/3.4/c-api/gcsupport.html#c.PyObject_GC_Resize
PyObject_GC_Track	A							https://docs.python.org			<pre><code>
void PyObject_GC_Track(PyObject *op)</code></pre><br>Adds the object op to the set of container objects tracked by the collector. The collector can run at unexpected times so objects must be valid while being tracked. This should be called once all the fields followed by the tp_traverse handler become valid, usually near the end of the constructor.	https://docs.python.org/3.4/c-api/gcsupport.html#c.PyObject_GC_Track
_PyObject_GC_TRACK	A							https://docs.python.org			<pre><code>
void _PyObject_GC_TRACK(PyObject *op)</code></pre><br>A macro version of PyObject_GC_Track(). It should not be used for extension modules.	https://docs.python.org/3.4/c-api/gcsupport.html#c._PyObject_GC_TRACK
PyObject_GC_Del	A							https://docs.python.org			<pre><code>
void PyObject_GC_Del(void *op)</code></pre><br>Releases memory allocated to an object using PyObject_GC_New() or PyObject_GC_NewVar().	https://docs.python.org/3.4/c-api/gcsupport.html#c.PyObject_GC_Del
PyObject_GC_UnTrack	A							https://docs.python.org			<pre><code>
void PyObject_GC_UnTrack(void *op)</code></pre><br>Remove the object op from the set of container objects tracked by the collector. Note that PyObject_GC_Track() can be called again on this object to add it back to the set of tracked objects. The deallocator (tp_dealloc handler) should call this for the object before any of the fields used by the tp_traverse handler become invalid.	https://docs.python.org/3.4/c-api/gcsupport.html#c.PyObject_GC_UnTrack
_PyObject_GC_UNTRACK	A							https://docs.python.org			<pre><code>
void _PyObject_GC_UNTRACK(PyObject *op)</code></pre><br>A macro version of PyObject_GC_UnTrack(). It should not be used for extension modules.	https://docs.python.org/3.4/c-api/gcsupport.html#c._PyObject_GC_UNTRACK
Py_VISIT	A							https://docs.python.org			<pre><code>
void Py_VISIT(PyObject *o)</code></pre><br>Call the visit callback, with arguments o and arg. If visit returns a non-zero value, then return it. Using this macro, tp_traverse handlers look like:	https://docs.python.org/3.4/c-api/gcsupport.html#c.Py_VISIT
PyGen_Check	A							https://docs.python.org			<pre><code>
int PyGen_Check(ob)</code></pre><br>Return true if ob is a generator object; ob must not be NULL.	https://docs.python.org/3.4/c-api/gen.html#c.PyGen_Check
PyGen_CheckExact	A							https://docs.python.org			<pre><code>
int PyGen_CheckExact(ob)</code></pre><br>Return true if ob‘s type is PyGen_Type is a generator object; ob must not be NULL.	https://docs.python.org/3.4/c-api/gen.html#c.PyGen_CheckExact
PyGen_New	A							https://docs.python.org			<pre><code>
PyObject* PyGen_New(PyFrameObject *frame)</code></pre><br>Create and return a new generator object based on the frame object. A reference to frame is stolen by this function. The parameter must not be NULL.	https://docs.python.org/3.4/c-api/gen.html#c.PyGen_New
PyImport_ImportModule	A							https://docs.python.org			<pre><code>
PyObject* PyImport_ImportModule(const char *name)</code></pre><br>This is a simplified interface to PyImport_ImportModuleEx() below, leaving the globals and locals arguments set to NULL and level set to 0. When the name argument contains a dot (when it specifies a submodule of a package), the fromlist argument is set to the list ['*'] so that the return value is the named module rather than the top-level package containing it as would otherwise be the case. (Unfortunately, this has an additional side effect when name in fact specifies a subpackage instead of a submodule: the submodules specified in the package’s __all__ variable are loaded.) Return a new reference to the imported module, or NULL with an exception set on failure. A failing import of a module doesn’t leave the module in sys.modules.	https://docs.python.org/3.4/c-api/import.html#c.PyImport_ImportModule
PyImport_ImportModuleNoBlock	A							https://docs.python.org			<pre><code>
PyObject* PyImport_ImportModuleNoBlock(const char *name)</code></pre><br>This function is a deprecated alias of PyImport_ImportModule().	https://docs.python.org/3.4/c-api/import.html#c.PyImport_ImportModuleNoBlock
PyImport_ImportModuleEx	A							https://docs.python.org			<pre><code>
PyObject* PyImport_ImportModuleEx(const char *name, PyObject *globals, PyObject *locals, PyObject *fromlist)</code></pre><br>Import a module. This is best described by referring to the built-in Python function __import__().	https://docs.python.org/3.4/c-api/import.html#c.PyImport_ImportModuleEx
PyImport_ImportModuleLevelObject	A							https://docs.python.org			<pre><code>
PyObject* PyImport_ImportModuleLevelObject(PyObject *name, PyObject *globals, PyObject *locals, PyObject *fromlist, int level)</code></pre><br>Import a module. This is best described by referring to the built-in Python function __import__(), as the standard __import__() function calls this function directly.	https://docs.python.org/3.4/c-api/import.html#c.PyImport_ImportModuleLevelObject
PyImport_ImportModuleLevel	A							https://docs.python.org			<pre><code>
PyObject* PyImport_ImportModuleLevel(const char *name, PyObject *globals, PyObject *locals, PyObject *fromlist, int level)</code></pre><br>Similar to PyImport_ImportModuleLevelObject(), but the name is an UTF-8 encoded string instead of a Unicode object.	https://docs.python.org/3.4/c-api/import.html#c.PyImport_ImportModuleLevel
PyImport_Import	A							https://docs.python.org			<pre><code>
PyObject* PyImport_Import(PyObject *name)</code></pre><br>This is a higher-level interface that calls the current “import hook function” (with an explicit level of 0, meaning absolute import). It invokes the __import__() function from the __builtins__ of the current globals. This means that the import is done using whatever import hooks are installed in the current environment.	https://docs.python.org/3.4/c-api/import.html#c.PyImport_Import
PyImport_ReloadModule	A							https://docs.python.org			<pre><code>
PyObject* PyImport_ReloadModule(PyObject *m)</code></pre><br>Reload a module. Return a new reference to the reloaded module, or NULL with an exception set on failure (the module still exists in this case).	https://docs.python.org/3.4/c-api/import.html#c.PyImport_ReloadModule
PyImport_AddModuleObject	A							https://docs.python.org			<pre><code>
PyObject* PyImport_AddModuleObject(PyObject *name)</code></pre><br>Return the module object corresponding to a module name. The name argument may be of the form package.module. First check the modules dictionary if there’s one there, and if not, create a new one and insert it in the modules dictionary. Return NULL with an exception set on failure.	https://docs.python.org/3.4/c-api/import.html#c.PyImport_AddModuleObject
PyImport_AddModule	A							https://docs.python.org			<pre><code>
PyObject* PyImport_AddModule(const char *name)</code></pre><br>Similar to PyImport_AddModuleObject(), but the name is a UTF-8 encoded string instead of a Unicode object.	https://docs.python.org/3.4/c-api/import.html#c.PyImport_AddModule
PyImport_ExecCodeModule	A							https://docs.python.org			<pre><code>
PyObject* PyImport_ExecCodeModule(const char *name, PyObject *co)</code></pre><br>Given a module name (possibly of the form package.module) and a code object read from a Python bytecode file or obtained from the built-in function compile(), load the module. Return a new reference to the module object, or NULL with an exception set if an error occurred. name is removed from sys.modules in error cases, even if name was already in sys.modules on entry to PyImport_ExecCodeModule(). Leaving incompletely initialized modules in sys.modules is dangerous, as imports of such modules have no way to know that the module object is an unknown (and probably damaged with respect to the module author’s intents) state.	https://docs.python.org/3.4/c-api/import.html#c.PyImport_ExecCodeModule
PyImport_ExecCodeModuleEx	A							https://docs.python.org			<pre><code>
PyObject* PyImport_ExecCodeModuleEx(const char *name, PyObject *co, const char *pathname)</code></pre><br>Like PyImport_ExecCodeModule(), but the __file__ attribute of the module object is set to pathname if it is non-NULL.	https://docs.python.org/3.4/c-api/import.html#c.PyImport_ExecCodeModuleEx
PyImport_ExecCodeModuleObject	A							https://docs.python.org			<pre><code>
PyObject* PyImport_ExecCodeModuleObject(PyObject *name, PyObject *co, PyObject *pathname, PyObject *cpathname)</code></pre><br>Like PyImport_ExecCodeModuleEx(), but the __cached__ attribute of the module object is set to cpathname if it is non-NULL. Of the three functions, this is the preferred one to use.	https://docs.python.org/3.4/c-api/import.html#c.PyImport_ExecCodeModuleObject
PyImport_ExecCodeModuleWithPathnames	A							https://docs.python.org			<pre><code>
PyObject* PyImport_ExecCodeModuleWithPathnames(const char *name, PyObject *co, const char *pathname, const char *cpathname)</code></pre><br>Like PyImport_ExecCodeModuleObject(), but name, pathname and cpathname are UTF-8 encoded strings. Attempts are also made to figure out what the value for pathname should be from cpathname if the former is set to NULL.	https://docs.python.org/3.4/c-api/import.html#c.PyImport_ExecCodeModuleWithPathnames
PyImport_GetMagicNumber	A							https://docs.python.org			<pre><code>
long PyImport_GetMagicNumber()</code></pre><br>Return the magic number for Python bytecode files (a.k.a. .pyc and .pyo files). The magic number should be present in the first four bytes of the bytecode file, in little-endian byte order. Returns -1 on error.	https://docs.python.org/3.4/c-api/import.html#c.PyImport_GetMagicNumber
PyImport_GetMagicTag	A							https://docs.python.org			<pre><code>
const char * PyImport_GetMagicTag()</code></pre><br>Return the magic tag string for PEP 3147 format Python bytecode file names. Keep in mind that the value at sys.implementation.cache_tag is authoritative and should be used instead of this function.	https://docs.python.org/3.4/c-api/import.html#c.PyImport_GetMagicTag
PyImport_GetModuleDict	A							https://docs.python.org			<pre><code>
PyObject* PyImport_GetModuleDict()</code></pre><br>Return the dictionary used for the module administration (a.k.a. sys.modules). Note that this is a per-interpreter variable.	https://docs.python.org/3.4/c-api/import.html#c.PyImport_GetModuleDict
PyImport_GetImporter	A							https://docs.python.org			<pre><code>
PyObject* PyImport_GetImporter(PyObject *path)</code></pre><br>Return an importer object for a sys.path/pkg.__path__ item path, possibly by fetching it from the sys.path_importer_cache dict. If it wasn’t yet cached, traverse sys.path_hooks until a hook is found that can handle the path item. Return None if no hook could; this tells our caller it should fall back to the built-in import mechanism. Cache the result in sys.path_importer_cache. Return a new reference to the importer object.	https://docs.python.org/3.4/c-api/import.html#c.PyImport_GetImporter
_PyImport_Init	A							https://docs.python.org			<pre><code>
void _PyImport_Init()</code></pre><br>Initialize the import mechanism. For internal use only.	https://docs.python.org/3.4/c-api/import.html#c._PyImport_Init
PyImport_Cleanup	A							https://docs.python.org			<pre><code>
void PyImport_Cleanup()</code></pre><br>Empty the module table. For internal use only.	https://docs.python.org/3.4/c-api/import.html#c.PyImport_Cleanup
_PyImport_Fini	A							https://docs.python.org			<pre><code>
void _PyImport_Fini()</code></pre><br>Finalize the import mechanism. For internal use only.	https://docs.python.org/3.4/c-api/import.html#c._PyImport_Fini
_PyImport_FindExtension	A							https://docs.python.org			<pre><code>
PyObject* _PyImport_FindExtension(char *, char *)</code></pre><br>For internal use only.	https://docs.python.org/3.4/c-api/import.html#c._PyImport_FindExtension
_PyImport_FixupExtension	A							https://docs.python.org			<pre><code>
PyObject* _PyImport_FixupExtension(char *, char *)</code></pre><br>For internal use only.	https://docs.python.org/3.4/c-api/import.html#c._PyImport_FixupExtension
PyImport_ImportFrozenModuleObject	A							https://docs.python.org			<pre><code>
int PyImport_ImportFrozenModuleObject(PyObject *name)</code></pre><br>Load a frozen module named name. Return 1 for success, 0 if the module is not found, and -1 with an exception set if the initialization failed. To access the imported module on a successful load, use PyImport_ImportModule(). (Note the misnomer — this function would reload the module if it was already imported.)	https://docs.python.org/3.4/c-api/import.html#c.PyImport_ImportFrozenModuleObject
PyImport_ImportFrozenModule	A							https://docs.python.org			<pre><code>
int PyImport_ImportFrozenModule(const char *name)</code></pre><br>Similar to PyImport_ImportFrozenModuleObject(), but the name is a UTF-8 encoded string instead of a Unicode object.	https://docs.python.org/3.4/c-api/import.html#c.PyImport_ImportFrozenModule
PyImport_AppendInittab	A							https://docs.python.org			<pre><code>
int PyImport_AppendInittab(const char *name, PyObject* (*initfunc)(void))</code></pre><br>Add a single module to the existing table of built-in modules. This is a convenience wrapper around PyImport_ExtendInittab(), returning -1 if the table could not be extended. The new module can be imported by the name name, and uses the function initfunc as the initialization function called on the first attempted import. This should be called before Py_Initialize().	https://docs.python.org/3.4/c-api/import.html#c.PyImport_AppendInittab
PyImport_ExtendInittab	A							https://docs.python.org			<pre><code>
int PyImport_ExtendInittab(struct _inittab *newtab)</code></pre><br>Add a collection of modules to the table of built-in modules. The newtab array must end with a sentinel entry which contains NULL for the name field; failure to provide the sentinel value can result in a memory fault. Returns 0 on success or -1 if insufficient memory could be allocated to extend the internal table. In the event of failure, no modules are added to the internal table. This should be called before Py_Initialize().	https://docs.python.org/3.4/c-api/import.html#c.PyImport_ExtendInittab
Py_Initialize	A							https://docs.python.org			<pre><code>
void Py_Initialize()</code></pre><br>Initialize the Python interpreter. In an application embedding Python, this should be called before using any other Python/C API functions; with the exception of Py_SetProgramName(), Py_SetPythonHome() and Py_SetPath(). This initializes the table of loaded modules (sys.modules), and creates the fundamental modules builtins, __main__ and sys. It also initializes the module search path (sys.path). It does not set sys.argv; use PySys_SetArgvEx() for that. This is a no-op when called for a second time (without calling Py_Finalize() first). There is no return value; it is a fatal error if the initialization fails.	https://docs.python.org/3.4/c-api/init.html#c.Py_Initialize
Py_InitializeEx	A							https://docs.python.org			<pre><code>
void Py_InitializeEx(int initsigs)</code></pre><br>This function works like Py_Initialize() if initsigs is 1. If initsigs is 0, it skips initialization registration of signal handlers, which might be useful when Python is embedded.	https://docs.python.org/3.4/c-api/init.html#c.Py_InitializeEx
Py_IsInitialized	A							https://docs.python.org			<pre><code>
int Py_IsInitialized()</code></pre><br>Return true (nonzero) when the Python interpreter has been initialized, false (zero) if not. After Py_Finalize() is called, this returns false until Py_Initialize() is called again.	https://docs.python.org/3.4/c-api/init.html#c.Py_IsInitialized
Py_Finalize	A							https://docs.python.org			<pre><code>
void Py_Finalize()</code></pre><br>Undo all initializations made by Py_Initialize() and subsequent use of Python/C API functions, and destroy all sub-interpreters (see Py_NewInterpreter() below) that were created and not yet destroyed since the last call to Py_Initialize(). Ideally, this frees all memory allocated by the Python interpreter. This is a no-op when called for a second time (without calling Py_Initialize() again first). There is no return value; errors during finalization are ignored.	https://docs.python.org/3.4/c-api/init.html#c.Py_Finalize
Py_SetStandardStreamEncoding	A							https://docs.python.org			<pre><code>
int Py_SetStandardStreamEncoding(const char *encoding, const char *errors)</code></pre><br>This function should be called before Py_Initialize(), if it is called at all. It specifies which encoding and error handling to use with standard IO, with the same meanings as in str.encode().	https://docs.python.org/3.4/c-api/init.html#c.Py_SetStandardStreamEncoding
Py_SetProgramName	A							https://docs.python.org			<pre><code>
void Py_SetProgramName(wchar_t *name)</code></pre><br>This function should be called before Py_Initialize() is called for the first time, if it is called at all. It tells the interpreter the value of the argv[0] argument to the main() function of the program (converted to wide characters). This is used by Py_GetPath() and some other functions below to find the Python run-time libraries relative to the interpreter executable. The default value is 'python'. The argument should point to a zero-terminated wide character string in static storage whose contents will not change for the duration of the program’s execution. No code in the Python interpreter will change the contents of this storage.	https://docs.python.org/3.4/c-api/init.html#c.Py_SetProgramName
Py_GetProgramName	A							https://docs.python.org			<pre><code>
wchar* Py_GetProgramName()</code></pre><br>Return the program name set with Py_SetProgramName(), or the default. The returned string points into static storage; the caller should not modify its value.	https://docs.python.org/3.4/c-api/init.html#c.Py_GetProgramName
Py_GetPrefix	A							https://docs.python.org			<pre><code>
wchar_t* Py_GetPrefix()</code></pre><br>Return the prefix for installed platform-independent files. This is derived through a number of complicated rules from the program name set with Py_SetProgramName() and some environment variables; for example, if the program name is '/usr/local/bin/python', the prefix is '/usr/local'. The returned string points into static storage; the caller should not modify its value. This corresponds to the prefix variable in the top-level Makefile and the --prefix argument to the configure script at build time. The value is available to Python code as sys.prefix. It is only useful on Unix. See also the next function.	https://docs.python.org/3.4/c-api/init.html#c.Py_GetPrefix
Py_GetExecPrefix	A							https://docs.python.org			<pre><code>
wchar_t* Py_GetExecPrefix()</code></pre><br>Return the exec-prefix for installed platform-dependent files. This is derived through a number of complicated rules from the program name set with Py_SetProgramName() and some environment variables; for example, if the program name is '/usr/local/bin/python', the exec-prefix is '/usr/local'. The returned string points into static storage; the caller should not modify its value. This corresponds to the exec_prefix variable in the top-level Makefile and the --exec-prefix argument to the configure script at build time. The value is available to Python code as sys.exec_prefix. It is only useful on Unix.	https://docs.python.org/3.4/c-api/init.html#c.Py_GetExecPrefix
Py_GetProgramFullPath	A							https://docs.python.org			<pre><code>
wchar_t* Py_GetProgramFullPath()</code></pre><br>Return the full program name of the Python executable; this is computed as a side-effect of deriving the default module search path from the program name (set by Py_SetProgramName() above). The returned string points into static storage; the caller should not modify its value. The value is available to Python code as sys.executable.	https://docs.python.org/3.4/c-api/init.html#c.Py_GetProgramFullPath
Py_GetPath	A							https://docs.python.org			<pre><code>
wchar_t* Py_GetPath()</code></pre><br>Return the default module search path; this is computed from the program name (set by Py_SetProgramName() above) and some environment variables. The returned string consists of a series of directory names separated by a platform dependent delimiter character. The delimiter character is ':' on Unix and Mac OS X, ';' on Windows. The returned string points into static storage; the caller should not modify its value. The list sys.path is initialized with this value on interpreter startup; it can be (and usually is) modified later to change the search path for loading modules.	https://docs.python.org/3.4/c-api/init.html#c.Py_GetPath
Py_SetPath	A							https://docs.python.org			<pre><code>
void Py_SetPath(const wchar_t *)</code></pre><br>Set the default module search path. If this function is called before Py_Initialize(), then Py_GetPath() won’t attempt to compute a default search path but uses the one provided instead. This is useful if Python is embedded by an application that has full knowledge of the location of all modules. The path components should be separated by the platform dependent delimiter character, which is ':' on Unix and Mac OS X, ';' on Windows.	https://docs.python.org/3.4/c-api/init.html#c.Py_SetPath
Py_GetVersion	A							https://docs.python.org			<pre><code>
const char* Py_GetVersion()</code></pre><br>Return the version of this Python interpreter. This is a string that looks something like	https://docs.python.org/3.4/c-api/init.html#c.Py_GetVersion
Py_GetPlatform	A							https://docs.python.org			<pre><code>
const char* Py_GetPlatform()</code></pre><br>Return the platform identifier for the current platform. On Unix, this is formed from the “official” name of the operating system, converted to lower case, followed by the major revision number; e.g., for Solaris 2.x, which is also known as SunOS 5.x, the value is 'sunos5'. On Mac OS X, it is 'darwin'. On Windows, it is 'win'. The returned string points into static storage; the caller should not modify its value. The value is available to Python code as sys.platform.	https://docs.python.org/3.4/c-api/init.html#c.Py_GetPlatform
Py_GetCopyright	A							https://docs.python.org			<pre><code>
const char* Py_GetCopyright()</code></pre><br>Return the official copyright string for the current Python version, for example	https://docs.python.org/3.4/c-api/init.html#c.Py_GetCopyright
Py_GetCompiler	A							https://docs.python.org			<pre><code>
const char* Py_GetCompiler()</code></pre><br>Return an indication of the compiler used to build the current Python version, in square brackets, for example:	https://docs.python.org/3.4/c-api/init.html#c.Py_GetCompiler
Py_GetBuildInfo	A							https://docs.python.org			<pre><code>
const char* Py_GetBuildInfo()</code></pre><br>Return information about the sequence number and build date and time of the current Python interpreter instance, for example	https://docs.python.org/3.4/c-api/init.html#c.Py_GetBuildInfo
PySys_SetArgvEx	A							https://docs.python.org			<pre><code>
void PySys_SetArgvEx(int argc, wchar_t **argv, int updatepath)</code></pre><br>Set sys.argv based on argc and argv. These parameters are similar to those passed to the program’s main() function with the difference that the first entry should refer to the script file to be executed rather than the executable hosting the Python interpreter. If there isn’t a script that will be run, the first entry in argv can be an empty string. If this function fails to initialize sys.argv, a fatal condition is signalled using Py_FatalError().	https://docs.python.org/3.4/c-api/init.html#c.PySys_SetArgvEx
PySys_SetArgv	A							https://docs.python.org			<pre><code>
void PySys_SetArgv(int argc, wchar_t **argv)</code></pre><br>This function works like PySys_SetArgvEx() with updatepath set to 1 unless the python interpreter was started with the -I.	https://docs.python.org/3.4/c-api/init.html#c.PySys_SetArgv
Py_SetPythonHome	A							https://docs.python.org			<pre><code>
void Py_SetPythonHome(wchar_t *home)</code></pre><br>Set the default “home” directory, that is, the location of the standard Python libraries. See PYTHONHOME for the meaning of the argument string.	https://docs.python.org/3.4/c-api/init.html#c.Py_SetPythonHome
Py_GetPythonHome	A							https://docs.python.org			<pre><code>
w_char* Py_GetPythonHome()</code></pre><br>Return the default “home”, that is, the value set by a previous call to Py_SetPythonHome(), or the value of the PYTHONHOME environment variable if it is set.	https://docs.python.org/3.4/c-api/init.html#c.Py_GetPythonHome
PyEval_InitThreads	A							https://docs.python.org			<pre><code>
void PyEval_InitThreads()</code></pre><br>Initialize and acquire the global interpreter lock. It should be called in the main thread before creating a second thread or engaging in any other thread operations such as PyEval_ReleaseThread(tstate). It is not needed before calling PyEval_SaveThread() or PyEval_RestoreThread().	https://docs.python.org/3.4/c-api/init.html#c.PyEval_InitThreads
PyEval_ThreadsInitialized	A							https://docs.python.org			<pre><code>
int PyEval_ThreadsInitialized()</code></pre><br>Returns a non-zero value if PyEval_InitThreads() has been called. This function can be called without holding the GIL, and therefore can be used to avoid calls to the locking API when running single-threaded. This function is not available when thread support is disabled at compile time.	https://docs.python.org/3.4/c-api/init.html#c.PyEval_ThreadsInitialized
PyEval_SaveThread	A							https://docs.python.org			<pre><code>
PyThreadState* PyEval_SaveThread()</code></pre><br>Release the global interpreter lock (if it has been created and thread support is enabled) and reset the thread state to NULL, returning the previous thread state (which is not NULL). If the lock has been created, the current thread must have acquired it. (This function is available even when thread support is disabled at compile time.)	https://docs.python.org/3.4/c-api/init.html#c.PyEval_SaveThread
PyEval_RestoreThread	A							https://docs.python.org			<pre><code>
void PyEval_RestoreThread(PyThreadState *tstate)</code></pre><br>Acquire the global interpreter lock (if it has been created and thread support is enabled) and set the thread state to tstate, which must not be NULL. If the lock has been created, the current thread must not have acquired it, otherwise deadlock ensues. (This function is available even when thread support is disabled at compile time.)	https://docs.python.org/3.4/c-api/init.html#c.PyEval_RestoreThread
PyThreadState_Get	A							https://docs.python.org			<pre><code>
PyThreadState* PyThreadState_Get()</code></pre><br>Return the current thread state. The global interpreter lock must be held. When the current thread state is NULL, this issues a fatal error (so that the caller needn’t check for NULL).	https://docs.python.org/3.4/c-api/init.html#c.PyThreadState_Get
PyThreadState_Swap	A							https://docs.python.org			<pre><code>
PyThreadState* PyThreadState_Swap(PyThreadState *tstate)</code></pre><br>Swap the current thread state with the thread state given by the argument tstate, which may be NULL. The global interpreter lock must be held and is not released.	https://docs.python.org/3.4/c-api/init.html#c.PyThreadState_Swap
PyEval_ReInitThreads	A							https://docs.python.org			<pre><code>
void PyEval_ReInitThreads()</code></pre><br>This function is called from PyOS_AfterFork() to ensure that newly created child processes don’t hold locks referring to threads which are not running in the child process.	https://docs.python.org/3.4/c-api/init.html#c.PyEval_ReInitThreads
PyGILState_Ensure	A							https://docs.python.org			<pre><code>
PyGILState_STATE PyGILState_Ensure()</code></pre><br>Ensure that the current thread is ready to call the Python C API regardless of the current state of Python, or of the global interpreter lock. This may be called as many times as desired by a thread as long as each call is matched with a call to PyGILState_Release(). In general, other thread-related APIs may be used between PyGILState_Ensure() and PyGILState_Release() calls as long as the thread state is restored to its previous state before the Release(). For example, normal usage of the Py_BEGIN_ALLOW_THREADS and Py_END_ALLOW_THREADS macros is acceptable.	https://docs.python.org/3.4/c-api/init.html#c.PyGILState_Ensure
PyGILState_Release	A							https://docs.python.org			<pre><code>
void PyGILState_Release(PyGILState_STATE)</code></pre><br>Release any resources previously acquired. After this call, Python’s state will be the same as it was prior to the corresponding PyGILState_Ensure() call (but generally this state will be unknown to the caller, hence the use of the GILState API).	https://docs.python.org/3.4/c-api/init.html#c.PyGILState_Release
PyGILState_GetThisThreadState	A							https://docs.python.org			<pre><code>
PyThreadState* PyGILState_GetThisThreadState()</code></pre><br>Get the current thread state for this thread. May return NULL if no GILState API has been used on the current thread. Note that the main thread always has such a thread-state, even if no auto-thread-state call has been made on the main thread. This is mainly a helper/diagnostic function.	https://docs.python.org/3.4/c-api/init.html#c.PyGILState_GetThisThreadState
PyGILState_Check	A							https://docs.python.org			<pre><code>
int PyGILState_Check()</code></pre><br>Return 1 if the current thread is holding the GIL and 0 otherwise. This function can be called from any thread at any time. Only if it has had its Python thread state initialized and currently is holding the GIL will it return 1. This is mainly a helper/diagnostic function. It can be useful for example in callback contexts or memory allocation functions when knowing that the GIL is locked can allow the caller to perform sensitive actions or otherwise behave differently.	https://docs.python.org/3.4/c-api/init.html#c.PyGILState_Check
PyInterpreterState_New	A							https://docs.python.org			<pre><code>
PyInterpreterState* PyInterpreterState_New()</code></pre><br>Create a new interpreter state object. The global interpreter lock need not be held, but may be held if it is necessary to serialize calls to this function.	https://docs.python.org/3.4/c-api/init.html#c.PyInterpreterState_New
PyInterpreterState_Clear	A							https://docs.python.org			<pre><code>
void PyInterpreterState_Clear(PyInterpreterState *interp)</code></pre><br>Reset all information in an interpreter state object. The global interpreter lock must be held.	https://docs.python.org/3.4/c-api/init.html#c.PyInterpreterState_Clear
PyInterpreterState_Delete	A							https://docs.python.org			<pre><code>
void PyInterpreterState_Delete(PyInterpreterState *interp)</code></pre><br>Destroy an interpreter state object. The global interpreter lock need not be held. The interpreter state must have been reset with a previous call to PyInterpreterState_Clear().	https://docs.python.org/3.4/c-api/init.html#c.PyInterpreterState_Delete
PyThreadState_New	A							https://docs.python.org			<pre><code>
PyThreadState* PyThreadState_New(PyInterpreterState *interp)</code></pre><br>Create a new thread state object belonging to the given interpreter object. The global interpreter lock need not be held, but may be held if it is necessary to serialize calls to this function.	https://docs.python.org/3.4/c-api/init.html#c.PyThreadState_New
PyThreadState_Clear	A							https://docs.python.org			<pre><code>
void PyThreadState_Clear(PyThreadState *tstate)</code></pre><br>Reset all information in a thread state object. The global interpreter lock must be held.	https://docs.python.org/3.4/c-api/init.html#c.PyThreadState_Clear
PyThreadState_Delete	A							https://docs.python.org			<pre><code>
void PyThreadState_Delete(PyThreadState *tstate)</code></pre><br>Destroy a thread state object. The global interpreter lock need not be held. The thread state must have been reset with a previous call to PyThreadState_Clear().	https://docs.python.org/3.4/c-api/init.html#c.PyThreadState_Delete
PyThreadState_GetDict	A							https://docs.python.org			<pre><code>
PyObject* PyThreadState_GetDict()</code></pre><br>Return a dictionary in which extensions can store thread-specific state information. Each extension should use a unique key to use to store state in the dictionary. It is okay to call this function when no current thread state is available. If this function returns NULL, no exception has been raised and the caller should assume no current thread state is available.	https://docs.python.org/3.4/c-api/init.html#c.PyThreadState_GetDict
PyThreadState_SetAsyncExc	A							https://docs.python.org			<pre><code>
int PyThreadState_SetAsyncExc(long id, PyObject *exc)</code></pre><br>Asynchronously raise an exception in a thread. The id argument is the thread id of the target thread; exc is the exception object to be raised. This function does not steal any references to exc. To prevent naive misuse, you must write your own C extension to call this. Must be called with the GIL held. Returns the number of thread states modified; this is normally one, but will be zero if the thread id isn’t found. If exc is NULL, the pending exception (if any) for the thread is cleared. This raises no exceptions.	https://docs.python.org/3.4/c-api/init.html#c.PyThreadState_SetAsyncExc
PyEval_AcquireThread	A							https://docs.python.org			<pre><code>
void PyEval_AcquireThread(PyThreadState *tstate)</code></pre><br>Acquire the global interpreter lock and set the current thread state to tstate, which should not be NULL. The lock must have been created earlier. If this thread already has the lock, deadlock ensues.	https://docs.python.org/3.4/c-api/init.html#c.PyEval_AcquireThread
PyEval_ReleaseThread	A							https://docs.python.org			<pre><code>
void PyEval_ReleaseThread(PyThreadState *tstate)</code></pre><br>Reset the current thread state to NULL and release the global interpreter lock. The lock must have been created earlier and must be held by the current thread. The tstate argument, which must not be NULL, is only used to check that it represents the current thread state — if it isn’t, a fatal error is reported.	https://docs.python.org/3.4/c-api/init.html#c.PyEval_ReleaseThread
PyEval_AcquireLock	A							https://docs.python.org			<pre><code>
void PyEval_AcquireLock()</code></pre><br>Acquire the global interpreter lock. The lock must have been created earlier. If this thread already has the lock, a deadlock ensues.	https://docs.python.org/3.4/c-api/init.html#c.PyEval_AcquireLock
PyEval_ReleaseLock	A							https://docs.python.org			<pre><code>
void PyEval_ReleaseLock()</code></pre><br>Release the global interpreter lock. The lock must have been created earlier.	https://docs.python.org/3.4/c-api/init.html#c.PyEval_ReleaseLock
Py_NewInterpreter	A							https://docs.python.org			<pre><code>
PyThreadState* Py_NewInterpreter()</code></pre><br>Create a new sub-interpreter. This is an (almost) totally separate environment for the execution of Python code. In particular, the new interpreter has separate, independent versions of all imported modules, including the fundamental modules builtins, __main__ and sys. The table of loaded modules (sys.modules) and the module search path (sys.path) are also separate. The new environment has no sys.argv variable. It has new standard I/O stream file objects sys.stdin, sys.stdout and sys.stderr (however these refer to the same underlying file descriptors).	https://docs.python.org/3.4/c-api/init.html#c.Py_NewInterpreter
Py_EndInterpreter	A							https://docs.python.org			<pre><code>
void Py_EndInterpreter(PyThreadState *tstate)</code></pre><br>Destroy the (sub-)interpreter represented by the given thread state. The given thread state must be the current thread state. See the discussion of thread states below. When the call returns, the current thread state is NULL. All thread states associated with this interpreter are destroyed. (The global interpreter lock must be held before calling this function and is still held when it returns.) Py_Finalize() will destroy all sub-interpreters that haven’t been explicitly destroyed at that point.	https://docs.python.org/3.4/c-api/init.html#c.Py_EndInterpreter
Py_AddPendingCall	A							https://docs.python.org			<pre><code>
int Py_AddPendingCall(int (*func)(void *), void *arg)</code></pre><br>Schedule a function to be called from the main interpreter thread. On success, 0 is returned and func is queued for being called in the main thread. On failure, -1 is returned without setting any exception.	https://docs.python.org/3.4/c-api/init.html#c.Py_AddPendingCall
PyEval_SetProfile	A							https://docs.python.org			<pre><code>
void PyEval_SetProfile(Py_tracefunc func, PyObject *obj)</code></pre><br>Set the profiler function to func. The obj parameter is passed to the function as its first parameter, and may be any Python object, or NULL. If the profile function needs to maintain state, using a different value for obj for each thread provides a convenient and thread-safe place to store it. The profile function is called for all monitored events except the line-number events.	https://docs.python.org/3.4/c-api/init.html#c.PyEval_SetProfile
PyEval_SetTrace	A							https://docs.python.org			<pre><code>
void PyEval_SetTrace(Py_tracefunc func, PyObject *obj)</code></pre><br>Set the tracing function to func. This is similar to PyEval_SetProfile(), except the tracing function does receive line-number events.	https://docs.python.org/3.4/c-api/init.html#c.PyEval_SetTrace
PyEval_GetCallStats	A							https://docs.python.org			<pre><code>
PyObject* PyEval_GetCallStats(PyObject *self)</code></pre><br>Return a tuple of function call counts. There are constants defined for the positions within the tuple:	https://docs.python.org/3.4/c-api/init.html#c.PyEval_GetCallStats
PyInterpreterState_Head	A							https://docs.python.org			<pre><code>
PyInterpreterState* PyInterpreterState_Head()</code></pre><br>Return the interpreter state object at the head of the list of all such objects.	https://docs.python.org/3.4/c-api/init.html#c.PyInterpreterState_Head
PyInterpreterState_Next	A							https://docs.python.org			<pre><code>
PyInterpreterState* PyInterpreterState_Next(PyInterpreterState *interp)</code></pre><br>Return the next interpreter state object after interp from the list of all such objects.	https://docs.python.org/3.4/c-api/init.html#c.PyInterpreterState_Next
PyInterpreterState_ThreadHead	A							https://docs.python.org			<pre><code>
PyThreadState * PyInterpreterState_ThreadHead(PyInterpreterState *interp)</code></pre><br>Return the pointer to the first PyThreadState object in the list of threads associated with the interpreter interp.	https://docs.python.org/3.4/c-api/init.html#c.PyInterpreterState_ThreadHead
PyThreadState_Next	A							https://docs.python.org			<pre><code>
PyThreadState* PyThreadState_Next(PyThreadState *tstate)</code></pre><br>Return the next thread state object after tstate from the list of all such objects belonging to the same PyInterpreterState object.	https://docs.python.org/3.4/c-api/init.html#c.PyThreadState_Next
Py_Initialize	A							https://docs.python.org			<pre><code>
void Py_Initialize()</code></pre><br>Initialize the Python interpreter. In an application embedding Python, this should be called before using any other Python/C API functions; with the exception of Py_SetProgramName(), Py_SetPythonHome() and Py_SetPath(). This initializes the table of loaded modules (sys.modules), and creates the fundamental modules builtins, __main__ and sys. It also initializes the module search path (sys.path). It does not set sys.argv; use PySys_SetArgvEx() for that. This is a no-op when called for a second time (without calling Py_Finalize() first). There is no return value; it is a fatal error if the initialization fails.	https://docs.python.org/3.4/c-api/init.html#c.Py_Initialize
Py_InitializeEx	A							https://docs.python.org			<pre><code>
void Py_InitializeEx(int initsigs)</code></pre><br>This function works like Py_Initialize() if initsigs is 1. If initsigs is 0, it skips initialization registration of signal handlers, which might be useful when Python is embedded.	https://docs.python.org/3.4/c-api/init.html#c.Py_InitializeEx
Py_IsInitialized	A							https://docs.python.org			<pre><code>
int Py_IsInitialized()</code></pre><br>Return true (nonzero) when the Python interpreter has been initialized, false (zero) if not. After Py_Finalize() is called, this returns false until Py_Initialize() is called again.	https://docs.python.org/3.4/c-api/init.html#c.Py_IsInitialized
Py_Finalize	A							https://docs.python.org			<pre><code>
void Py_Finalize()</code></pre><br>Undo all initializations made by Py_Initialize() and subsequent use of Python/C API functions, and destroy all sub-interpreters (see Py_NewInterpreter() below) that were created and not yet destroyed since the last call to Py_Initialize(). Ideally, this frees all memory allocated by the Python interpreter. This is a no-op when called for a second time (without calling Py_Initialize() again first). There is no return value; errors during finalization are ignored.	https://docs.python.org/3.4/c-api/init.html#c.Py_Finalize
Py_SetStandardStreamEncoding	A							https://docs.python.org			<pre><code>
int Py_SetStandardStreamEncoding(const char *encoding, const char *errors)</code></pre><br>This function should be called before Py_Initialize(), if it is called at all. It specifies which encoding and error handling to use with standard IO, with the same meanings as in str.encode().	https://docs.python.org/3.4/c-api/init.html#c.Py_SetStandardStreamEncoding
Py_SetProgramName	A							https://docs.python.org			<pre><code>
void Py_SetProgramName(wchar_t *name)</code></pre><br>This function should be called before Py_Initialize() is called for the first time, if it is called at all. It tells the interpreter the value of the argv[0] argument to the main() function of the program (converted to wide characters). This is used by Py_GetPath() and some other functions below to find the Python run-time libraries relative to the interpreter executable. The default value is 'python'. The argument should point to a zero-terminated wide character string in static storage whose contents will not change for the duration of the program’s execution. No code in the Python interpreter will change the contents of this storage.	https://docs.python.org/3.4/c-api/init.html#c.Py_SetProgramName
Py_GetProgramName	A							https://docs.python.org			<pre><code>
wchar* Py_GetProgramName()</code></pre><br>Return the program name set with Py_SetProgramName(), or the default. The returned string points into static storage; the caller should not modify its value.	https://docs.python.org/3.4/c-api/init.html#c.Py_GetProgramName
Py_GetPrefix	A							https://docs.python.org			<pre><code>
wchar_t* Py_GetPrefix()</code></pre><br>Return the prefix for installed platform-independent files. This is derived through a number of complicated rules from the program name set with Py_SetProgramName() and some environment variables; for example, if the program name is '/usr/local/bin/python', the prefix is '/usr/local'. The returned string points into static storage; the caller should not modify its value. This corresponds to the prefix variable in the top-level Makefile and the --prefix argument to the configure script at build time. The value is available to Python code as sys.prefix. It is only useful on Unix. See also the next function.	https://docs.python.org/3.4/c-api/init.html#c.Py_GetPrefix
Py_GetExecPrefix	A							https://docs.python.org			<pre><code>
wchar_t* Py_GetExecPrefix()</code></pre><br>Return the exec-prefix for installed platform-dependent files. This is derived through a number of complicated rules from the program name set with Py_SetProgramName() and some environment variables; for example, if the program name is '/usr/local/bin/python', the exec-prefix is '/usr/local'. The returned string points into static storage; the caller should not modify its value. This corresponds to the exec_prefix variable in the top-level Makefile and the --exec-prefix argument to the configure script at build time. The value is available to Python code as sys.exec_prefix. It is only useful on Unix.	https://docs.python.org/3.4/c-api/init.html#c.Py_GetExecPrefix
Py_GetProgramFullPath	A							https://docs.python.org			<pre><code>
wchar_t* Py_GetProgramFullPath()</code></pre><br>Return the full program name of the Python executable; this is computed as a side-effect of deriving the default module search path from the program name (set by Py_SetProgramName() above). The returned string points into static storage; the caller should not modify its value. The value is available to Python code as sys.executable.	https://docs.python.org/3.4/c-api/init.html#c.Py_GetProgramFullPath
Py_GetPath	A							https://docs.python.org			<pre><code>
wchar_t* Py_GetPath()</code></pre><br>Return the default module search path; this is computed from the program name (set by Py_SetProgramName() above) and some environment variables. The returned string consists of a series of directory names separated by a platform dependent delimiter character. The delimiter character is ':' on Unix and Mac OS X, ';' on Windows. The returned string points into static storage; the caller should not modify its value. The list sys.path is initialized with this value on interpreter startup; it can be (and usually is) modified later to change the search path for loading modules.	https://docs.python.org/3.4/c-api/init.html#c.Py_GetPath
Py_SetPath	A							https://docs.python.org			<pre><code>
void Py_SetPath(const wchar_t *)</code></pre><br>Set the default module search path. If this function is called before Py_Initialize(), then Py_GetPath() won’t attempt to compute a default search path but uses the one provided instead. This is useful if Python is embedded by an application that has full knowledge of the location of all modules. The path components should be separated by the platform dependent delimiter character, which is ':' on Unix and Mac OS X, ';' on Windows.	https://docs.python.org/3.4/c-api/init.html#c.Py_SetPath
Py_GetVersion	A							https://docs.python.org			<pre><code>
const char* Py_GetVersion()</code></pre><br>Return the version of this Python interpreter. This is a string that looks something like	https://docs.python.org/3.4/c-api/init.html#c.Py_GetVersion
Py_GetPlatform	A							https://docs.python.org			<pre><code>
const char* Py_GetPlatform()</code></pre><br>Return the platform identifier for the current platform. On Unix, this is formed from the “official” name of the operating system, converted to lower case, followed by the major revision number; e.g., for Solaris 2.x, which is also known as SunOS 5.x, the value is 'sunos5'. On Mac OS X, it is 'darwin'. On Windows, it is 'win'. The returned string points into static storage; the caller should not modify its value. The value is available to Python code as sys.platform.	https://docs.python.org/3.4/c-api/init.html#c.Py_GetPlatform
Py_GetCopyright	A							https://docs.python.org			<pre><code>
const char* Py_GetCopyright()</code></pre><br>Return the official copyright string for the current Python version, for example	https://docs.python.org/3.4/c-api/init.html#c.Py_GetCopyright
Py_GetCompiler	A							https://docs.python.org			<pre><code>
const char* Py_GetCompiler()</code></pre><br>Return an indication of the compiler used to build the current Python version, in square brackets, for example:	https://docs.python.org/3.4/c-api/init.html#c.Py_GetCompiler
Py_GetBuildInfo	A							https://docs.python.org			<pre><code>
const char* Py_GetBuildInfo()</code></pre><br>Return information about the sequence number and build date and time of the current Python interpreter instance, for example	https://docs.python.org/3.4/c-api/init.html#c.Py_GetBuildInfo
PySys_SetArgvEx	A							https://docs.python.org			<pre><code>
void PySys_SetArgvEx(int argc, wchar_t **argv, int updatepath)</code></pre><br>Set sys.argv based on argc and argv. These parameters are similar to those passed to the program’s main() function with the difference that the first entry should refer to the script file to be executed rather than the executable hosting the Python interpreter. If there isn’t a script that will be run, the first entry in argv can be an empty string. If this function fails to initialize sys.argv, a fatal condition is signalled using Py_FatalError().	https://docs.python.org/3.4/c-api/init.html#c.PySys_SetArgvEx
PySys_SetArgv	A							https://docs.python.org			<pre><code>
void PySys_SetArgv(int argc, wchar_t **argv)</code></pre><br>This function works like PySys_SetArgvEx() with updatepath set to 1 unless the python interpreter was started with the -I.	https://docs.python.org/3.4/c-api/init.html#c.PySys_SetArgv
Py_SetPythonHome	A							https://docs.python.org			<pre><code>
void Py_SetPythonHome(wchar_t *home)</code></pre><br>Set the default “home” directory, that is, the location of the standard Python libraries. See PYTHONHOME for the meaning of the argument string.	https://docs.python.org/3.4/c-api/init.html#c.Py_SetPythonHome
Py_GetPythonHome	A							https://docs.python.org			<pre><code>
w_char* Py_GetPythonHome()</code></pre><br>Return the default “home”, that is, the value set by a previous call to Py_SetPythonHome(), or the value of the PYTHONHOME environment variable if it is set.	https://docs.python.org/3.4/c-api/init.html#c.Py_GetPythonHome
PyEval_InitThreads	A							https://docs.python.org			<pre><code>
void PyEval_InitThreads()</code></pre><br>Initialize and acquire the global interpreter lock. It should be called in the main thread before creating a second thread or engaging in any other thread operations such as PyEval_ReleaseThread(tstate). It is not needed before calling PyEval_SaveThread() or PyEval_RestoreThread().	https://docs.python.org/3.4/c-api/init.html#c.PyEval_InitThreads
PyEval_ThreadsInitialized	A							https://docs.python.org			<pre><code>
int PyEval_ThreadsInitialized()</code></pre><br>Returns a non-zero value if PyEval_InitThreads() has been called. This function can be called without holding the GIL, and therefore can be used to avoid calls to the locking API when running single-threaded. This function is not available when thread support is disabled at compile time.	https://docs.python.org/3.4/c-api/init.html#c.PyEval_ThreadsInitialized
PyEval_SaveThread	A							https://docs.python.org			<pre><code>
PyThreadState* PyEval_SaveThread()</code></pre><br>Release the global interpreter lock (if it has been created and thread support is enabled) and reset the thread state to NULL, returning the previous thread state (which is not NULL). If the lock has been created, the current thread must have acquired it. (This function is available even when thread support is disabled at compile time.)	https://docs.python.org/3.4/c-api/init.html#c.PyEval_SaveThread
PyEval_RestoreThread	A							https://docs.python.org			<pre><code>
void PyEval_RestoreThread(PyThreadState *tstate)</code></pre><br>Acquire the global interpreter lock (if it has been created and thread support is enabled) and set the thread state to tstate, which must not be NULL. If the lock has been created, the current thread must not have acquired it, otherwise deadlock ensues. (This function is available even when thread support is disabled at compile time.)	https://docs.python.org/3.4/c-api/init.html#c.PyEval_RestoreThread
PyThreadState_Get	A							https://docs.python.org			<pre><code>
PyThreadState* PyThreadState_Get()</code></pre><br>Return the current thread state. The global interpreter lock must be held. When the current thread state is NULL, this issues a fatal error (so that the caller needn’t check for NULL).	https://docs.python.org/3.4/c-api/init.html#c.PyThreadState_Get
PyThreadState_Swap	A							https://docs.python.org			<pre><code>
PyThreadState* PyThreadState_Swap(PyThreadState *tstate)</code></pre><br>Swap the current thread state with the thread state given by the argument tstate, which may be NULL. The global interpreter lock must be held and is not released.	https://docs.python.org/3.4/c-api/init.html#c.PyThreadState_Swap
PyEval_ReInitThreads	A							https://docs.python.org			<pre><code>
void PyEval_ReInitThreads()</code></pre><br>This function is called from PyOS_AfterFork() to ensure that newly created child processes don’t hold locks referring to threads which are not running in the child process.	https://docs.python.org/3.4/c-api/init.html#c.PyEval_ReInitThreads
PyGILState_Ensure	A							https://docs.python.org			<pre><code>
PyGILState_STATE PyGILState_Ensure()</code></pre><br>Ensure that the current thread is ready to call the Python C API regardless of the current state of Python, or of the global interpreter lock. This may be called as many times as desired by a thread as long as each call is matched with a call to PyGILState_Release(). In general, other thread-related APIs may be used between PyGILState_Ensure() and PyGILState_Release() calls as long as the thread state is restored to its previous state before the Release(). For example, normal usage of the Py_BEGIN_ALLOW_THREADS and Py_END_ALLOW_THREADS macros is acceptable.	https://docs.python.org/3.4/c-api/init.html#c.PyGILState_Ensure
PyGILState_Release	A							https://docs.python.org			<pre><code>
void PyGILState_Release(PyGILState_STATE)</code></pre><br>Release any resources previously acquired. After this call, Python’s state will be the same as it was prior to the corresponding PyGILState_Ensure() call (but generally this state will be unknown to the caller, hence the use of the GILState API).	https://docs.python.org/3.4/c-api/init.html#c.PyGILState_Release
PyGILState_GetThisThreadState	A							https://docs.python.org			<pre><code>
PyThreadState* PyGILState_GetThisThreadState()</code></pre><br>Get the current thread state for this thread. May return NULL if no GILState API has been used on the current thread. Note that the main thread always has such a thread-state, even if no auto-thread-state call has been made on the main thread. This is mainly a helper/diagnostic function.	https://docs.python.org/3.4/c-api/init.html#c.PyGILState_GetThisThreadState
PyGILState_Check	A							https://docs.python.org			<pre><code>
int PyGILState_Check()</code></pre><br>Return 1 if the current thread is holding the GIL and 0 otherwise. This function can be called from any thread at any time. Only if it has had its Python thread state initialized and currently is holding the GIL will it return 1. This is mainly a helper/diagnostic function. It can be useful for example in callback contexts or memory allocation functions when knowing that the GIL is locked can allow the caller to perform sensitive actions or otherwise behave differently.	https://docs.python.org/3.4/c-api/init.html#c.PyGILState_Check
PyInterpreterState_New	A							https://docs.python.org			<pre><code>
PyInterpreterState* PyInterpreterState_New()</code></pre><br>Create a new interpreter state object. The global interpreter lock need not be held, but may be held if it is necessary to serialize calls to this function.	https://docs.python.org/3.4/c-api/init.html#c.PyInterpreterState_New
PyInterpreterState_Clear	A							https://docs.python.org			<pre><code>
void PyInterpreterState_Clear(PyInterpreterState *interp)</code></pre><br>Reset all information in an interpreter state object. The global interpreter lock must be held.	https://docs.python.org/3.4/c-api/init.html#c.PyInterpreterState_Clear
PyInterpreterState_Delete	A							https://docs.python.org			<pre><code>
void PyInterpreterState_Delete(PyInterpreterState *interp)</code></pre><br>Destroy an interpreter state object. The global interpreter lock need not be held. The interpreter state must have been reset with a previous call to PyInterpreterState_Clear().	https://docs.python.org/3.4/c-api/init.html#c.PyInterpreterState_Delete
PyThreadState_New	A							https://docs.python.org			<pre><code>
PyThreadState* PyThreadState_New(PyInterpreterState *interp)</code></pre><br>Create a new thread state object belonging to the given interpreter object. The global interpreter lock need not be held, but may be held if it is necessary to serialize calls to this function.	https://docs.python.org/3.4/c-api/init.html#c.PyThreadState_New
PyThreadState_Clear	A							https://docs.python.org			<pre><code>
void PyThreadState_Clear(PyThreadState *tstate)</code></pre><br>Reset all information in a thread state object. The global interpreter lock must be held.	https://docs.python.org/3.4/c-api/init.html#c.PyThreadState_Clear
PyThreadState_Delete	A							https://docs.python.org			<pre><code>
void PyThreadState_Delete(PyThreadState *tstate)</code></pre><br>Destroy a thread state object. The global interpreter lock need not be held. The thread state must have been reset with a previous call to PyThreadState_Clear().	https://docs.python.org/3.4/c-api/init.html#c.PyThreadState_Delete
PyThreadState_GetDict	A							https://docs.python.org			<pre><code>
PyObject* PyThreadState_GetDict()</code></pre><br>Return a dictionary in which extensions can store thread-specific state information. Each extension should use a unique key to use to store state in the dictionary. It is okay to call this function when no current thread state is available. If this function returns NULL, no exception has been raised and the caller should assume no current thread state is available.	https://docs.python.org/3.4/c-api/init.html#c.PyThreadState_GetDict
PyThreadState_SetAsyncExc	A							https://docs.python.org			<pre><code>
int PyThreadState_SetAsyncExc(long id, PyObject *exc)</code></pre><br>Asynchronously raise an exception in a thread. The id argument is the thread id of the target thread; exc is the exception object to be raised. This function does not steal any references to exc. To prevent naive misuse, you must write your own C extension to call this. Must be called with the GIL held. Returns the number of thread states modified; this is normally one, but will be zero if the thread id isn’t found. If exc is NULL, the pending exception (if any) for the thread is cleared. This raises no exceptions.	https://docs.python.org/3.4/c-api/init.html#c.PyThreadState_SetAsyncExc
PyEval_AcquireThread	A							https://docs.python.org			<pre><code>
void PyEval_AcquireThread(PyThreadState *tstate)</code></pre><br>Acquire the global interpreter lock and set the current thread state to tstate, which should not be NULL. The lock must have been created earlier. If this thread already has the lock, deadlock ensues.	https://docs.python.org/3.4/c-api/init.html#c.PyEval_AcquireThread
PyEval_ReleaseThread	A							https://docs.python.org			<pre><code>
void PyEval_ReleaseThread(PyThreadState *tstate)</code></pre><br>Reset the current thread state to NULL and release the global interpreter lock. The lock must have been created earlier and must be held by the current thread. The tstate argument, which must not be NULL, is only used to check that it represents the current thread state — if it isn’t, a fatal error is reported.	https://docs.python.org/3.4/c-api/init.html#c.PyEval_ReleaseThread
PyEval_AcquireLock	A							https://docs.python.org			<pre><code>
void PyEval_AcquireLock()</code></pre><br>Acquire the global interpreter lock. The lock must have been created earlier. If this thread already has the lock, a deadlock ensues.	https://docs.python.org/3.4/c-api/init.html#c.PyEval_AcquireLock
PyEval_ReleaseLock	A							https://docs.python.org			<pre><code>
void PyEval_ReleaseLock()</code></pre><br>Release the global interpreter lock. The lock must have been created earlier.	https://docs.python.org/3.4/c-api/init.html#c.PyEval_ReleaseLock
PyEval_InitThreads	A							https://docs.python.org			<pre><code>
void PyEval_InitThreads()</code></pre><br>Initialize and acquire the global interpreter lock. It should be called in the main thread before creating a second thread or engaging in any other thread operations such as PyEval_ReleaseThread(tstate). It is not needed before calling PyEval_SaveThread() or PyEval_RestoreThread().	https://docs.python.org/3.4/c-api/init.html#c.PyEval_InitThreads
PyEval_ThreadsInitialized	A							https://docs.python.org			<pre><code>
int PyEval_ThreadsInitialized()</code></pre><br>Returns a non-zero value if PyEval_InitThreads() has been called. This function can be called without holding the GIL, and therefore can be used to avoid calls to the locking API when running single-threaded. This function is not available when thread support is disabled at compile time.	https://docs.python.org/3.4/c-api/init.html#c.PyEval_ThreadsInitialized
PyEval_SaveThread	A							https://docs.python.org			<pre><code>
PyThreadState* PyEval_SaveThread()</code></pre><br>Release the global interpreter lock (if it has been created and thread support is enabled) and reset the thread state to NULL, returning the previous thread state (which is not NULL). If the lock has been created, the current thread must have acquired it. (This function is available even when thread support is disabled at compile time.)	https://docs.python.org/3.4/c-api/init.html#c.PyEval_SaveThread
PyEval_RestoreThread	A							https://docs.python.org			<pre><code>
void PyEval_RestoreThread(PyThreadState *tstate)</code></pre><br>Acquire the global interpreter lock (if it has been created and thread support is enabled) and set the thread state to tstate, which must not be NULL. If the lock has been created, the current thread must not have acquired it, otherwise deadlock ensues. (This function is available even when thread support is disabled at compile time.)	https://docs.python.org/3.4/c-api/init.html#c.PyEval_RestoreThread
PyThreadState_Get	A							https://docs.python.org			<pre><code>
PyThreadState* PyThreadState_Get()</code></pre><br>Return the current thread state. The global interpreter lock must be held. When the current thread state is NULL, this issues a fatal error (so that the caller needn’t check for NULL).	https://docs.python.org/3.4/c-api/init.html#c.PyThreadState_Get
PyThreadState_Swap	A							https://docs.python.org			<pre><code>
PyThreadState* PyThreadState_Swap(PyThreadState *tstate)</code></pre><br>Swap the current thread state with the thread state given by the argument tstate, which may be NULL. The global interpreter lock must be held and is not released.	https://docs.python.org/3.4/c-api/init.html#c.PyThreadState_Swap
PyEval_ReInitThreads	A							https://docs.python.org			<pre><code>
void PyEval_ReInitThreads()</code></pre><br>This function is called from PyOS_AfterFork() to ensure that newly created child processes don’t hold locks referring to threads which are not running in the child process.	https://docs.python.org/3.4/c-api/init.html#c.PyEval_ReInitThreads
PyGILState_Ensure	A							https://docs.python.org			<pre><code>
PyGILState_STATE PyGILState_Ensure()</code></pre><br>Ensure that the current thread is ready to call the Python C API regardless of the current state of Python, or of the global interpreter lock. This may be called as many times as desired by a thread as long as each call is matched with a call to PyGILState_Release(). In general, other thread-related APIs may be used between PyGILState_Ensure() and PyGILState_Release() calls as long as the thread state is restored to its previous state before the Release(). For example, normal usage of the Py_BEGIN_ALLOW_THREADS and Py_END_ALLOW_THREADS macros is acceptable.	https://docs.python.org/3.4/c-api/init.html#c.PyGILState_Ensure
PyGILState_Release	A							https://docs.python.org			<pre><code>
void PyGILState_Release(PyGILState_STATE)</code></pre><br>Release any resources previously acquired. After this call, Python’s state will be the same as it was prior to the corresponding PyGILState_Ensure() call (but generally this state will be unknown to the caller, hence the use of the GILState API).	https://docs.python.org/3.4/c-api/init.html#c.PyGILState_Release
PyGILState_GetThisThreadState	A							https://docs.python.org			<pre><code>
PyThreadState* PyGILState_GetThisThreadState()</code></pre><br>Get the current thread state for this thread. May return NULL if no GILState API has been used on the current thread. Note that the main thread always has such a thread-state, even if no auto-thread-state call has been made on the main thread. This is mainly a helper/diagnostic function.	https://docs.python.org/3.4/c-api/init.html#c.PyGILState_GetThisThreadState
PyGILState_Check	A							https://docs.python.org			<pre><code>
int PyGILState_Check()</code></pre><br>Return 1 if the current thread is holding the GIL and 0 otherwise. This function can be called from any thread at any time. Only if it has had its Python thread state initialized and currently is holding the GIL will it return 1. This is mainly a helper/diagnostic function. It can be useful for example in callback contexts or memory allocation functions when knowing that the GIL is locked can allow the caller to perform sensitive actions or otherwise behave differently.	https://docs.python.org/3.4/c-api/init.html#c.PyGILState_Check
PyInterpreterState_New	A							https://docs.python.org			<pre><code>
PyInterpreterState* PyInterpreterState_New()</code></pre><br>Create a new interpreter state object. The global interpreter lock need not be held, but may be held if it is necessary to serialize calls to this function.	https://docs.python.org/3.4/c-api/init.html#c.PyInterpreterState_New
PyInterpreterState_Clear	A							https://docs.python.org			<pre><code>
void PyInterpreterState_Clear(PyInterpreterState *interp)</code></pre><br>Reset all information in an interpreter state object. The global interpreter lock must be held.	https://docs.python.org/3.4/c-api/init.html#c.PyInterpreterState_Clear
PyInterpreterState_Delete	A							https://docs.python.org			<pre><code>
void PyInterpreterState_Delete(PyInterpreterState *interp)</code></pre><br>Destroy an interpreter state object. The global interpreter lock need not be held. The interpreter state must have been reset with a previous call to PyInterpreterState_Clear().	https://docs.python.org/3.4/c-api/init.html#c.PyInterpreterState_Delete
PyThreadState_New	A							https://docs.python.org			<pre><code>
PyThreadState* PyThreadState_New(PyInterpreterState *interp)</code></pre><br>Create a new thread state object belonging to the given interpreter object. The global interpreter lock need not be held, but may be held if it is necessary to serialize calls to this function.	https://docs.python.org/3.4/c-api/init.html#c.PyThreadState_New
PyThreadState_Clear	A							https://docs.python.org			<pre><code>
void PyThreadState_Clear(PyThreadState *tstate)</code></pre><br>Reset all information in a thread state object. The global interpreter lock must be held.	https://docs.python.org/3.4/c-api/init.html#c.PyThreadState_Clear
PyThreadState_Delete	A							https://docs.python.org			<pre><code>
void PyThreadState_Delete(PyThreadState *tstate)</code></pre><br>Destroy a thread state object. The global interpreter lock need not be held. The thread state must have been reset with a previous call to PyThreadState_Clear().	https://docs.python.org/3.4/c-api/init.html#c.PyThreadState_Delete
PyThreadState_GetDict	A							https://docs.python.org			<pre><code>
PyObject* PyThreadState_GetDict()</code></pre><br>Return a dictionary in which extensions can store thread-specific state information. Each extension should use a unique key to use to store state in the dictionary. It is okay to call this function when no current thread state is available. If this function returns NULL, no exception has been raised and the caller should assume no current thread state is available.	https://docs.python.org/3.4/c-api/init.html#c.PyThreadState_GetDict
PyThreadState_SetAsyncExc	A							https://docs.python.org			<pre><code>
int PyThreadState_SetAsyncExc(long id, PyObject *exc)</code></pre><br>Asynchronously raise an exception in a thread. The id argument is the thread id of the target thread; exc is the exception object to be raised. This function does not steal any references to exc. To prevent naive misuse, you must write your own C extension to call this. Must be called with the GIL held. Returns the number of thread states modified; this is normally one, but will be zero if the thread id isn’t found. If exc is NULL, the pending exception (if any) for the thread is cleared. This raises no exceptions.	https://docs.python.org/3.4/c-api/init.html#c.PyThreadState_SetAsyncExc
PyEval_AcquireThread	A							https://docs.python.org			<pre><code>
void PyEval_AcquireThread(PyThreadState *tstate)</code></pre><br>Acquire the global interpreter lock and set the current thread state to tstate, which should not be NULL. The lock must have been created earlier. If this thread already has the lock, deadlock ensues.	https://docs.python.org/3.4/c-api/init.html#c.PyEval_AcquireThread
PyEval_ReleaseThread	A							https://docs.python.org			<pre><code>
void PyEval_ReleaseThread(PyThreadState *tstate)</code></pre><br>Reset the current thread state to NULL and release the global interpreter lock. The lock must have been created earlier and must be held by the current thread. The tstate argument, which must not be NULL, is only used to check that it represents the current thread state — if it isn’t, a fatal error is reported.	https://docs.python.org/3.4/c-api/init.html#c.PyEval_ReleaseThread
PyEval_AcquireLock	A							https://docs.python.org			<pre><code>
void PyEval_AcquireLock()</code></pre><br>Acquire the global interpreter lock. The lock must have been created earlier. If this thread already has the lock, a deadlock ensues.	https://docs.python.org/3.4/c-api/init.html#c.PyEval_AcquireLock
PyEval_ReleaseLock	A							https://docs.python.org			<pre><code>
void PyEval_ReleaseLock()</code></pre><br>Release the global interpreter lock. The lock must have been created earlier.	https://docs.python.org/3.4/c-api/init.html#c.PyEval_ReleaseLock
Py_NewInterpreter	A							https://docs.python.org			<pre><code>
PyThreadState* Py_NewInterpreter()</code></pre><br>Create a new sub-interpreter. This is an (almost) totally separate environment for the execution of Python code. In particular, the new interpreter has separate, independent versions of all imported modules, including the fundamental modules builtins, __main__ and sys. The table of loaded modules (sys.modules) and the module search path (sys.path) are also separate. The new environment has no sys.argv variable. It has new standard I/O stream file objects sys.stdin, sys.stdout and sys.stderr (however these refer to the same underlying file descriptors).	https://docs.python.org/3.4/c-api/init.html#c.Py_NewInterpreter
Py_EndInterpreter	A							https://docs.python.org			<pre><code>
void Py_EndInterpreter(PyThreadState *tstate)</code></pre><br>Destroy the (sub-)interpreter represented by the given thread state. The given thread state must be the current thread state. See the discussion of thread states below. When the call returns, the current thread state is NULL. All thread states associated with this interpreter are destroyed. (The global interpreter lock must be held before calling this function and is still held when it returns.) Py_Finalize() will destroy all sub-interpreters that haven’t been explicitly destroyed at that point.	https://docs.python.org/3.4/c-api/init.html#c.Py_EndInterpreter
Py_AddPendingCall	A							https://docs.python.org			<pre><code>
int Py_AddPendingCall(int (*func)(void *), void *arg)</code></pre><br>Schedule a function to be called from the main interpreter thread. On success, 0 is returned and func is queued for being called in the main thread. On failure, -1 is returned without setting any exception.	https://docs.python.org/3.4/c-api/init.html#c.Py_AddPendingCall
PyEval_SetProfile	A							https://docs.python.org			<pre><code>
void PyEval_SetProfile(Py_tracefunc func, PyObject *obj)</code></pre><br>Set the profiler function to func. The obj parameter is passed to the function as its first parameter, and may be any Python object, or NULL. If the profile function needs to maintain state, using a different value for obj for each thread provides a convenient and thread-safe place to store it. The profile function is called for all monitored events except the line-number events.	https://docs.python.org/3.4/c-api/init.html#c.PyEval_SetProfile
PyEval_SetTrace	A							https://docs.python.org			<pre><code>
void PyEval_SetTrace(Py_tracefunc func, PyObject *obj)</code></pre><br>Set the tracing function to func. This is similar to PyEval_SetProfile(), except the tracing function does receive line-number events.	https://docs.python.org/3.4/c-api/init.html#c.PyEval_SetTrace
PyEval_GetCallStats	A							https://docs.python.org			<pre><code>
PyObject* PyEval_GetCallStats(PyObject *self)</code></pre><br>Return a tuple of function call counts. There are constants defined for the positions within the tuple:	https://docs.python.org/3.4/c-api/init.html#c.PyEval_GetCallStats
PyInterpreterState_Head	A							https://docs.python.org			<pre><code>
PyInterpreterState* PyInterpreterState_Head()</code></pre><br>Return the interpreter state object at the head of the list of all such objects.	https://docs.python.org/3.4/c-api/init.html#c.PyInterpreterState_Head
PyInterpreterState_Next	A							https://docs.python.org			<pre><code>
PyInterpreterState* PyInterpreterState_Next(PyInterpreterState *interp)</code></pre><br>Return the next interpreter state object after interp from the list of all such objects.	https://docs.python.org/3.4/c-api/init.html#c.PyInterpreterState_Next
PyInterpreterState_ThreadHead	A							https://docs.python.org			<pre><code>
PyThreadState * PyInterpreterState_ThreadHead(PyInterpreterState *interp)</code></pre><br>Return the pointer to the first PyThreadState object in the list of threads associated with the interpreter interp.	https://docs.python.org/3.4/c-api/init.html#c.PyInterpreterState_ThreadHead
PyThreadState_Next	A							https://docs.python.org			<pre><code>
PyThreadState* PyThreadState_Next(PyThreadState *tstate)</code></pre><br>Return the next thread state object after tstate from the list of all such objects belonging to the same PyInterpreterState object.	https://docs.python.org/3.4/c-api/init.html#c.PyThreadState_Next
PyIter_Check	A							https://docs.python.org			<pre><code>
int PyIter_Check(PyObject *o)</code></pre><br>Return true if the object o supports the iterator protocol.	https://docs.python.org/3.4/c-api/iter.html#c.PyIter_Check
PyIter_Next	A							https://docs.python.org			<pre><code>
PyObject* PyIter_Next(PyObject *o)</code></pre><br>Return the next value from the iteration o. The object must be an iterator (it is up to the caller to check this). If there are no remaining values, returns NULL with no exception set. If an error occurs while retrieving the item, returns NULL and passes along the exception.	https://docs.python.org/3.4/c-api/iter.html#c.PyIter_Next
PySeqIter_Check	A							https://docs.python.org			<pre><code>
int PySeqIter_Check(op)</code></pre><br>Return true if the type of op is PySeqIter_Type.	https://docs.python.org/3.4/c-api/iterator.html#c.PySeqIter_Check
PySeqIter_New	A							https://docs.python.org			<pre><code>
PyObject* PySeqIter_New(PyObject *seq)</code></pre><br>Return an iterator that works with a general sequence object, seq. The iteration ends when the sequence raises IndexError for the subscripting operation.	https://docs.python.org/3.4/c-api/iterator.html#c.PySeqIter_New
PyCallIter_Check	A							https://docs.python.org			<pre><code>
int PyCallIter_Check(op)</code></pre><br>Return true if the type of op is PyCallIter_Type.	https://docs.python.org/3.4/c-api/iterator.html#c.PyCallIter_Check
PyCallIter_New	A							https://docs.python.org			<pre><code>
PyObject* PyCallIter_New(PyObject *callable, PyObject *sentinel)</code></pre><br>Return a new iterator. The first parameter, callable, can be any Python callable object that can be called with no parameters; each call to it should return the next item in the iteration. When callable returns a value equal to sentinel, the iteration will be terminated.	https://docs.python.org/3.4/c-api/iterator.html#c.PyCallIter_New
PyList_Check	A							https://docs.python.org			<pre><code>
int PyList_Check(PyObject *p)</code></pre><br>Return true if p is a list object or an instance of a subtype of the list type.	https://docs.python.org/3.4/c-api/list.html#c.PyList_Check
PyList_CheckExact	A							https://docs.python.org			<pre><code>
int PyList_CheckExact(PyObject *p)</code></pre><br>Return true if p is a list object, but not an instance of a subtype of the list type.	https://docs.python.org/3.4/c-api/list.html#c.PyList_CheckExact
PyList_New	A							https://docs.python.org			<pre><code>
PyObject* PyList_New(Py_ssize_t len)</code></pre><br>Return a new list of length len on success, or NULL on failure.	https://docs.python.org/3.4/c-api/list.html#c.PyList_New
PyList_Size	A							https://docs.python.org			<pre><code>
Py_ssize_t PyList_Size(PyObject *list)</code></pre><br>Return the length of the list object in list; this is equivalent to len(list) on a list object.	https://docs.python.org/3.4/c-api/list.html#c.PyList_Size
PyList_GET_SIZE	A							https://docs.python.org			<pre><code>
Py_ssize_t PyList_GET_SIZE(PyObject *list)</code></pre><br>Macro form of PyList_Size() without error checking.	https://docs.python.org/3.4/c-api/list.html#c.PyList_GET_SIZE
PyList_GetItem	A							https://docs.python.org			<pre><code>
PyObject* PyList_GetItem(PyObject *list, Py_ssize_t index)</code></pre><br>Return the object at position index in the list pointed to by list. The position must be positive, indexing from the end of the list is not supported. If index is out of bounds, return NULL and set an IndexError exception.	https://docs.python.org/3.4/c-api/list.html#c.PyList_GetItem
PyList_GET_ITEM	A							https://docs.python.org			<pre><code>
PyObject* PyList_GET_ITEM(PyObject *list, Py_ssize_t i)</code></pre><br>Macro form of PyList_GetItem() without error checking.	https://docs.python.org/3.4/c-api/list.html#c.PyList_GET_ITEM
PyList_SetItem	A							https://docs.python.org			<pre><code>
int PyList_SetItem(PyObject *list, Py_ssize_t index, PyObject *item)</code></pre><br>Set the item at index index in list to item. Return 0 on success or -1 on failure.	https://docs.python.org/3.4/c-api/list.html#c.PyList_SetItem
PyList_SET_ITEM	A							https://docs.python.org			<pre><code>
void PyList_SET_ITEM(PyObject *list, Py_ssize_t i, PyObject *o)</code></pre><br>Macro form of PyList_SetItem() without error checking. This is normally only used to fill in new lists where there is no previous content.	https://docs.python.org/3.4/c-api/list.html#c.PyList_SET_ITEM
PyList_Insert	A							https://docs.python.org			<pre><code>
int PyList_Insert(PyObject *list, Py_ssize_t index, PyObject *item)</code></pre><br>Insert the item item into list list in front of index index. Return 0 if successful; return -1 and set an exception if unsuccessful. Analogous to list.insert(index, item).	https://docs.python.org/3.4/c-api/list.html#c.PyList_Insert
PyList_Append	A							https://docs.python.org			<pre><code>
int PyList_Append(PyObject *list, PyObject *item)</code></pre><br>Append the object item at the end of list list. Return 0 if successful; return -1 and set an exception if unsuccessful. Analogous to list.append(item).	https://docs.python.org/3.4/c-api/list.html#c.PyList_Append
PyList_GetSlice	A							https://docs.python.org			<pre><code>
PyObject* PyList_GetSlice(PyObject *list, Py_ssize_t low, Py_ssize_t high)</code></pre><br>Return a list of the objects in list containing the objects between low and high. Return NULL and set an exception if unsuccessful. Analogous to list[low:high]. Negative indices, as when slicing from Python, are not supported.	https://docs.python.org/3.4/c-api/list.html#c.PyList_GetSlice
PyList_SetSlice	A							https://docs.python.org			<pre><code>
int PyList_SetSlice(PyObject *list, Py_ssize_t low, Py_ssize_t high, PyObject *itemlist)</code></pre><br>Set the slice of list between low and high to the contents of itemlist. Analogous to list[low:high] = itemlist. The itemlist may be NULL, indicating the assignment of an empty list (slice deletion). Return 0 on success, -1 on failure. Negative indices, as when slicing from Python, are not supported.	https://docs.python.org/3.4/c-api/list.html#c.PyList_SetSlice
PyList_Sort	A							https://docs.python.org			<pre><code>
int PyList_Sort(PyObject *list)</code></pre><br>Sort the items of list in place. Return 0 on success, -1 on failure. This is equivalent to list.sort().	https://docs.python.org/3.4/c-api/list.html#c.PyList_Sort
PyList_Reverse	A							https://docs.python.org			<pre><code>
int PyList_Reverse(PyObject *list)</code></pre><br>Reverse the items of list in place. Return 0 on success, -1 on failure. This is the equivalent of list.reverse().	https://docs.python.org/3.4/c-api/list.html#c.PyList_Reverse
PyList_AsTuple	A							https://docs.python.org			<pre><code>
PyObject* PyList_AsTuple(PyObject *list)</code></pre><br>Return a new tuple object containing the contents of list; equivalent to tuple(list).	https://docs.python.org/3.4/c-api/list.html#c.PyList_AsTuple
PyList_ClearFreeList	A							https://docs.python.org			<pre><code>
int PyList_ClearFreeList()</code></pre><br>Clear the free list. Return the total number of freed items.	https://docs.python.org/3.4/c-api/list.html#c.PyList_ClearFreeList
PyLong_Check	A							https://docs.python.org			<pre><code>
int PyLong_Check(PyObject *p)</code></pre><br>Return true if its argument is a PyLongObject or a subtype of PyLongObject.	https://docs.python.org/3.4/c-api/long.html#c.PyLong_Check
PyLong_CheckExact	A							https://docs.python.org			<pre><code>
int PyLong_CheckExact(PyObject *p)</code></pre><br>Return true if its argument is a PyLongObject, but not a subtype of PyLongObject.	https://docs.python.org/3.4/c-api/long.html#c.PyLong_CheckExact
PyLong_FromLong	A							https://docs.python.org			<pre><code>
PyObject* PyLong_FromLong(long v)</code></pre><br>Return a new PyLongObject object from v, or NULL on failure.	https://docs.python.org/3.4/c-api/long.html#c.PyLong_FromLong
PyLong_FromUnsignedLong	A							https://docs.python.org			<pre><code>
PyObject* PyLong_FromUnsignedLong(unsigned long v)</code></pre><br>Return a new PyLongObject object from a C unsigned long, or NULL on failure.	https://docs.python.org/3.4/c-api/long.html#c.PyLong_FromUnsignedLong
PyLong_FromSsize_t	A							https://docs.python.org			<pre><code>
PyObject* PyLong_FromSsize_t(Py_ssize_t v)</code></pre><br>Return a new PyLongObject object from a C Py_ssize_t, or NULL on failure.	https://docs.python.org/3.4/c-api/long.html#c.PyLong_FromSsize_t
PyLong_FromSize_t	A							https://docs.python.org			<pre><code>
PyObject* PyLong_FromSize_t(size_t v)</code></pre><br>Return a new PyLongObject object from a C size_t, or NULL on failure.	https://docs.python.org/3.4/c-api/long.html#c.PyLong_FromSize_t
PyLong_FromLongLong	A							https://docs.python.org			<pre><code>
PyObject* PyLong_FromLongLong(PY_LONG_LONG v)</code></pre><br>Return a new PyLongObject object from a C long long, or NULL on failure.	https://docs.python.org/3.4/c-api/long.html#c.PyLong_FromLongLong
PyLong_FromUnsignedLongLong	A							https://docs.python.org			<pre><code>
PyObject* PyLong_FromUnsignedLongLong(unsigned PY_LONG_LONG v)</code></pre><br>Return a new PyLongObject object from a C unsigned long long, or NULL on failure.	https://docs.python.org/3.4/c-api/long.html#c.PyLong_FromUnsignedLongLong
PyLong_FromDouble	A							https://docs.python.org			<pre><code>
PyObject* PyLong_FromDouble(double v)</code></pre><br>Return a new PyLongObject object from the integer part of v, or NULL on failure.	https://docs.python.org/3.4/c-api/long.html#c.PyLong_FromDouble
PyLong_FromString	A							https://docs.python.org			<pre><code>
PyObject* PyLong_FromString(const char *str, char **pend, int base)</code></pre><br>Return a new PyLongObject based on the string value in str, which is interpreted according to the radix in base. If pend is non-NULL, *pend will point to the first character in str which follows the representation of the number. If base is 0, the radix will be determined based on the leading characters of str: if str starts with '0x' or '0X', radix 16 will be used; if str starts with '0o' or '0O', radix 8 will be used; if str starts with '0b' or '0B', radix 2 will be used; otherwise radix 10 will be used. If base is not 0, it must be between 2 and 36, inclusive. Leading spaces are ignored. If there are no digits, ValueError will be raised.	https://docs.python.org/3.4/c-api/long.html#c.PyLong_FromString
PyLong_FromUnicode	A							https://docs.python.org			<pre><code>
PyObject* PyLong_FromUnicode(Py_UNICODE *u, Py_ssize_t length, int base)</code></pre><br>Convert a sequence of Unicode digits to a Python integer value. The Unicode string is first encoded to a byte string using PyUnicode_EncodeDecimal() and then converted using PyLong_FromString().	https://docs.python.org/3.4/c-api/long.html#c.PyLong_FromUnicode
PyLong_FromUnicodeObject	A							https://docs.python.org			<pre><code>
PyObject* PyLong_FromUnicodeObject(PyObject *u, int base)</code></pre><br>Convert a sequence of Unicode digits in the string u to a Python integer value. The Unicode string is first encoded to a byte string using PyUnicode_EncodeDecimal() and then converted using PyLong_FromString().	https://docs.python.org/3.4/c-api/long.html#c.PyLong_FromUnicodeObject
PyLong_FromVoidPtr	A							https://docs.python.org			<pre><code>
PyObject* PyLong_FromVoidPtr(void *p)</code></pre><br>Create a Python integer from the pointer p. The pointer value can be retrieved from the resulting value using PyLong_AsVoidPtr().	https://docs.python.org/3.4/c-api/long.html#c.PyLong_FromVoidPtr
PyLong_AsLong	A							https://docs.python.org			<pre><code>
long PyLong_AsLong(PyObject *obj)</code></pre><br>Return a C long representation of obj. If obj is not an instance of PyLongObject, first call its __int__() method (if present) to convert it to a PyLongObject.	https://docs.python.org/3.4/c-api/long.html#c.PyLong_AsLong
PyLong_AsLongAndOverflow	A							https://docs.python.org			<pre><code>
long PyLong_AsLongAndOverflow(PyObject *obj, int *overflow)</code></pre><br>Return a C long representation of obj. If obj is not an instance of PyLongObject, first call its __int__() method (if present) to convert it to a PyLongObject.	https://docs.python.org/3.4/c-api/long.html#c.PyLong_AsLongAndOverflow
PyLong_AsLongLong	A							https://docs.python.org			<pre><code>
PY_LONG_LONG PyLong_AsLongLong(PyObject *obj)</code></pre><br>Return a C long long representation of obj. If obj is not an instance of PyLongObject, first call its __int__() method (if present) to convert it to a PyLongObject.	https://docs.python.org/3.4/c-api/long.html#c.PyLong_AsLongLong
PyLong_AsLongLongAndOverflow	A							https://docs.python.org			<pre><code>
PY_LONG_LONG PyLong_AsLongLongAndOverflow(PyObject *obj, int *overflow)</code></pre><br>Return a C long long representation of obj. If obj is not an instance of PyLongObject, first call its __int__() method (if present) to convert it to a PyLongObject.	https://docs.python.org/3.4/c-api/long.html#c.PyLong_AsLongLongAndOverflow
PyLong_AsSsize_t	A							https://docs.python.org			<pre><code>
Py_ssize_t PyLong_AsSsize_t(PyObject *pylong)</code></pre><br>Return a C Py_ssize_t representation of pylong. pylong must be an instance of PyLongObject.	https://docs.python.org/3.4/c-api/long.html#c.PyLong_AsSsize_t
PyLong_AsUnsignedLong	A							https://docs.python.org			<pre><code>
unsigned long PyLong_AsUnsignedLong(PyObject *pylong)</code></pre><br>Return a C unsigned long representation of pylong. pylong must be an instance of PyLongObject.	https://docs.python.org/3.4/c-api/long.html#c.PyLong_AsUnsignedLong
PyLong_AsSize_t	A							https://docs.python.org			<pre><code>
size_t PyLong_AsSize_t(PyObject *pylong)</code></pre><br>Return a C size_t representation of pylong. pylong must be an instance of PyLongObject.	https://docs.python.org/3.4/c-api/long.html#c.PyLong_AsSize_t
PyLong_AsUnsignedLongLong	A							https://docs.python.org			<pre><code>
unsigned PY_LONG_LONG PyLong_AsUnsignedLongLong(PyObject *pylong)</code></pre><br>Return a C unsigned PY_LONG_LONG representation of pylong. pylong must be an instance of PyLongObject.	https://docs.python.org/3.4/c-api/long.html#c.PyLong_AsUnsignedLongLong
PyLong_AsUnsignedLongMask	A							https://docs.python.org			<pre><code>
unsigned long PyLong_AsUnsignedLongMask(PyObject *obj)</code></pre><br>Return a C unsigned long representation of obj. If obj is not an instance of PyLongObject, first call its __int__() method (if present) to convert it to a PyLongObject.	https://docs.python.org/3.4/c-api/long.html#c.PyLong_AsUnsignedLongMask
PyLong_AsUnsignedLongLongMask	A							https://docs.python.org			<pre><code>
unsigned PY_LONG_LONG PyLong_AsUnsignedLongLongMask(PyObject *obj)</code></pre><br>Return a C unsigned long long representation of obj. If obj is not an instance of PyLongObject, first call its __int__() method (if present) to convert it to a PyLongObject.	https://docs.python.org/3.4/c-api/long.html#c.PyLong_AsUnsignedLongLongMask
PyLong_AsDouble	A							https://docs.python.org			<pre><code>
double PyLong_AsDouble(PyObject *pylong)</code></pre><br>Return a C double representation of pylong. pylong must be an instance of PyLongObject.	https://docs.python.org/3.4/c-api/long.html#c.PyLong_AsDouble
PyLong_AsVoidPtr	A							https://docs.python.org			<pre><code>
void* PyLong_AsVoidPtr(PyObject *pylong)</code></pre><br>Convert a Python integer pylong to a C void pointer. If pylong cannot be converted, an OverflowError will be raised. This is only assured to produce a usable void pointer for values created with PyLong_FromVoidPtr().	https://docs.python.org/3.4/c-api/long.html#c.PyLong_AsVoidPtr
PyMapping_Check	A							https://docs.python.org			<pre><code>
int PyMapping_Check(PyObject *o)</code></pre><br>Return 1 if the object provides mapping protocol, and 0 otherwise. This function always succeeds.	https://docs.python.org/3.4/c-api/mapping.html#c.PyMapping_Check
PyMapping_Size	A							https://docs.python.org			<pre><code>
Py_ssize_t PyMapping_Size(PyObject *o)</code></pre><br>Returns the number of keys in object o on success, and -1 on failure. For objects that do not provide mapping protocol, this is equivalent to the Python expression len(o).	https://docs.python.org/3.4/c-api/mapping.html#c.PyMapping_Size
PyMapping_DelItemString	A							https://docs.python.org			<pre><code>
int PyMapping_DelItemString(PyObject *o, const char *key)</code></pre><br>Remove the mapping for object key from the object o. Return -1 on failure. This is equivalent to the Python statement del o[key].	https://docs.python.org/3.4/c-api/mapping.html#c.PyMapping_DelItemString
PyMapping_DelItem	A							https://docs.python.org			<pre><code>
int PyMapping_DelItem(PyObject *o, PyObject *key)</code></pre><br>Remove the mapping for object key from the object o. Return -1 on failure. This is equivalent to the Python statement del o[key].	https://docs.python.org/3.4/c-api/mapping.html#c.PyMapping_DelItem
PyMapping_HasKeyString	A							https://docs.python.org			<pre><code>
int PyMapping_HasKeyString(PyObject *o, const char *key)</code></pre><br>On success, return 1 if the mapping object has the key key and 0 otherwise. This is equivalent to the Python expression key in o. This function always succeeds.	https://docs.python.org/3.4/c-api/mapping.html#c.PyMapping_HasKeyString
PyMapping_HasKey	A							https://docs.python.org			<pre><code>
int PyMapping_HasKey(PyObject *o, PyObject *key)</code></pre><br>Return 1 if the mapping object has the key key and 0 otherwise. This is equivalent to the Python expression key in o. This function always succeeds.	https://docs.python.org/3.4/c-api/mapping.html#c.PyMapping_HasKey
PyMapping_Keys	A							https://docs.python.org			<pre><code>
PyObject* PyMapping_Keys(PyObject *o)</code></pre><br>On success, return a list of the keys in object o. On failure, return NULL. This is equivalent to the Python expression list(o.keys()).	https://docs.python.org/3.4/c-api/mapping.html#c.PyMapping_Keys
PyMapping_Values	A							https://docs.python.org			<pre><code>
PyObject* PyMapping_Values(PyObject *o)</code></pre><br>On success, return a list of the values in object o. On failure, return NULL. This is equivalent to the Python expression list(o.values()).	https://docs.python.org/3.4/c-api/mapping.html#c.PyMapping_Values
PyMapping_Items	A							https://docs.python.org			<pre><code>
PyObject* PyMapping_Items(PyObject *o)</code></pre><br>On success, return a list of the items in object o, where each item is a tuple containing a key-value pair. On failure, return NULL. This is equivalent to the Python expression list(o.items()).	https://docs.python.org/3.4/c-api/mapping.html#c.PyMapping_Items
PyMapping_GetItemString	A							https://docs.python.org			<pre><code>
PyObject* PyMapping_GetItemString(PyObject *o, const char *key)</code></pre><br>Return element of o corresponding to the object key or NULL on failure. This is the equivalent of the Python expression o[key].	https://docs.python.org/3.4/c-api/mapping.html#c.PyMapping_GetItemString
PyMapping_SetItemString	A							https://docs.python.org			<pre><code>
int PyMapping_SetItemString(PyObject *o, const char *key, PyObject *v)</code></pre><br>Map the object key to the value v in object o. Returns -1 on failure. This is the equivalent of the Python statement o[key] = v.	https://docs.python.org/3.4/c-api/mapping.html#c.PyMapping_SetItemString
PyMarshal_WriteLongToFile	A							https://docs.python.org			<pre><code>
void PyMarshal_WriteLongToFile(long value, FILE *file, int version)</code></pre><br>Marshal a long integer, value, to file. This will only write the least-significant 32 bits of value; regardless of the size of the native long type. version indicates the file format.	https://docs.python.org/3.4/c-api/marshal.html#c.PyMarshal_WriteLongToFile
PyMarshal_WriteObjectToFile	A							https://docs.python.org			<pre><code>
void PyMarshal_WriteObjectToFile(PyObject *value, FILE *file, int version)</code></pre><br>Marshal a Python object, value, to file. version indicates the file format.	https://docs.python.org/3.4/c-api/marshal.html#c.PyMarshal_WriteObjectToFile
PyMarshal_WriteObjectToString	A							https://docs.python.org			<pre><code>
PyObject* PyMarshal_WriteObjectToString(PyObject *value, int version)</code></pre><br>Return a string object containing the marshalled representation of value. version indicates the file format.	https://docs.python.org/3.4/c-api/marshal.html#c.PyMarshal_WriteObjectToString
PyMarshal_ReadLongFromFile	A							https://docs.python.org			<pre><code>
long PyMarshal_ReadLongFromFile(FILE *file)</code></pre><br>Return a C long from the data stream in a FILE* opened for reading. Only a 32-bit value can be read in using this function, regardless of the native size of long.	https://docs.python.org/3.4/c-api/marshal.html#c.PyMarshal_ReadLongFromFile
PyMarshal_ReadShortFromFile	A							https://docs.python.org			<pre><code>
int PyMarshal_ReadShortFromFile(FILE *file)</code></pre><br>Return a C short from the data stream in a FILE* opened for reading. Only a 16-bit value can be read in using this function, regardless of the native size of short.	https://docs.python.org/3.4/c-api/marshal.html#c.PyMarshal_ReadShortFromFile
PyMarshal_ReadObjectFromFile	A							https://docs.python.org			<pre><code>
PyObject* PyMarshal_ReadObjectFromFile(FILE *file)</code></pre><br>Return a Python object from the data stream in a FILE* opened for reading.	https://docs.python.org/3.4/c-api/marshal.html#c.PyMarshal_ReadObjectFromFile
PyMarshal_ReadLastObjectFromFile	A							https://docs.python.org			<pre><code>
PyObject* PyMarshal_ReadLastObjectFromFile(FILE *file)</code></pre><br>Return a Python object from the data stream in a FILE* opened for reading. Unlike PyMarshal_ReadObjectFromFile(), this function assumes that no further objects will be read from the file, allowing it to aggressively load file data into memory so that the de-serialization can operate from data in memory rather than reading a byte at a time from the file. Only use these variant if you are certain that you won’t be reading anything else from the file.	https://docs.python.org/3.4/c-api/marshal.html#c.PyMarshal_ReadLastObjectFromFile
PyMarshal_ReadObjectFromString	A							https://docs.python.org			<pre><code>
PyObject* PyMarshal_ReadObjectFromString(const char *string, Py_ssize_t len)</code></pre><br>Return a Python object from the data stream in a character buffer containing len bytes pointed to by string.	https://docs.python.org/3.4/c-api/marshal.html#c.PyMarshal_ReadObjectFromString
PyMem_RawMalloc	A							https://docs.python.org			<pre><code>
void* PyMem_RawMalloc(size_t n)</code></pre><br>Allocates n bytes and returns a pointer of type void* to the allocated memory, or NULL if the request fails. Requesting zero bytes returns a distinct non-NULL pointer if possible, as if PyMem_RawMalloc(1) had been called instead. The memory will not have been initialized in any way.	https://docs.python.org/3.4/c-api/memory.html#c.PyMem_RawMalloc
PyMem_RawRealloc	A							https://docs.python.org			<pre><code>
void* PyMem_RawRealloc(void *p, size_t n)</code></pre><br>Resizes the memory block pointed to by p to n bytes. The contents will be unchanged to the minimum of the old and the new sizes. If p is NULL, the call is equivalent to PyMem_RawMalloc(n); else if n is equal to zero, the memory block is resized but is not freed, and the returned pointer is non-NULL. Unless p is NULL, it must have been returned by a previous call to PyMem_RawMalloc() or PyMem_RawRealloc(). If the request fails, PyMem_RawRealloc() returns NULL and p remains a valid pointer to the previous memory area.	https://docs.python.org/3.4/c-api/memory.html#c.PyMem_RawRealloc
PyMem_RawFree	A							https://docs.python.org			<pre><code>
void PyMem_RawFree(void *p)</code></pre><br>Frees the memory block pointed to by p, which must have been returned by a previous call to PyMem_RawMalloc() or PyMem_RawRealloc(). Otherwise, or if PyMem_Free(p) has been called before, undefined behavior occurs. If p is NULL, no operation is performed.	https://docs.python.org/3.4/c-api/memory.html#c.PyMem_RawFree
PyMem_Malloc	A							https://docs.python.org			<pre><code>
void* PyMem_Malloc(size_t n)</code></pre><br>Allocates n bytes and returns a pointer of type void* to the allocated memory, or NULL if the request fails. Requesting zero bytes returns a distinct non-NULL pointer if possible, as if PyMem_Malloc(1) had been called instead. The memory will not have been initialized in any way.	https://docs.python.org/3.4/c-api/memory.html#c.PyMem_Malloc
PyMem_Realloc	A							https://docs.python.org			<pre><code>
void* PyMem_Realloc(void *p, size_t n)</code></pre><br>Resizes the memory block pointed to by p to n bytes. The contents will be unchanged to the minimum of the old and the new sizes. If p is NULL, the call is equivalent to PyMem_Malloc(n); else if n is equal to zero, the memory block is resized but is not freed, and the returned pointer is non-NULL. Unless p is NULL, it must have been returned by a previous call to PyMem_Malloc() or PyMem_Realloc(). If the request fails, PyMem_Realloc() returns NULL and p remains a valid pointer to the previous memory area.	https://docs.python.org/3.4/c-api/memory.html#c.PyMem_Realloc
PyMem_Free	A							https://docs.python.org			<pre><code>
void PyMem_Free(void *p)</code></pre><br>Frees the memory block pointed to by p, which must have been returned by a previous call to PyMem_Malloc() or PyMem_Realloc(). Otherwise, or if PyMem_Free(p) has been called before, undefined behavior occurs. If p is NULL, no operation is performed.	https://docs.python.org/3.4/c-api/memory.html#c.PyMem_Free
PyMem_New	A							https://docs.python.org			<pre><code>
TYPE* PyMem_New(TYPE, size_t n)</code></pre><br>Same as PyMem_Malloc(), but allocates (n * sizeof(TYPE)) bytes of memory. Returns a pointer cast to TYPE*. The memory will not have been initialized in any way.	https://docs.python.org/3.4/c-api/memory.html#c.PyMem_New
PyMem_Resize	A							https://docs.python.org			<pre><code>
TYPE* PyMem_Resize(void *p, TYPE, size_t n)</code></pre><br>Same as PyMem_Realloc(), but the memory block is resized to (n * sizeof(TYPE)) bytes. Returns a pointer cast to TYPE*. On return, p will be a pointer to the new memory area, or NULL in the event of failure. This is a C preprocessor macro; p is always reassigned. Save the original value of p to avoid losing memory when handling errors.	https://docs.python.org/3.4/c-api/memory.html#c.PyMem_Resize
PyMem_Del	A							https://docs.python.org			<pre><code>
void PyMem_Del(void *p)</code></pre><br>Same as PyMem_Free().	https://docs.python.org/3.4/c-api/memory.html#c.PyMem_Del
PyMem_GetAllocator	A							https://docs.python.org			<pre><code>
void PyMem_GetAllocator(PyMemAllocatorDomain domain, PyMemAllocator *allocator)</code></pre><br>Get the memory block allocator of the specified domain.	https://docs.python.org/3.4/c-api/memory.html#c.PyMem_GetAllocator
PyMem_SetAllocator	A							https://docs.python.org			<pre><code>
void PyMem_SetAllocator(PyMemAllocatorDomain domain, PyMemAllocator *allocator)</code></pre><br>Set the memory block allocator of the specified domain.	https://docs.python.org/3.4/c-api/memory.html#c.PyMem_SetAllocator
PyMem_SetupDebugHooks	A							https://docs.python.org			<pre><code>
void PyMem_SetupDebugHooks(void)</code></pre><br>Setup hooks to detect bugs in the following Python memory allocator functions:	https://docs.python.org/3.4/c-api/memory.html#c.PyMem_SetupDebugHooks
PyObject_GetArenaAllocator	A							https://docs.python.org			<pre><code>
PyObject_GetArenaAllocator(PyObjectArenaAllocator *allocator)</code></pre><br>Get the arena allocator.	https://docs.python.org/3.4/c-api/memory.html#c.PyObject_GetArenaAllocator
PyObject_SetArenaAllocator	A							https://docs.python.org			<pre><code>
PyObject_SetArenaAllocator(PyObjectArenaAllocator *allocator)</code></pre><br>Set the arena allocator.	https://docs.python.org/3.4/c-api/memory.html#c.PyObject_SetArenaAllocator
PyMem_RawMalloc	A							https://docs.python.org			<pre><code>
void* PyMem_RawMalloc(size_t n)</code></pre><br>Allocates n bytes and returns a pointer of type void* to the allocated memory, or NULL if the request fails. Requesting zero bytes returns a distinct non-NULL pointer if possible, as if PyMem_RawMalloc(1) had been called instead. The memory will not have been initialized in any way.	https://docs.python.org/3.4/c-api/memory.html#c.PyMem_RawMalloc
PyMem_RawRealloc	A							https://docs.python.org			<pre><code>
void* PyMem_RawRealloc(void *p, size_t n)</code></pre><br>Resizes the memory block pointed to by p to n bytes. The contents will be unchanged to the minimum of the old and the new sizes. If p is NULL, the call is equivalent to PyMem_RawMalloc(n); else if n is equal to zero, the memory block is resized but is not freed, and the returned pointer is non-NULL. Unless p is NULL, it must have been returned by a previous call to PyMem_RawMalloc() or PyMem_RawRealloc(). If the request fails, PyMem_RawRealloc() returns NULL and p remains a valid pointer to the previous memory area.	https://docs.python.org/3.4/c-api/memory.html#c.PyMem_RawRealloc
PyMem_RawFree	A							https://docs.python.org			<pre><code>
void PyMem_RawFree(void *p)</code></pre><br>Frees the memory block pointed to by p, which must have been returned by a previous call to PyMem_RawMalloc() or PyMem_RawRealloc(). Otherwise, or if PyMem_Free(p) has been called before, undefined behavior occurs. If p is NULL, no operation is performed.	https://docs.python.org/3.4/c-api/memory.html#c.PyMem_RawFree
PyMem_Malloc	A							https://docs.python.org			<pre><code>
void* PyMem_Malloc(size_t n)</code></pre><br>Allocates n bytes and returns a pointer of type void* to the allocated memory, or NULL if the request fails. Requesting zero bytes returns a distinct non-NULL pointer if possible, as if PyMem_Malloc(1) had been called instead. The memory will not have been initialized in any way.	https://docs.python.org/3.4/c-api/memory.html#c.PyMem_Malloc
PyMem_Realloc	A							https://docs.python.org			<pre><code>
void* PyMem_Realloc(void *p, size_t n)</code></pre><br>Resizes the memory block pointed to by p to n bytes. The contents will be unchanged to the minimum of the old and the new sizes. If p is NULL, the call is equivalent to PyMem_Malloc(n); else if n is equal to zero, the memory block is resized but is not freed, and the returned pointer is non-NULL. Unless p is NULL, it must have been returned by a previous call to PyMem_Malloc() or PyMem_Realloc(). If the request fails, PyMem_Realloc() returns NULL and p remains a valid pointer to the previous memory area.	https://docs.python.org/3.4/c-api/memory.html#c.PyMem_Realloc
PyMem_Free	A							https://docs.python.org			<pre><code>
void PyMem_Free(void *p)</code></pre><br>Frees the memory block pointed to by p, which must have been returned by a previous call to PyMem_Malloc() or PyMem_Realloc(). Otherwise, or if PyMem_Free(p) has been called before, undefined behavior occurs. If p is NULL, no operation is performed.	https://docs.python.org/3.4/c-api/memory.html#c.PyMem_Free
PyMem_New	A							https://docs.python.org			<pre><code>
TYPE* PyMem_New(TYPE, size_t n)</code></pre><br>Same as PyMem_Malloc(), but allocates (n * sizeof(TYPE)) bytes of memory. Returns a pointer cast to TYPE*. The memory will not have been initialized in any way.	https://docs.python.org/3.4/c-api/memory.html#c.PyMem_New
PyMem_Resize	A							https://docs.python.org			<pre><code>
TYPE* PyMem_Resize(void *p, TYPE, size_t n)</code></pre><br>Same as PyMem_Realloc(), but the memory block is resized to (n * sizeof(TYPE)) bytes. Returns a pointer cast to TYPE*. On return, p will be a pointer to the new memory area, or NULL in the event of failure. This is a C preprocessor macro; p is always reassigned. Save the original value of p to avoid losing memory when handling errors.	https://docs.python.org/3.4/c-api/memory.html#c.PyMem_Resize
PyMem_Del	A							https://docs.python.org			<pre><code>
void PyMem_Del(void *p)</code></pre><br>Same as PyMem_Free().	https://docs.python.org/3.4/c-api/memory.html#c.PyMem_Del
PyMem_GetAllocator	A							https://docs.python.org			<pre><code>
void PyMem_GetAllocator(PyMemAllocatorDomain domain, PyMemAllocator *allocator)</code></pre><br>Get the memory block allocator of the specified domain.	https://docs.python.org/3.4/c-api/memory.html#c.PyMem_GetAllocator
PyMem_SetAllocator	A							https://docs.python.org			<pre><code>
void PyMem_SetAllocator(PyMemAllocatorDomain domain, PyMemAllocator *allocator)</code></pre><br>Set the memory block allocator of the specified domain.	https://docs.python.org/3.4/c-api/memory.html#c.PyMem_SetAllocator
PyMem_SetupDebugHooks	A							https://docs.python.org			<pre><code>
void PyMem_SetupDebugHooks(void)</code></pre><br>Setup hooks to detect bugs in the following Python memory allocator functions:	https://docs.python.org/3.4/c-api/memory.html#c.PyMem_SetupDebugHooks
PyObject_GetArenaAllocator	A							https://docs.python.org			<pre><code>
PyObject_GetArenaAllocator(PyObjectArenaAllocator *allocator)</code></pre><br>Get the arena allocator.	https://docs.python.org/3.4/c-api/memory.html#c.PyObject_GetArenaAllocator
PyObject_SetArenaAllocator	A							https://docs.python.org			<pre><code>
PyObject_SetArenaAllocator(PyObjectArenaAllocator *allocator)</code></pre><br>Set the arena allocator.	https://docs.python.org/3.4/c-api/memory.html#c.PyObject_SetArenaAllocator
PyMemoryView_FromObject	A							https://docs.python.org			<pre><code>
PyObject *PyMemoryView_FromObject(PyObject *obj)</code></pre><br>Create a memoryview object from an object that provides the buffer interface. If obj supports writable buffer exports, the memoryview object will be read/write, otherwise it may be either read-only or read/write at the discretion of the exporter.	https://docs.python.org/3.4/c-api/memoryview.html#c.PyMemoryView_FromObject
PyMemoryView_FromMemory	A							https://docs.python.org			<pre><code>
PyObject *PyMemoryView_FromMemory(char *mem, Py_ssize_t size, int flags)</code></pre><br>Create a memoryview object using mem as the underlying buffer. flags can be one of PyBUF_READ or PyBUF_WRITE.	https://docs.python.org/3.4/c-api/memoryview.html#c.PyMemoryView_FromMemory
PyMemoryView_FromBuffer	A							https://docs.python.org			<pre><code>
PyObject *PyMemoryView_FromBuffer(Py_buffer *view)</code></pre><br>Create a memoryview object wrapping the given buffer structure view. For simple byte buffers, PyMemoryView_FromMemory() is the preferred function.	https://docs.python.org/3.4/c-api/memoryview.html#c.PyMemoryView_FromBuffer
PyMemoryView_GetContiguous	A							https://docs.python.org			<pre><code>
PyObject *PyMemoryView_GetContiguous(PyObject *obj, int buffertype, char order)</code></pre><br>Create a memoryview object to a contiguous chunk of memory (in either ‘C’ or ‘F’ortran order) from an object that defines the buffer interface. If memory is contiguous, the memoryview object points to the original memory. Otherwise, a copy is made and the memoryview points to a new bytes object.	https://docs.python.org/3.4/c-api/memoryview.html#c.PyMemoryView_GetContiguous
PyMemoryView_Check	A							https://docs.python.org			<pre><code>
int PyMemoryView_Check(PyObject *obj)</code></pre><br>Return true if the object obj is a memoryview object. It is not currently allowed to create subclasses of memoryview.	https://docs.python.org/3.4/c-api/memoryview.html#c.PyMemoryView_Check
PyMemoryView_GET_BUFFER	A							https://docs.python.org			<pre><code>
Py_buffer *PyMemoryView_GET_BUFFER(PyObject *mview)</code></pre><br>Return a pointer to the memoryview’s private copy of the exporter’s buffer. mview must be a memoryview instance; this macro doesn’t check its type, you must do it yourself or you will risk crashes.	https://docs.python.org/3.4/c-api/memoryview.html#c.PyMemoryView_GET_BUFFER
PyMemoryView_GET_BASE	A							https://docs.python.org			<pre><code>
Py_buffer *PyMemoryView_GET_BASE(PyObject *mview)</code></pre><br>Return either a pointer to the exporting object that the memoryview is based on or NULL if the memoryview has been created by one of the functions PyMemoryView_FromMemory() or PyMemoryView_FromBuffer(). mview must be a memoryview instance.	https://docs.python.org/3.4/c-api/memoryview.html#c.PyMemoryView_GET_BASE
PyInstanceMethod_Check	A							https://docs.python.org			<pre><code>
int PyInstanceMethod_Check(PyObject *o)</code></pre><br>Return true if o is an instance method object (has type PyInstanceMethod_Type). The parameter must not be NULL.	https://docs.python.org/3.4/c-api/method.html#c.PyInstanceMethod_Check
PyInstanceMethod_New	A							https://docs.python.org			<pre><code>
PyObject* PyInstanceMethod_New(PyObject *func)</code></pre><br>Return a new instance method object, with func being any callable object func is the function that will be called when the instance method is called.	https://docs.python.org/3.4/c-api/method.html#c.PyInstanceMethod_New
PyInstanceMethod_Function	A							https://docs.python.org			<pre><code>
PyObject* PyInstanceMethod_Function(PyObject *im)</code></pre><br>Return the function object associated with the instance method im.	https://docs.python.org/3.4/c-api/method.html#c.PyInstanceMethod_Function
PyInstanceMethod_GET_FUNCTION	A							https://docs.python.org			<pre><code>
PyObject* PyInstanceMethod_GET_FUNCTION(PyObject *im)</code></pre><br>Macro version of PyInstanceMethod_Function() which avoids error checking.	https://docs.python.org/3.4/c-api/method.html#c.PyInstanceMethod_GET_FUNCTION
PyMethod_Check	A							https://docs.python.org			<pre><code>
int PyMethod_Check(PyObject *o)</code></pre><br>Return true if o is a method object (has type PyMethod_Type). The parameter must not be NULL.	https://docs.python.org/3.4/c-api/method.html#c.PyMethod_Check
PyMethod_New	A							https://docs.python.org			<pre><code>
PyObject* PyMethod_New(PyObject *func, PyObject *self)</code></pre><br>Return a new method object, with func being any callable object and self the instance the method should be bound. func is the function that will be called when the method is called. self must not be NULL.	https://docs.python.org/3.4/c-api/method.html#c.PyMethod_New
PyMethod_Function	A							https://docs.python.org			<pre><code>
PyObject* PyMethod_Function(PyObject *meth)</code></pre><br>Return the function object associated with the method meth.	https://docs.python.org/3.4/c-api/method.html#c.PyMethod_Function
PyMethod_GET_FUNCTION	A							https://docs.python.org			<pre><code>
PyObject* PyMethod_GET_FUNCTION(PyObject *meth)</code></pre><br>Macro version of PyMethod_Function() which avoids error checking.	https://docs.python.org/3.4/c-api/method.html#c.PyMethod_GET_FUNCTION
PyMethod_Self	A							https://docs.python.org			<pre><code>
PyObject* PyMethod_Self(PyObject *meth)</code></pre><br>Return the instance associated with the method meth.	https://docs.python.org/3.4/c-api/method.html#c.PyMethod_Self
PyMethod_GET_SELF	A							https://docs.python.org			<pre><code>
PyObject* PyMethod_GET_SELF(PyObject *meth)</code></pre><br>Macro version of PyMethod_Self() which avoids error checking.	https://docs.python.org/3.4/c-api/method.html#c.PyMethod_GET_SELF
PyMethod_ClearFreeList	A							https://docs.python.org			<pre><code>
int PyMethod_ClearFreeList()</code></pre><br>Clear the free list. Return the total number of freed items.	https://docs.python.org/3.4/c-api/method.html#c.PyMethod_ClearFreeList
PyModule_Check	A							https://docs.python.org			<pre><code>
int PyModule_Check(PyObject *p)</code></pre><br>Return true if p is a module object, or a subtype of a module object.	https://docs.python.org/3.4/c-api/module.html#c.PyModule_Check
PyModule_CheckExact	A							https://docs.python.org			<pre><code>
int PyModule_CheckExact(PyObject *p)</code></pre><br>Return true if p is a module object, but not a subtype of PyModule_Type.	https://docs.python.org/3.4/c-api/module.html#c.PyModule_CheckExact
PyModule_NewObject	A							https://docs.python.org			<pre><code>
PyObject* PyModule_NewObject(PyObject *name)</code></pre><br>Return a new module object with the __name__ attribute set to name. The module’s __name__, __doc__, __package__, and __loader__ attributes are filled in (all but __name__ are set to None); the caller is responsible for providing a __file__ attribute.	https://docs.python.org/3.4/c-api/module.html#c.PyModule_NewObject
PyModule_New	A							https://docs.python.org			<pre><code>
PyObject* PyModule_New(const char *name)</code></pre><br>Similar to PyImport_NewObject(), but the name is an UTF-8 encoded string instead of a Unicode object.	https://docs.python.org/3.4/c-api/module.html#c.PyModule_New
PyModule_GetDict	A							https://docs.python.org			<pre><code>
PyObject* PyModule_GetDict(PyObject *module)</code></pre><br>Return the dictionary object that implements module‘s namespace; this object is the same as the __dict__ attribute of the module object. This function never fails. It is recommended extensions use other PyModule_*() and PyObject_*() functions rather than directly manipulate a module’s __dict__.	https://docs.python.org/3.4/c-api/module.html#c.PyModule_GetDict
PyModule_GetNameObject	A							https://docs.python.org			<pre><code>
PyObject* PyModule_GetNameObject(PyObject *module)</code></pre><br>Return module‘s __name__ value. If the module does not provide one, or if it is not a string, SystemError is raised and NULL is returned.	https://docs.python.org/3.4/c-api/module.html#c.PyModule_GetNameObject
PyModule_GetName	A							https://docs.python.org			<pre><code>
char* PyModule_GetName(PyObject *module)</code></pre><br>Similar to PyModule_GetNameObject() but return the name encoded to 'utf-8'.	https://docs.python.org/3.4/c-api/module.html#c.PyModule_GetName
PyModule_GetFilenameObject	A							https://docs.python.org			<pre><code>
PyObject* PyModule_GetFilenameObject(PyObject *module)</code></pre><br>Return the name of the file from which module was loaded using module‘s __file__ attribute. If this is not defined, or if it is not a unicode string, raise SystemError and return NULL; otherwise return a reference to a Unicode object.	https://docs.python.org/3.4/c-api/module.html#c.PyModule_GetFilenameObject
PyModule_GetFilename	A							https://docs.python.org			<pre><code>
char* PyModule_GetFilename(PyObject *module)</code></pre><br>Similar to PyModule_GetFilenameObject() but return the filename encoded to ‘utf-8’.	https://docs.python.org/3.4/c-api/module.html#c.PyModule_GetFilename
PyModule_GetState	A							https://docs.python.org			<pre><code>
void* PyModule_GetState(PyObject *module)</code></pre><br>Return the “state” of the module, that is, a pointer to the block of memory allocated at module creation time, or NULL. See PyModuleDef.m_size.	https://docs.python.org/3.4/c-api/module.html#c.PyModule_GetState
PyModule_GetDef	A							https://docs.python.org			<pre><code>
PyModuleDef* PyModule_GetDef(PyObject *module)</code></pre><br>Return a pointer to the PyModuleDef struct from which the module was created, or NULL if the module wasn’t created with PyModule_Create().	https://docs.python.org/3.4/c-api/module.html#c.PyModule_GetDef
PyState_FindModule	A							https://docs.python.org			<pre><code>
PyObject* PyState_FindModule(PyModuleDef *def)</code></pre><br>Returns the module object that was created from def for the current interpreter. This method requires that the module object has been attached to the interpreter state with PyState_AddModule() beforehand. In case the corresponding module object is not found or has not been attached to the interpreter state yet, it returns NULL.	https://docs.python.org/3.4/c-api/module.html#c.PyState_FindModule
PyState_AddModule	A							https://docs.python.org			<pre><code>
int PyState_AddModule(PyObject *module, PyModuleDef *def)</code></pre><br>Attaches the module object passed to the function to the interpreter state. This allows the module object to be accessible via PyState_FindModule().	https://docs.python.org/3.4/c-api/module.html#c.PyState_AddModule
PyState_RemoveModule	A							https://docs.python.org			<pre><code>
int PyState_RemoveModule(PyModuleDef *def)</code></pre><br>Removes the module object created from def from the interpreter state.	https://docs.python.org/3.4/c-api/module.html#c.PyState_RemoveModule
PyModule_Create	A							https://docs.python.org			<pre><code>
PyObject* PyModule_Create(PyModuleDef *module)</code></pre><br>Create a new module object, given the definition in module. This behaves like PyModule_Create2() with module_api_version set to PYTHON_API_VERSION.	https://docs.python.org/3.4/c-api/module.html#c.PyModule_Create
PyModule_Create2	A							https://docs.python.org			<pre><code>
PyObject* PyModule_Create2(PyModuleDef *module, int module_api_version)</code></pre><br>Create a new module object, given the definition in module, assuming the API version module_api_version. If that version does not match the version of the running interpreter, a RuntimeWarning is emitted.	https://docs.python.org/3.4/c-api/module.html#c.PyModule_Create2
PyModule_AddObject	A							https://docs.python.org			<pre><code>
int PyModule_AddObject(PyObject *module, const char *name, PyObject *value)</code></pre><br>Add an object to module as name. This is a convenience function which can be used from the module’s initialization function. This steals a reference to value. Return -1 on error, 0 on success.	https://docs.python.org/3.4/c-api/module.html#c.PyModule_AddObject
PyModule_AddIntConstant	A							https://docs.python.org			<pre><code>
int PyModule_AddIntConstant(PyObject *module, const char *name, long value)</code></pre><br>Add an integer constant to module as name. This convenience function can be used from the module’s initialization function. Return -1 on error, 0 on success.	https://docs.python.org/3.4/c-api/module.html#c.PyModule_AddIntConstant
PyModule_AddStringConstant	A							https://docs.python.org			<pre><code>
int PyModule_AddStringConstant(PyObject *module, const char *name, const char *value)</code></pre><br>Add a string constant to module as name. This convenience function can be used from the module’s initialization function. The string value must be null-terminated. Return -1 on error, 0 on success.	https://docs.python.org/3.4/c-api/module.html#c.PyModule_AddStringConstant
PyModule_AddIntMacro	A							https://docs.python.org			<pre><code>
int PyModule_AddIntMacro(PyObject *module, macro)</code></pre><br>Add an int constant to module. The name and the value are taken from macro. For example PyModule_AddIntMacro(module, AF_INET) adds the int constant AF_INET with the value of AF_INET to module. Return -1 on error, 0 on success.	https://docs.python.org/3.4/c-api/module.html#c.PyModule_AddIntMacro
PyModule_AddStringMacro	A							https://docs.python.org			<pre><code>
int PyModule_AddStringMacro(PyObject *module, macro)</code></pre><br>Add a string constant to module.	https://docs.python.org/3.4/c-api/module.html#c.PyModule_AddStringMacro
PyModule_Create	A							https://docs.python.org			<pre><code>
PyObject* PyModule_Create(PyModuleDef *module)</code></pre><br>Create a new module object, given the definition in module. This behaves like PyModule_Create2() with module_api_version set to PYTHON_API_VERSION.	https://docs.python.org/3.4/c-api/module.html#c.PyModule_Create
PyModule_Create2	A							https://docs.python.org			<pre><code>
PyObject* PyModule_Create2(PyModuleDef *module, int module_api_version)</code></pre><br>Create a new module object, given the definition in module, assuming the API version module_api_version. If that version does not match the version of the running interpreter, a RuntimeWarning is emitted.	https://docs.python.org/3.4/c-api/module.html#c.PyModule_Create2
PyModule_AddObject	A							https://docs.python.org			<pre><code>
int PyModule_AddObject(PyObject *module, const char *name, PyObject *value)</code></pre><br>Add an object to module as name. This is a convenience function which can be used from the module’s initialization function. This steals a reference to value. Return -1 on error, 0 on success.	https://docs.python.org/3.4/c-api/module.html#c.PyModule_AddObject
PyModule_AddIntConstant	A							https://docs.python.org			<pre><code>
int PyModule_AddIntConstant(PyObject *module, const char *name, long value)</code></pre><br>Add an integer constant to module as name. This convenience function can be used from the module’s initialization function. Return -1 on error, 0 on success.	https://docs.python.org/3.4/c-api/module.html#c.PyModule_AddIntConstant
PyModule_AddStringConstant	A							https://docs.python.org			<pre><code>
int PyModule_AddStringConstant(PyObject *module, const char *name, const char *value)</code></pre><br>Add a string constant to module as name. This convenience function can be used from the module’s initialization function. The string value must be null-terminated. Return -1 on error, 0 on success.	https://docs.python.org/3.4/c-api/module.html#c.PyModule_AddStringConstant
PyModule_AddIntMacro	A							https://docs.python.org			<pre><code>
int PyModule_AddIntMacro(PyObject *module, macro)</code></pre><br>Add an int constant to module. The name and the value are taken from macro. For example PyModule_AddIntMacro(module, AF_INET) adds the int constant AF_INET with the value of AF_INET to module. Return -1 on error, 0 on success.	https://docs.python.org/3.4/c-api/module.html#c.PyModule_AddIntMacro
PyModule_AddStringMacro	A							https://docs.python.org			<pre><code>
int PyModule_AddStringMacro(PyObject *module, macro)</code></pre><br>Add a string constant to module.	https://docs.python.org/3.4/c-api/module.html#c.PyModule_AddStringMacro
PyNumber_Check	A							https://docs.python.org			<pre><code>
int PyNumber_Check(PyObject *o)</code></pre><br>Returns 1 if the object o provides numeric protocols, and false otherwise. This function always succeeds.	https://docs.python.org/3.4/c-api/number.html#c.PyNumber_Check
PyNumber_Add	A							https://docs.python.org			<pre><code>
PyObject* PyNumber_Add(PyObject *o1, PyObject *o2)</code></pre><br>Returns the result of adding o1 and o2, or NULL on failure. This is the equivalent of the Python expression o1 + o2.	https://docs.python.org/3.4/c-api/number.html#c.PyNumber_Add
PyNumber_Subtract	A							https://docs.python.org			<pre><code>
PyObject* PyNumber_Subtract(PyObject *o1, PyObject *o2)</code></pre><br>Returns the result of subtracting o2 from o1, or NULL on failure. This is the equivalent of the Python expression o1 - o2.	https://docs.python.org/3.4/c-api/number.html#c.PyNumber_Subtract
PyNumber_Multiply	A							https://docs.python.org			<pre><code>
PyObject* PyNumber_Multiply(PyObject *o1, PyObject *o2)</code></pre><br>Returns the result of multiplying o1 and o2, or NULL on failure. This is the equivalent of the Python expression o1 * o2.	https://docs.python.org/3.4/c-api/number.html#c.PyNumber_Multiply
PyNumber_FloorDivide	A							https://docs.python.org			<pre><code>
PyObject* PyNumber_FloorDivide(PyObject *o1, PyObject *o2)</code></pre><br>Return the floor of o1 divided by o2, or NULL on failure. This is equivalent to the “classic” division of integers.	https://docs.python.org/3.4/c-api/number.html#c.PyNumber_FloorDivide
PyNumber_TrueDivide	A							https://docs.python.org			<pre><code>
PyObject* PyNumber_TrueDivide(PyObject *o1, PyObject *o2)</code></pre><br>Return a reasonable approximation for the mathematical value of o1 divided by o2, or NULL on failure. The return value is “approximate” because binary floating point numbers are approximate; it is not possible to represent all real numbers in base two. This function can return a floating point value when passed two integers.	https://docs.python.org/3.4/c-api/number.html#c.PyNumber_TrueDivide
PyNumber_Remainder	A							https://docs.python.org			<pre><code>
PyObject* PyNumber_Remainder(PyObject *o1, PyObject *o2)</code></pre><br>Returns the remainder of dividing o1 by o2, or NULL on failure. This is the equivalent of the Python expression o1 % o2.	https://docs.python.org/3.4/c-api/number.html#c.PyNumber_Remainder
PyNumber_Divmod	A							https://docs.python.org			<pre><code>
PyObject* PyNumber_Divmod(PyObject *o1, PyObject *o2)</code></pre><br>See the built-in function divmod(). Returns NULL on failure. This is the equivalent of the Python expression divmod(o1, o2).	https://docs.python.org/3.4/c-api/number.html#c.PyNumber_Divmod
PyNumber_Power	A							https://docs.python.org			<pre><code>
PyObject* PyNumber_Power(PyObject *o1, PyObject *o2, PyObject *o3)</code></pre><br>See the built-in function pow(). Returns NULL on failure. This is the equivalent of the Python expression pow(o1, o2, o3), where o3 is optional. If o3 is to be ignored, pass Py_None in its place (passing NULL for o3 would cause an illegal memory access).	https://docs.python.org/3.4/c-api/number.html#c.PyNumber_Power
PyNumber_Negative	A							https://docs.python.org			<pre><code>
PyObject* PyNumber_Negative(PyObject *o)</code></pre><br>Returns the negation of o on success, or NULL on failure. This is the equivalent of the Python expression -o.	https://docs.python.org/3.4/c-api/number.html#c.PyNumber_Negative
PyNumber_Positive	A							https://docs.python.org			<pre><code>
PyObject* PyNumber_Positive(PyObject *o)</code></pre><br>Returns o on success, or NULL on failure. This is the equivalent of the Python expression +o.	https://docs.python.org/3.4/c-api/number.html#c.PyNumber_Positive
PyNumber_Absolute	A							https://docs.python.org			<pre><code>
PyObject* PyNumber_Absolute(PyObject *o)</code></pre><br>Returns the absolute value of o, or NULL on failure. This is the equivalent of the Python expression abs(o).	https://docs.python.org/3.4/c-api/number.html#c.PyNumber_Absolute
PyNumber_Invert	A							https://docs.python.org			<pre><code>
PyObject* PyNumber_Invert(PyObject *o)</code></pre><br>Returns the bitwise negation of o on success, or NULL on failure. This is the equivalent of the Python expression ~o.	https://docs.python.org/3.4/c-api/number.html#c.PyNumber_Invert
PyNumber_Lshift	A							https://docs.python.org			<pre><code>
PyObject* PyNumber_Lshift(PyObject *o1, PyObject *o2)</code></pre><br>Returns the result of left shifting o1 by o2 on success, or NULL on failure. This is the equivalent of the Python expression o1 << o2.	https://docs.python.org/3.4/c-api/number.html#c.PyNumber_Lshift
PyNumber_Rshift	A							https://docs.python.org			<pre><code>
PyObject* PyNumber_Rshift(PyObject *o1, PyObject *o2)</code></pre><br>Returns the result of right shifting o1 by o2 on success, or NULL on failure. This is the equivalent of the Python expression o1 >> o2.	https://docs.python.org/3.4/c-api/number.html#c.PyNumber_Rshift
PyNumber_And	A							https://docs.python.org			<pre><code>
PyObject* PyNumber_And(PyObject *o1, PyObject *o2)</code></pre><br>Returns the “bitwise and” of o1 and o2 on success and NULL on failure. This is the equivalent of the Python expression o1 & o2.	https://docs.python.org/3.4/c-api/number.html#c.PyNumber_And
PyNumber_Xor	A							https://docs.python.org			<pre><code>
PyObject* PyNumber_Xor(PyObject *o1, PyObject *o2)</code></pre><br>Returns the “bitwise exclusive or” of o1 by o2 on success, or NULL on failure. This is the equivalent of the Python expression o1 ^ o2.	https://docs.python.org/3.4/c-api/number.html#c.PyNumber_Xor
PyNumber_Or	A							https://docs.python.org			<pre><code>
PyObject* PyNumber_Or(PyObject *o1, PyObject *o2)</code></pre><br>Returns the “bitwise or” of o1 and o2 on success, or NULL on failure. This is the equivalent of the Python expression o1 | o2.	https://docs.python.org/3.4/c-api/number.html#c.PyNumber_Or
PyNumber_InPlaceAdd	A							https://docs.python.org			<pre><code>
PyObject* PyNumber_InPlaceAdd(PyObject *o1, PyObject *o2)</code></pre><br>Returns the result of adding o1 and o2, or NULL on failure. The operation is done in-place when o1 supports it. This is the equivalent of the Python statement o1 += o2.	https://docs.python.org/3.4/c-api/number.html#c.PyNumber_InPlaceAdd
PyNumber_InPlaceSubtract	A							https://docs.python.org			<pre><code>
PyObject* PyNumber_InPlaceSubtract(PyObject *o1, PyObject *o2)</code></pre><br>Returns the result of subtracting o2 from o1, or NULL on failure. The operation is done in-place when o1 supports it. This is the equivalent of the Python statement o1 -= o2.	https://docs.python.org/3.4/c-api/number.html#c.PyNumber_InPlaceSubtract
PyNumber_InPlaceMultiply	A							https://docs.python.org			<pre><code>
PyObject* PyNumber_InPlaceMultiply(PyObject *o1, PyObject *o2)</code></pre><br>Returns the result of multiplying o1 and o2, or NULL on failure. The operation is done in-place when o1 supports it. This is the equivalent of the Python statement o1 *= o2.	https://docs.python.org/3.4/c-api/number.html#c.PyNumber_InPlaceMultiply
PyNumber_InPlaceFloorDivide	A							https://docs.python.org			<pre><code>
PyObject* PyNumber_InPlaceFloorDivide(PyObject *o1, PyObject *o2)</code></pre><br>Returns the mathematical floor of dividing o1 by o2, or NULL on failure. The operation is done in-place when o1 supports it. This is the equivalent of the Python statement o1 //= o2.	https://docs.python.org/3.4/c-api/number.html#c.PyNumber_InPlaceFloorDivide
PyNumber_InPlaceTrueDivide	A							https://docs.python.org			<pre><code>
PyObject* PyNumber_InPlaceTrueDivide(PyObject *o1, PyObject *o2)</code></pre><br>Return a reasonable approximation for the mathematical value of o1 divided by o2, or NULL on failure. The return value is “approximate” because binary floating point numbers are approximate; it is not possible to represent all real numbers in base two. This function can return a floating point value when passed two integers. The operation is done in-place when o1 supports it.	https://docs.python.org/3.4/c-api/number.html#c.PyNumber_InPlaceTrueDivide
PyNumber_InPlaceRemainder	A							https://docs.python.org			<pre><code>
PyObject* PyNumber_InPlaceRemainder(PyObject *o1, PyObject *o2)</code></pre><br>Returns the remainder of dividing o1 by o2, or NULL on failure. The operation is done in-place when o1 supports it. This is the equivalent of the Python statement o1 %= o2.	https://docs.python.org/3.4/c-api/number.html#c.PyNumber_InPlaceRemainder
PyNumber_InPlacePower	A							https://docs.python.org			<pre><code>
PyObject* PyNumber_InPlacePower(PyObject *o1, PyObject *o2, PyObject *o3)</code></pre><br>See the built-in function pow(). Returns NULL on failure. The operation is done in-place when o1 supports it. This is the equivalent of the Python statement o1 **= o2 when o3 is Py_None, or an in-place variant of pow(o1, o2, o3) otherwise. If o3 is to be ignored, pass Py_None in its place (passing NULL for o3 would cause an illegal memory access).	https://docs.python.org/3.4/c-api/number.html#c.PyNumber_InPlacePower
PyNumber_InPlaceLshift	A							https://docs.python.org			<pre><code>
PyObject* PyNumber_InPlaceLshift(PyObject *o1, PyObject *o2)</code></pre><br>Returns the result of left shifting o1 by o2 on success, or NULL on failure. The operation is done in-place when o1 supports it. This is the equivalent of the Python statement o1 <<= o2.	https://docs.python.org/3.4/c-api/number.html#c.PyNumber_InPlaceLshift
PyNumber_InPlaceRshift	A							https://docs.python.org			<pre><code>
PyObject* PyNumber_InPlaceRshift(PyObject *o1, PyObject *o2)</code></pre><br>Returns the result of right shifting o1 by o2 on success, or NULL on failure. The operation is done in-place when o1 supports it. This is the equivalent of the Python statement o1 >>= o2.	https://docs.python.org/3.4/c-api/number.html#c.PyNumber_InPlaceRshift
PyNumber_InPlaceAnd	A							https://docs.python.org			<pre><code>
PyObject* PyNumber_InPlaceAnd(PyObject *o1, PyObject *o2)</code></pre><br>Returns the “bitwise and” of o1 and o2 on success and NULL on failure. The operation is done in-place when o1 supports it. This is the equivalent of the Python statement o1 &= o2.	https://docs.python.org/3.4/c-api/number.html#c.PyNumber_InPlaceAnd
PyNumber_InPlaceXor	A							https://docs.python.org			<pre><code>
PyObject* PyNumber_InPlaceXor(PyObject *o1, PyObject *o2)</code></pre><br>Returns the “bitwise exclusive or” of o1 by o2 on success, or NULL on failure. The operation is done in-place when o1 supports it. This is the equivalent of the Python statement o1 ^= o2.	https://docs.python.org/3.4/c-api/number.html#c.PyNumber_InPlaceXor
PyNumber_InPlaceOr	A							https://docs.python.org			<pre><code>
PyObject* PyNumber_InPlaceOr(PyObject *o1, PyObject *o2)</code></pre><br>Returns the “bitwise or” of o1 and o2 on success, or NULL on failure. The operation is done in-place when o1 supports it. This is the equivalent of the Python statement o1 |= o2.	https://docs.python.org/3.4/c-api/number.html#c.PyNumber_InPlaceOr
PyNumber_Long	A							https://docs.python.org			<pre><code>
PyObject* PyNumber_Long(PyObject *o)</code></pre><br>Returns the o converted to an integer object on success, or NULL on failure. This is the equivalent of the Python expression int(o).	https://docs.python.org/3.4/c-api/number.html#c.PyNumber_Long
PyNumber_Float	A							https://docs.python.org			<pre><code>
PyObject* PyNumber_Float(PyObject *o)</code></pre><br>Returns the o converted to a float object on success, or NULL on failure. This is the equivalent of the Python expression float(o).	https://docs.python.org/3.4/c-api/number.html#c.PyNumber_Float
PyNumber_Index	A							https://docs.python.org			<pre><code>
PyObject* PyNumber_Index(PyObject *o)</code></pre><br>Returns the o converted to a Python int on success or NULL with a TypeError exception raised on failure.	https://docs.python.org/3.4/c-api/number.html#c.PyNumber_Index
PyNumber_ToBase	A							https://docs.python.org			<pre><code>
PyObject* PyNumber_ToBase(PyObject *n, int base)</code></pre><br>Returns the integer n converted to base base as a string. The base argument must be one of 2, 8, 10, or 16. For base 2, 8, or 16, the returned string is prefixed with a base marker of '0b', '0o', or '0x', respectively. If n is not a Python int, it is converted with PyNumber_Index() first.	https://docs.python.org/3.4/c-api/number.html#c.PyNumber_ToBase
PyNumber_AsSsize_t	A							https://docs.python.org			<pre><code>
Py_ssize_t PyNumber_AsSsize_t(PyObject *o, PyObject *exc)</code></pre><br>Returns o converted to a Py_ssize_t value if o can be interpreted as an integer. If the call fails, an exception is raised and -1 is returned.	https://docs.python.org/3.4/c-api/number.html#c.PyNumber_AsSsize_t
PyIndex_Check	A							https://docs.python.org			<pre><code>
int PyIndex_Check(PyObject *o)</code></pre><br>Returns True if o is an index integer (has the nb_index slot of the tp_as_number structure filled in).	https://docs.python.org/3.4/c-api/number.html#c.PyIndex_Check
PyObject_AsCharBuffer	A							https://docs.python.org			<pre><code>
int PyObject_AsCharBuffer(PyObject *obj, const char **buffer, Py_ssize_t *buffer_len)</code></pre><br>Returns a pointer to a read-only memory location usable as character-based input. The obj argument must support the single-segment character buffer interface. On success, returns 0, sets buffer to the memory location and buffer_len to the buffer length. Returns -1 and sets a TypeError on error.	https://docs.python.org/3.4/c-api/objbuffer.html#c.PyObject_AsCharBuffer
PyObject_AsReadBuffer	A							https://docs.python.org			<pre><code>
int PyObject_AsReadBuffer(PyObject *obj, const void **buffer, Py_ssize_t *buffer_len)</code></pre><br>Returns a pointer to a read-only memory location containing arbitrary data. The obj argument must support the single-segment readable buffer interface. On success, returns 0, sets buffer to the memory location and buffer_len to the buffer length. Returns -1 and sets a TypeError on error.	https://docs.python.org/3.4/c-api/objbuffer.html#c.PyObject_AsReadBuffer
PyObject_CheckReadBuffer	A							https://docs.python.org			<pre><code>
int PyObject_CheckReadBuffer(PyObject *o)</code></pre><br>Returns 1 if o supports the single-segment readable buffer interface. Otherwise returns 0.	https://docs.python.org/3.4/c-api/objbuffer.html#c.PyObject_CheckReadBuffer
PyObject_AsWriteBuffer	A							https://docs.python.org			<pre><code>
int PyObject_AsWriteBuffer(PyObject *obj, void **buffer, Py_ssize_t *buffer_len)</code></pre><br>Returns a pointer to a writable memory location. The obj argument must support the single-segment, character buffer interface. On success, returns 0, sets buffer to the memory location and buffer_len to the buffer length. Returns -1 and sets a TypeError on error.	https://docs.python.org/3.4/c-api/objbuffer.html#c.PyObject_AsWriteBuffer
PyObject_Print	A							https://docs.python.org			<pre><code>
int PyObject_Print(PyObject *o, FILE *fp, int flags)</code></pre><br>Print an object o, on file fp. Returns -1 on error. The flags argument is used to enable certain printing options. The only option currently supported is Py_PRINT_RAW; if given, the str() of the object is written instead of the repr().	https://docs.python.org/3.4/c-api/object.html#c.PyObject_Print
PyObject_HasAttr	A							https://docs.python.org			<pre><code>
int PyObject_HasAttr(PyObject *o, PyObject *attr_name)</code></pre><br>Returns 1 if o has the attribute attr_name, and 0 otherwise. This is equivalent to the Python expression hasattr(o, attr_name). This function always succeeds.	https://docs.python.org/3.4/c-api/object.html#c.PyObject_HasAttr
PyObject_HasAttrString	A							https://docs.python.org			<pre><code>
int PyObject_HasAttrString(PyObject *o, const char *attr_name)</code></pre><br>Returns 1 if o has the attribute attr_name, and 0 otherwise. This is equivalent to the Python expression hasattr(o, attr_name). This function always succeeds.	https://docs.python.org/3.4/c-api/object.html#c.PyObject_HasAttrString
PyObject_GetAttr	A							https://docs.python.org			<pre><code>
PyObject* PyObject_GetAttr(PyObject *o, PyObject *attr_name)</code></pre><br>Retrieve an attribute named attr_name from object o. Returns the attribute value on success, or NULL on failure. This is the equivalent of the Python expression o.attr_name.	https://docs.python.org/3.4/c-api/object.html#c.PyObject_GetAttr
PyObject_GetAttrString	A							https://docs.python.org			<pre><code>
PyObject* PyObject_GetAttrString(PyObject *o, const char *attr_name)</code></pre><br>Retrieve an attribute named attr_name from object o. Returns the attribute value on success, or NULL on failure. This is the equivalent of the Python expression o.attr_name.	https://docs.python.org/3.4/c-api/object.html#c.PyObject_GetAttrString
PyObject_GenericGetAttr	A							https://docs.python.org			<pre><code>
PyObject* PyObject_GenericGetAttr(PyObject *o, PyObject *name)</code></pre><br>Generic attribute getter function that is meant to be put into a type object’s tp_getattro slot. It looks for a descriptor in the dictionary of classes in the object’s MRO as well as an attribute in the object’s __dict__ (if present). As outlined in Implementing Descriptors, data descriptors take preference over instance attributes, while non-data descriptors don’t. Otherwise, an AttributeError is raised.	https://docs.python.org/3.4/c-api/object.html#c.PyObject_GenericGetAttr
PyObject_SetAttr	A							https://docs.python.org			<pre><code>
int PyObject_SetAttr(PyObject *o, PyObject *attr_name, PyObject *v)</code></pre><br>Set the value of the attribute named attr_name, for object o, to the value v. Returns -1 on failure. This is the equivalent of the Python statement o.attr_name = v.	https://docs.python.org/3.4/c-api/object.html#c.PyObject_SetAttr
PyObject_SetAttrString	A							https://docs.python.org			<pre><code>
int PyObject_SetAttrString(PyObject *o, const char *attr_name, PyObject *v)</code></pre><br>Set the value of the attribute named attr_name, for object o, to the value v. Returns -1 on failure. This is the equivalent of the Python statement o.attr_name = v.	https://docs.python.org/3.4/c-api/object.html#c.PyObject_SetAttrString
PyObject_GenericSetAttr	A							https://docs.python.org			<pre><code>
int PyObject_GenericSetAttr(PyObject *o, PyObject *name, PyObject *value)</code></pre><br>Generic attribute setter function that is meant to be put into a type object’s tp_setattro slot. It looks for a data descriptor in the dictionary of classes in the object’s MRO, and if found it takes preference over setting the attribute in the instance dictionary. Otherwise, the attribute is set in the object’s __dict__ (if present). Otherwise, an AttributeError is raised and -1 is returned.	https://docs.python.org/3.4/c-api/object.html#c.PyObject_GenericSetAttr
PyObject_DelAttr	A							https://docs.python.org			<pre><code>
int PyObject_DelAttr(PyObject *o, PyObject *attr_name)</code></pre><br>Delete attribute named attr_name, for object o. Returns -1 on failure. This is the equivalent of the Python statement del o.attr_name.	https://docs.python.org/3.4/c-api/object.html#c.PyObject_DelAttr
PyObject_DelAttrString	A							https://docs.python.org			<pre><code>
int PyObject_DelAttrString(PyObject *o, const char *attr_name)</code></pre><br>Delete attribute named attr_name, for object o. Returns -1 on failure. This is the equivalent of the Python statement del o.attr_name.	https://docs.python.org/3.4/c-api/object.html#c.PyObject_DelAttrString
PyObject_GenericGetDict	A							https://docs.python.org			<pre><code>
PyObject* PyObject_GenericGetDict(PyObject *o, void *context)</code></pre><br>A generic implementation for the getter of a __dict__ descriptor. It creates the dictionary if necessary.	https://docs.python.org/3.4/c-api/object.html#c.PyObject_GenericGetDict
PyObject_GenericSetDict	A							https://docs.python.org			<pre><code>
int PyObject_GenericSetDict(PyObject *o, void *context)</code></pre><br>A generic implementation for the setter of a __dict__ descriptor. This implementation does not allow the dictionary to be deleted.	https://docs.python.org/3.4/c-api/object.html#c.PyObject_GenericSetDict
PyObject_RichCompare	A							https://docs.python.org			<pre><code>
PyObject* PyObject_RichCompare(PyObject *o1, PyObject *o2, int opid)</code></pre><br>Compare the values of o1 and o2 using the operation specified by opid, which must be one of Py_LT, Py_LE, Py_EQ, Py_NE, Py_GT, or Py_GE, corresponding to <, <=, ==, !=, >, or >= respectively. This is the equivalent of the Python expression o1 op o2, where op is the operator corresponding to opid. Returns the value of the comparison on success, or NULL on failure.	https://docs.python.org/3.4/c-api/object.html#c.PyObject_RichCompare
PyObject_RichCompareBool	A							https://docs.python.org			<pre><code>
int PyObject_RichCompareBool(PyObject *o1, PyObject *o2, int opid)</code></pre><br>Compare the values of o1 and o2 using the operation specified by opid, which must be one of Py_LT, Py_LE, Py_EQ, Py_NE, Py_GT, or Py_GE, corresponding to <, <=, ==, !=, >, or >= respectively. Returns -1 on error, 0 if the result is false, 1 otherwise. This is the equivalent of the Python expression o1 op o2, where op is the operator corresponding to opid.	https://docs.python.org/3.4/c-api/object.html#c.PyObject_RichCompareBool
PyObject_Repr	A							https://docs.python.org			<pre><code>
PyObject* PyObject_Repr(PyObject *o)</code></pre><br>Compute a string representation of object o. Returns the string representation on success, NULL on failure. This is the equivalent of the Python expression repr(o). Called by the repr() built-in function.	https://docs.python.org/3.4/c-api/object.html#c.PyObject_Repr
PyObject_ASCII	A							https://docs.python.org			<pre><code>
PyObject* PyObject_ASCII(PyObject *o)</code></pre><br>As PyObject_Repr(), compute a string representation of object o, but escape the non-ASCII characters in the string returned by PyObject_Repr() with \x, \u or \U escapes. This generates a string similar to that returned by PyObject_Repr() in Python 2. Called by the ascii() built-in function.	https://docs.python.org/3.4/c-api/object.html#c.PyObject_ASCII
PyObject_Str	A							https://docs.python.org			<pre><code>
PyObject* PyObject_Str(PyObject *o)</code></pre><br>Compute a string representation of object o. Returns the string representation on success, NULL on failure. This is the equivalent of the Python expression str(o). Called by the str() built-in function and, therefore, by the print() function.	https://docs.python.org/3.4/c-api/object.html#c.PyObject_Str
PyObject_Bytes	A							https://docs.python.org			<pre><code>
PyObject* PyObject_Bytes(PyObject *o)</code></pre><br>Compute a bytes representation of object o. NULL is returned on failure and a bytes object on success. This is equivalent to the Python expression bytes(o), when o is not an integer. Unlike bytes(o), a TypeError is raised when o is an integer instead of a zero-initialized bytes object.	https://docs.python.org/3.4/c-api/object.html#c.PyObject_Bytes
PyObject_IsSubclass	A							https://docs.python.org			<pre><code>
int PyObject_IsSubclass(PyObject *derived, PyObject *cls)</code></pre><br>Return 1 if the class derived is identical to or derived from the class cls, otherwise return 0. In case of an error, return -1.	https://docs.python.org/3.4/c-api/object.html#c.PyObject_IsSubclass
PyObject_IsInstance	A							https://docs.python.org			<pre><code>
int PyObject_IsInstance(PyObject *inst, PyObject *cls)</code></pre><br>Return 1 if inst is an instance of the class cls or a subclass of cls, or 0 if not. On error, returns -1 and sets an exception.	https://docs.python.org/3.4/c-api/object.html#c.PyObject_IsInstance
PyCallable_Check	A							https://docs.python.org			<pre><code>
int PyCallable_Check(PyObject *o)</code></pre><br>Determine if the object o is callable. Return 1 if the object is callable and 0 otherwise. This function always succeeds.	https://docs.python.org/3.4/c-api/object.html#c.PyCallable_Check
PyObject_Call	A							https://docs.python.org			<pre><code>
PyObject* PyObject_Call(PyObject *callable_object, PyObject *args, PyObject *kw)</code></pre><br>Call a callable Python object callable_object, with arguments given by the tuple args, and named arguments given by the dictionary kw. If no named arguments are needed, kw may be NULL. args must not be NULL, use an empty tuple if no arguments are needed. Returns the result of the call on success, or NULL on failure. This is the equivalent of the Python expression callable_object(*args, **kw).	https://docs.python.org/3.4/c-api/object.html#c.PyObject_Call
PyObject_CallObject	A							https://docs.python.org			<pre><code>
PyObject* PyObject_CallObject(PyObject *callable_object, PyObject *args)</code></pre><br>Call a callable Python object callable_object, with arguments given by the tuple args. If no arguments are needed, then args may be NULL. Returns the result of the call on success, or NULL on failure. This is the equivalent of the Python expression callable_object(*args).	https://docs.python.org/3.4/c-api/object.html#c.PyObject_CallObject
PyObject_CallFunction	A							https://docs.python.org			<pre><code>
PyObject* PyObject_CallFunction(PyObject *callable, const char *format, ...)</code></pre><br>Call a callable Python object callable, with a variable number of C arguments. The C arguments are described using a Py_BuildValue() style format string. The format may be NULL, indicating that no arguments are provided. Returns the result of the call on success, or NULL on failure. This is the equivalent of the Python expression callable(*args). Note that if you only pass PyObject * args, PyObject_CallFunctionObjArgs() is a faster alternative.	https://docs.python.org/3.4/c-api/object.html#c.PyObject_CallFunction
PyObject_CallMethod	A							https://docs.python.org			<pre><code>
PyObject* PyObject_CallMethod(PyObject *o, const char *method, const char *format, ...)</code></pre><br>Call the method named method of object o with a variable number of C arguments. The C arguments are described by a Py_BuildValue() format string that should produce a tuple. The format may be NULL, indicating that no arguments are provided. Returns the result of the call on success, or NULL on failure. This is the equivalent of the Python expression o.method(args). Note that if you only pass PyObject * args, PyObject_CallMethodObjArgs() is a faster alternative.	https://docs.python.org/3.4/c-api/object.html#c.PyObject_CallMethod
PyObject_CallFunctionObjArgs	A							https://docs.python.org			<pre><code>
PyObject* PyObject_CallFunctionObjArgs(PyObject *callable, ..., NULL)</code></pre><br>Call a callable Python object callable, with a variable number of PyObject* arguments. The arguments are provided as a variable number of parameters followed by NULL. Returns the result of the call on success, or NULL on failure.	https://docs.python.org/3.4/c-api/object.html#c.PyObject_CallFunctionObjArgs
PyObject_CallMethodObjArgs	A							https://docs.python.org			<pre><code>
PyObject* PyObject_CallMethodObjArgs(PyObject *o, PyObject *name, ..., NULL)</code></pre><br>Calls a method of the object o, where the name of the method is given as a Python string object in name. It is called with a variable number of PyObject* arguments. The arguments are provided as a variable number of parameters followed by NULL. Returns the result of the call on success, or NULL on failure.	https://docs.python.org/3.4/c-api/object.html#c.PyObject_CallMethodObjArgs
PyObject_Hash	A							https://docs.python.org			<pre><code>
Py_hash_t PyObject_Hash(PyObject *o)</code></pre><br>Compute and return the hash value of an object o. On failure, return -1. This is the equivalent of the Python expression hash(o).	https://docs.python.org/3.4/c-api/object.html#c.PyObject_Hash
PyObject_HashNotImplemented	A							https://docs.python.org			<pre><code>
Py_hash_t PyObject_HashNotImplemented(PyObject *o)</code></pre><br>Set a TypeError indicating that type(o) is not hashable and return -1. This function receives special treatment when stored in a tp_hash slot, allowing a type to explicitly indicate to the interpreter that it is not hashable.	https://docs.python.org/3.4/c-api/object.html#c.PyObject_HashNotImplemented
PyObject_IsTrue	A							https://docs.python.org			<pre><code>
int PyObject_IsTrue(PyObject *o)</code></pre><br>Returns 1 if the object o is considered to be true, and 0 otherwise. This is equivalent to the Python expression not not o. On failure, return -1.	https://docs.python.org/3.4/c-api/object.html#c.PyObject_IsTrue
PyObject_Not	A							https://docs.python.org			<pre><code>
int PyObject_Not(PyObject *o)</code></pre><br>Returns 0 if the object o is considered to be true, and 1 otherwise. This is equivalent to the Python expression not o. On failure, return -1.	https://docs.python.org/3.4/c-api/object.html#c.PyObject_Not
PyObject_Type	A							https://docs.python.org			<pre><code>
PyObject* PyObject_Type(PyObject *o)</code></pre><br>When o is non-NULL, returns a type object corresponding to the object type of object o. On failure, raises SystemError and returns NULL. This is equivalent to the Python expression type(o). This function increments the reference count of the return value. There’s really no reason to use this function instead of the common expression o->ob_type, which returns a pointer of type PyTypeObject*, except when the incremented reference count is needed.	https://docs.python.org/3.4/c-api/object.html#c.PyObject_Type
PyObject_TypeCheck	A							https://docs.python.org			<pre><code>
int PyObject_TypeCheck(PyObject *o, PyTypeObject *type)</code></pre><br>Return true if the object o is of type type or a subtype of type. Both parameters must be non-NULL.	https://docs.python.org/3.4/c-api/object.html#c.PyObject_TypeCheck
PyObject_Length	A							https://docs.python.org			<pre><code>
Py_ssize_t PyObject_Length(PyObject *o)</code></pre><br>Return the length of object o. If the object o provides either the sequence and mapping protocols, the sequence length is returned. On error, -1 is returned. This is the equivalent to the Python expression len(o).	https://docs.python.org/3.4/c-api/object.html#c.PyObject_Length
PyObject_LengthHint	A							https://docs.python.org			<pre><code>
Py_ssize_t PyObject_LengthHint(PyObject *o, Py_ssize_t default)</code></pre><br>Return an estimated length for the object o. First try to return its actual length, then an estimate using __length_hint__(), and finally return the default value. On error return -1. This is the equivalent to the Python expression operator.length_hint(o, default).	https://docs.python.org/3.4/c-api/object.html#c.PyObject_LengthHint
PyObject_GetItem	A							https://docs.python.org			<pre><code>
PyObject* PyObject_GetItem(PyObject *o, PyObject *key)</code></pre><br>Return element of o corresponding to the object key or NULL on failure. This is the equivalent of the Python expression o[key].	https://docs.python.org/3.4/c-api/object.html#c.PyObject_GetItem
PyObject_SetItem	A							https://docs.python.org			<pre><code>
int PyObject_SetItem(PyObject *o, PyObject *key, PyObject *v)</code></pre><br>Map the object key to the value v. Returns -1 on failure. This is the equivalent of the Python statement o[key] = v.	https://docs.python.org/3.4/c-api/object.html#c.PyObject_SetItem
PyObject_DelItem	A							https://docs.python.org			<pre><code>
int PyObject_DelItem(PyObject *o, PyObject *key)</code></pre><br>Delete the mapping for key from o. Returns -1 on failure. This is the equivalent of the Python statement del o[key].	https://docs.python.org/3.4/c-api/object.html#c.PyObject_DelItem
PyObject_Dir	A							https://docs.python.org			<pre><code>
PyObject* PyObject_Dir(PyObject *o)</code></pre><br>This is equivalent to the Python expression dir(o), returning a (possibly empty) list of strings appropriate for the object argument, or NULL if there was an error. If the argument is NULL, this is like the Python dir(), returning the names of the current locals; in this case, if no execution frame is active then NULL is returned but PyErr_Occurred() will return false.	https://docs.python.org/3.4/c-api/object.html#c.PyObject_Dir
PyObject_GetIter	A							https://docs.python.org			<pre><code>
PyObject* PyObject_GetIter(PyObject *o)</code></pre><br>This is equivalent to the Python expression iter(o). It returns a new iterator for the object argument, or the object itself if the object is already an iterator. Raises TypeError and returns NULL if the object cannot be iterated.	https://docs.python.org/3.4/c-api/object.html#c.PyObject_GetIter
Py_INCREF	A							https://docs.python.org			<pre><code>
void Py_INCREF(PyObject *o)</code></pre><br>Increment the reference count for object o. The object must not be NULL; if you aren’t sure that it isn’t NULL, use Py_XINCREF().	https://docs.python.org/3.4/c-api/refcounting.html#c.Py_INCREF
Py_XINCREF	A							https://docs.python.org			<pre><code>
void Py_XINCREF(PyObject *o)</code></pre><br>Increment the reference count for object o. The object may be NULL, in which case the macro has no effect.	https://docs.python.org/3.4/c-api/refcounting.html#c.Py_XINCREF
Py_DECREF	A							https://docs.python.org			<pre><code>
void Py_DECREF(PyObject *o)</code></pre><br>Decrement the reference count for object o. The object must not be NULL; if you aren’t sure that it isn’t NULL, use Py_XDECREF(). If the reference count reaches zero, the object’s type’s deallocation function (which must not be NULL) is invoked.	https://docs.python.org/3.4/c-api/refcounting.html#c.Py_DECREF
Py_XDECREF	A							https://docs.python.org			<pre><code>
void Py_XDECREF(PyObject *o)</code></pre><br>Decrement the reference count for object o. The object may be NULL, in which case the macro has no effect; otherwise the effect is the same as for Py_DECREF(), and the same warning applies.	https://docs.python.org/3.4/c-api/refcounting.html#c.Py_XDECREF
Py_CLEAR	A							https://docs.python.org			<pre><code>
void Py_CLEAR(PyObject *o)</code></pre><br>Decrement the reference count for object o. The object may be NULL, in which case the macro has no effect; otherwise the effect is the same as for Py_DECREF(), except that the argument is also set to NULL. The warning for Py_DECREF() does not apply with respect to the object passed because the macro carefully uses a temporary variable and sets the argument to NULL before decrementing its reference count.	https://docs.python.org/3.4/c-api/refcounting.html#c.Py_CLEAR
PyEval_GetBuiltins	A							https://docs.python.org			<pre><code>
PyObject* PyEval_GetBuiltins()</code></pre><br>Return a dictionary of the builtins in the current execution frame, or the interpreter of the thread state if no frame is currently executing.	https://docs.python.org/3.4/c-api/reflection.html#c.PyEval_GetBuiltins
PyEval_GetLocals	A							https://docs.python.org			<pre><code>
PyObject* PyEval_GetLocals()</code></pre><br>Return a dictionary of the local variables in the current execution frame, or NULL if no frame is currently executing.	https://docs.python.org/3.4/c-api/reflection.html#c.PyEval_GetLocals
PyEval_GetGlobals	A							https://docs.python.org			<pre><code>
PyObject* PyEval_GetGlobals()</code></pre><br>Return a dictionary of the global variables in the current execution frame, or NULL if no frame is currently executing.	https://docs.python.org/3.4/c-api/reflection.html#c.PyEval_GetGlobals
PyEval_GetFrame	A							https://docs.python.org			<pre><code>
PyFrameObject* PyEval_GetFrame()</code></pre><br>Return the current thread state’s frame, which is NULL if no frame is currently executing.	https://docs.python.org/3.4/c-api/reflection.html#c.PyEval_GetFrame
PyFrame_GetLineNumber	A							https://docs.python.org			<pre><code>
int PyFrame_GetLineNumber(PyFrameObject *frame)</code></pre><br>Return the line number that frame is currently executing.	https://docs.python.org/3.4/c-api/reflection.html#c.PyFrame_GetLineNumber
PyEval_GetFuncName	A							https://docs.python.org			<pre><code>
const char* PyEval_GetFuncName(PyObject *func)</code></pre><br>Return the name of func if it is a function, class or instance object, else the name of funcs type.	https://docs.python.org/3.4/c-api/reflection.html#c.PyEval_GetFuncName
PyEval_GetFuncDesc	A							https://docs.python.org			<pre><code>
const char* PyEval_GetFuncDesc(PyObject *func)</code></pre><br>Return a description string, depending on the type of func. Return values include “()” for functions and methods, ” constructor”, ” instance”, and ” object”. Concatenated with the result of PyEval_GetFuncName(), the result will be a description of func.	https://docs.python.org/3.4/c-api/reflection.html#c.PyEval_GetFuncDesc
PySequence_Check	A							https://docs.python.org			<pre><code>
int PySequence_Check(PyObject *o)</code></pre><br>Return 1 if the object provides sequence protocol, and 0 otherwise. This function always succeeds.	https://docs.python.org/3.4/c-api/sequence.html#c.PySequence_Check
PySequence_Size	A							https://docs.python.org			<pre><code>
Py_ssize_t PySequence_Size(PyObject *o)</code></pre><br>Returns the number of objects in sequence o on success, and -1 on failure. For objects that do not provide sequence protocol, this is equivalent to the Python expression len(o).	https://docs.python.org/3.4/c-api/sequence.html#c.PySequence_Size
PySequence_Concat	A							https://docs.python.org			<pre><code>
PyObject* PySequence_Concat(PyObject *o1, PyObject *o2)</code></pre><br>Return the concatenation of o1 and o2 on success, and NULL on failure. This is the equivalent of the Python expression o1 + o2.	https://docs.python.org/3.4/c-api/sequence.html#c.PySequence_Concat
PySequence_Repeat	A							https://docs.python.org			<pre><code>
PyObject* PySequence_Repeat(PyObject *o, Py_ssize_t count)</code></pre><br>Return the result of repeating sequence object o count times, or NULL on failure. This is the equivalent of the Python expression o * count.	https://docs.python.org/3.4/c-api/sequence.html#c.PySequence_Repeat
PySequence_InPlaceConcat	A							https://docs.python.org			<pre><code>
PyObject* PySequence_InPlaceConcat(PyObject *o1, PyObject *o2)</code></pre><br>Return the concatenation of o1 and o2 on success, and NULL on failure. The operation is done in-place when o1 supports it. This is the equivalent of the Python expression o1 += o2.	https://docs.python.org/3.4/c-api/sequence.html#c.PySequence_InPlaceConcat
PySequence_InPlaceRepeat	A							https://docs.python.org			<pre><code>
PyObject* PySequence_InPlaceRepeat(PyObject *o, Py_ssize_t count)</code></pre><br>Return the result of repeating sequence object o count times, or NULL on failure. The operation is done in-place when o supports it. This is the equivalent of the Python expression o *= count.	https://docs.python.org/3.4/c-api/sequence.html#c.PySequence_InPlaceRepeat
PySequence_GetItem	A							https://docs.python.org			<pre><code>
PyObject* PySequence_GetItem(PyObject *o, Py_ssize_t i)</code></pre><br>Return the ith element of o, or NULL on failure. This is the equivalent of the Python expression o[i].	https://docs.python.org/3.4/c-api/sequence.html#c.PySequence_GetItem
PySequence_GetSlice	A							https://docs.python.org			<pre><code>
PyObject* PySequence_GetSlice(PyObject *o, Py_ssize_t i1, Py_ssize_t i2)</code></pre><br>Return the slice of sequence object o between i1 and i2, or NULL on failure. This is the equivalent of the Python expression o[i1:i2].	https://docs.python.org/3.4/c-api/sequence.html#c.PySequence_GetSlice
PySequence_SetItem	A							https://docs.python.org			<pre><code>
int PySequence_SetItem(PyObject *o, Py_ssize_t i, PyObject *v)</code></pre><br>Assign object v to the ith element of o. Returns -1 on failure. This is the equivalent of the Python statement o[i] = v. This function does not steal a reference to v.	https://docs.python.org/3.4/c-api/sequence.html#c.PySequence_SetItem
PySequence_DelItem	A							https://docs.python.org			<pre><code>
int PySequence_DelItem(PyObject *o, Py_ssize_t i)</code></pre><br>Delete the ith element of object o. Returns -1 on failure. This is the equivalent of the Python statement del o[i].	https://docs.python.org/3.4/c-api/sequence.html#c.PySequence_DelItem
PySequence_SetSlice	A							https://docs.python.org			<pre><code>
int PySequence_SetSlice(PyObject *o, Py_ssize_t i1, Py_ssize_t i2, PyObject *v)</code></pre><br>Assign the sequence object v to the slice in sequence object o from i1 to i2. This is the equivalent of the Python statement o[i1:i2] = v.	https://docs.python.org/3.4/c-api/sequence.html#c.PySequence_SetSlice
PySequence_DelSlice	A							https://docs.python.org			<pre><code>
int PySequence_DelSlice(PyObject *o, Py_ssize_t i1, Py_ssize_t i2)</code></pre><br>Delete the slice in sequence object o from i1 to i2. Returns -1 on failure. This is the equivalent of the Python statement del o[i1:i2].	https://docs.python.org/3.4/c-api/sequence.html#c.PySequence_DelSlice
PySequence_Count	A							https://docs.python.org			<pre><code>
Py_ssize_t PySequence_Count(PyObject *o, PyObject *value)</code></pre><br>Return the number of occurrences of value in o, that is, return the number of keys for which o[key] == value. On failure, return -1. This is equivalent to the Python expression o.count(value).	https://docs.python.org/3.4/c-api/sequence.html#c.PySequence_Count
PySequence_Contains	A							https://docs.python.org			<pre><code>
int PySequence_Contains(PyObject *o, PyObject *value)</code></pre><br>Determine if o contains value. If an item in o is equal to value, return 1, otherwise return 0. On error, return -1. This is equivalent to the Python expression value in o.	https://docs.python.org/3.4/c-api/sequence.html#c.PySequence_Contains
PySequence_Index	A							https://docs.python.org			<pre><code>
Py_ssize_t PySequence_Index(PyObject *o, PyObject *value)</code></pre><br>Return the first index i for which o[i] == value. On error, return -1.  This is equivalent to the Python expression o.index(value).	https://docs.python.org/3.4/c-api/sequence.html#c.PySequence_Index
PySequence_List	A							https://docs.python.org			<pre><code>
PyObject* PySequence_List(PyObject *o)</code></pre><br>Return a list object with the same contents as the sequence or iterable o, or NULL on failure. The returned list is guaranteed to be new. This is equivalent to the Python expression list(o).	https://docs.python.org/3.4/c-api/sequence.html#c.PySequence_List
PySequence_Tuple	A							https://docs.python.org			<pre><code>
PyObject* PySequence_Tuple(PyObject *o)</code></pre><br>Return a tuple object with the same contents as the arbitrary sequence o or NULL on failure. If o is a tuple, a new reference will be returned, otherwise a tuple will be constructed with the appropriate contents. This is equivalent to the Python expression tuple(o).	https://docs.python.org/3.4/c-api/sequence.html#c.PySequence_Tuple
PySequence_Fast	A							https://docs.python.org			<pre><code>
PyObject* PySequence_Fast(PyObject *o, const char *m)</code></pre><br>Return the sequence o as a list, unless it is already a tuple or list, in which case o is returned. Use PySequence_Fast_GET_ITEM() to access the members of the result. Returns NULL on failure. If the object is not a sequence, raises TypeError with m as the message text.	https://docs.python.org/3.4/c-api/sequence.html#c.PySequence_Fast
PySequence_Fast_GET_ITEM	A							https://docs.python.org			<pre><code>
PyObject* PySequence_Fast_GET_ITEM(PyObject *o, Py_ssize_t i)</code></pre><br>Return the ith element of o, assuming that o was returned by PySequence_Fast(), o is not NULL, and that i is within bounds.	https://docs.python.org/3.4/c-api/sequence.html#c.PySequence_Fast_GET_ITEM
PySequence_Fast_ITEMS	A							https://docs.python.org			<pre><code>
PyObject** PySequence_Fast_ITEMS(PyObject *o)</code></pre><br>Return the underlying array of PyObject pointers. Assumes that o was returned by PySequence_Fast() and o is not NULL.	https://docs.python.org/3.4/c-api/sequence.html#c.PySequence_Fast_ITEMS
PySequence_ITEM	A							https://docs.python.org			<pre><code>
PyObject* PySequence_ITEM(PyObject *o, Py_ssize_t i)</code></pre><br>Return the ith element of o or NULL on failure. Macro form of PySequence_GetItem() but without checking that PySequence_Check() on o is true and without adjustment for negative indices.	https://docs.python.org/3.4/c-api/sequence.html#c.PySequence_ITEM
PySequence_Fast_GET_SIZE	A							https://docs.python.org			<pre><code>
Py_ssize_t PySequence_Fast_GET_SIZE(PyObject *o)</code></pre><br>Returns the length of o, assuming that o was returned by PySequence_Fast() and that o is not NULL. The size can also be gotten by calling PySequence_Size() on o, but PySequence_Fast_GET_SIZE() is faster because it can assume o is a list or tuple.	https://docs.python.org/3.4/c-api/sequence.html#c.PySequence_Fast_GET_SIZE
PySet_Check	A							https://docs.python.org			<pre><code>
int PySet_Check(PyObject *p)</code></pre><br>Return true if p is a set object or an instance of a subtype.	https://docs.python.org/3.4/c-api/set.html#c.PySet_Check
PyFrozenSet_Check	A							https://docs.python.org			<pre><code>
int PyFrozenSet_Check(PyObject *p)</code></pre><br>Return true if p is a frozenset object or an instance of a subtype.	https://docs.python.org/3.4/c-api/set.html#c.PyFrozenSet_Check
PyAnySet_Check	A							https://docs.python.org			<pre><code>
int PyAnySet_Check(PyObject *p)</code></pre><br>Return true if p is a set object, a frozenset object, or an instance of a subtype.	https://docs.python.org/3.4/c-api/set.html#c.PyAnySet_Check
PyAnySet_CheckExact	A							https://docs.python.org			<pre><code>
int PyAnySet_CheckExact(PyObject *p)</code></pre><br>Return true if p is a set object or a frozenset object but not an instance of a subtype.	https://docs.python.org/3.4/c-api/set.html#c.PyAnySet_CheckExact
PyFrozenSet_CheckExact	A							https://docs.python.org			<pre><code>
int PyFrozenSet_CheckExact(PyObject *p)</code></pre><br>Return true if p is a frozenset object but not an instance of a subtype.	https://docs.python.org/3.4/c-api/set.html#c.PyFrozenSet_CheckExact
PySet_New	A							https://docs.python.org			<pre><code>
PyObject* PySet_New(PyObject *iterable)</code></pre><br>Return a new set containing objects returned by the iterable. The iterable may be NULL to create a new empty set. Return the new set on success or NULL on failure. Raise TypeError if iterable is not actually iterable. The constructor is also useful for copying a set (c=set(s)).	https://docs.python.org/3.4/c-api/set.html#c.PySet_New
PyFrozenSet_New	A							https://docs.python.org			<pre><code>
PyObject* PyFrozenSet_New(PyObject *iterable)</code></pre><br>Return a new frozenset containing objects returned by the iterable. The iterable may be NULL to create a new empty frozenset. Return the new set on success or NULL on failure. Raise TypeError if iterable is not actually iterable.	https://docs.python.org/3.4/c-api/set.html#c.PyFrozenSet_New
PySet_Size	A							https://docs.python.org			<pre><code>
Py_ssize_t PySet_Size(PyObject *anyset)</code></pre><br>Return the length of a set or frozenset object. Equivalent to len(anyset). Raises a PyExc_SystemError if anyset is not a set, frozenset, or an instance of a subtype.	https://docs.python.org/3.4/c-api/set.html#c.PySet_Size
PySet_GET_SIZE	A							https://docs.python.org			<pre><code>
Py_ssize_t PySet_GET_SIZE(PyObject *anyset)</code></pre><br>Macro form of PySet_Size() without error checking.	https://docs.python.org/3.4/c-api/set.html#c.PySet_GET_SIZE
PySet_Contains	A							https://docs.python.org			<pre><code>
int PySet_Contains(PyObject *anyset, PyObject *key)</code></pre><br>Return 1 if found, 0 if not found, and -1 if an error is encountered. Unlike the Python __contains__() method, this function does not automatically convert unhashable sets into temporary frozensets. Raise a TypeError if the key is unhashable. Raise PyExc_SystemError if anyset is not a set, frozenset, or an instance of a subtype.	https://docs.python.org/3.4/c-api/set.html#c.PySet_Contains
PySet_Add	A							https://docs.python.org			<pre><code>
int PySet_Add(PyObject *set, PyObject *key)</code></pre><br>Add key to a set instance. Also works with frozenset instances (like PyTuple_SetItem() it can be used to fill-in the values of brand new frozensets before they are exposed to other code). Return 0 on success or -1 on failure. Raise a TypeError if the key is unhashable. Raise a MemoryError if there is no room to grow. Raise a SystemError if set is an not an instance of set or its subtype.	https://docs.python.org/3.4/c-api/set.html#c.PySet_Add
PySet_Discard	A							https://docs.python.org			<pre><code>
int PySet_Discard(PyObject *set, PyObject *key)</code></pre><br>Return 1 if found and removed, 0 if not found (no action taken), and -1 if an error is encountered. Does not raise KeyError for missing keys. Raise a TypeError if the key is unhashable. Unlike the Python discard() method, this function does not automatically convert unhashable sets into temporary frozensets. Raise PyExc_SystemError if set is an not an instance of set or its subtype.	https://docs.python.org/3.4/c-api/set.html#c.PySet_Discard
PySet_Pop	A							https://docs.python.org			<pre><code>
PyObject* PySet_Pop(PyObject *set)</code></pre><br>Return a new reference to an arbitrary object in the set, and removes the object from the set. Return NULL on failure. Raise KeyError if the set is empty. Raise a SystemError if set is an not an instance of set or its subtype.	https://docs.python.org/3.4/c-api/set.html#c.PySet_Pop
PySet_Clear	A							https://docs.python.org			<pre><code>
int PySet_Clear(PyObject *set)</code></pre><br>Empty an existing set of all elements.	https://docs.python.org/3.4/c-api/set.html#c.PySet_Clear
PySet_ClearFreeList	A							https://docs.python.org			<pre><code>
int PySet_ClearFreeList()</code></pre><br>Clear the free list. Return the total number of freed items.	https://docs.python.org/3.4/c-api/set.html#c.PySet_ClearFreeList
PySlice_Check	A							https://docs.python.org			<pre><code>
int PySlice_Check(PyObject *ob)</code></pre><br>Return true if ob is a slice object; ob must not be NULL.	https://docs.python.org/3.4/c-api/slice.html#c.PySlice_Check
PySlice_New	A							https://docs.python.org			<pre><code>
PyObject* PySlice_New(PyObject *start, PyObject *stop, PyObject *step)</code></pre><br>Return a new slice object with the given values. The start, stop, and step parameters are used as the values of the slice object attributes of the same names. Any of the values may be NULL, in which case the None will be used for the corresponding attribute. Return NULL if the new object could not be allocated.	https://docs.python.org/3.4/c-api/slice.html#c.PySlice_New
PySlice_GetIndices	A							https://docs.python.org			<pre><code>
int PySlice_GetIndices(PyObject *slice, Py_ssize_t length, Py_ssize_t *start, Py_ssize_t *stop, Py_ssize_t *step)</code></pre><br>Retrieve the start, stop and step indices from the slice object slice, assuming a sequence of length length. Treats indices greater than length as errors.	https://docs.python.org/3.4/c-api/slice.html#c.PySlice_GetIndices
PySlice_GetIndicesEx	A							https://docs.python.org			<pre><code>
int PySlice_GetIndicesEx(PyObject *slice, Py_ssize_t length, Py_ssize_t *start, Py_ssize_t *stop, Py_ssize_t *step, Py_ssize_t *slicelength)</code></pre><br>Usable replacement for PySlice_GetIndices(). Retrieve the start, stop, and step indices from the slice object slice assuming a sequence of length length, and store the length of the slice in slicelength. Out of bounds indices are clipped in a manner consistent with the handling of normal slices.	https://docs.python.org/3.4/c-api/slice.html#c.PySlice_GetIndicesEx
Py_FdIsInteractive	A							https://docs.python.org			<pre><code>
int Py_FdIsInteractive(FILE *fp, const char *filename)</code></pre><br>Return true (nonzero) if the standard I/O file fp with name filename is deemed interactive. This is the case for files for which isatty(fileno(fp)) is true. If the global flag Py_InteractiveFlag is true, this function also returns true if the filename pointer is NULL or if the name is equal to one of the strings '<stdin>' or '???'.	https://docs.python.org/3.4/c-api/sys.html#c.Py_FdIsInteractive
PyOS_AfterFork	A							https://docs.python.org			<pre><code>
void PyOS_AfterFork()</code></pre><br>Function to update some internal state after a process fork; this should be called in the new process if the Python interpreter will continue to be used. If a new executable is loaded into the new process, this function does not need to be called.	https://docs.python.org/3.4/c-api/sys.html#c.PyOS_AfterFork
PyOS_CheckStack	A							https://docs.python.org			<pre><code>
int PyOS_CheckStack()</code></pre><br>Return true when the interpreter runs out of stack space. This is a reliable check, but is only available when USE_STACKCHECK is defined (currently on Windows using the Microsoft Visual C++ compiler). USE_STACKCHECK will be defined automatically; you should never change the definition in your own code.	https://docs.python.org/3.4/c-api/sys.html#c.PyOS_CheckStack
PyOS_getsig	A							https://docs.python.org			<pre><code>
PyOS_sighandler_t PyOS_getsig(int i)</code></pre><br>Return the current signal handler for signal i. This is a thin wrapper around either sigaction() or signal(). Do not call those functions directly! PyOS_sighandler_t is a typedef alias for void (*)(int).	https://docs.python.org/3.4/c-api/sys.html#c.PyOS_getsig
PyOS_setsig	A							https://docs.python.org			<pre><code>
PyOS_sighandler_t PyOS_setsig(int i, PyOS_sighandler_t h)</code></pre><br>Set the signal handler for signal i to be h; return the old signal handler. This is a thin wrapper around either sigaction() or signal(). Do not call those functions directly! PyOS_sighandler_t is a typedef alias for void (*)(int).	https://docs.python.org/3.4/c-api/sys.html#c.PyOS_setsig
PySys_GetObject	A							https://docs.python.org			<pre><code>
PyObject *PySys_GetObject(const char *name)</code></pre><br>Return the object name from the sys module or NULL if it does not exist, without setting an exception.	https://docs.python.org/3.4/c-api/sys.html#c.PySys_GetObject
PySys_SetObject	A							https://docs.python.org			<pre><code>
int PySys_SetObject(const char *name, PyObject *v)</code></pre><br>Set name in the sys module to v unless v is NULL, in which case name is deleted from the sys module. Returns 0 on success, -1 on error.	https://docs.python.org/3.4/c-api/sys.html#c.PySys_SetObject
PySys_ResetWarnOptions	A							https://docs.python.org			<pre><code>
void PySys_ResetWarnOptions()</code></pre><br>Reset sys.warnoptions to an empty list.	https://docs.python.org/3.4/c-api/sys.html#c.PySys_ResetWarnOptions
PySys_AddWarnOption	A							https://docs.python.org			<pre><code>
void PySys_AddWarnOption(wchar_t *s)</code></pre><br>Append s to sys.warnoptions.	https://docs.python.org/3.4/c-api/sys.html#c.PySys_AddWarnOption
PySys_AddWarnOptionUnicode	A							https://docs.python.org			<pre><code>
void PySys_AddWarnOptionUnicode(PyObject *unicode)</code></pre><br>Append unicode to sys.warnoptions.	https://docs.python.org/3.4/c-api/sys.html#c.PySys_AddWarnOptionUnicode
PySys_SetPath	A							https://docs.python.org			<pre><code>
void PySys_SetPath(wchar_t *path)</code></pre><br>Set sys.path to a list object of paths found in path which should be a list of paths separated with the platform’s search path delimiter (: on Unix, ; on Windows).	https://docs.python.org/3.4/c-api/sys.html#c.PySys_SetPath
PySys_WriteStdout	A							https://docs.python.org			<pre><code>
void PySys_WriteStdout(const char *format, ...)</code></pre><br>Write the output string described by format to sys.stdout. No exceptions are raised, even if truncation occurs (see below).	https://docs.python.org/3.4/c-api/sys.html#c.PySys_WriteStdout
PySys_WriteStderr	A							https://docs.python.org			<pre><code>
void PySys_WriteStderr(const char *format, ...)</code></pre><br>As PySys_WriteStdout(), but write to sys.stderr or stderr instead.	https://docs.python.org/3.4/c-api/sys.html#c.PySys_WriteStderr
PySys_FormatStdout	A							https://docs.python.org			<pre><code>
void PySys_FormatStdout(const char *format, ...)</code></pre><br>Function similar to PySys_WriteStdout() but format the message using PyUnicode_FromFormatV() and don’t truncate the message to an arbitrary length.	https://docs.python.org/3.4/c-api/sys.html#c.PySys_FormatStdout
PySys_FormatStderr	A							https://docs.python.org			<pre><code>
void PySys_FormatStderr(const char *format, ...)</code></pre><br>As PySys_FormatStdout(), but write to sys.stderr or stderr instead.	https://docs.python.org/3.4/c-api/sys.html#c.PySys_FormatStderr
PySys_AddXOption	A							https://docs.python.org			<pre><code>
void PySys_AddXOption(const wchar_t *s)</code></pre><br>Parse s as a set of -X options and add them to the current options mapping as returned by PySys_GetXOptions().	https://docs.python.org/3.4/c-api/sys.html#c.PySys_AddXOption
PySys_GetXOptions	A							https://docs.python.org			<pre><code>
PyObject *PySys_GetXOptions()</code></pre><br>Return the current dictionary of -X options, similarly to sys._xoptions. On error, NULL is returned and an exception is set.	https://docs.python.org/3.4/c-api/sys.html#c.PySys_GetXOptions
Py_FatalError	A							https://docs.python.org			<pre><code>
void Py_FatalError(const char *message)</code></pre><br>Print a fatal error message and kill the process. No cleanup is performed. This function should only be invoked when a condition is detected that would make it dangerous to continue using the Python interpreter; e.g., when the object administration appears to be corrupted. On Unix, the standard C library function abort() is called which will attempt to produce a core file.	https://docs.python.org/3.4/c-api/sys.html#c.Py_FatalError
Py_Exit	A							https://docs.python.org			<pre><code>
void Py_Exit(int status)</code></pre><br>Exit the current process. This calls Py_Finalize() and then calls the standard C library function exit(status).	https://docs.python.org/3.4/c-api/sys.html#c.Py_Exit
Py_AtExit	A							https://docs.python.org			<pre><code>
int Py_AtExit(void (*func)())</code></pre><br>Register a cleanup function to be called by Py_Finalize(). The cleanup function will be called with no arguments and should return no value. At most 32 cleanup functions can be registered. When the registration is successful, Py_AtExit() returns 0; on failure, it returns -1. The cleanup function registered last is called first. Each cleanup function will be called at most once. Since Python’s internal finalization will have completed before the cleanup function, no Python APIs should be called by func.	https://docs.python.org/3.4/c-api/sys.html#c.Py_AtExit
PyTuple_Check	A							https://docs.python.org			<pre><code>
int PyTuple_Check(PyObject *p)</code></pre><br>Return true if p is a tuple object or an instance of a subtype of the tuple type.	https://docs.python.org/3.4/c-api/tuple.html#c.PyTuple_Check
PyTuple_CheckExact	A							https://docs.python.org			<pre><code>
int PyTuple_CheckExact(PyObject *p)</code></pre><br>Return true if p is a tuple object, but not an instance of a subtype of the tuple type.	https://docs.python.org/3.4/c-api/tuple.html#c.PyTuple_CheckExact
PyTuple_New	A							https://docs.python.org			<pre><code>
PyObject* PyTuple_New(Py_ssize_t len)</code></pre><br>Return a new tuple object of size len, or NULL on failure.	https://docs.python.org/3.4/c-api/tuple.html#c.PyTuple_New
PyTuple_Pack	A							https://docs.python.org			<pre><code>
PyObject* PyTuple_Pack(Py_ssize_t n, ...)</code></pre><br>Return a new tuple object of size n, or NULL on failure. The tuple values are initialized to the subsequent n C arguments pointing to Python objects. PyTuple_Pack(2, a, b) is equivalent to Py_BuildValue("(OO)", a, b).	https://docs.python.org/3.4/c-api/tuple.html#c.PyTuple_Pack
PyTuple_Size	A							https://docs.python.org			<pre><code>
Py_ssize_t PyTuple_Size(PyObject *p)</code></pre><br>Take a pointer to a tuple object, and return the size of that tuple.	https://docs.python.org/3.4/c-api/tuple.html#c.PyTuple_Size
PyTuple_GET_SIZE	A							https://docs.python.org			<pre><code>
Py_ssize_t PyTuple_GET_SIZE(PyObject *p)</code></pre><br>Return the size of the tuple p, which must be non-NULL and point to a tuple; no error checking is performed.	https://docs.python.org/3.4/c-api/tuple.html#c.PyTuple_GET_SIZE
PyTuple_GetItem	A							https://docs.python.org			<pre><code>
PyObject* PyTuple_GetItem(PyObject *p, Py_ssize_t pos)</code></pre><br>Return the object at position pos in the tuple pointed to by p. If pos is out of bounds, return NULL and sets an IndexError exception.	https://docs.python.org/3.4/c-api/tuple.html#c.PyTuple_GetItem
PyTuple_GET_ITEM	A							https://docs.python.org			<pre><code>
PyObject* PyTuple_GET_ITEM(PyObject *p, Py_ssize_t pos)</code></pre><br>Like PyTuple_GetItem(), but does no checking of its arguments.	https://docs.python.org/3.4/c-api/tuple.html#c.PyTuple_GET_ITEM
PyTuple_GetSlice	A							https://docs.python.org			<pre><code>
PyObject* PyTuple_GetSlice(PyObject *p, Py_ssize_t low, Py_ssize_t high)</code></pre><br>Take a slice of the tuple pointed to by p from low to high and return it as a new tuple.	https://docs.python.org/3.4/c-api/tuple.html#c.PyTuple_GetSlice
PyTuple_SetItem	A							https://docs.python.org			<pre><code>
int PyTuple_SetItem(PyObject *p, Py_ssize_t pos, PyObject *o)</code></pre><br>Insert a reference to object o at position pos of the tuple pointed to by p. Return 0 on success.	https://docs.python.org/3.4/c-api/tuple.html#c.PyTuple_SetItem
PyTuple_SET_ITEM	A							https://docs.python.org			<pre><code>
void PyTuple_SET_ITEM(PyObject *p, Py_ssize_t pos, PyObject *o)</code></pre><br>Like PyTuple_SetItem(), but does no error checking, and should only be used to fill in brand new tuples.	https://docs.python.org/3.4/c-api/tuple.html#c.PyTuple_SET_ITEM
_PyTuple_Resize	A							https://docs.python.org			<pre><code>
int _PyTuple_Resize(PyObject **p, Py_ssize_t newsize)</code></pre><br>Can be used to resize a tuple. newsize will be the new length of the tuple. Because tuples are supposed to be immutable, this should only be used if there is only one reference to the object. Do not use this if the tuple may already be known to some other part of the code. The tuple will always grow or shrink at the end. Think of this as destroying the old tuple and creating a new one, only more efficiently. Returns 0 on success. Client code should never assume that the resulting value of *p will be the same as before calling this function. If the object referenced by *p is replaced, the original *p is destroyed. On failure, returns -1 and sets *p to NULL, and raises MemoryError or SystemError.	https://docs.python.org/3.4/c-api/tuple.html#c._PyTuple_Resize
PyTuple_ClearFreeList	A							https://docs.python.org			<pre><code>
int PyTuple_ClearFreeList()</code></pre><br>Clear the free list. Return the total number of freed items.	https://docs.python.org/3.4/c-api/tuple.html#c.PyTuple_ClearFreeList
PyStructSequence_NewType	A							https://docs.python.org			<pre><code>
PyTypeObject* PyStructSequence_NewType(PyStructSequence_Desc *desc)</code></pre><br>Create a new struct sequence type from the data in desc, described below. Instances of the resulting type can be created with PyStructSequence_New().	https://docs.python.org/3.4/c-api/tuple.html#c.PyStructSequence_NewType
PyStructSequence_InitType	A							https://docs.python.org			<pre><code>
void PyStructSequence_InitType(PyTypeObject *type, PyStructSequence_Desc *desc)</code></pre><br>Initializes a struct sequence type type from desc in place.	https://docs.python.org/3.4/c-api/tuple.html#c.PyStructSequence_InitType
PyStructSequence_InitType2	A							https://docs.python.org			<pre><code>
int PyStructSequence_InitType2(PyTypeObject *type, PyStructSequence_Desc *desc)</code></pre><br>The same as PyStructSequence_InitType, but returns 0 on success and -1 on failure.	https://docs.python.org/3.4/c-api/tuple.html#c.PyStructSequence_InitType2
PyStructSequence_New	A							https://docs.python.org			<pre><code>
PyObject* PyStructSequence_New(PyTypeObject *type)</code></pre><br>Creates an instance of type, which must have been created with PyStructSequence_NewType().	https://docs.python.org/3.4/c-api/tuple.html#c.PyStructSequence_New
PyStructSequence_GetItem	A							https://docs.python.org			<pre><code>
PyObject* PyStructSequence_GetItem(PyObject *p, Py_ssize_t pos)</code></pre><br>Return the object at position pos in the struct sequence pointed to by p. No bounds checking is performed.	https://docs.python.org/3.4/c-api/tuple.html#c.PyStructSequence_GetItem
PyStructSequence_GET_ITEM	A							https://docs.python.org			<pre><code>
PyObject* PyStructSequence_GET_ITEM(PyObject *p, Py_ssize_t pos)</code></pre><br>Macro equivalent of PyStructSequence_GetItem().	https://docs.python.org/3.4/c-api/tuple.html#c.PyStructSequence_GET_ITEM
PyStructSequence_SetItem	A							https://docs.python.org			<pre><code>
void PyStructSequence_SetItem(PyObject *p, Py_ssize_t pos, PyObject *o)</code></pre><br>Sets the field at index pos of the struct sequence p to value o. Like PyTuple_SET_ITEM(), this should only be used to fill in brand new instances.	https://docs.python.org/3.4/c-api/tuple.html#c.PyStructSequence_SetItem
PyStructSequence_SET_ITEM	A							https://docs.python.org			<pre><code>
PyObject* PyStructSequence_SET_ITEM(PyObject *p, Py_ssize_t *pos, PyObject *o)</code></pre><br>Macro equivalent of PyStructSequence_SetItem().	https://docs.python.org/3.4/c-api/tuple.html#c.PyStructSequence_SET_ITEM
PyType_Check	A							https://docs.python.org			<pre><code>
int PyType_Check(PyObject *o)</code></pre><br>Return true if the object o is a type object, including instances of types derived from the standard type object. Return false in all other cases.	https://docs.python.org/3.4/c-api/type.html#c.PyType_Check
PyType_CheckExact	A							https://docs.python.org			<pre><code>
int PyType_CheckExact(PyObject *o)</code></pre><br>Return true if the object o is a type object, but not a subtype of the standard type object. Return false in all other cases.	https://docs.python.org/3.4/c-api/type.html#c.PyType_CheckExact
PyType_ClearCache	A							https://docs.python.org			<pre><code>
unsigned int PyType_ClearCache()</code></pre><br>Clear the internal lookup cache. Return the current version tag.	https://docs.python.org/3.4/c-api/type.html#c.PyType_ClearCache
PyType_GetFlags	A							https://docs.python.org			<pre><code>
long PyType_GetFlags(PyTypeObject* type)</code></pre><br>Return the tp_flags member of type. This function is primarily meant for use with Py_LIMITED_API; the individual flag bits are guaranteed to be stable across Python releases, but access to tp_flags itself is not part of the limited API.	https://docs.python.org/3.4/c-api/type.html#c.PyType_GetFlags
PyType_Modified	A							https://docs.python.org			<pre><code>
void PyType_Modified(PyTypeObject *type)</code></pre><br>Invalidate the internal lookup cache for the type and all of its subtypes. This function must be called after any manual modification of the attributes or base classes of the type.	https://docs.python.org/3.4/c-api/type.html#c.PyType_Modified
PyType_HasFeature	A							https://docs.python.org			<pre><code>
int PyType_HasFeature(PyTypeObject *o, int feature)</code></pre><br>Return true if the type object o sets the feature feature. Type features are denoted by single bit flags.	https://docs.python.org/3.4/c-api/type.html#c.PyType_HasFeature
PyType_IS_GC	A							https://docs.python.org			<pre><code>
int PyType_IS_GC(PyTypeObject *o)</code></pre><br>Return true if the type object includes support for the cycle detector; this tests the type flag Py_TPFLAGS_HAVE_GC.	https://docs.python.org/3.4/c-api/type.html#c.PyType_IS_GC
PyType_IsSubtype	A							https://docs.python.org			<pre><code>
int PyType_IsSubtype(PyTypeObject *a, PyTypeObject *b)</code></pre><br>Return true if a is a subtype of b.	https://docs.python.org/3.4/c-api/type.html#c.PyType_IsSubtype
PyType_GenericAlloc	A							https://docs.python.org			<pre><code>
PyObject* PyType_GenericAlloc(PyTypeObject *type, Py_ssize_t nitems)</code></pre><br>Generic handler for the tp_alloc slot of a type object. Use Python’s default memory allocation mechanism to allocate a new instance and initialize all its contents to NULL.	https://docs.python.org/3.4/c-api/type.html#c.PyType_GenericAlloc
PyType_GenericNew	A							https://docs.python.org			<pre><code>
PyObject* PyType_GenericNew(PyTypeObject *type, PyObject *args, PyObject *kwds)</code></pre><br>Generic handler for the tp_new slot of a type object. Create a new instance using the type’s tp_alloc slot.	https://docs.python.org/3.4/c-api/type.html#c.PyType_GenericNew
PyType_Ready	A							https://docs.python.org			<pre><code>
int PyType_Ready(PyTypeObject *type)</code></pre><br>Finalize a type object. This should be called on all type objects to finish their initialization. This function is responsible for adding inherited slots from a type’s base class. Return 0 on success, or return -1 and sets an exception on error.	https://docs.python.org/3.4/c-api/type.html#c.PyType_Ready
PyType_FromSpec	A							https://docs.python.org			<pre><code>
PyObject* PyType_FromSpec(PyType_Spec *spec)</code></pre><br>Creates and returns a heap type object from the spec passed to the function.	https://docs.python.org/3.4/c-api/type.html#c.PyType_FromSpec
PyType_FromSpecWithBases	A							https://docs.python.org			<pre><code>
PyObject* PyType_FromSpecWithBases(PyType_Spec *spec, PyObject *bases)</code></pre><br>Creates and returns a heap type object from the spec. In addition to that, the created heap type contains all types contained by the bases tuple as base types. This allows the caller to reference other heap types as base types.	https://docs.python.org/3.4/c-api/type.html#c.PyType_FromSpecWithBases
PyType_GetSlot	A							https://docs.python.org			<pre><code>
void* PyType_GetSlot(PyTypeObject *type, int slot)</code></pre><br>Return the function pointer stored in the given slot. If the result is NULL, this indicates that either the slot is NULL, or that the function was called with invalid parameters. Callers will typically cast the result pointer into the appropriate function type.	https://docs.python.org/3.4/c-api/type.html#c.PyType_GetSlot
PyUnicode_Check	A							https://docs.python.org			<pre><code>
int PyUnicode_Check(PyObject *o)</code></pre><br>Return true if the object o is a Unicode object or an instance of a Unicode subtype.	https://docs.python.org/3.4/c-api/unicode.html#c.PyUnicode_Check
PyUnicode_CheckExact	A							https://docs.python.org			<pre><code>
int PyUnicode_CheckExact(PyObject *o)</code></pre><br>Return true if the object o is a Unicode object, but not an instance of a subtype.	https://docs.python.org/3.4/c-api/unicode.html#c.PyUnicode_CheckExact
PyUnicode_READY	A							https://docs.python.org			<pre><code>
int PyUnicode_READY(PyObject *o)</code></pre><br>Ensure the string object o is in the “canonical” representation. This is required before using any of the access macros described below.	https://docs.python.org/3.4/c-api/unicode.html#c.PyUnicode_READY
PyUnicode_GET_LENGTH	A							https://docs.python.org			<pre><code>
Py_ssize_t PyUnicode_GET_LENGTH(PyObject *o)</code></pre><br>Return the length of the Unicode string, in code points. o has to be a Unicode object in the “canonical” representation (not checked).	https://docs.python.org/3.4/c-api/unicode.html#c.PyUnicode_GET_LENGTH
PyUnicode_1BYTE_DATA	A							https://docs.python.org			<pre><code>
Py_UCS1* PyUnicode_1BYTE_DATA(PyObject *o)</code></pre><br>Return a pointer to the canonical representation cast to UCS1, UCS2 or UCS4 integer types for direct character access. No checks are performed if the canonical representation has the correct character size; use PyUnicode_KIND() to select the right macro. Make sure PyUnicode_READY() has been called before accessing this.	https://docs.python.org/3.4/c-api/unicode.html#c.PyUnicode_1BYTE_DATA
PyUnicode_KIND	A							https://docs.python.org			<pre><code>
int PyUnicode_KIND(PyObject *o)</code></pre><br>Return one of the PyUnicode kind constants (see above) that indicate how many bytes per character this Unicode object uses to store its data. o has to be a Unicode object in the “canonical” representation (not checked).	https://docs.python.org/3.4/c-api/unicode.html#c.PyUnicode_KIND
PyUnicode_DATA	A							https://docs.python.org			<pre><code>
void* PyUnicode_DATA(PyObject *o)</code></pre><br>Return a void pointer to the raw unicode buffer. o has to be a Unicode object in the “canonical” representation (not checked).	https://docs.python.org/3.4/c-api/unicode.html#c.PyUnicode_DATA
PyUnicode_WRITE	A							https://docs.python.org			<pre><code>
void PyUnicode_WRITE(int kind, void *data, Py_ssize_t index, Py_UCS4 value)</code></pre><br>Write into a canonical representation data (as obtained with PyUnicode_DATA()). This macro does not do any sanity checks and is intended for usage in loops. The caller should cache the kind value and data pointer as obtained from other macro calls. index is the index in the string (starts at 0) and value is the new code point value which should be written to that location.	https://docs.python.org/3.4/c-api/unicode.html#c.PyUnicode_WRITE
PyUnicode_READ	A							https://docs.python.org			<pre><code>
Py_UCS4 PyUnicode_READ(int kind, void *data, Py_ssize_t index)</code></pre><br>Read a code point from a canonical representation data (as obtained with PyUnicode_DATA()). No checks or ready calls are performed.	https://docs.python.org/3.4/c-api/unicode.html#c.PyUnicode_READ
PyUnicode_READ_CHAR	A							https://docs.python.org			<pre><code>
Py_UCS4 PyUnicode_READ_CHAR(PyObject *o, Py_ssize_t index)</code></pre><br>Read a character from a Unicode object o, which must be in the “canonical” representation. This is less efficient than PyUnicode_READ() if you do multiple consecutive reads.	https://docs.python.org/3.4/c-api/unicode.html#c.PyUnicode_READ_CHAR
PyUnicode_MAX_CHAR_VALUE	A							https://docs.python.org			<pre><code>
PyUnicode_MAX_CHAR_VALUE(PyObject *o)</code></pre><br>Return the maximum code point that is suitable for creating another string based on o, which must be in the “canonical” representation. This is always an approximation but more efficient than iterating over the string.	https://docs.python.org/3.4/c-api/unicode.html#c.PyUnicode_MAX_CHAR_VALUE
PyUnicode_ClearFreeList	A							https://docs.python.org			<pre><code>
int PyUnicode_ClearFreeList()</code></pre><br>Clear the free list. Return the total number of freed items.	https://docs.python.org/3.4/c-api/unicode.html#c.PyUnicode_ClearFreeList
PyUnicode_GET_SIZE	A							https://docs.python.org			<pre><code>
Py_ssize_t PyUnicode_GET_SIZE(PyObject *o)</code></pre><br>Return the size of the deprecated Py_UNICODE representation, in code units (this includes surrogate pairs as 2 units). o has to be a Unicode object (not checked).	https://docs.python.org/3.4/c-api/unicode.html#c.PyUnicode_GET_SIZE
PyUnicode_GET_DATA_SIZE	A							https://docs.python.org			<pre><code>
Py_ssize_t PyUnicode_GET_DATA_SIZE(PyObject *o)</code></pre><br>Return the size of the deprecated Py_UNICODE representation in bytes. o has to be a Unicode object (not checked).	https://docs.python.org/3.4/c-api/unicode.html#c.PyUnicode_GET_DATA_SIZE
PyUnicode_AS_UNICODE	A							https://docs.python.org			<pre><code>
Py_UNICODE* PyUnicode_AS_UNICODE(PyObject *o)</code></pre><br>Return a pointer to a Py_UNICODE representation of the object. The returned buffer is always terminated with an extra null code point. It may also contain embedded null code points, which would cause the string to be truncated when used in most C functions. The AS_DATA form casts the pointer to const char *. The o argument has to be a Unicode object (not checked).	https://docs.python.org/3.4/c-api/unicode.html#c.PyUnicode_AS_UNICODE
Py_UNICODE_ISSPACE	A							https://docs.python.org			<pre><code>
int Py_UNICODE_ISSPACE(Py_UNICODE ch)</code></pre><br>Return 1 or 0 depending on whether ch is a whitespace character.	https://docs.python.org/3.4/c-api/unicode.html#c.Py_UNICODE_ISSPACE
Py_UNICODE_ISLOWER	A							https://docs.python.org			<pre><code>
int Py_UNICODE_ISLOWER(Py_UNICODE ch)</code></pre><br>Return 1 or 0 depending on whether ch is a lowercase character.	https://docs.python.org/3.4/c-api/unicode.html#c.Py_UNICODE_ISLOWER
Py_UNICODE_ISUPPER	A							https://docs.python.org			<pre><code>
int Py_UNICODE_ISUPPER(Py_UNICODE ch)</code></pre><br>Return 1 or 0 depending on whether ch is an uppercase character.	https://docs.python.org/3.4/c-api/unicode.html#c.Py_UNICODE_ISUPPER
Py_UNICODE_ISTITLE	A							https://docs.python.org			<pre><code>
int Py_UNICODE_ISTITLE(Py_UNICODE ch)</code></pre><br>Return 1 or 0 depending on whether ch is a titlecase character.	https://docs.python.org/3.4/c-api/unicode.html#c.Py_UNICODE_ISTITLE
Py_UNICODE_ISLINEBREAK	A							https://docs.python.org			<pre><code>
int Py_UNICODE_ISLINEBREAK(Py_UNICODE ch)</code></pre><br>Return 1 or 0 depending on whether ch is a linebreak character.	https://docs.python.org/3.4/c-api/unicode.html#c.Py_UNICODE_ISLINEBREAK
Py_UNICODE_ISDECIMAL	A							https://docs.python.org			<pre><code>
int Py_UNICODE_ISDECIMAL(Py_UNICODE ch)</code></pre><br>Return 1 or 0 depending on whether ch is a decimal character.	https://docs.python.org/3.4/c-api/unicode.html#c.Py_UNICODE_ISDECIMAL
Py_UNICODE_ISDIGIT	A							https://docs.python.org			<pre><code>
int Py_UNICODE_ISDIGIT(Py_UNICODE ch)</code></pre><br>Return 1 or 0 depending on whether ch is a digit character.	https://docs.python.org/3.4/c-api/unicode.html#c.Py_UNICODE_ISDIGIT
Py_UNICODE_ISNUMERIC	A							https://docs.python.org			<pre><code>
int Py_UNICODE_ISNUMERIC(Py_UNICODE ch)</code></pre><br>Return 1 or 0 depending on whether ch is a numeric character.	https://docs.python.org/3.4/c-api/unicode.html#c.Py_UNICODE_ISNUMERIC
Py_UNICODE_ISALPHA	A							https://docs.python.org			<pre><code>
int Py_UNICODE_ISALPHA(Py_UNICODE ch)</code></pre><br>Return 1 or 0 depending on whether ch is an alphabetic character.	https://docs.python.org/3.4/c-api/unicode.html#c.Py_UNICODE_ISALPHA
Py_UNICODE_ISALNUM	A							https://docs.python.org			<pre><code>
int Py_UNICODE_ISALNUM(Py_UNICODE ch)</code></pre><br>Return 1 or 0 depending on whether ch is an alphanumeric character.	https://docs.python.org/3.4/c-api/unicode.html#c.Py_UNICODE_ISALNUM
Py_UNICODE_ISPRINTABLE	A							https://docs.python.org			<pre><code>
int Py_UNICODE_ISPRINTABLE(Py_UNICODE ch)</code></pre><br>Return 1 or 0 depending on whether ch is a printable character. Nonprintable characters are those characters defined in the Unicode character database as “Other” or “Separator”, excepting the ASCII space (0x20) which is considered printable. (Note that printable characters in this context are those which should not be escaped when repr() is invoked on a string. It has no bearing on the handling of strings written to sys.stdout or sys.stderr.)	https://docs.python.org/3.4/c-api/unicode.html#c.Py_UNICODE_ISPRINTABLE
Py_UNICODE_TOLOWER	A							https://docs.python.org			<pre><code>
Py_UNICODE Py_UNICODE_TOLOWER(Py_UNICODE ch)</code></pre><br>Return the character ch converted to lower case.	https://docs.python.org/3.4/c-api/unicode.html#c.Py_UNICODE_TOLOWER
Py_UNICODE_TOUPPER	A							https://docs.python.org			<pre><code>
Py_UNICODE Py_UNICODE_TOUPPER(Py_UNICODE ch)</code></pre><br>Return the character ch converted to upper case.	https://docs.python.org/3.4/c-api/unicode.html#c.Py_UNICODE_TOUPPER
Py_UNICODE_TOTITLE	A							https://docs.python.org			<pre><code>
Py_UNICODE Py_UNICODE_TOTITLE(Py_UNICODE ch)</code></pre><br>Return the character ch converted to title case.	https://docs.python.org/3.4/c-api/unicode.html#c.Py_UNICODE_TOTITLE
Py_UNICODE_TODECIMAL	A							https://docs.python.org			<pre><code>
int Py_UNICODE_TODECIMAL(Py_UNICODE ch)</code></pre><br>Return the character ch converted to a decimal positive integer. Return -1 if this is not possible. This macro does not raise exceptions.	https://docs.python.org/3.4/c-api/unicode.html#c.Py_UNICODE_TODECIMAL
Py_UNICODE_TODIGIT	A							https://docs.python.org			<pre><code>
int Py_UNICODE_TODIGIT(Py_UNICODE ch)</code></pre><br>Return the character ch converted to a single digit integer. Return -1 if this is not possible. This macro does not raise exceptions.	https://docs.python.org/3.4/c-api/unicode.html#c.Py_UNICODE_TODIGIT
Py_UNICODE_TONUMERIC	A							https://docs.python.org			<pre><code>
double Py_UNICODE_TONUMERIC(Py_UNICODE ch)</code></pre><br>Return the character ch converted to a double. Return -1.0 if this is not possible. This macro does not raise exceptions.	https://docs.python.org/3.4/c-api/unicode.html#c.Py_UNICODE_TONUMERIC
PyUnicode_New	A							https://docs.python.org			<pre><code>
PyObject* PyUnicode_New(Py_ssize_t size, Py_UCS4 maxchar)</code></pre><br>Create a new Unicode object. maxchar should be the true maximum code point to be placed in the string. As an approximation, it can be rounded up to the nearest value in the sequence 127, 255, 65535, 1114111.	https://docs.python.org/3.4/c-api/unicode.html#c.PyUnicode_New
PyUnicode_FromKindAndData	A							https://docs.python.org			<pre><code>
PyObject* PyUnicode_FromKindAndData(int kind, const void *buffer, Py_ssize_t size)</code></pre><br>Create a new Unicode object with the given kind (possible values are PyUnicode_1BYTE_KIND etc., as returned by PyUnicode_KIND()). The buffer must point to an array of size units of 1, 2 or 4 bytes per character, as given by the kind.	https://docs.python.org/3.4/c-api/unicode.html#c.PyUnicode_FromKindAndData
PyUnicode_FromStringAndSize	A							https://docs.python.org			<pre><code>
PyObject* PyUnicode_FromStringAndSize(const char *u, Py_ssize_t size)</code></pre><br>Create a Unicode object from the char buffer u. The bytes will be interpreted as being UTF-8 encoded. The buffer is copied into the new object. If the buffer is not NULL, the return value might be a shared object, i.e. modification of the data is not allowed.	https://docs.python.org/3.4/c-api/unicode.html#c.PyUnicode_FromStringAndSize
PyUnicode_FromString	A							https://docs.python.org			<pre><code>
PyObject *PyUnicode_FromString(const char *u)</code></pre><br>Create a Unicode object from an UTF-8 encoded null-terminated char buffer u.	https://docs.python.org/3.4/c-api/unicode.html#c.PyUnicode_FromString
PyUnicode_FromFormat	A							https://docs.python.org			<pre><code>
PyObject* PyUnicode_FromFormat(const char *format, ...)</code></pre><br>Take a C printf()-style format string and a variable number of arguments, calculate the size of the resulting Python unicode string and return a string with the values formatted into it. The variable arguments must be C types and must correspond exactly to the format characters in the format ASCII-encoded string. The following format characters are allowed:	https://docs.python.org/3.4/c-api/unicode.html#c.PyUnicode_FromFormat
PyUnicode_FromFormatV	A							https://docs.python.org			<pre><code>
PyObject* PyUnicode_FromFormatV(const char *format, va_list vargs)</code></pre><br>Identical to PyUnicode_FromFormat() except that it takes exactly two arguments.	https://docs.python.org/3.4/c-api/unicode.html#c.PyUnicode_FromFormatV
PyUnicode_FromEncodedObject	A							https://docs.python.org			<pre><code>
PyObject* PyUnicode_FromEncodedObject(PyObject *obj, const char *encoding, const char *errors)</code></pre><br>Coerce an encoded object obj to an Unicode object and return a reference with incremented refcount.	https://docs.python.org/3.4/c-api/unicode.html#c.PyUnicode_FromEncodedObject
PyUnicode_GetLength	A							https://docs.python.org			<pre><code>
Py_ssize_t PyUnicode_GetLength(PyObject *unicode)</code></pre><br>Return the length of the Unicode object, in code points.	https://docs.python.org/3.4/c-api/unicode.html#c.PyUnicode_GetLength
PyUnicode_CopyCharacters	A							https://docs.python.org			<pre><code>
int PyUnicode_CopyCharacters(PyObject *to, Py_ssize_t to_start, PyObject *from, Py_ssize_t from_start, Py_ssize_t how_many)</code></pre><br>Copy characters from one Unicode object into another. This function performs character conversion when necessary and falls back to memcpy() if possible. Returns -1 and sets an exception on error, otherwise returns 0.	https://docs.python.org/3.4/c-api/unicode.html#c.PyUnicode_CopyCharacters
PyUnicode_Fill	A							https://docs.python.org			<pre><code>
Py_ssize_t PyUnicode_Fill(PyObject *unicode, Py_ssize_t start, Py_ssize_t length, Py_UCS4 fill_char)</code></pre><br>Fill a string with a character: write fill_char into unicode[start:start+length].	https://docs.python.org/3.4/c-api/unicode.html#c.PyUnicode_Fill
PyUnicode_WriteChar	A							https://docs.python.org			<pre><code>
int PyUnicode_WriteChar(PyObject *unicode, Py_ssize_t index, Py_UCS4 character)</code></pre><br>Write a character to a string. The string must have been created through PyUnicode_New(). Since Unicode strings are supposed to be immutable, the string must not be shared, or have been hashed yet.	https://docs.python.org/3.4/c-api/unicode.html#c.PyUnicode_WriteChar
PyUnicode_ReadChar	A							https://docs.python.org			<pre><code>
Py_UCS4 PyUnicode_ReadChar(PyObject *unicode, Py_ssize_t index)</code></pre><br>Read a character from a string. This function checks that unicode is a Unicode object and the index is not out of bounds, in contrast to the macro version PyUnicode_READ_CHAR().	https://docs.python.org/3.4/c-api/unicode.html#c.PyUnicode_ReadChar
PyUnicode_Substring	A							https://docs.python.org			<pre><code>
PyObject* PyUnicode_Substring(PyObject *str, Py_ssize_t start, Py_ssize_t end)</code></pre><br>Return a substring of str, from character index start (included) to character index end (excluded). Negative indices are not supported.	https://docs.python.org/3.4/c-api/unicode.html#c.PyUnicode_Substring
PyUnicode_AsUCS4	A							https://docs.python.org			<pre><code>
Py_UCS4* PyUnicode_AsUCS4(PyObject *u, Py_UCS4 *buffer, Py_ssize_t buflen, int copy_null)</code></pre><br>Copy the string u into a UCS4 buffer, including a null character, if copy_null is set. Returns NULL and sets an exception on error (in particular, a ValueError if buflen is smaller than the length of u). buffer is returned on success.	https://docs.python.org/3.4/c-api/unicode.html#c.PyUnicode_AsUCS4
PyUnicode_AsUCS4Copy	A							https://docs.python.org			<pre><code>
Py_UCS4* PyUnicode_AsUCS4Copy(PyObject *u)</code></pre><br>Copy the string u into a new UCS4 buffer that is allocated using PyMem_Malloc(). If this fails, NULL is returned with a MemoryError set. The returned buffer always has an extra null code point appended.	https://docs.python.org/3.4/c-api/unicode.html#c.PyUnicode_AsUCS4Copy
PyUnicode_FromUnicode	A							https://docs.python.org			<pre><code>
PyObject* PyUnicode_FromUnicode(const Py_UNICODE *u, Py_ssize_t size)</code></pre><br>Create a Unicode object from the Py_UNICODE buffer u of the given size. u may be NULL which causes the contents to be undefined. It is the user’s responsibility to fill in the needed data. The buffer is copied into the new object.	https://docs.python.org/3.4/c-api/unicode.html#c.PyUnicode_FromUnicode
PyUnicode_AsUnicode	A							https://docs.python.org			<pre><code>
Py_UNICODE* PyUnicode_AsUnicode(PyObject *unicode)</code></pre><br>Return a read-only pointer to the Unicode object’s internal Py_UNICODE buffer, or NULL on error. This will create the Py_UNICODE* representation of the object if it is not yet available. The buffer is always terminated with an extra null code point. Note that the resulting Py_UNICODE string may also contain embedded null code points, which would cause the string to be truncated when used in most C functions.	https://docs.python.org/3.4/c-api/unicode.html#c.PyUnicode_AsUnicode
PyUnicode_TransformDecimalToASCII	A							https://docs.python.org			<pre><code>
PyObject* PyUnicode_TransformDecimalToASCII(Py_UNICODE *s, Py_ssize_t size)</code></pre><br>Create a Unicode object by replacing all decimal digits in Py_UNICODE buffer of the given size by ASCII digits 0–9 according to their decimal value. Return NULL if an exception occurs.	https://docs.python.org/3.4/c-api/unicode.html#c.PyUnicode_TransformDecimalToASCII
PyUnicode_AsUnicodeAndSize	A							https://docs.python.org			<pre><code>
Py_UNICODE* PyUnicode_AsUnicodeAndSize(PyObject *unicode, Py_ssize_t *size)</code></pre><br>Like PyUnicode_AsUnicode(), but also saves the Py_UNICODE() array length (excluding the extra null terminator) in size. Note that the resulting Py_UNICODE* string may contain embedded null code points, which would cause the string to be truncated when used in most C functions.	https://docs.python.org/3.4/c-api/unicode.html#c.PyUnicode_AsUnicodeAndSize
PyUnicode_AsUnicodeCopy	A							https://docs.python.org			<pre><code>
Py_UNICODE* PyUnicode_AsUnicodeCopy(PyObject *unicode)</code></pre><br>Create a copy of a Unicode string ending with a null code point. Return NULL and raise a MemoryError exception on memory allocation failure, otherwise return a new allocated buffer (use PyMem_Free() to free the buffer). Note that the resulting Py_UNICODE* string may contain embedded null code points, which would cause the string to be truncated when used in most C functions.	https://docs.python.org/3.4/c-api/unicode.html#c.PyUnicode_AsUnicodeCopy
PyUnicode_GetSize	A							https://docs.python.org			<pre><code>
Py_ssize_t PyUnicode_GetSize(PyObject *unicode)</code></pre><br>Return the size of the deprecated Py_UNICODE representation, in code units (this includes surrogate pairs as 2 units).	https://docs.python.org/3.4/c-api/unicode.html#c.PyUnicode_GetSize
PyUnicode_FromObject	A							https://docs.python.org			<pre><code>
PyObject* PyUnicode_FromObject(PyObject *obj)</code></pre><br>Shortcut for PyUnicode_FromEncodedObject(obj, NULL, "strict") which is used throughout the interpreter whenever coercion to Unicode is needed.	https://docs.python.org/3.4/c-api/unicode.html#c.PyUnicode_FromObject
PyUnicode_DecodeLocaleAndSize	A							https://docs.python.org			<pre><code>
PyObject* PyUnicode_DecodeLocaleAndSize(const char *str, Py_ssize_t len, const char *errors)</code></pre><br>Decode a string from the current locale encoding. The supported error handlers are "strict" and "surrogateescape" (PEP 383). The decoder uses "strict" error handler if errors is NULL. str must end with a null character but cannot contain embedded null characters.	https://docs.python.org/3.4/c-api/unicode.html#c.PyUnicode_DecodeLocaleAndSize
PyUnicode_DecodeLocale	A							https://docs.python.org			<pre><code>
PyObject* PyUnicode_DecodeLocale(const char *str, const char *errors)</code></pre><br>Similar to PyUnicode_DecodeLocaleAndSize(), but compute the string length using strlen().	https://docs.python.org/3.4/c-api/unicode.html#c.PyUnicode_DecodeLocale
PyUnicode_EncodeLocale	A							https://docs.python.org			<pre><code>
PyObject* PyUnicode_EncodeLocale(PyObject *unicode, const char *errors)</code></pre><br>Encode a Unicode object to the current locale encoding. The supported error handlers are "strict" and "surrogateescape" (PEP 383). The encoder uses "strict" error handler if errors is NULL. Return a bytes object. str cannot contain embedded null characters.	https://docs.python.org/3.4/c-api/unicode.html#c.PyUnicode_EncodeLocale
PyUnicode_FSConverter	A							https://docs.python.org			<pre><code>
int PyUnicode_FSConverter(PyObject* obj, void* result)</code></pre><br>ParseTuple converter: encode str objects to bytes using PyUnicode_EncodeFSDefault(); bytes objects are output as-is. result must be a PyBytesObject* which must be released when it is no longer used.	https://docs.python.org/3.4/c-api/unicode.html#c.PyUnicode_FSConverter
PyUnicode_FSDecoder	A							https://docs.python.org			<pre><code>
int PyUnicode_FSDecoder(PyObject* obj, void* result)</code></pre><br>ParseTuple converter: decode bytes objects to str using PyUnicode_DecodeFSDefaultAndSize(); str objects are output as-is. result must be a PyUnicodeObject* which must be released when it is no longer used.	https://docs.python.org/3.4/c-api/unicode.html#c.PyUnicode_FSDecoder
PyUnicode_DecodeFSDefaultAndSize	A							https://docs.python.org			<pre><code>
PyObject* PyUnicode_DecodeFSDefaultAndSize(const char *s, Py_ssize_t size)</code></pre><br>Decode a string using Py_FileSystemDefaultEncoding and the "surrogateescape" error handler, or "strict" on Windows.	https://docs.python.org/3.4/c-api/unicode.html#c.PyUnicode_DecodeFSDefaultAndSize
PyUnicode_DecodeFSDefault	A							https://docs.python.org			<pre><code>
PyObject* PyUnicode_DecodeFSDefault(const char *s)</code></pre><br>Decode a null-terminated string using Py_FileSystemDefaultEncoding and the "surrogateescape" error handler, or "strict" on Windows.	https://docs.python.org/3.4/c-api/unicode.html#c.PyUnicode_DecodeFSDefault
PyUnicode_EncodeFSDefault	A							https://docs.python.org			<pre><code>
PyObject* PyUnicode_EncodeFSDefault(PyObject *unicode)</code></pre><br>Encode a Unicode object to Py_FileSystemDefaultEncoding with the "surrogateescape" error handler, or "strict" on Windows, and return bytes. Note that the resulting bytes object may contain null bytes.	https://docs.python.org/3.4/c-api/unicode.html#c.PyUnicode_EncodeFSDefault
PyUnicode_FromWideChar	A							https://docs.python.org			<pre><code>
PyObject* PyUnicode_FromWideChar(const wchar_t *w, Py_ssize_t size)</code></pre><br>Create a Unicode object from the wchar_t buffer w of the given size. Passing -1 as the size indicates that the function must itself compute the length, using wcslen. Return NULL on failure.	https://docs.python.org/3.4/c-api/unicode.html#c.PyUnicode_FromWideChar
PyUnicode_AsWideChar	A							https://docs.python.org			<pre><code>
Py_ssize_t PyUnicode_AsWideChar(PyUnicodeObject *unicode, wchar_t *w, Py_ssize_t size)</code></pre><br>Copy the Unicode object contents into the wchar_t buffer w. At most size wchar_t characters are copied (excluding a possibly trailing null termination character). Return the number of wchar_t characters copied or -1 in case of an error. Note that the resulting wchar_t* string may or may not be null-terminated. It is the responsibility of the caller to make sure that the wchar_t* string is null-terminated in case this is required by the application. Also, note that the wchar_t* string might contain null characters, which would cause the string to be truncated when used with most C functions.	https://docs.python.org/3.4/c-api/unicode.html#c.PyUnicode_AsWideChar
PyUnicode_AsWideCharString	A							https://docs.python.org			<pre><code>
wchar_t* PyUnicode_AsWideCharString(PyObject *unicode, Py_ssize_t *size)</code></pre><br>Convert the Unicode object to a wide character string. The output string always ends with a null character. If size is not NULL, write the number of wide characters (excluding the trailing null termination character) into *size.	https://docs.python.org/3.4/c-api/unicode.html#c.PyUnicode_AsWideCharString
Py_UCS4_strlen	A							https://docs.python.org			<pre><code>
size_t Py_UCS4_strlen(const Py_UCS4 *u)</code></pre><br>These utility functions work on strings of Py_UCS4 characters and otherwise behave like the C standard library functions with the same name.	https://docs.python.org/3.4/c-api/unicode.html#c.Py_UCS4_strlen
PyUnicode_Decode	A							https://docs.python.org			<pre><code>
PyObject* PyUnicode_Decode(const char *s, Py_ssize_t size, const char *encoding, const char *errors)</code></pre><br>Create a Unicode object by decoding size bytes of the encoded string s. encoding and errors have the same meaning as the parameters of the same name in the str() built-in function. The codec to be used is looked up using the Python codec registry. Return NULL if an exception was raised by the codec.	https://docs.python.org/3.4/c-api/unicode.html#c.PyUnicode_Decode
PyUnicode_AsEncodedString	A							https://docs.python.org			<pre><code>
PyObject* PyUnicode_AsEncodedString(PyObject *unicode, const char *encoding, const char *errors)</code></pre><br>Encode a Unicode object and return the result as Python bytes object. encoding and errors have the same meaning as the parameters of the same name in the Unicode encode() method. The codec to be used is looked up using the Python codec registry. Return NULL if an exception was raised by the codec.	https://docs.python.org/3.4/c-api/unicode.html#c.PyUnicode_AsEncodedString
PyUnicode_Encode	A							https://docs.python.org			<pre><code>
PyObject* PyUnicode_Encode(const Py_UNICODE *s, Py_ssize_t size, const char *encoding, const char *errors)</code></pre><br>Encode the Py_UNICODE buffer s of the given size and return a Python bytes object. encoding and errors have the same meaning as the parameters of the same name in the Unicode encode() method. The codec to be used is looked up using the Python codec registry. Return NULL if an exception was raised by the codec.	https://docs.python.org/3.4/c-api/unicode.html#c.PyUnicode_Encode
PyUnicode_DecodeUTF8	A							https://docs.python.org			<pre><code>
PyObject* PyUnicode_DecodeUTF8(const char *s, Py_ssize_t size, const char *errors)</code></pre><br>Create a Unicode object by decoding size bytes of the UTF-8 encoded string s. Return NULL if an exception was raised by the codec.	https://docs.python.org/3.4/c-api/unicode.html#c.PyUnicode_DecodeUTF8
PyUnicode_DecodeUTF8Stateful	A							https://docs.python.org			<pre><code>
PyObject* PyUnicode_DecodeUTF8Stateful(const char *s, Py_ssize_t size, const char *errors, Py_ssize_t *consumed)</code></pre><br>If consumed is NULL, behave like PyUnicode_DecodeUTF8(). If consumed is not NULL, trailing incomplete UTF-8 byte sequences will not be treated as an error. Those bytes will not be decoded and the number of bytes that have been decoded will be stored in consumed.	https://docs.python.org/3.4/c-api/unicode.html#c.PyUnicode_DecodeUTF8Stateful
PyUnicode_AsUTF8String	A							https://docs.python.org			<pre><code>
PyObject* PyUnicode_AsUTF8String(PyObject *unicode)</code></pre><br>Encode a Unicode object using UTF-8 and return the result as Python bytes object. Error handling is “strict”. Return NULL if an exception was raised by the codec.	https://docs.python.org/3.4/c-api/unicode.html#c.PyUnicode_AsUTF8String
PyUnicode_AsUTF8AndSize	A							https://docs.python.org			<pre><code>
char* PyUnicode_AsUTF8AndSize(PyObject *unicode, Py_ssize_t *size)</code></pre><br>Return a pointer to the UTF-8 encoding of the Unicode object, and store the size of the encoded representation (in bytes) in size. The size argument can be NULL; in this case no size will be stored. The returned buffer always has an extra null byte appended (not included in size), regardless of whether there are any other null code points.	https://docs.python.org/3.4/c-api/unicode.html#c.PyUnicode_AsUTF8AndSize
PyUnicode_AsUTF8	A							https://docs.python.org			<pre><code>
char* PyUnicode_AsUTF8(PyObject *unicode)</code></pre><br>As PyUnicode_AsUTF8AndSize(), but does not store the size.	https://docs.python.org/3.4/c-api/unicode.html#c.PyUnicode_AsUTF8
PyUnicode_EncodeUTF8	A							https://docs.python.org			<pre><code>
PyObject* PyUnicode_EncodeUTF8(const Py_UNICODE *s, Py_ssize_t size, const char *errors)</code></pre><br>Encode the Py_UNICODE buffer s of the given size using UTF-8 and return a Python bytes object. Return NULL if an exception was raised by the codec.	https://docs.python.org/3.4/c-api/unicode.html#c.PyUnicode_EncodeUTF8
PyUnicode_DecodeUTF32	A							https://docs.python.org			<pre><code>
PyObject* PyUnicode_DecodeUTF32(const char *s, Py_ssize_t size, const char *errors, int *byteorder)</code></pre><br>Decode size bytes from a UTF-32 encoded buffer string and return the corresponding Unicode object. errors (if non-NULL) defines the error handling. It defaults to “strict”.	https://docs.python.org/3.4/c-api/unicode.html#c.PyUnicode_DecodeUTF32
PyUnicode_DecodeUTF32Stateful	A							https://docs.python.org			<pre><code>
PyObject* PyUnicode_DecodeUTF32Stateful(const char *s, Py_ssize_t size, const char *errors, int *byteorder, Py_ssize_t *consumed)</code></pre><br>If consumed is NULL, behave like PyUnicode_DecodeUTF32(). If consumed is not NULL, PyUnicode_DecodeUTF32Stateful() will not treat trailing incomplete UTF-32 byte sequences (such as a number of bytes not divisible by four) as an error. Those bytes will not be decoded and the number of bytes that have been decoded will be stored in consumed.	https://docs.python.org/3.4/c-api/unicode.html#c.PyUnicode_DecodeUTF32Stateful
PyUnicode_AsUTF32String	A							https://docs.python.org			<pre><code>
PyObject* PyUnicode_AsUTF32String(PyObject *unicode)</code></pre><br>Return a Python byte string using the UTF-32 encoding in native byte order. The string always starts with a BOM mark. Error handling is “strict”. Return NULL if an exception was raised by the codec.	https://docs.python.org/3.4/c-api/unicode.html#c.PyUnicode_AsUTF32String
PyUnicode_EncodeUTF32	A							https://docs.python.org			<pre><code>
PyObject* PyUnicode_EncodeUTF32(const Py_UNICODE *s, Py_ssize_t size, const char *errors, int byteorder)</code></pre><br>Return a Python bytes object holding the UTF-32 encoded value of the Unicode data in s. Output is written according to the following byte order:	https://docs.python.org/3.4/c-api/unicode.html#c.PyUnicode_EncodeUTF32
PyUnicode_DecodeUTF16	A							https://docs.python.org			<pre><code>
PyObject* PyUnicode_DecodeUTF16(const char *s, Py_ssize_t size, const char *errors, int *byteorder)</code></pre><br>Decode size bytes from a UTF-16 encoded buffer string and return the corresponding Unicode object. errors (if non-NULL) defines the error handling. It defaults to “strict”.	https://docs.python.org/3.4/c-api/unicode.html#c.PyUnicode_DecodeUTF16
PyUnicode_DecodeUTF16Stateful	A							https://docs.python.org			<pre><code>
PyObject* PyUnicode_DecodeUTF16Stateful(const char *s, Py_ssize_t size, const char *errors, int *byteorder, Py_ssize_t *consumed)</code></pre><br>If consumed is NULL, behave like PyUnicode_DecodeUTF16(). If consumed is not NULL, PyUnicode_DecodeUTF16Stateful() will not treat trailing incomplete UTF-16 byte sequences (such as an odd number of bytes or a split surrogate pair) as an error. Those bytes will not be decoded and the number of bytes that have been decoded will be stored in consumed.	https://docs.python.org/3.4/c-api/unicode.html#c.PyUnicode_DecodeUTF16Stateful
PyUnicode_AsUTF16String	A							https://docs.python.org			<pre><code>
PyObject* PyUnicode_AsUTF16String(PyObject *unicode)</code></pre><br>Return a Python byte string using the UTF-16 encoding in native byte order. The string always starts with a BOM mark. Error handling is “strict”. Return NULL if an exception was raised by the codec.	https://docs.python.org/3.4/c-api/unicode.html#c.PyUnicode_AsUTF16String
PyUnicode_EncodeUTF16	A							https://docs.python.org			<pre><code>
PyObject* PyUnicode_EncodeUTF16(const Py_UNICODE *s, Py_ssize_t size, const char *errors, int byteorder)</code></pre><br>Return a Python bytes object holding the UTF-16 encoded value of the Unicode data in s. Output is written according to the following byte order:	https://docs.python.org/3.4/c-api/unicode.html#c.PyUnicode_EncodeUTF16
PyUnicode_DecodeUTF7	A							https://docs.python.org			<pre><code>
PyObject* PyUnicode_DecodeUTF7(const char *s, Py_ssize_t size, const char *errors)</code></pre><br>Create a Unicode object by decoding size bytes of the UTF-7 encoded string s. Return NULL if an exception was raised by the codec.	https://docs.python.org/3.4/c-api/unicode.html#c.PyUnicode_DecodeUTF7
PyUnicode_DecodeUTF7Stateful	A							https://docs.python.org			<pre><code>
PyObject* PyUnicode_DecodeUTF7Stateful(const char *s, Py_ssize_t size, const char *errors, Py_ssize_t *consumed)</code></pre><br>If consumed is NULL, behave like PyUnicode_DecodeUTF7(). If consumed is not NULL, trailing incomplete UTF-7 base-64 sections will not be treated as an error. Those bytes will not be decoded and the number of bytes that have been decoded will be stored in consumed.	https://docs.python.org/3.4/c-api/unicode.html#c.PyUnicode_DecodeUTF7Stateful
PyUnicode_EncodeUTF7	A							https://docs.python.org			<pre><code>
PyObject* PyUnicode_EncodeUTF7(const Py_UNICODE *s, Py_ssize_t size, int base64SetO, int base64WhiteSpace, const char *errors)</code></pre><br>Encode the Py_UNICODE buffer of the given size using UTF-7 and return a Python bytes object. Return NULL if an exception was raised by the codec.	https://docs.python.org/3.4/c-api/unicode.html#c.PyUnicode_EncodeUTF7
PyUnicode_DecodeUnicodeEscape	A							https://docs.python.org			<pre><code>
PyObject* PyUnicode_DecodeUnicodeEscape(const char *s, Py_ssize_t size, const char *errors)</code></pre><br>Create a Unicode object by decoding size bytes of the Unicode-Escape encoded string s. Return NULL if an exception was raised by the codec.	https://docs.python.org/3.4/c-api/unicode.html#c.PyUnicode_DecodeUnicodeEscape
PyUnicode_AsUnicodeEscapeString	A							https://docs.python.org			<pre><code>
PyObject* PyUnicode_AsUnicodeEscapeString(PyObject *unicode)</code></pre><br>Encode a Unicode object using Unicode-Escape and return the result as Python string object. Error handling is “strict”. Return NULL if an exception was raised by the codec.	https://docs.python.org/3.4/c-api/unicode.html#c.PyUnicode_AsUnicodeEscapeString
PyUnicode_EncodeUnicodeEscape	A							https://docs.python.org			<pre><code>
PyObject* PyUnicode_EncodeUnicodeEscape(const Py_UNICODE *s, Py_ssize_t size)</code></pre><br>Encode the Py_UNICODE buffer of the given size using Unicode-Escape and return a Python string object. Return NULL if an exception was raised by the codec.	https://docs.python.org/3.4/c-api/unicode.html#c.PyUnicode_EncodeUnicodeEscape
PyUnicode_DecodeRawUnicodeEscape	A							https://docs.python.org			<pre><code>
PyObject* PyUnicode_DecodeRawUnicodeEscape(const char *s, Py_ssize_t size, const char *errors)</code></pre><br>Create a Unicode object by decoding size bytes of the Raw-Unicode-Escape encoded string s. Return NULL if an exception was raised by the codec.	https://docs.python.org/3.4/c-api/unicode.html#c.PyUnicode_DecodeRawUnicodeEscape
PyUnicode_AsRawUnicodeEscapeString	A							https://docs.python.org			<pre><code>
PyObject* PyUnicode_AsRawUnicodeEscapeString(PyObject *unicode)</code></pre><br>Encode a Unicode object using Raw-Unicode-Escape and return the result as Python string object. Error handling is “strict”. Return NULL if an exception was raised by the codec.	https://docs.python.org/3.4/c-api/unicode.html#c.PyUnicode_AsRawUnicodeEscapeString
PyUnicode_EncodeRawUnicodeEscape	A							https://docs.python.org			<pre><code>
PyObject* PyUnicode_EncodeRawUnicodeEscape(const Py_UNICODE *s, Py_ssize_t size, const char *errors)</code></pre><br>Encode the Py_UNICODE buffer of the given size using Raw-Unicode-Escape and return a Python string object. Return NULL if an exception was raised by the codec.	https://docs.python.org/3.4/c-api/unicode.html#c.PyUnicode_EncodeRawUnicodeEscape
PyUnicode_DecodeLatin1	A							https://docs.python.org			<pre><code>
PyObject* PyUnicode_DecodeLatin1(const char *s, Py_ssize_t size, const char *errors)</code></pre><br>Create a Unicode object by decoding size bytes of the Latin-1 encoded string s. Return NULL if an exception was raised by the codec.	https://docs.python.org/3.4/c-api/unicode.html#c.PyUnicode_DecodeLatin1
PyUnicode_AsLatin1String	A							https://docs.python.org			<pre><code>
PyObject* PyUnicode_AsLatin1String(PyObject *unicode)</code></pre><br>Encode a Unicode object using Latin-1 and return the result as Python bytes object. Error handling is “strict”. Return NULL if an exception was raised by the codec.	https://docs.python.org/3.4/c-api/unicode.html#c.PyUnicode_AsLatin1String
PyUnicode_EncodeLatin1	A							https://docs.python.org			<pre><code>
PyObject* PyUnicode_EncodeLatin1(const Py_UNICODE *s, Py_ssize_t size, const char *errors)</code></pre><br>Encode the Py_UNICODE buffer of the given size using Latin-1 and return a Python bytes object. Return NULL if an exception was raised by the codec.	https://docs.python.org/3.4/c-api/unicode.html#c.PyUnicode_EncodeLatin1
PyUnicode_DecodeASCII	A							https://docs.python.org			<pre><code>
PyObject* PyUnicode_DecodeASCII(const char *s, Py_ssize_t size, const char *errors)</code></pre><br>Create a Unicode object by decoding size bytes of the ASCII encoded string s. Return NULL if an exception was raised by the codec.	https://docs.python.org/3.4/c-api/unicode.html#c.PyUnicode_DecodeASCII
PyUnicode_AsASCIIString	A							https://docs.python.org			<pre><code>
PyObject* PyUnicode_AsASCIIString(PyObject *unicode)</code></pre><br>Encode a Unicode object using ASCII and return the result as Python bytes object. Error handling is “strict”. Return NULL if an exception was raised by the codec.	https://docs.python.org/3.4/c-api/unicode.html#c.PyUnicode_AsASCIIString
PyUnicode_EncodeASCII	A							https://docs.python.org			<pre><code>
PyObject* PyUnicode_EncodeASCII(const Py_UNICODE *s, Py_ssize_t size, const char *errors)</code></pre><br>Encode the Py_UNICODE buffer of the given size using ASCII and return a Python bytes object. Return NULL if an exception was raised by the codec.	https://docs.python.org/3.4/c-api/unicode.html#c.PyUnicode_EncodeASCII
PyUnicode_DecodeCharmap	A							https://docs.python.org			<pre><code>
PyObject* PyUnicode_DecodeCharmap(const char *s, Py_ssize_t size, PyObject *mapping, const char *errors)</code></pre><br>Create a Unicode object by decoding size bytes of the encoded string s using the given mapping object. Return NULL if an exception was raised by the codec. If mapping is NULL latin-1 decoding will be done. Else it can be a dictionary mapping byte or a unicode string, which is treated as a lookup table. Byte values greater that the length of the string and U+FFFE “characters” are treated as “undefined mapping”.	https://docs.python.org/3.4/c-api/unicode.html#c.PyUnicode_DecodeCharmap
PyUnicode_AsCharmapString	A							https://docs.python.org			<pre><code>
PyObject* PyUnicode_AsCharmapString(PyObject *unicode, PyObject *mapping)</code></pre><br>Encode a Unicode object using the given mapping object and return the result as Python string object. Error handling is “strict”. Return NULL if an exception was raised by the codec.	https://docs.python.org/3.4/c-api/unicode.html#c.PyUnicode_AsCharmapString
PyUnicode_TranslateCharmap	A							https://docs.python.org			<pre><code>
PyObject* PyUnicode_TranslateCharmap(const Py_UNICODE *s, Py_ssize_t size, PyObject *table, const char *errors)</code></pre><br>Translate a Py_UNICODE buffer of the given size by applying a character mapping table to it and return the resulting Unicode object. Return NULL when an exception was raised by the codec.	https://docs.python.org/3.4/c-api/unicode.html#c.PyUnicode_TranslateCharmap
PyUnicode_EncodeCharmap	A							https://docs.python.org			<pre><code>
PyObject* PyUnicode_EncodeCharmap(const Py_UNICODE *s, Py_ssize_t size, PyObject *mapping, const char *errors)</code></pre><br>Encode the Py_UNICODE buffer of the given size using the given mapping object and return a Python string object. Return NULL if an exception was raised by the codec.	https://docs.python.org/3.4/c-api/unicode.html#c.PyUnicode_EncodeCharmap
PyUnicode_DecodeMBCS	A							https://docs.python.org			<pre><code>
PyObject* PyUnicode_DecodeMBCS(const char *s, Py_ssize_t size, const char *errors)</code></pre><br>Create a Unicode object by decoding size bytes of the MBCS encoded string s. Return NULL if an exception was raised by the codec.	https://docs.python.org/3.4/c-api/unicode.html#c.PyUnicode_DecodeMBCS
PyUnicode_DecodeMBCSStateful	A							https://docs.python.org			<pre><code>
PyObject* PyUnicode_DecodeMBCSStateful(const char *s, int size, const char *errors, int *consumed)</code></pre><br>If consumed is NULL, behave like PyUnicode_DecodeMBCS(). If consumed is not NULL, PyUnicode_DecodeMBCSStateful() will not decode trailing lead byte and the number of bytes that have been decoded will be stored in consumed.	https://docs.python.org/3.4/c-api/unicode.html#c.PyUnicode_DecodeMBCSStateful
PyUnicode_AsMBCSString	A							https://docs.python.org			<pre><code>
PyObject* PyUnicode_AsMBCSString(PyObject *unicode)</code></pre><br>Encode a Unicode object using MBCS and return the result as Python bytes object. Error handling is “strict”. Return NULL if an exception was raised by the codec.	https://docs.python.org/3.4/c-api/unicode.html#c.PyUnicode_AsMBCSString
PyUnicode_EncodeCodePage	A							https://docs.python.org			<pre><code>
PyObject* PyUnicode_EncodeCodePage(int code_page, PyObject *unicode, const char *errors)</code></pre><br>Encode the Unicode object using the specified code page and return a Python bytes object. Return NULL if an exception was raised by the codec. Use CP_ACP code page to get the MBCS encoder.	https://docs.python.org/3.4/c-api/unicode.html#c.PyUnicode_EncodeCodePage
PyUnicode_EncodeMBCS	A							https://docs.python.org			<pre><code>
PyObject* PyUnicode_EncodeMBCS(const Py_UNICODE *s, Py_ssize_t size, const char *errors)</code></pre><br>Encode the Py_UNICODE buffer of the given size using MBCS and return a Python bytes object. Return NULL if an exception was raised by the codec.	https://docs.python.org/3.4/c-api/unicode.html#c.PyUnicode_EncodeMBCS
PyUnicode_Concat	A							https://docs.python.org			<pre><code>
PyObject* PyUnicode_Concat(PyObject *left, PyObject *right)</code></pre><br>Concat two strings giving a new Unicode string.	https://docs.python.org/3.4/c-api/unicode.html#c.PyUnicode_Concat
PyUnicode_Split	A							https://docs.python.org			<pre><code>
PyObject* PyUnicode_Split(PyObject *s, PyObject *sep, Py_ssize_t maxsplit)</code></pre><br>Split a string giving a list of Unicode strings. If sep is NULL, splitting will be done at all whitespace substrings. Otherwise, splits occur at the given separator. At most maxsplit splits will be done. If negative, no limit is set. Separators are not included in the resulting list.	https://docs.python.org/3.4/c-api/unicode.html#c.PyUnicode_Split
PyUnicode_Splitlines	A							https://docs.python.org			<pre><code>
PyObject* PyUnicode_Splitlines(PyObject *s, int keepend)</code></pre><br>Split a Unicode string at line breaks, returning a list of Unicode strings. CRLF is considered to be one line break. If keepend is 0, the Line break characters are not included in the resulting strings.	https://docs.python.org/3.4/c-api/unicode.html#c.PyUnicode_Splitlines
PyUnicode_Translate	A							https://docs.python.org			<pre><code>
PyObject* PyUnicode_Translate(PyObject *str, PyObject *table, const char *errors)</code></pre><br>Translate a string by applying a character mapping table to it and return the resulting Unicode object.	https://docs.python.org/3.4/c-api/unicode.html#c.PyUnicode_Translate
PyUnicode_Join	A							https://docs.python.org			<pre><code>
PyObject* PyUnicode_Join(PyObject *separator, PyObject *seq)</code></pre><br>Join a sequence of strings using the given separator and return the resulting Unicode string.	https://docs.python.org/3.4/c-api/unicode.html#c.PyUnicode_Join
PyUnicode_Tailmatch	A							https://docs.python.org			<pre><code>
Py_ssize_t PyUnicode_Tailmatch(PyObject *str, PyObject *substr, Py_ssize_t start, Py_ssize_t end, int direction)</code></pre><br>Return 1 if substr matches str[start:end] at the given tail end (direction == -1 means to do a prefix match, direction == 1 a suffix match), 0 otherwise. Return -1 if an error occurred.	https://docs.python.org/3.4/c-api/unicode.html#c.PyUnicode_Tailmatch
PyUnicode_Find	A							https://docs.python.org			<pre><code>
Py_ssize_t PyUnicode_Find(PyObject *str, PyObject *substr, Py_ssize_t start, Py_ssize_t end, int direction)</code></pre><br>Return the first position of substr in str[start:end] using the given direction (direction == 1 means to do a forward search, direction == -1 a backward search). The return value is the index of the first match; a value of -1 indicates that no match was found, and -2 indicates that an error occurred and an exception has been set.	https://docs.python.org/3.4/c-api/unicode.html#c.PyUnicode_Find
PyUnicode_FindChar	A							https://docs.python.org			<pre><code>
Py_ssize_t PyUnicode_FindChar(PyObject *str, Py_UCS4 ch, Py_ssize_t start, Py_ssize_t end, int direction)</code></pre><br>Return the first position of the character ch in str[start:end] using the given direction (direction == 1 means to do a forward search, direction == -1 a backward search). The return value is the index of the first match; a value of -1 indicates that no match was found, and -2 indicates that an error occurred and an exception has been set.	https://docs.python.org/3.4/c-api/unicode.html#c.PyUnicode_FindChar
PyUnicode_Count	A							https://docs.python.org			<pre><code>
Py_ssize_t PyUnicode_Count(PyObject *str, PyObject *substr, Py_ssize_t start, Py_ssize_t end)</code></pre><br>Return the number of non-overlapping occurrences of substr in str[start:end]. Return -1 if an error occurred.	https://docs.python.org/3.4/c-api/unicode.html#c.PyUnicode_Count
PyUnicode_Replace	A							https://docs.python.org			<pre><code>
PyObject* PyUnicode_Replace(PyObject *str, PyObject *substr, PyObject *replstr, Py_ssize_t maxcount)</code></pre><br>Replace at most maxcount occurrences of substr in str with replstr and return the resulting Unicode object. maxcount == -1 means replace all occurrences.	https://docs.python.org/3.4/c-api/unicode.html#c.PyUnicode_Replace
PyUnicode_Compare	A							https://docs.python.org			<pre><code>
int PyUnicode_Compare(PyObject *left, PyObject *right)</code></pre><br>Compare two strings and return -1, 0, 1 for less than, equal, and greater than, respectively.	https://docs.python.org/3.4/c-api/unicode.html#c.PyUnicode_Compare
PyUnicode_CompareWithASCIIString	A							https://docs.python.org			<pre><code>
int PyUnicode_CompareWithASCIIString(PyObject *uni, const char *string)</code></pre><br>Compare a unicode object, uni, with string and return -1, 0, 1 for less than, equal, and greater than, respectively. It is best to pass only ASCII-encoded strings, but the function interprets the input string as ISO-8859-1 if it contains non-ASCII characters.	https://docs.python.org/3.4/c-api/unicode.html#c.PyUnicode_CompareWithASCIIString
PyUnicode_RichCompare	A							https://docs.python.org			<pre><code>
PyObject* PyUnicode_RichCompare(PyObject *left, PyObject *right, int op)</code></pre><br>Rich compare two unicode strings and return one of the following:	https://docs.python.org/3.4/c-api/unicode.html#c.PyUnicode_RichCompare
PyUnicode_Format	A							https://docs.python.org			<pre><code>
PyObject* PyUnicode_Format(PyObject *format, PyObject *args)</code></pre><br>Return a new string object from format and args; this is analogous to format % args.	https://docs.python.org/3.4/c-api/unicode.html#c.PyUnicode_Format
PyUnicode_Contains	A							https://docs.python.org			<pre><code>
int PyUnicode_Contains(PyObject *container, PyObject *element)</code></pre><br>Check whether element is contained in container and return true or false accordingly.	https://docs.python.org/3.4/c-api/unicode.html#c.PyUnicode_Contains
PyUnicode_InternInPlace	A							https://docs.python.org			<pre><code>
void PyUnicode_InternInPlace(PyObject **string)</code></pre><br>Intern the argument *string in place. The argument must be the address of a pointer variable pointing to a Python unicode string object. If there is an existing interned string that is the same as *string, it sets *string to it (decrementing the reference count of the old string object and incrementing the reference count of the interned string object), otherwise it leaves *string alone and interns it (incrementing its reference count). (Clarification: even though there is a lot of talk about reference counts, think of this function as reference-count-neutral; you own the object after the call if and only if you owned it before the call.)	https://docs.python.org/3.4/c-api/unicode.html#c.PyUnicode_InternInPlace
PyUnicode_InternFromString	A							https://docs.python.org			<pre><code>
PyObject* PyUnicode_InternFromString(const char *v)</code></pre><br>A combination of PyUnicode_FromString() and PyUnicode_InternInPlace(), returning either a new unicode string object that has been interned, or a new (“owned”) reference to an earlier interned string object with the same value.	https://docs.python.org/3.4/c-api/unicode.html#c.PyUnicode_InternFromString
PyUnicode_Check	A							https://docs.python.org			<pre><code>
int PyUnicode_Check(PyObject *o)</code></pre><br>Return true if the object o is a Unicode object or an instance of a Unicode subtype.	https://docs.python.org/3.4/c-api/unicode.html#c.PyUnicode_Check
PyUnicode_CheckExact	A							https://docs.python.org			<pre><code>
int PyUnicode_CheckExact(PyObject *o)</code></pre><br>Return true if the object o is a Unicode object, but not an instance of a subtype.	https://docs.python.org/3.4/c-api/unicode.html#c.PyUnicode_CheckExact
PyUnicode_READY	A							https://docs.python.org			<pre><code>
int PyUnicode_READY(PyObject *o)</code></pre><br>Ensure the string object o is in the “canonical” representation. This is required before using any of the access macros described below.	https://docs.python.org/3.4/c-api/unicode.html#c.PyUnicode_READY
PyUnicode_GET_LENGTH	A							https://docs.python.org			<pre><code>
Py_ssize_t PyUnicode_GET_LENGTH(PyObject *o)</code></pre><br>Return the length of the Unicode string, in code points. o has to be a Unicode object in the “canonical” representation (not checked).	https://docs.python.org/3.4/c-api/unicode.html#c.PyUnicode_GET_LENGTH
PyUnicode_1BYTE_DATA	A							https://docs.python.org			<pre><code>
Py_UCS1* PyUnicode_1BYTE_DATA(PyObject *o)</code></pre><br>Return a pointer to the canonical representation cast to UCS1, UCS2 or UCS4 integer types for direct character access. No checks are performed if the canonical representation has the correct character size; use PyUnicode_KIND() to select the right macro. Make sure PyUnicode_READY() has been called before accessing this.	https://docs.python.org/3.4/c-api/unicode.html#c.PyUnicode_1BYTE_DATA
PyUnicode_KIND	A							https://docs.python.org			<pre><code>
int PyUnicode_KIND(PyObject *o)</code></pre><br>Return one of the PyUnicode kind constants (see above) that indicate how many bytes per character this Unicode object uses to store its data. o has to be a Unicode object in the “canonical” representation (not checked).	https://docs.python.org/3.4/c-api/unicode.html#c.PyUnicode_KIND
PyUnicode_DATA	A							https://docs.python.org			<pre><code>
void* PyUnicode_DATA(PyObject *o)</code></pre><br>Return a void pointer to the raw unicode buffer. o has to be a Unicode object in the “canonical” representation (not checked).	https://docs.python.org/3.4/c-api/unicode.html#c.PyUnicode_DATA
PyUnicode_WRITE	A							https://docs.python.org			<pre><code>
void PyUnicode_WRITE(int kind, void *data, Py_ssize_t index, Py_UCS4 value)</code></pre><br>Write into a canonical representation data (as obtained with PyUnicode_DATA()). This macro does not do any sanity checks and is intended for usage in loops. The caller should cache the kind value and data pointer as obtained from other macro calls. index is the index in the string (starts at 0) and value is the new code point value which should be written to that location.	https://docs.python.org/3.4/c-api/unicode.html#c.PyUnicode_WRITE
PyUnicode_READ	A							https://docs.python.org			<pre><code>
Py_UCS4 PyUnicode_READ(int kind, void *data, Py_ssize_t index)</code></pre><br>Read a code point from a canonical representation data (as obtained with PyUnicode_DATA()). No checks or ready calls are performed.	https://docs.python.org/3.4/c-api/unicode.html#c.PyUnicode_READ
PyUnicode_READ_CHAR	A							https://docs.python.org			<pre><code>
Py_UCS4 PyUnicode_READ_CHAR(PyObject *o, Py_ssize_t index)</code></pre><br>Read a character from a Unicode object o, which must be in the “canonical” representation. This is less efficient than PyUnicode_READ() if you do multiple consecutive reads.	https://docs.python.org/3.4/c-api/unicode.html#c.PyUnicode_READ_CHAR
PyUnicode_MAX_CHAR_VALUE	A							https://docs.python.org			<pre><code>
PyUnicode_MAX_CHAR_VALUE(PyObject *o)</code></pre><br>Return the maximum code point that is suitable for creating another string based on o, which must be in the “canonical” representation. This is always an approximation but more efficient than iterating over the string.	https://docs.python.org/3.4/c-api/unicode.html#c.PyUnicode_MAX_CHAR_VALUE
PyUnicode_ClearFreeList	A							https://docs.python.org			<pre><code>
int PyUnicode_ClearFreeList()</code></pre><br>Clear the free list. Return the total number of freed items.	https://docs.python.org/3.4/c-api/unicode.html#c.PyUnicode_ClearFreeList
PyUnicode_GET_SIZE	A							https://docs.python.org			<pre><code>
Py_ssize_t PyUnicode_GET_SIZE(PyObject *o)</code></pre><br>Return the size of the deprecated Py_UNICODE representation, in code units (this includes surrogate pairs as 2 units). o has to be a Unicode object (not checked).	https://docs.python.org/3.4/c-api/unicode.html#c.PyUnicode_GET_SIZE
PyUnicode_GET_DATA_SIZE	A							https://docs.python.org			<pre><code>
Py_ssize_t PyUnicode_GET_DATA_SIZE(PyObject *o)</code></pre><br>Return the size of the deprecated Py_UNICODE representation in bytes. o has to be a Unicode object (not checked).	https://docs.python.org/3.4/c-api/unicode.html#c.PyUnicode_GET_DATA_SIZE
PyUnicode_AS_UNICODE	A							https://docs.python.org			<pre><code>
Py_UNICODE* PyUnicode_AS_UNICODE(PyObject *o)</code></pre><br>Return a pointer to a Py_UNICODE representation of the object. The returned buffer is always terminated with an extra null code point. It may also contain embedded null code points, which would cause the string to be truncated when used in most C functions. The AS_DATA form casts the pointer to const char *. The o argument has to be a Unicode object (not checked).	https://docs.python.org/3.4/c-api/unicode.html#c.PyUnicode_AS_UNICODE
Py_UNICODE_ISSPACE	A							https://docs.python.org			<pre><code>
int Py_UNICODE_ISSPACE(Py_UNICODE ch)</code></pre><br>Return 1 or 0 depending on whether ch is a whitespace character.	https://docs.python.org/3.4/c-api/unicode.html#c.Py_UNICODE_ISSPACE
Py_UNICODE_ISLOWER	A							https://docs.python.org			<pre><code>
int Py_UNICODE_ISLOWER(Py_UNICODE ch)</code></pre><br>Return 1 or 0 depending on whether ch is a lowercase character.	https://docs.python.org/3.4/c-api/unicode.html#c.Py_UNICODE_ISLOWER
Py_UNICODE_ISUPPER	A							https://docs.python.org			<pre><code>
int Py_UNICODE_ISUPPER(Py_UNICODE ch)</code></pre><br>Return 1 or 0 depending on whether ch is an uppercase character.	https://docs.python.org/3.4/c-api/unicode.html#c.Py_UNICODE_ISUPPER
Py_UNICODE_ISTITLE	A							https://docs.python.org			<pre><code>
int Py_UNICODE_ISTITLE(Py_UNICODE ch)</code></pre><br>Return 1 or 0 depending on whether ch is a titlecase character.	https://docs.python.org/3.4/c-api/unicode.html#c.Py_UNICODE_ISTITLE
Py_UNICODE_ISLINEBREAK	A							https://docs.python.org			<pre><code>
int Py_UNICODE_ISLINEBREAK(Py_UNICODE ch)</code></pre><br>Return 1 or 0 depending on whether ch is a linebreak character.	https://docs.python.org/3.4/c-api/unicode.html#c.Py_UNICODE_ISLINEBREAK
Py_UNICODE_ISDECIMAL	A							https://docs.python.org			<pre><code>
int Py_UNICODE_ISDECIMAL(Py_UNICODE ch)</code></pre><br>Return 1 or 0 depending on whether ch is a decimal character.	https://docs.python.org/3.4/c-api/unicode.html#c.Py_UNICODE_ISDECIMAL
Py_UNICODE_ISDIGIT	A							https://docs.python.org			<pre><code>
int Py_UNICODE_ISDIGIT(Py_UNICODE ch)</code></pre><br>Return 1 or 0 depending on whether ch is a digit character.	https://docs.python.org/3.4/c-api/unicode.html#c.Py_UNICODE_ISDIGIT
Py_UNICODE_ISNUMERIC	A							https://docs.python.org			<pre><code>
int Py_UNICODE_ISNUMERIC(Py_UNICODE ch)</code></pre><br>Return 1 or 0 depending on whether ch is a numeric character.	https://docs.python.org/3.4/c-api/unicode.html#c.Py_UNICODE_ISNUMERIC
Py_UNICODE_ISALPHA	A							https://docs.python.org			<pre><code>
int Py_UNICODE_ISALPHA(Py_UNICODE ch)</code></pre><br>Return 1 or 0 depending on whether ch is an alphabetic character.	https://docs.python.org/3.4/c-api/unicode.html#c.Py_UNICODE_ISALPHA
Py_UNICODE_ISALNUM	A							https://docs.python.org			<pre><code>
int Py_UNICODE_ISALNUM(Py_UNICODE ch)</code></pre><br>Return 1 or 0 depending on whether ch is an alphanumeric character.	https://docs.python.org/3.4/c-api/unicode.html#c.Py_UNICODE_ISALNUM
Py_UNICODE_ISPRINTABLE	A							https://docs.python.org			<pre><code>
int Py_UNICODE_ISPRINTABLE(Py_UNICODE ch)</code></pre><br>Return 1 or 0 depending on whether ch is a printable character. Nonprintable characters are those characters defined in the Unicode character database as “Other” or “Separator”, excepting the ASCII space (0x20) which is considered printable. (Note that printable characters in this context are those which should not be escaped when repr() is invoked on a string. It has no bearing on the handling of strings written to sys.stdout or sys.stderr.)	https://docs.python.org/3.4/c-api/unicode.html#c.Py_UNICODE_ISPRINTABLE
Py_UNICODE_TOLOWER	A							https://docs.python.org			<pre><code>
Py_UNICODE Py_UNICODE_TOLOWER(Py_UNICODE ch)</code></pre><br>Return the character ch converted to lower case.	https://docs.python.org/3.4/c-api/unicode.html#c.Py_UNICODE_TOLOWER
Py_UNICODE_TOUPPER	A							https://docs.python.org			<pre><code>
Py_UNICODE Py_UNICODE_TOUPPER(Py_UNICODE ch)</code></pre><br>Return the character ch converted to upper case.	https://docs.python.org/3.4/c-api/unicode.html#c.Py_UNICODE_TOUPPER
Py_UNICODE_TOTITLE	A							https://docs.python.org			<pre><code>
Py_UNICODE Py_UNICODE_TOTITLE(Py_UNICODE ch)</code></pre><br>Return the character ch converted to title case.	https://docs.python.org/3.4/c-api/unicode.html#c.Py_UNICODE_TOTITLE
Py_UNICODE_TODECIMAL	A							https://docs.python.org			<pre><code>
int Py_UNICODE_TODECIMAL(Py_UNICODE ch)</code></pre><br>Return the character ch converted to a decimal positive integer. Return -1 if this is not possible. This macro does not raise exceptions.	https://docs.python.org/3.4/c-api/unicode.html#c.Py_UNICODE_TODECIMAL
Py_UNICODE_TODIGIT	A							https://docs.python.org			<pre><code>
int Py_UNICODE_TODIGIT(Py_UNICODE ch)</code></pre><br>Return the character ch converted to a single digit integer. Return -1 if this is not possible. This macro does not raise exceptions.	https://docs.python.org/3.4/c-api/unicode.html#c.Py_UNICODE_TODIGIT
Py_UNICODE_TONUMERIC	A							https://docs.python.org			<pre><code>
double Py_UNICODE_TONUMERIC(Py_UNICODE ch)</code></pre><br>Return the character ch converted to a double. Return -1.0 if this is not possible. This macro does not raise exceptions.	https://docs.python.org/3.4/c-api/unicode.html#c.Py_UNICODE_TONUMERIC
PyUnicode_New	A							https://docs.python.org			<pre><code>
PyObject* PyUnicode_New(Py_ssize_t size, Py_UCS4 maxchar)</code></pre><br>Create a new Unicode object. maxchar should be the true maximum code point to be placed in the string. As an approximation, it can be rounded up to the nearest value in the sequence 127, 255, 65535, 1114111.	https://docs.python.org/3.4/c-api/unicode.html#c.PyUnicode_New
PyUnicode_FromKindAndData	A							https://docs.python.org			<pre><code>
PyObject* PyUnicode_FromKindAndData(int kind, const void *buffer, Py_ssize_t size)</code></pre><br>Create a new Unicode object with the given kind (possible values are PyUnicode_1BYTE_KIND etc., as returned by PyUnicode_KIND()). The buffer must point to an array of size units of 1, 2 or 4 bytes per character, as given by the kind.	https://docs.python.org/3.4/c-api/unicode.html#c.PyUnicode_FromKindAndData
PyUnicode_FromStringAndSize	A							https://docs.python.org			<pre><code>
PyObject* PyUnicode_FromStringAndSize(const char *u, Py_ssize_t size)</code></pre><br>Create a Unicode object from the char buffer u. The bytes will be interpreted as being UTF-8 encoded. The buffer is copied into the new object. If the buffer is not NULL, the return value might be a shared object, i.e. modification of the data is not allowed.	https://docs.python.org/3.4/c-api/unicode.html#c.PyUnicode_FromStringAndSize
PyUnicode_FromString	A							https://docs.python.org			<pre><code>
PyObject *PyUnicode_FromString(const char *u)</code></pre><br>Create a Unicode object from an UTF-8 encoded null-terminated char buffer u.	https://docs.python.org/3.4/c-api/unicode.html#c.PyUnicode_FromString
PyUnicode_FromFormat	A							https://docs.python.org			<pre><code>
PyObject* PyUnicode_FromFormat(const char *format, ...)</code></pre><br>Take a C printf()-style format string and a variable number of arguments, calculate the size of the resulting Python unicode string and return a string with the values formatted into it. The variable arguments must be C types and must correspond exactly to the format characters in the format ASCII-encoded string. The following format characters are allowed:	https://docs.python.org/3.4/c-api/unicode.html#c.PyUnicode_FromFormat
PyUnicode_FromFormatV	A							https://docs.python.org			<pre><code>
PyObject* PyUnicode_FromFormatV(const char *format, va_list vargs)</code></pre><br>Identical to PyUnicode_FromFormat() except that it takes exactly two arguments.	https://docs.python.org/3.4/c-api/unicode.html#c.PyUnicode_FromFormatV
PyUnicode_FromEncodedObject	A							https://docs.python.org			<pre><code>
PyObject* PyUnicode_FromEncodedObject(PyObject *obj, const char *encoding, const char *errors)</code></pre><br>Coerce an encoded object obj to an Unicode object and return a reference with incremented refcount.	https://docs.python.org/3.4/c-api/unicode.html#c.PyUnicode_FromEncodedObject
PyUnicode_GetLength	A							https://docs.python.org			<pre><code>
Py_ssize_t PyUnicode_GetLength(PyObject *unicode)</code></pre><br>Return the length of the Unicode object, in code points.	https://docs.python.org/3.4/c-api/unicode.html#c.PyUnicode_GetLength
PyUnicode_CopyCharacters	A							https://docs.python.org			<pre><code>
int PyUnicode_CopyCharacters(PyObject *to, Py_ssize_t to_start, PyObject *from, Py_ssize_t from_start, Py_ssize_t how_many)</code></pre><br>Copy characters from one Unicode object into another. This function performs character conversion when necessary and falls back to memcpy() if possible. Returns -1 and sets an exception on error, otherwise returns 0.	https://docs.python.org/3.4/c-api/unicode.html#c.PyUnicode_CopyCharacters
PyUnicode_Fill	A							https://docs.python.org			<pre><code>
Py_ssize_t PyUnicode_Fill(PyObject *unicode, Py_ssize_t start, Py_ssize_t length, Py_UCS4 fill_char)</code></pre><br>Fill a string with a character: write fill_char into unicode[start:start+length].	https://docs.python.org/3.4/c-api/unicode.html#c.PyUnicode_Fill
PyUnicode_WriteChar	A							https://docs.python.org			<pre><code>
int PyUnicode_WriteChar(PyObject *unicode, Py_ssize_t index, Py_UCS4 character)</code></pre><br>Write a character to a string. The string must have been created through PyUnicode_New(). Since Unicode strings are supposed to be immutable, the string must not be shared, or have been hashed yet.	https://docs.python.org/3.4/c-api/unicode.html#c.PyUnicode_WriteChar
PyUnicode_ReadChar	A							https://docs.python.org			<pre><code>
Py_UCS4 PyUnicode_ReadChar(PyObject *unicode, Py_ssize_t index)</code></pre><br>Read a character from a string. This function checks that unicode is a Unicode object and the index is not out of bounds, in contrast to the macro version PyUnicode_READ_CHAR().	https://docs.python.org/3.4/c-api/unicode.html#c.PyUnicode_ReadChar
PyUnicode_Substring	A							https://docs.python.org			<pre><code>
PyObject* PyUnicode_Substring(PyObject *str, Py_ssize_t start, Py_ssize_t end)</code></pre><br>Return a substring of str, from character index start (included) to character index end (excluded). Negative indices are not supported.	https://docs.python.org/3.4/c-api/unicode.html#c.PyUnicode_Substring
PyUnicode_AsUCS4	A							https://docs.python.org			<pre><code>
Py_UCS4* PyUnicode_AsUCS4(PyObject *u, Py_UCS4 *buffer, Py_ssize_t buflen, int copy_null)</code></pre><br>Copy the string u into a UCS4 buffer, including a null character, if copy_null is set. Returns NULL and sets an exception on error (in particular, a ValueError if buflen is smaller than the length of u). buffer is returned on success.	https://docs.python.org/3.4/c-api/unicode.html#c.PyUnicode_AsUCS4
PyUnicode_AsUCS4Copy	A							https://docs.python.org			<pre><code>
Py_UCS4* PyUnicode_AsUCS4Copy(PyObject *u)</code></pre><br>Copy the string u into a new UCS4 buffer that is allocated using PyMem_Malloc(). If this fails, NULL is returned with a MemoryError set. The returned buffer always has an extra null code point appended.	https://docs.python.org/3.4/c-api/unicode.html#c.PyUnicode_AsUCS4Copy
PyUnicode_FromUnicode	A							https://docs.python.org			<pre><code>
PyObject* PyUnicode_FromUnicode(const Py_UNICODE *u, Py_ssize_t size)</code></pre><br>Create a Unicode object from the Py_UNICODE buffer u of the given size. u may be NULL which causes the contents to be undefined. It is the user’s responsibility to fill in the needed data. The buffer is copied into the new object.	https://docs.python.org/3.4/c-api/unicode.html#c.PyUnicode_FromUnicode
PyUnicode_AsUnicode	A							https://docs.python.org			<pre><code>
Py_UNICODE* PyUnicode_AsUnicode(PyObject *unicode)</code></pre><br>Return a read-only pointer to the Unicode object’s internal Py_UNICODE buffer, or NULL on error. This will create the Py_UNICODE* representation of the object if it is not yet available. The buffer is always terminated with an extra null code point. Note that the resulting Py_UNICODE string may also contain embedded null code points, which would cause the string to be truncated when used in most C functions.	https://docs.python.org/3.4/c-api/unicode.html#c.PyUnicode_AsUnicode
PyUnicode_TransformDecimalToASCII	A							https://docs.python.org			<pre><code>
PyObject* PyUnicode_TransformDecimalToASCII(Py_UNICODE *s, Py_ssize_t size)</code></pre><br>Create a Unicode object by replacing all decimal digits in Py_UNICODE buffer of the given size by ASCII digits 0–9 according to their decimal value. Return NULL if an exception occurs.	https://docs.python.org/3.4/c-api/unicode.html#c.PyUnicode_TransformDecimalToASCII
PyUnicode_AsUnicodeAndSize	A							https://docs.python.org			<pre><code>
Py_UNICODE* PyUnicode_AsUnicodeAndSize(PyObject *unicode, Py_ssize_t *size)</code></pre><br>Like PyUnicode_AsUnicode(), but also saves the Py_UNICODE() array length (excluding the extra null terminator) in size. Note that the resulting Py_UNICODE* string may contain embedded null code points, which would cause the string to be truncated when used in most C functions.	https://docs.python.org/3.4/c-api/unicode.html#c.PyUnicode_AsUnicodeAndSize
PyUnicode_AsUnicodeCopy	A							https://docs.python.org			<pre><code>
Py_UNICODE* PyUnicode_AsUnicodeCopy(PyObject *unicode)</code></pre><br>Create a copy of a Unicode string ending with a null code point. Return NULL and raise a MemoryError exception on memory allocation failure, otherwise return a new allocated buffer (use PyMem_Free() to free the buffer). Note that the resulting Py_UNICODE* string may contain embedded null code points, which would cause the string to be truncated when used in most C functions.	https://docs.python.org/3.4/c-api/unicode.html#c.PyUnicode_AsUnicodeCopy
PyUnicode_GetSize	A							https://docs.python.org			<pre><code>
Py_ssize_t PyUnicode_GetSize(PyObject *unicode)</code></pre><br>Return the size of the deprecated Py_UNICODE representation, in code units (this includes surrogate pairs as 2 units).	https://docs.python.org/3.4/c-api/unicode.html#c.PyUnicode_GetSize
PyUnicode_FromObject	A							https://docs.python.org			<pre><code>
PyObject* PyUnicode_FromObject(PyObject *obj)</code></pre><br>Shortcut for PyUnicode_FromEncodedObject(obj, NULL, "strict") which is used throughout the interpreter whenever coercion to Unicode is needed.	https://docs.python.org/3.4/c-api/unicode.html#c.PyUnicode_FromObject
PyUnicode_DecodeLocaleAndSize	A							https://docs.python.org			<pre><code>
PyObject* PyUnicode_DecodeLocaleAndSize(const char *str, Py_ssize_t len, const char *errors)</code></pre><br>Decode a string from the current locale encoding. The supported error handlers are "strict" and "surrogateescape" (PEP 383). The decoder uses "strict" error handler if errors is NULL. str must end with a null character but cannot contain embedded null characters.	https://docs.python.org/3.4/c-api/unicode.html#c.PyUnicode_DecodeLocaleAndSize
PyUnicode_DecodeLocale	A							https://docs.python.org			<pre><code>
PyObject* PyUnicode_DecodeLocale(const char *str, const char *errors)</code></pre><br>Similar to PyUnicode_DecodeLocaleAndSize(), but compute the string length using strlen().	https://docs.python.org/3.4/c-api/unicode.html#c.PyUnicode_DecodeLocale
PyUnicode_EncodeLocale	A							https://docs.python.org			<pre><code>
PyObject* PyUnicode_EncodeLocale(PyObject *unicode, const char *errors)</code></pre><br>Encode a Unicode object to the current locale encoding. The supported error handlers are "strict" and "surrogateescape" (PEP 383). The encoder uses "strict" error handler if errors is NULL. Return a bytes object. str cannot contain embedded null characters.	https://docs.python.org/3.4/c-api/unicode.html#c.PyUnicode_EncodeLocale
PyUnicode_FSConverter	A							https://docs.python.org			<pre><code>
int PyUnicode_FSConverter(PyObject* obj, void* result)</code></pre><br>ParseTuple converter: encode str objects to bytes using PyUnicode_EncodeFSDefault(); bytes objects are output as-is. result must be a PyBytesObject* which must be released when it is no longer used.	https://docs.python.org/3.4/c-api/unicode.html#c.PyUnicode_FSConverter
PyUnicode_FSDecoder	A							https://docs.python.org			<pre><code>
int PyUnicode_FSDecoder(PyObject* obj, void* result)</code></pre><br>ParseTuple converter: decode bytes objects to str using PyUnicode_DecodeFSDefaultAndSize(); str objects are output as-is. result must be a PyUnicodeObject* which must be released when it is no longer used.	https://docs.python.org/3.4/c-api/unicode.html#c.PyUnicode_FSDecoder
PyUnicode_DecodeFSDefaultAndSize	A							https://docs.python.org			<pre><code>
PyObject* PyUnicode_DecodeFSDefaultAndSize(const char *s, Py_ssize_t size)</code></pre><br>Decode a string using Py_FileSystemDefaultEncoding and the "surrogateescape" error handler, or "strict" on Windows.	https://docs.python.org/3.4/c-api/unicode.html#c.PyUnicode_DecodeFSDefaultAndSize
PyUnicode_DecodeFSDefault	A							https://docs.python.org			<pre><code>
PyObject* PyUnicode_DecodeFSDefault(const char *s)</code></pre><br>Decode a null-terminated string using Py_FileSystemDefaultEncoding and the "surrogateescape" error handler, or "strict" on Windows.	https://docs.python.org/3.4/c-api/unicode.html#c.PyUnicode_DecodeFSDefault
PyUnicode_EncodeFSDefault	A							https://docs.python.org			<pre><code>
PyObject* PyUnicode_EncodeFSDefault(PyObject *unicode)</code></pre><br>Encode a Unicode object to Py_FileSystemDefaultEncoding with the "surrogateescape" error handler, or "strict" on Windows, and return bytes. Note that the resulting bytes object may contain null bytes.	https://docs.python.org/3.4/c-api/unicode.html#c.PyUnicode_EncodeFSDefault
PyUnicode_FromWideChar	A							https://docs.python.org			<pre><code>
PyObject* PyUnicode_FromWideChar(const wchar_t *w, Py_ssize_t size)</code></pre><br>Create a Unicode object from the wchar_t buffer w of the given size. Passing -1 as the size indicates that the function must itself compute the length, using wcslen. Return NULL on failure.	https://docs.python.org/3.4/c-api/unicode.html#c.PyUnicode_FromWideChar
PyUnicode_AsWideChar	A							https://docs.python.org			<pre><code>
Py_ssize_t PyUnicode_AsWideChar(PyUnicodeObject *unicode, wchar_t *w, Py_ssize_t size)</code></pre><br>Copy the Unicode object contents into the wchar_t buffer w. At most size wchar_t characters are copied (excluding a possibly trailing null termination character). Return the number of wchar_t characters copied or -1 in case of an error. Note that the resulting wchar_t* string may or may not be null-terminated. It is the responsibility of the caller to make sure that the wchar_t* string is null-terminated in case this is required by the application. Also, note that the wchar_t* string might contain null characters, which would cause the string to be truncated when used with most C functions.	https://docs.python.org/3.4/c-api/unicode.html#c.PyUnicode_AsWideChar
PyUnicode_AsWideCharString	A							https://docs.python.org			<pre><code>
wchar_t* PyUnicode_AsWideCharString(PyObject *unicode, Py_ssize_t *size)</code></pre><br>Convert the Unicode object to a wide character string. The output string always ends with a null character. If size is not NULL, write the number of wide characters (excluding the trailing null termination character) into *size.	https://docs.python.org/3.4/c-api/unicode.html#c.PyUnicode_AsWideCharString
Py_UCS4_strlen	A							https://docs.python.org			<pre><code>
size_t Py_UCS4_strlen(const Py_UCS4 *u)</code></pre><br>These utility functions work on strings of Py_UCS4 characters and otherwise behave like the C standard library functions with the same name.	https://docs.python.org/3.4/c-api/unicode.html#c.Py_UCS4_strlen
PyUnicode_Check	A							https://docs.python.org			<pre><code>
int PyUnicode_Check(PyObject *o)</code></pre><br>Return true if the object o is a Unicode object or an instance of a Unicode subtype.	https://docs.python.org/3.4/c-api/unicode.html#c.PyUnicode_Check
PyUnicode_CheckExact	A							https://docs.python.org			<pre><code>
int PyUnicode_CheckExact(PyObject *o)</code></pre><br>Return true if the object o is a Unicode object, but not an instance of a subtype.	https://docs.python.org/3.4/c-api/unicode.html#c.PyUnicode_CheckExact
PyUnicode_READY	A							https://docs.python.org			<pre><code>
int PyUnicode_READY(PyObject *o)</code></pre><br>Ensure the string object o is in the “canonical” representation. This is required before using any of the access macros described below.	https://docs.python.org/3.4/c-api/unicode.html#c.PyUnicode_READY
PyUnicode_GET_LENGTH	A							https://docs.python.org			<pre><code>
Py_ssize_t PyUnicode_GET_LENGTH(PyObject *o)</code></pre><br>Return the length of the Unicode string, in code points. o has to be a Unicode object in the “canonical” representation (not checked).	https://docs.python.org/3.4/c-api/unicode.html#c.PyUnicode_GET_LENGTH
PyUnicode_1BYTE_DATA	A							https://docs.python.org			<pre><code>
Py_UCS1* PyUnicode_1BYTE_DATA(PyObject *o)</code></pre><br>Return a pointer to the canonical representation cast to UCS1, UCS2 or UCS4 integer types for direct character access. No checks are performed if the canonical representation has the correct character size; use PyUnicode_KIND() to select the right macro. Make sure PyUnicode_READY() has been called before accessing this.	https://docs.python.org/3.4/c-api/unicode.html#c.PyUnicode_1BYTE_DATA
PyUnicode_KIND	A							https://docs.python.org			<pre><code>
int PyUnicode_KIND(PyObject *o)</code></pre><br>Return one of the PyUnicode kind constants (see above) that indicate how many bytes per character this Unicode object uses to store its data. o has to be a Unicode object in the “canonical” representation (not checked).	https://docs.python.org/3.4/c-api/unicode.html#c.PyUnicode_KIND
PyUnicode_DATA	A							https://docs.python.org			<pre><code>
void* PyUnicode_DATA(PyObject *o)</code></pre><br>Return a void pointer to the raw unicode buffer. o has to be a Unicode object in the “canonical” representation (not checked).	https://docs.python.org/3.4/c-api/unicode.html#c.PyUnicode_DATA
PyUnicode_WRITE	A							https://docs.python.org			<pre><code>
void PyUnicode_WRITE(int kind, void *data, Py_ssize_t index, Py_UCS4 value)</code></pre><br>Write into a canonical representation data (as obtained with PyUnicode_DATA()). This macro does not do any sanity checks and is intended for usage in loops. The caller should cache the kind value and data pointer as obtained from other macro calls. index is the index in the string (starts at 0) and value is the new code point value which should be written to that location.	https://docs.python.org/3.4/c-api/unicode.html#c.PyUnicode_WRITE
PyUnicode_READ	A							https://docs.python.org			<pre><code>
Py_UCS4 PyUnicode_READ(int kind, void *data, Py_ssize_t index)</code></pre><br>Read a code point from a canonical representation data (as obtained with PyUnicode_DATA()). No checks or ready calls are performed.	https://docs.python.org/3.4/c-api/unicode.html#c.PyUnicode_READ
PyUnicode_READ_CHAR	A							https://docs.python.org			<pre><code>
Py_UCS4 PyUnicode_READ_CHAR(PyObject *o, Py_ssize_t index)</code></pre><br>Read a character from a Unicode object o, which must be in the “canonical” representation. This is less efficient than PyUnicode_READ() if you do multiple consecutive reads.	https://docs.python.org/3.4/c-api/unicode.html#c.PyUnicode_READ_CHAR
PyUnicode_MAX_CHAR_VALUE	A							https://docs.python.org			<pre><code>
PyUnicode_MAX_CHAR_VALUE(PyObject *o)</code></pre><br>Return the maximum code point that is suitable for creating another string based on o, which must be in the “canonical” representation. This is always an approximation but more efficient than iterating over the string.	https://docs.python.org/3.4/c-api/unicode.html#c.PyUnicode_MAX_CHAR_VALUE
PyUnicode_ClearFreeList	A							https://docs.python.org			<pre><code>
int PyUnicode_ClearFreeList()</code></pre><br>Clear the free list. Return the total number of freed items.	https://docs.python.org/3.4/c-api/unicode.html#c.PyUnicode_ClearFreeList
PyUnicode_GET_SIZE	A							https://docs.python.org			<pre><code>
Py_ssize_t PyUnicode_GET_SIZE(PyObject *o)</code></pre><br>Return the size of the deprecated Py_UNICODE representation, in code units (this includes surrogate pairs as 2 units). o has to be a Unicode object (not checked).	https://docs.python.org/3.4/c-api/unicode.html#c.PyUnicode_GET_SIZE
PyUnicode_GET_DATA_SIZE	A							https://docs.python.org			<pre><code>
Py_ssize_t PyUnicode_GET_DATA_SIZE(PyObject *o)</code></pre><br>Return the size of the deprecated Py_UNICODE representation in bytes. o has to be a Unicode object (not checked).	https://docs.python.org/3.4/c-api/unicode.html#c.PyUnicode_GET_DATA_SIZE
PyUnicode_AS_UNICODE	A							https://docs.python.org			<pre><code>
Py_UNICODE* PyUnicode_AS_UNICODE(PyObject *o)</code></pre><br>Return a pointer to a Py_UNICODE representation of the object. The returned buffer is always terminated with an extra null code point. It may also contain embedded null code points, which would cause the string to be truncated when used in most C functions. The AS_DATA form casts the pointer to const char *. The o argument has to be a Unicode object (not checked).	https://docs.python.org/3.4/c-api/unicode.html#c.PyUnicode_AS_UNICODE
Py_UNICODE_ISSPACE	A							https://docs.python.org			<pre><code>
int Py_UNICODE_ISSPACE(Py_UNICODE ch)</code></pre><br>Return 1 or 0 depending on whether ch is a whitespace character.	https://docs.python.org/3.4/c-api/unicode.html#c.Py_UNICODE_ISSPACE
Py_UNICODE_ISLOWER	A							https://docs.python.org			<pre><code>
int Py_UNICODE_ISLOWER(Py_UNICODE ch)</code></pre><br>Return 1 or 0 depending on whether ch is a lowercase character.	https://docs.python.org/3.4/c-api/unicode.html#c.Py_UNICODE_ISLOWER
Py_UNICODE_ISUPPER	A							https://docs.python.org			<pre><code>
int Py_UNICODE_ISUPPER(Py_UNICODE ch)</code></pre><br>Return 1 or 0 depending on whether ch is an uppercase character.	https://docs.python.org/3.4/c-api/unicode.html#c.Py_UNICODE_ISUPPER
Py_UNICODE_ISTITLE	A							https://docs.python.org			<pre><code>
int Py_UNICODE_ISTITLE(Py_UNICODE ch)</code></pre><br>Return 1 or 0 depending on whether ch is a titlecase character.	https://docs.python.org/3.4/c-api/unicode.html#c.Py_UNICODE_ISTITLE
Py_UNICODE_ISLINEBREAK	A							https://docs.python.org			<pre><code>
int Py_UNICODE_ISLINEBREAK(Py_UNICODE ch)</code></pre><br>Return 1 or 0 depending on whether ch is a linebreak character.	https://docs.python.org/3.4/c-api/unicode.html#c.Py_UNICODE_ISLINEBREAK
Py_UNICODE_ISDECIMAL	A							https://docs.python.org			<pre><code>
int Py_UNICODE_ISDECIMAL(Py_UNICODE ch)</code></pre><br>Return 1 or 0 depending on whether ch is a decimal character.	https://docs.python.org/3.4/c-api/unicode.html#c.Py_UNICODE_ISDECIMAL
Py_UNICODE_ISDIGIT	A							https://docs.python.org			<pre><code>
int Py_UNICODE_ISDIGIT(Py_UNICODE ch)</code></pre><br>Return 1 or 0 depending on whether ch is a digit character.	https://docs.python.org/3.4/c-api/unicode.html#c.Py_UNICODE_ISDIGIT
Py_UNICODE_ISNUMERIC	A							https://docs.python.org			<pre><code>
int Py_UNICODE_ISNUMERIC(Py_UNICODE ch)</code></pre><br>Return 1 or 0 depending on whether ch is a numeric character.	https://docs.python.org/3.4/c-api/unicode.html#c.Py_UNICODE_ISNUMERIC
Py_UNICODE_ISALPHA	A							https://docs.python.org			<pre><code>
int Py_UNICODE_ISALPHA(Py_UNICODE ch)</code></pre><br>Return 1 or 0 depending on whether ch is an alphabetic character.	https://docs.python.org/3.4/c-api/unicode.html#c.Py_UNICODE_ISALPHA
Py_UNICODE_ISALNUM	A							https://docs.python.org			<pre><code>
int Py_UNICODE_ISALNUM(Py_UNICODE ch)</code></pre><br>Return 1 or 0 depending on whether ch is an alphanumeric character.	https://docs.python.org/3.4/c-api/unicode.html#c.Py_UNICODE_ISALNUM
Py_UNICODE_ISPRINTABLE	A							https://docs.python.org			<pre><code>
int Py_UNICODE_ISPRINTABLE(Py_UNICODE ch)</code></pre><br>Return 1 or 0 depending on whether ch is a printable character. Nonprintable characters are those characters defined in the Unicode character database as “Other” or “Separator”, excepting the ASCII space (0x20) which is considered printable. (Note that printable characters in this context are those which should not be escaped when repr() is invoked on a string. It has no bearing on the handling of strings written to sys.stdout or sys.stderr.)	https://docs.python.org/3.4/c-api/unicode.html#c.Py_UNICODE_ISPRINTABLE
Py_UNICODE_TOLOWER	A							https://docs.python.org			<pre><code>
Py_UNICODE Py_UNICODE_TOLOWER(Py_UNICODE ch)</code></pre><br>Return the character ch converted to lower case.	https://docs.python.org/3.4/c-api/unicode.html#c.Py_UNICODE_TOLOWER
Py_UNICODE_TOUPPER	A							https://docs.python.org			<pre><code>
Py_UNICODE Py_UNICODE_TOUPPER(Py_UNICODE ch)</code></pre><br>Return the character ch converted to upper case.	https://docs.python.org/3.4/c-api/unicode.html#c.Py_UNICODE_TOUPPER
Py_UNICODE_TOTITLE	A							https://docs.python.org			<pre><code>
Py_UNICODE Py_UNICODE_TOTITLE(Py_UNICODE ch)</code></pre><br>Return the character ch converted to title case.	https://docs.python.org/3.4/c-api/unicode.html#c.Py_UNICODE_TOTITLE
Py_UNICODE_TODECIMAL	A							https://docs.python.org			<pre><code>
int Py_UNICODE_TODECIMAL(Py_UNICODE ch)</code></pre><br>Return the character ch converted to a decimal positive integer. Return -1 if this is not possible. This macro does not raise exceptions.	https://docs.python.org/3.4/c-api/unicode.html#c.Py_UNICODE_TODECIMAL
Py_UNICODE_TODIGIT	A							https://docs.python.org			<pre><code>
int Py_UNICODE_TODIGIT(Py_UNICODE ch)</code></pre><br>Return the character ch converted to a single digit integer. Return -1 if this is not possible. This macro does not raise exceptions.	https://docs.python.org/3.4/c-api/unicode.html#c.Py_UNICODE_TODIGIT
Py_UNICODE_TONUMERIC	A							https://docs.python.org			<pre><code>
double Py_UNICODE_TONUMERIC(Py_UNICODE ch)</code></pre><br>Return the character ch converted to a double. Return -1.0 if this is not possible. This macro does not raise exceptions.	https://docs.python.org/3.4/c-api/unicode.html#c.Py_UNICODE_TONUMERIC
PyUnicode_New	A							https://docs.python.org			<pre><code>
PyObject* PyUnicode_New(Py_ssize_t size, Py_UCS4 maxchar)</code></pre><br>Create a new Unicode object. maxchar should be the true maximum code point to be placed in the string. As an approximation, it can be rounded up to the nearest value in the sequence 127, 255, 65535, 1114111.	https://docs.python.org/3.4/c-api/unicode.html#c.PyUnicode_New
PyUnicode_FromKindAndData	A							https://docs.python.org			<pre><code>
PyObject* PyUnicode_FromKindAndData(int kind, const void *buffer, Py_ssize_t size)</code></pre><br>Create a new Unicode object with the given kind (possible values are PyUnicode_1BYTE_KIND etc., as returned by PyUnicode_KIND()). The buffer must point to an array of size units of 1, 2 or 4 bytes per character, as given by the kind.	https://docs.python.org/3.4/c-api/unicode.html#c.PyUnicode_FromKindAndData
PyUnicode_FromStringAndSize	A							https://docs.python.org			<pre><code>
PyObject* PyUnicode_FromStringAndSize(const char *u, Py_ssize_t size)</code></pre><br>Create a Unicode object from the char buffer u. The bytes will be interpreted as being UTF-8 encoded. The buffer is copied into the new object. If the buffer is not NULL, the return value might be a shared object, i.e. modification of the data is not allowed.	https://docs.python.org/3.4/c-api/unicode.html#c.PyUnicode_FromStringAndSize
PyUnicode_FromString	A							https://docs.python.org			<pre><code>
PyObject *PyUnicode_FromString(const char *u)</code></pre><br>Create a Unicode object from an UTF-8 encoded null-terminated char buffer u.	https://docs.python.org/3.4/c-api/unicode.html#c.PyUnicode_FromString
PyUnicode_FromFormat	A							https://docs.python.org			<pre><code>
PyObject* PyUnicode_FromFormat(const char *format, ...)</code></pre><br>Take a C printf()-style format string and a variable number of arguments, calculate the size of the resulting Python unicode string and return a string with the values formatted into it. The variable arguments must be C types and must correspond exactly to the format characters in the format ASCII-encoded string. The following format characters are allowed:	https://docs.python.org/3.4/c-api/unicode.html#c.PyUnicode_FromFormat
PyUnicode_FromFormatV	A							https://docs.python.org			<pre><code>
PyObject* PyUnicode_FromFormatV(const char *format, va_list vargs)</code></pre><br>Identical to PyUnicode_FromFormat() except that it takes exactly two arguments.	https://docs.python.org/3.4/c-api/unicode.html#c.PyUnicode_FromFormatV
PyUnicode_FromEncodedObject	A							https://docs.python.org			<pre><code>
PyObject* PyUnicode_FromEncodedObject(PyObject *obj, const char *encoding, const char *errors)</code></pre><br>Coerce an encoded object obj to an Unicode object and return a reference with incremented refcount.	https://docs.python.org/3.4/c-api/unicode.html#c.PyUnicode_FromEncodedObject
PyUnicode_GetLength	A							https://docs.python.org			<pre><code>
Py_ssize_t PyUnicode_GetLength(PyObject *unicode)</code></pre><br>Return the length of the Unicode object, in code points.	https://docs.python.org/3.4/c-api/unicode.html#c.PyUnicode_GetLength
PyUnicode_CopyCharacters	A							https://docs.python.org			<pre><code>
int PyUnicode_CopyCharacters(PyObject *to, Py_ssize_t to_start, PyObject *from, Py_ssize_t from_start, Py_ssize_t how_many)</code></pre><br>Copy characters from one Unicode object into another. This function performs character conversion when necessary and falls back to memcpy() if possible. Returns -1 and sets an exception on error, otherwise returns 0.	https://docs.python.org/3.4/c-api/unicode.html#c.PyUnicode_CopyCharacters
PyUnicode_Fill	A							https://docs.python.org			<pre><code>
Py_ssize_t PyUnicode_Fill(PyObject *unicode, Py_ssize_t start, Py_ssize_t length, Py_UCS4 fill_char)</code></pre><br>Fill a string with a character: write fill_char into unicode[start:start+length].	https://docs.python.org/3.4/c-api/unicode.html#c.PyUnicode_Fill
PyUnicode_WriteChar	A							https://docs.python.org			<pre><code>
int PyUnicode_WriteChar(PyObject *unicode, Py_ssize_t index, Py_UCS4 character)</code></pre><br>Write a character to a string. The string must have been created through PyUnicode_New(). Since Unicode strings are supposed to be immutable, the string must not be shared, or have been hashed yet.	https://docs.python.org/3.4/c-api/unicode.html#c.PyUnicode_WriteChar
PyUnicode_ReadChar	A							https://docs.python.org			<pre><code>
Py_UCS4 PyUnicode_ReadChar(PyObject *unicode, Py_ssize_t index)</code></pre><br>Read a character from a string. This function checks that unicode is a Unicode object and the index is not out of bounds, in contrast to the macro version PyUnicode_READ_CHAR().	https://docs.python.org/3.4/c-api/unicode.html#c.PyUnicode_ReadChar
PyUnicode_Substring	A							https://docs.python.org			<pre><code>
PyObject* PyUnicode_Substring(PyObject *str, Py_ssize_t start, Py_ssize_t end)</code></pre><br>Return a substring of str, from character index start (included) to character index end (excluded). Negative indices are not supported.	https://docs.python.org/3.4/c-api/unicode.html#c.PyUnicode_Substring
PyUnicode_AsUCS4	A							https://docs.python.org			<pre><code>
Py_UCS4* PyUnicode_AsUCS4(PyObject *u, Py_UCS4 *buffer, Py_ssize_t buflen, int copy_null)</code></pre><br>Copy the string u into a UCS4 buffer, including a null character, if copy_null is set. Returns NULL and sets an exception on error (in particular, a ValueError if buflen is smaller than the length of u). buffer is returned on success.	https://docs.python.org/3.4/c-api/unicode.html#c.PyUnicode_AsUCS4
PyUnicode_AsUCS4Copy	A							https://docs.python.org			<pre><code>
Py_UCS4* PyUnicode_AsUCS4Copy(PyObject *u)</code></pre><br>Copy the string u into a new UCS4 buffer that is allocated using PyMem_Malloc(). If this fails, NULL is returned with a MemoryError set. The returned buffer always has an extra null code point appended.	https://docs.python.org/3.4/c-api/unicode.html#c.PyUnicode_AsUCS4Copy
PyUnicode_FromUnicode	A							https://docs.python.org			<pre><code>
PyObject* PyUnicode_FromUnicode(const Py_UNICODE *u, Py_ssize_t size)</code></pre><br>Create a Unicode object from the Py_UNICODE buffer u of the given size. u may be NULL which causes the contents to be undefined. It is the user’s responsibility to fill in the needed data. The buffer is copied into the new object.	https://docs.python.org/3.4/c-api/unicode.html#c.PyUnicode_FromUnicode
PyUnicode_AsUnicode	A							https://docs.python.org			<pre><code>
Py_UNICODE* PyUnicode_AsUnicode(PyObject *unicode)</code></pre><br>Return a read-only pointer to the Unicode object’s internal Py_UNICODE buffer, or NULL on error. This will create the Py_UNICODE* representation of the object if it is not yet available. The buffer is always terminated with an extra null code point. Note that the resulting Py_UNICODE string may also contain embedded null code points, which would cause the string to be truncated when used in most C functions.	https://docs.python.org/3.4/c-api/unicode.html#c.PyUnicode_AsUnicode
PyUnicode_TransformDecimalToASCII	A							https://docs.python.org			<pre><code>
PyObject* PyUnicode_TransformDecimalToASCII(Py_UNICODE *s, Py_ssize_t size)</code></pre><br>Create a Unicode object by replacing all decimal digits in Py_UNICODE buffer of the given size by ASCII digits 0–9 according to their decimal value. Return NULL if an exception occurs.	https://docs.python.org/3.4/c-api/unicode.html#c.PyUnicode_TransformDecimalToASCII
PyUnicode_AsUnicodeAndSize	A							https://docs.python.org			<pre><code>
Py_UNICODE* PyUnicode_AsUnicodeAndSize(PyObject *unicode, Py_ssize_t *size)</code></pre><br>Like PyUnicode_AsUnicode(), but also saves the Py_UNICODE() array length (excluding the extra null terminator) in size. Note that the resulting Py_UNICODE* string may contain embedded null code points, which would cause the string to be truncated when used in most C functions.	https://docs.python.org/3.4/c-api/unicode.html#c.PyUnicode_AsUnicodeAndSize
PyUnicode_AsUnicodeCopy	A							https://docs.python.org			<pre><code>
Py_UNICODE* PyUnicode_AsUnicodeCopy(PyObject *unicode)</code></pre><br>Create a copy of a Unicode string ending with a null code point. Return NULL and raise a MemoryError exception on memory allocation failure, otherwise return a new allocated buffer (use PyMem_Free() to free the buffer). Note that the resulting Py_UNICODE* string may contain embedded null code points, which would cause the string to be truncated when used in most C functions.	https://docs.python.org/3.4/c-api/unicode.html#c.PyUnicode_AsUnicodeCopy
PyUnicode_GetSize	A							https://docs.python.org			<pre><code>
Py_ssize_t PyUnicode_GetSize(PyObject *unicode)</code></pre><br>Return the size of the deprecated Py_UNICODE representation, in code units (this includes surrogate pairs as 2 units).	https://docs.python.org/3.4/c-api/unicode.html#c.PyUnicode_GetSize
PyUnicode_FromObject	A							https://docs.python.org			<pre><code>
PyObject* PyUnicode_FromObject(PyObject *obj)</code></pre><br>Shortcut for PyUnicode_FromEncodedObject(obj, NULL, "strict") which is used throughout the interpreter whenever coercion to Unicode is needed.	https://docs.python.org/3.4/c-api/unicode.html#c.PyUnicode_FromObject
PyUnicode_DecodeLocaleAndSize	A							https://docs.python.org			<pre><code>
PyObject* PyUnicode_DecodeLocaleAndSize(const char *str, Py_ssize_t len, const char *errors)</code></pre><br>Decode a string from the current locale encoding. The supported error handlers are "strict" and "surrogateescape" (PEP 383). The decoder uses "strict" error handler if errors is NULL. str must end with a null character but cannot contain embedded null characters.	https://docs.python.org/3.4/c-api/unicode.html#c.PyUnicode_DecodeLocaleAndSize
PyUnicode_DecodeLocale	A							https://docs.python.org			<pre><code>
PyObject* PyUnicode_DecodeLocale(const char *str, const char *errors)</code></pre><br>Similar to PyUnicode_DecodeLocaleAndSize(), but compute the string length using strlen().	https://docs.python.org/3.4/c-api/unicode.html#c.PyUnicode_DecodeLocale
PyUnicode_EncodeLocale	A							https://docs.python.org			<pre><code>
PyObject* PyUnicode_EncodeLocale(PyObject *unicode, const char *errors)</code></pre><br>Encode a Unicode object to the current locale encoding. The supported error handlers are "strict" and "surrogateescape" (PEP 383). The encoder uses "strict" error handler if errors is NULL. Return a bytes object. str cannot contain embedded null characters.	https://docs.python.org/3.4/c-api/unicode.html#c.PyUnicode_EncodeLocale
PyUnicode_FSConverter	A							https://docs.python.org			<pre><code>
int PyUnicode_FSConverter(PyObject* obj, void* result)</code></pre><br>ParseTuple converter: encode str objects to bytes using PyUnicode_EncodeFSDefault(); bytes objects are output as-is. result must be a PyBytesObject* which must be released when it is no longer used.	https://docs.python.org/3.4/c-api/unicode.html#c.PyUnicode_FSConverter
PyUnicode_FSDecoder	A							https://docs.python.org			<pre><code>
int PyUnicode_FSDecoder(PyObject* obj, void* result)</code></pre><br>ParseTuple converter: decode bytes objects to str using PyUnicode_DecodeFSDefaultAndSize(); str objects are output as-is. result must be a PyUnicodeObject* which must be released when it is no longer used.	https://docs.python.org/3.4/c-api/unicode.html#c.PyUnicode_FSDecoder
PyUnicode_DecodeFSDefaultAndSize	A							https://docs.python.org			<pre><code>
PyObject* PyUnicode_DecodeFSDefaultAndSize(const char *s, Py_ssize_t size)</code></pre><br>Decode a string using Py_FileSystemDefaultEncoding and the "surrogateescape" error handler, or "strict" on Windows.	https://docs.python.org/3.4/c-api/unicode.html#c.PyUnicode_DecodeFSDefaultAndSize
PyUnicode_DecodeFSDefault	A							https://docs.python.org			<pre><code>
PyObject* PyUnicode_DecodeFSDefault(const char *s)</code></pre><br>Decode a null-terminated string using Py_FileSystemDefaultEncoding and the "surrogateescape" error handler, or "strict" on Windows.	https://docs.python.org/3.4/c-api/unicode.html#c.PyUnicode_DecodeFSDefault
PyUnicode_EncodeFSDefault	A							https://docs.python.org			<pre><code>
PyObject* PyUnicode_EncodeFSDefault(PyObject *unicode)</code></pre><br>Encode a Unicode object to Py_FileSystemDefaultEncoding with the "surrogateescape" error handler, or "strict" on Windows, and return bytes. Note that the resulting bytes object may contain null bytes.	https://docs.python.org/3.4/c-api/unicode.html#c.PyUnicode_EncodeFSDefault
PyUnicode_FromWideChar	A							https://docs.python.org			<pre><code>
PyObject* PyUnicode_FromWideChar(const wchar_t *w, Py_ssize_t size)</code></pre><br>Create a Unicode object from the wchar_t buffer w of the given size. Passing -1 as the size indicates that the function must itself compute the length, using wcslen. Return NULL on failure.	https://docs.python.org/3.4/c-api/unicode.html#c.PyUnicode_FromWideChar
PyUnicode_AsWideChar	A							https://docs.python.org			<pre><code>
Py_ssize_t PyUnicode_AsWideChar(PyUnicodeObject *unicode, wchar_t *w, Py_ssize_t size)</code></pre><br>Copy the Unicode object contents into the wchar_t buffer w. At most size wchar_t characters are copied (excluding a possibly trailing null termination character). Return the number of wchar_t characters copied or -1 in case of an error. Note that the resulting wchar_t* string may or may not be null-terminated. It is the responsibility of the caller to make sure that the wchar_t* string is null-terminated in case this is required by the application. Also, note that the wchar_t* string might contain null characters, which would cause the string to be truncated when used with most C functions.	https://docs.python.org/3.4/c-api/unicode.html#c.PyUnicode_AsWideChar
PyUnicode_AsWideCharString	A							https://docs.python.org			<pre><code>
wchar_t* PyUnicode_AsWideCharString(PyObject *unicode, Py_ssize_t *size)</code></pre><br>Convert the Unicode object to a wide character string. The output string always ends with a null character. If size is not NULL, write the number of wide characters (excluding the trailing null termination character) into *size.	https://docs.python.org/3.4/c-api/unicode.html#c.PyUnicode_AsWideCharString
Py_UCS4_strlen	A							https://docs.python.org			<pre><code>
size_t Py_UCS4_strlen(const Py_UCS4 *u)</code></pre><br>These utility functions work on strings of Py_UCS4 characters and otherwise behave like the C standard library functions with the same name.	https://docs.python.org/3.4/c-api/unicode.html#c.Py_UCS4_strlen
PyUnicode_Decode	A							https://docs.python.org			<pre><code>
PyObject* PyUnicode_Decode(const char *s, Py_ssize_t size, const char *encoding, const char *errors)</code></pre><br>Create a Unicode object by decoding size bytes of the encoded string s. encoding and errors have the same meaning as the parameters of the same name in the str() built-in function. The codec to be used is looked up using the Python codec registry. Return NULL if an exception was raised by the codec.	https://docs.python.org/3.4/c-api/unicode.html#c.PyUnicode_Decode
PyUnicode_AsEncodedString	A							https://docs.python.org			<pre><code>
PyObject* PyUnicode_AsEncodedString(PyObject *unicode, const char *encoding, const char *errors)</code></pre><br>Encode a Unicode object and return the result as Python bytes object. encoding and errors have the same meaning as the parameters of the same name in the Unicode encode() method. The codec to be used is looked up using the Python codec registry. Return NULL if an exception was raised by the codec.	https://docs.python.org/3.4/c-api/unicode.html#c.PyUnicode_AsEncodedString
PyUnicode_Encode	A							https://docs.python.org			<pre><code>
PyObject* PyUnicode_Encode(const Py_UNICODE *s, Py_ssize_t size, const char *encoding, const char *errors)</code></pre><br>Encode the Py_UNICODE buffer s of the given size and return a Python bytes object. encoding and errors have the same meaning as the parameters of the same name in the Unicode encode() method. The codec to be used is looked up using the Python codec registry. Return NULL if an exception was raised by the codec.	https://docs.python.org/3.4/c-api/unicode.html#c.PyUnicode_Encode
PyUnicode_DecodeUTF8	A							https://docs.python.org			<pre><code>
PyObject* PyUnicode_DecodeUTF8(const char *s, Py_ssize_t size, const char *errors)</code></pre><br>Create a Unicode object by decoding size bytes of the UTF-8 encoded string s. Return NULL if an exception was raised by the codec.	https://docs.python.org/3.4/c-api/unicode.html#c.PyUnicode_DecodeUTF8
PyUnicode_DecodeUTF8Stateful	A							https://docs.python.org			<pre><code>
PyObject* PyUnicode_DecodeUTF8Stateful(const char *s, Py_ssize_t size, const char *errors, Py_ssize_t *consumed)</code></pre><br>If consumed is NULL, behave like PyUnicode_DecodeUTF8(). If consumed is not NULL, trailing incomplete UTF-8 byte sequences will not be treated as an error. Those bytes will not be decoded and the number of bytes that have been decoded will be stored in consumed.	https://docs.python.org/3.4/c-api/unicode.html#c.PyUnicode_DecodeUTF8Stateful
PyUnicode_AsUTF8String	A							https://docs.python.org			<pre><code>
PyObject* PyUnicode_AsUTF8String(PyObject *unicode)</code></pre><br>Encode a Unicode object using UTF-8 and return the result as Python bytes object. Error handling is “strict”. Return NULL if an exception was raised by the codec.	https://docs.python.org/3.4/c-api/unicode.html#c.PyUnicode_AsUTF8String
PyUnicode_AsUTF8AndSize	A							https://docs.python.org			<pre><code>
char* PyUnicode_AsUTF8AndSize(PyObject *unicode, Py_ssize_t *size)</code></pre><br>Return a pointer to the UTF-8 encoding of the Unicode object, and store the size of the encoded representation (in bytes) in size. The size argument can be NULL; in this case no size will be stored. The returned buffer always has an extra null byte appended (not included in size), regardless of whether there are any other null code points.	https://docs.python.org/3.4/c-api/unicode.html#c.PyUnicode_AsUTF8AndSize
PyUnicode_AsUTF8	A							https://docs.python.org			<pre><code>
char* PyUnicode_AsUTF8(PyObject *unicode)</code></pre><br>As PyUnicode_AsUTF8AndSize(), but does not store the size.	https://docs.python.org/3.4/c-api/unicode.html#c.PyUnicode_AsUTF8
PyUnicode_EncodeUTF8	A							https://docs.python.org			<pre><code>
PyObject* PyUnicode_EncodeUTF8(const Py_UNICODE *s, Py_ssize_t size, const char *errors)</code></pre><br>Encode the Py_UNICODE buffer s of the given size using UTF-8 and return a Python bytes object. Return NULL if an exception was raised by the codec.	https://docs.python.org/3.4/c-api/unicode.html#c.PyUnicode_EncodeUTF8
PyUnicode_DecodeUTF32	A							https://docs.python.org			<pre><code>
PyObject* PyUnicode_DecodeUTF32(const char *s, Py_ssize_t size, const char *errors, int *byteorder)</code></pre><br>Decode size bytes from a UTF-32 encoded buffer string and return the corresponding Unicode object. errors (if non-NULL) defines the error handling. It defaults to “strict”.	https://docs.python.org/3.4/c-api/unicode.html#c.PyUnicode_DecodeUTF32
PyUnicode_DecodeUTF32Stateful	A							https://docs.python.org			<pre><code>
PyObject* PyUnicode_DecodeUTF32Stateful(const char *s, Py_ssize_t size, const char *errors, int *byteorder, Py_ssize_t *consumed)</code></pre><br>If consumed is NULL, behave like PyUnicode_DecodeUTF32(). If consumed is not NULL, PyUnicode_DecodeUTF32Stateful() will not treat trailing incomplete UTF-32 byte sequences (such as a number of bytes not divisible by four) as an error. Those bytes will not be decoded and the number of bytes that have been decoded will be stored in consumed.	https://docs.python.org/3.4/c-api/unicode.html#c.PyUnicode_DecodeUTF32Stateful
PyUnicode_AsUTF32String	A							https://docs.python.org			<pre><code>
PyObject* PyUnicode_AsUTF32String(PyObject *unicode)</code></pre><br>Return a Python byte string using the UTF-32 encoding in native byte order. The string always starts with a BOM mark. Error handling is “strict”. Return NULL if an exception was raised by the codec.	https://docs.python.org/3.4/c-api/unicode.html#c.PyUnicode_AsUTF32String
PyUnicode_EncodeUTF32	A							https://docs.python.org			<pre><code>
PyObject* PyUnicode_EncodeUTF32(const Py_UNICODE *s, Py_ssize_t size, const char *errors, int byteorder)</code></pre><br>Return a Python bytes object holding the UTF-32 encoded value of the Unicode data in s. Output is written according to the following byte order:	https://docs.python.org/3.4/c-api/unicode.html#c.PyUnicode_EncodeUTF32
PyUnicode_DecodeUTF16	A							https://docs.python.org			<pre><code>
PyObject* PyUnicode_DecodeUTF16(const char *s, Py_ssize_t size, const char *errors, int *byteorder)</code></pre><br>Decode size bytes from a UTF-16 encoded buffer string and return the corresponding Unicode object. errors (if non-NULL) defines the error handling. It defaults to “strict”.	https://docs.python.org/3.4/c-api/unicode.html#c.PyUnicode_DecodeUTF16
PyUnicode_DecodeUTF16Stateful	A							https://docs.python.org			<pre><code>
PyObject* PyUnicode_DecodeUTF16Stateful(const char *s, Py_ssize_t size, const char *errors, int *byteorder, Py_ssize_t *consumed)</code></pre><br>If consumed is NULL, behave like PyUnicode_DecodeUTF16(). If consumed is not NULL, PyUnicode_DecodeUTF16Stateful() will not treat trailing incomplete UTF-16 byte sequences (such as an odd number of bytes or a split surrogate pair) as an error. Those bytes will not be decoded and the number of bytes that have been decoded will be stored in consumed.	https://docs.python.org/3.4/c-api/unicode.html#c.PyUnicode_DecodeUTF16Stateful
PyUnicode_AsUTF16String	A							https://docs.python.org			<pre><code>
PyObject* PyUnicode_AsUTF16String(PyObject *unicode)</code></pre><br>Return a Python byte string using the UTF-16 encoding in native byte order. The string always starts with a BOM mark. Error handling is “strict”. Return NULL if an exception was raised by the codec.	https://docs.python.org/3.4/c-api/unicode.html#c.PyUnicode_AsUTF16String
PyUnicode_EncodeUTF16	A							https://docs.python.org			<pre><code>
PyObject* PyUnicode_EncodeUTF16(const Py_UNICODE *s, Py_ssize_t size, const char *errors, int byteorder)</code></pre><br>Return a Python bytes object holding the UTF-16 encoded value of the Unicode data in s. Output is written according to the following byte order:	https://docs.python.org/3.4/c-api/unicode.html#c.PyUnicode_EncodeUTF16
PyUnicode_DecodeUTF7	A							https://docs.python.org			<pre><code>
PyObject* PyUnicode_DecodeUTF7(const char *s, Py_ssize_t size, const char *errors)</code></pre><br>Create a Unicode object by decoding size bytes of the UTF-7 encoded string s. Return NULL if an exception was raised by the codec.	https://docs.python.org/3.4/c-api/unicode.html#c.PyUnicode_DecodeUTF7
PyUnicode_DecodeUTF7Stateful	A							https://docs.python.org			<pre><code>
PyObject* PyUnicode_DecodeUTF7Stateful(const char *s, Py_ssize_t size, const char *errors, Py_ssize_t *consumed)</code></pre><br>If consumed is NULL, behave like PyUnicode_DecodeUTF7(). If consumed is not NULL, trailing incomplete UTF-7 base-64 sections will not be treated as an error. Those bytes will not be decoded and the number of bytes that have been decoded will be stored in consumed.	https://docs.python.org/3.4/c-api/unicode.html#c.PyUnicode_DecodeUTF7Stateful
PyUnicode_EncodeUTF7	A							https://docs.python.org			<pre><code>
PyObject* PyUnicode_EncodeUTF7(const Py_UNICODE *s, Py_ssize_t size, int base64SetO, int base64WhiteSpace, const char *errors)</code></pre><br>Encode the Py_UNICODE buffer of the given size using UTF-7 and return a Python bytes object. Return NULL if an exception was raised by the codec.	https://docs.python.org/3.4/c-api/unicode.html#c.PyUnicode_EncodeUTF7
PyUnicode_DecodeUnicodeEscape	A							https://docs.python.org			<pre><code>
PyObject* PyUnicode_DecodeUnicodeEscape(const char *s, Py_ssize_t size, const char *errors)</code></pre><br>Create a Unicode object by decoding size bytes of the Unicode-Escape encoded string s. Return NULL if an exception was raised by the codec.	https://docs.python.org/3.4/c-api/unicode.html#c.PyUnicode_DecodeUnicodeEscape
PyUnicode_AsUnicodeEscapeString	A							https://docs.python.org			<pre><code>
PyObject* PyUnicode_AsUnicodeEscapeString(PyObject *unicode)</code></pre><br>Encode a Unicode object using Unicode-Escape and return the result as Python string object. Error handling is “strict”. Return NULL if an exception was raised by the codec.	https://docs.python.org/3.4/c-api/unicode.html#c.PyUnicode_AsUnicodeEscapeString
PyUnicode_EncodeUnicodeEscape	A							https://docs.python.org			<pre><code>
PyObject* PyUnicode_EncodeUnicodeEscape(const Py_UNICODE *s, Py_ssize_t size)</code></pre><br>Encode the Py_UNICODE buffer of the given size using Unicode-Escape and return a Python string object. Return NULL if an exception was raised by the codec.	https://docs.python.org/3.4/c-api/unicode.html#c.PyUnicode_EncodeUnicodeEscape
PyUnicode_DecodeRawUnicodeEscape	A							https://docs.python.org			<pre><code>
PyObject* PyUnicode_DecodeRawUnicodeEscape(const char *s, Py_ssize_t size, const char *errors)</code></pre><br>Create a Unicode object by decoding size bytes of the Raw-Unicode-Escape encoded string s. Return NULL if an exception was raised by the codec.	https://docs.python.org/3.4/c-api/unicode.html#c.PyUnicode_DecodeRawUnicodeEscape
PyUnicode_AsRawUnicodeEscapeString	A							https://docs.python.org			<pre><code>
PyObject* PyUnicode_AsRawUnicodeEscapeString(PyObject *unicode)</code></pre><br>Encode a Unicode object using Raw-Unicode-Escape and return the result as Python string object. Error handling is “strict”. Return NULL if an exception was raised by the codec.	https://docs.python.org/3.4/c-api/unicode.html#c.PyUnicode_AsRawUnicodeEscapeString
PyUnicode_EncodeRawUnicodeEscape	A							https://docs.python.org			<pre><code>
PyObject* PyUnicode_EncodeRawUnicodeEscape(const Py_UNICODE *s, Py_ssize_t size, const char *errors)</code></pre><br>Encode the Py_UNICODE buffer of the given size using Raw-Unicode-Escape and return a Python string object. Return NULL if an exception was raised by the codec.	https://docs.python.org/3.4/c-api/unicode.html#c.PyUnicode_EncodeRawUnicodeEscape
PyUnicode_DecodeLatin1	A							https://docs.python.org			<pre><code>
PyObject* PyUnicode_DecodeLatin1(const char *s, Py_ssize_t size, const char *errors)</code></pre><br>Create a Unicode object by decoding size bytes of the Latin-1 encoded string s. Return NULL if an exception was raised by the codec.	https://docs.python.org/3.4/c-api/unicode.html#c.PyUnicode_DecodeLatin1
PyUnicode_AsLatin1String	A							https://docs.python.org			<pre><code>
PyObject* PyUnicode_AsLatin1String(PyObject *unicode)</code></pre><br>Encode a Unicode object using Latin-1 and return the result as Python bytes object. Error handling is “strict”. Return NULL if an exception was raised by the codec.	https://docs.python.org/3.4/c-api/unicode.html#c.PyUnicode_AsLatin1String
PyUnicode_EncodeLatin1	A							https://docs.python.org			<pre><code>
PyObject* PyUnicode_EncodeLatin1(const Py_UNICODE *s, Py_ssize_t size, const char *errors)</code></pre><br>Encode the Py_UNICODE buffer of the given size using Latin-1 and return a Python bytes object. Return NULL if an exception was raised by the codec.	https://docs.python.org/3.4/c-api/unicode.html#c.PyUnicode_EncodeLatin1
PyUnicode_DecodeASCII	A							https://docs.python.org			<pre><code>
PyObject* PyUnicode_DecodeASCII(const char *s, Py_ssize_t size, const char *errors)</code></pre><br>Create a Unicode object by decoding size bytes of the ASCII encoded string s. Return NULL if an exception was raised by the codec.	https://docs.python.org/3.4/c-api/unicode.html#c.PyUnicode_DecodeASCII
PyUnicode_AsASCIIString	A							https://docs.python.org			<pre><code>
PyObject* PyUnicode_AsASCIIString(PyObject *unicode)</code></pre><br>Encode a Unicode object using ASCII and return the result as Python bytes object. Error handling is “strict”. Return NULL if an exception was raised by the codec.	https://docs.python.org/3.4/c-api/unicode.html#c.PyUnicode_AsASCIIString
PyUnicode_EncodeASCII	A							https://docs.python.org			<pre><code>
PyObject* PyUnicode_EncodeASCII(const Py_UNICODE *s, Py_ssize_t size, const char *errors)</code></pre><br>Encode the Py_UNICODE buffer of the given size using ASCII and return a Python bytes object. Return NULL if an exception was raised by the codec.	https://docs.python.org/3.4/c-api/unicode.html#c.PyUnicode_EncodeASCII
PyUnicode_DecodeCharmap	A							https://docs.python.org			<pre><code>
PyObject* PyUnicode_DecodeCharmap(const char *s, Py_ssize_t size, PyObject *mapping, const char *errors)</code></pre><br>Create a Unicode object by decoding size bytes of the encoded string s using the given mapping object. Return NULL if an exception was raised by the codec. If mapping is NULL latin-1 decoding will be done. Else it can be a dictionary mapping byte or a unicode string, which is treated as a lookup table. Byte values greater that the length of the string and U+FFFE “characters” are treated as “undefined mapping”.	https://docs.python.org/3.4/c-api/unicode.html#c.PyUnicode_DecodeCharmap
PyUnicode_AsCharmapString	A							https://docs.python.org			<pre><code>
PyObject* PyUnicode_AsCharmapString(PyObject *unicode, PyObject *mapping)</code></pre><br>Encode a Unicode object using the given mapping object and return the result as Python string object. Error handling is “strict”. Return NULL if an exception was raised by the codec.	https://docs.python.org/3.4/c-api/unicode.html#c.PyUnicode_AsCharmapString
PyUnicode_TranslateCharmap	A							https://docs.python.org			<pre><code>
PyObject* PyUnicode_TranslateCharmap(const Py_UNICODE *s, Py_ssize_t size, PyObject *table, const char *errors)</code></pre><br>Translate a Py_UNICODE buffer of the given size by applying a character mapping table to it and return the resulting Unicode object. Return NULL when an exception was raised by the codec.	https://docs.python.org/3.4/c-api/unicode.html#c.PyUnicode_TranslateCharmap
PyUnicode_EncodeCharmap	A							https://docs.python.org			<pre><code>
PyObject* PyUnicode_EncodeCharmap(const Py_UNICODE *s, Py_ssize_t size, PyObject *mapping, const char *errors)</code></pre><br>Encode the Py_UNICODE buffer of the given size using the given mapping object and return a Python string object. Return NULL if an exception was raised by the codec.	https://docs.python.org/3.4/c-api/unicode.html#c.PyUnicode_EncodeCharmap
PyUnicode_DecodeMBCS	A							https://docs.python.org			<pre><code>
PyObject* PyUnicode_DecodeMBCS(const char *s, Py_ssize_t size, const char *errors)</code></pre><br>Create a Unicode object by decoding size bytes of the MBCS encoded string s. Return NULL if an exception was raised by the codec.	https://docs.python.org/3.4/c-api/unicode.html#c.PyUnicode_DecodeMBCS
PyUnicode_DecodeMBCSStateful	A							https://docs.python.org			<pre><code>
PyObject* PyUnicode_DecodeMBCSStateful(const char *s, int size, const char *errors, int *consumed)</code></pre><br>If consumed is NULL, behave like PyUnicode_DecodeMBCS(). If consumed is not NULL, PyUnicode_DecodeMBCSStateful() will not decode trailing lead byte and the number of bytes that have been decoded will be stored in consumed.	https://docs.python.org/3.4/c-api/unicode.html#c.PyUnicode_DecodeMBCSStateful
PyUnicode_AsMBCSString	A							https://docs.python.org			<pre><code>
PyObject* PyUnicode_AsMBCSString(PyObject *unicode)</code></pre><br>Encode a Unicode object using MBCS and return the result as Python bytes object. Error handling is “strict”. Return NULL if an exception was raised by the codec.	https://docs.python.org/3.4/c-api/unicode.html#c.PyUnicode_AsMBCSString
PyUnicode_EncodeCodePage	A							https://docs.python.org			<pre><code>
PyObject* PyUnicode_EncodeCodePage(int code_page, PyObject *unicode, const char *errors)</code></pre><br>Encode the Unicode object using the specified code page and return a Python bytes object. Return NULL if an exception was raised by the codec. Use CP_ACP code page to get the MBCS encoder.	https://docs.python.org/3.4/c-api/unicode.html#c.PyUnicode_EncodeCodePage
PyUnicode_EncodeMBCS	A							https://docs.python.org			<pre><code>
PyObject* PyUnicode_EncodeMBCS(const Py_UNICODE *s, Py_ssize_t size, const char *errors)</code></pre><br>Encode the Py_UNICODE buffer of the given size using MBCS and return a Python bytes object. Return NULL if an exception was raised by the codec.	https://docs.python.org/3.4/c-api/unicode.html#c.PyUnicode_EncodeMBCS
PyUnicode_Decode	A							https://docs.python.org			<pre><code>
PyObject* PyUnicode_Decode(const char *s, Py_ssize_t size, const char *encoding, const char *errors)</code></pre><br>Create a Unicode object by decoding size bytes of the encoded string s. encoding and errors have the same meaning as the parameters of the same name in the str() built-in function. The codec to be used is looked up using the Python codec registry. Return NULL if an exception was raised by the codec.	https://docs.python.org/3.4/c-api/unicode.html#c.PyUnicode_Decode
PyUnicode_AsEncodedString	A							https://docs.python.org			<pre><code>
PyObject* PyUnicode_AsEncodedString(PyObject *unicode, const char *encoding, const char *errors)</code></pre><br>Encode a Unicode object and return the result as Python bytes object. encoding and errors have the same meaning as the parameters of the same name in the Unicode encode() method. The codec to be used is looked up using the Python codec registry. Return NULL if an exception was raised by the codec.	https://docs.python.org/3.4/c-api/unicode.html#c.PyUnicode_AsEncodedString
PyUnicode_Encode	A							https://docs.python.org			<pre><code>
PyObject* PyUnicode_Encode(const Py_UNICODE *s, Py_ssize_t size, const char *encoding, const char *errors)</code></pre><br>Encode the Py_UNICODE buffer s of the given size and return a Python bytes object. encoding and errors have the same meaning as the parameters of the same name in the Unicode encode() method. The codec to be used is looked up using the Python codec registry. Return NULL if an exception was raised by the codec.	https://docs.python.org/3.4/c-api/unicode.html#c.PyUnicode_Encode
PyUnicode_DecodeUTF8	A							https://docs.python.org			<pre><code>
PyObject* PyUnicode_DecodeUTF8(const char *s, Py_ssize_t size, const char *errors)</code></pre><br>Create a Unicode object by decoding size bytes of the UTF-8 encoded string s. Return NULL if an exception was raised by the codec.	https://docs.python.org/3.4/c-api/unicode.html#c.PyUnicode_DecodeUTF8
PyUnicode_DecodeUTF8Stateful	A							https://docs.python.org			<pre><code>
PyObject* PyUnicode_DecodeUTF8Stateful(const char *s, Py_ssize_t size, const char *errors, Py_ssize_t *consumed)</code></pre><br>If consumed is NULL, behave like PyUnicode_DecodeUTF8(). If consumed is not NULL, trailing incomplete UTF-8 byte sequences will not be treated as an error. Those bytes will not be decoded and the number of bytes that have been decoded will be stored in consumed.	https://docs.python.org/3.4/c-api/unicode.html#c.PyUnicode_DecodeUTF8Stateful
PyUnicode_AsUTF8String	A							https://docs.python.org			<pre><code>
PyObject* PyUnicode_AsUTF8String(PyObject *unicode)</code></pre><br>Encode a Unicode object using UTF-8 and return the result as Python bytes object. Error handling is “strict”. Return NULL if an exception was raised by the codec.	https://docs.python.org/3.4/c-api/unicode.html#c.PyUnicode_AsUTF8String
PyUnicode_AsUTF8AndSize	A							https://docs.python.org			<pre><code>
char* PyUnicode_AsUTF8AndSize(PyObject *unicode, Py_ssize_t *size)</code></pre><br>Return a pointer to the UTF-8 encoding of the Unicode object, and store the size of the encoded representation (in bytes) in size. The size argument can be NULL; in this case no size will be stored. The returned buffer always has an extra null byte appended (not included in size), regardless of whether there are any other null code points.	https://docs.python.org/3.4/c-api/unicode.html#c.PyUnicode_AsUTF8AndSize
PyUnicode_AsUTF8	A							https://docs.python.org			<pre><code>
char* PyUnicode_AsUTF8(PyObject *unicode)</code></pre><br>As PyUnicode_AsUTF8AndSize(), but does not store the size.	https://docs.python.org/3.4/c-api/unicode.html#c.PyUnicode_AsUTF8
PyUnicode_EncodeUTF8	A							https://docs.python.org			<pre><code>
PyObject* PyUnicode_EncodeUTF8(const Py_UNICODE *s, Py_ssize_t size, const char *errors)</code></pre><br>Encode the Py_UNICODE buffer s of the given size using UTF-8 and return a Python bytes object. Return NULL if an exception was raised by the codec.	https://docs.python.org/3.4/c-api/unicode.html#c.PyUnicode_EncodeUTF8
PyUnicode_DecodeUTF32	A							https://docs.python.org			<pre><code>
PyObject* PyUnicode_DecodeUTF32(const char *s, Py_ssize_t size, const char *errors, int *byteorder)</code></pre><br>Decode size bytes from a UTF-32 encoded buffer string and return the corresponding Unicode object. errors (if non-NULL) defines the error handling. It defaults to “strict”.	https://docs.python.org/3.4/c-api/unicode.html#c.PyUnicode_DecodeUTF32
PyUnicode_DecodeUTF32Stateful	A							https://docs.python.org			<pre><code>
PyObject* PyUnicode_DecodeUTF32Stateful(const char *s, Py_ssize_t size, const char *errors, int *byteorder, Py_ssize_t *consumed)</code></pre><br>If consumed is NULL, behave like PyUnicode_DecodeUTF32(). If consumed is not NULL, PyUnicode_DecodeUTF32Stateful() will not treat trailing incomplete UTF-32 byte sequences (such as a number of bytes not divisible by four) as an error. Those bytes will not be decoded and the number of bytes that have been decoded will be stored in consumed.	https://docs.python.org/3.4/c-api/unicode.html#c.PyUnicode_DecodeUTF32Stateful
PyUnicode_AsUTF32String	A							https://docs.python.org			<pre><code>
PyObject* PyUnicode_AsUTF32String(PyObject *unicode)</code></pre><br>Return a Python byte string using the UTF-32 encoding in native byte order. The string always starts with a BOM mark. Error handling is “strict”. Return NULL if an exception was raised by the codec.	https://docs.python.org/3.4/c-api/unicode.html#c.PyUnicode_AsUTF32String
PyUnicode_EncodeUTF32	A							https://docs.python.org			<pre><code>
PyObject* PyUnicode_EncodeUTF32(const Py_UNICODE *s, Py_ssize_t size, const char *errors, int byteorder)</code></pre><br>Return a Python bytes object holding the UTF-32 encoded value of the Unicode data in s. Output is written according to the following byte order:	https://docs.python.org/3.4/c-api/unicode.html#c.PyUnicode_EncodeUTF32
PyUnicode_DecodeUTF16	A							https://docs.python.org			<pre><code>
PyObject* PyUnicode_DecodeUTF16(const char *s, Py_ssize_t size, const char *errors, int *byteorder)</code></pre><br>Decode size bytes from a UTF-16 encoded buffer string and return the corresponding Unicode object. errors (if non-NULL) defines the error handling. It defaults to “strict”.	https://docs.python.org/3.4/c-api/unicode.html#c.PyUnicode_DecodeUTF16
PyUnicode_DecodeUTF16Stateful	A							https://docs.python.org			<pre><code>
PyObject* PyUnicode_DecodeUTF16Stateful(const char *s, Py_ssize_t size, const char *errors, int *byteorder, Py_ssize_t *consumed)</code></pre><br>If consumed is NULL, behave like PyUnicode_DecodeUTF16(). If consumed is not NULL, PyUnicode_DecodeUTF16Stateful() will not treat trailing incomplete UTF-16 byte sequences (such as an odd number of bytes or a split surrogate pair) as an error. Those bytes will not be decoded and the number of bytes that have been decoded will be stored in consumed.	https://docs.python.org/3.4/c-api/unicode.html#c.PyUnicode_DecodeUTF16Stateful
PyUnicode_AsUTF16String	A							https://docs.python.org			<pre><code>
PyObject* PyUnicode_AsUTF16String(PyObject *unicode)</code></pre><br>Return a Python byte string using the UTF-16 encoding in native byte order. The string always starts with a BOM mark. Error handling is “strict”. Return NULL if an exception was raised by the codec.	https://docs.python.org/3.4/c-api/unicode.html#c.PyUnicode_AsUTF16String
PyUnicode_EncodeUTF16	A							https://docs.python.org			<pre><code>
PyObject* PyUnicode_EncodeUTF16(const Py_UNICODE *s, Py_ssize_t size, const char *errors, int byteorder)</code></pre><br>Return a Python bytes object holding the UTF-16 encoded value of the Unicode data in s. Output is written according to the following byte order:	https://docs.python.org/3.4/c-api/unicode.html#c.PyUnicode_EncodeUTF16
PyUnicode_DecodeUTF7	A							https://docs.python.org			<pre><code>
PyObject* PyUnicode_DecodeUTF7(const char *s, Py_ssize_t size, const char *errors)</code></pre><br>Create a Unicode object by decoding size bytes of the UTF-7 encoded string s. Return NULL if an exception was raised by the codec.	https://docs.python.org/3.4/c-api/unicode.html#c.PyUnicode_DecodeUTF7
PyUnicode_DecodeUTF7Stateful	A							https://docs.python.org			<pre><code>
PyObject* PyUnicode_DecodeUTF7Stateful(const char *s, Py_ssize_t size, const char *errors, Py_ssize_t *consumed)</code></pre><br>If consumed is NULL, behave like PyUnicode_DecodeUTF7(). If consumed is not NULL, trailing incomplete UTF-7 base-64 sections will not be treated as an error. Those bytes will not be decoded and the number of bytes that have been decoded will be stored in consumed.	https://docs.python.org/3.4/c-api/unicode.html#c.PyUnicode_DecodeUTF7Stateful
PyUnicode_EncodeUTF7	A							https://docs.python.org			<pre><code>
PyObject* PyUnicode_EncodeUTF7(const Py_UNICODE *s, Py_ssize_t size, int base64SetO, int base64WhiteSpace, const char *errors)</code></pre><br>Encode the Py_UNICODE buffer of the given size using UTF-7 and return a Python bytes object. Return NULL if an exception was raised by the codec.	https://docs.python.org/3.4/c-api/unicode.html#c.PyUnicode_EncodeUTF7
PyUnicode_DecodeUnicodeEscape	A							https://docs.python.org			<pre><code>
PyObject* PyUnicode_DecodeUnicodeEscape(const char *s, Py_ssize_t size, const char *errors)</code></pre><br>Create a Unicode object by decoding size bytes of the Unicode-Escape encoded string s. Return NULL if an exception was raised by the codec.	https://docs.python.org/3.4/c-api/unicode.html#c.PyUnicode_DecodeUnicodeEscape
PyUnicode_AsUnicodeEscapeString	A							https://docs.python.org			<pre><code>
PyObject* PyUnicode_AsUnicodeEscapeString(PyObject *unicode)</code></pre><br>Encode a Unicode object using Unicode-Escape and return the result as Python string object. Error handling is “strict”. Return NULL if an exception was raised by the codec.	https://docs.python.org/3.4/c-api/unicode.html#c.PyUnicode_AsUnicodeEscapeString
PyUnicode_EncodeUnicodeEscape	A							https://docs.python.org			<pre><code>
PyObject* PyUnicode_EncodeUnicodeEscape(const Py_UNICODE *s, Py_ssize_t size)</code></pre><br>Encode the Py_UNICODE buffer of the given size using Unicode-Escape and return a Python string object. Return NULL if an exception was raised by the codec.	https://docs.python.org/3.4/c-api/unicode.html#c.PyUnicode_EncodeUnicodeEscape
PyUnicode_DecodeRawUnicodeEscape	A							https://docs.python.org			<pre><code>
PyObject* PyUnicode_DecodeRawUnicodeEscape(const char *s, Py_ssize_t size, const char *errors)</code></pre><br>Create a Unicode object by decoding size bytes of the Raw-Unicode-Escape encoded string s. Return NULL if an exception was raised by the codec.	https://docs.python.org/3.4/c-api/unicode.html#c.PyUnicode_DecodeRawUnicodeEscape
PyUnicode_AsRawUnicodeEscapeString	A							https://docs.python.org			<pre><code>
PyObject* PyUnicode_AsRawUnicodeEscapeString(PyObject *unicode)</code></pre><br>Encode a Unicode object using Raw-Unicode-Escape and return the result as Python string object. Error handling is “strict”. Return NULL if an exception was raised by the codec.	https://docs.python.org/3.4/c-api/unicode.html#c.PyUnicode_AsRawUnicodeEscapeString
PyUnicode_EncodeRawUnicodeEscape	A							https://docs.python.org			<pre><code>
PyObject* PyUnicode_EncodeRawUnicodeEscape(const Py_UNICODE *s, Py_ssize_t size, const char *errors)</code></pre><br>Encode the Py_UNICODE buffer of the given size using Raw-Unicode-Escape and return a Python string object. Return NULL if an exception was raised by the codec.	https://docs.python.org/3.4/c-api/unicode.html#c.PyUnicode_EncodeRawUnicodeEscape
PyUnicode_DecodeLatin1	A							https://docs.python.org			<pre><code>
PyObject* PyUnicode_DecodeLatin1(const char *s, Py_ssize_t size, const char *errors)</code></pre><br>Create a Unicode object by decoding size bytes of the Latin-1 encoded string s. Return NULL if an exception was raised by the codec.	https://docs.python.org/3.4/c-api/unicode.html#c.PyUnicode_DecodeLatin1
PyUnicode_AsLatin1String	A							https://docs.python.org			<pre><code>
PyObject* PyUnicode_AsLatin1String(PyObject *unicode)</code></pre><br>Encode a Unicode object using Latin-1 and return the result as Python bytes object. Error handling is “strict”. Return NULL if an exception was raised by the codec.	https://docs.python.org/3.4/c-api/unicode.html#c.PyUnicode_AsLatin1String
PyUnicode_EncodeLatin1	A							https://docs.python.org			<pre><code>
PyObject* PyUnicode_EncodeLatin1(const Py_UNICODE *s, Py_ssize_t size, const char *errors)</code></pre><br>Encode the Py_UNICODE buffer of the given size using Latin-1 and return a Python bytes object. Return NULL if an exception was raised by the codec.	https://docs.python.org/3.4/c-api/unicode.html#c.PyUnicode_EncodeLatin1
PyUnicode_DecodeASCII	A							https://docs.python.org			<pre><code>
PyObject* PyUnicode_DecodeASCII(const char *s, Py_ssize_t size, const char *errors)</code></pre><br>Create a Unicode object by decoding size bytes of the ASCII encoded string s. Return NULL if an exception was raised by the codec.	https://docs.python.org/3.4/c-api/unicode.html#c.PyUnicode_DecodeASCII
PyUnicode_AsASCIIString	A							https://docs.python.org			<pre><code>
PyObject* PyUnicode_AsASCIIString(PyObject *unicode)</code></pre><br>Encode a Unicode object using ASCII and return the result as Python bytes object. Error handling is “strict”. Return NULL if an exception was raised by the codec.	https://docs.python.org/3.4/c-api/unicode.html#c.PyUnicode_AsASCIIString
PyUnicode_EncodeASCII	A							https://docs.python.org			<pre><code>
PyObject* PyUnicode_EncodeASCII(const Py_UNICODE *s, Py_ssize_t size, const char *errors)</code></pre><br>Encode the Py_UNICODE buffer of the given size using ASCII and return a Python bytes object. Return NULL if an exception was raised by the codec.	https://docs.python.org/3.4/c-api/unicode.html#c.PyUnicode_EncodeASCII
PyUnicode_DecodeCharmap	A							https://docs.python.org			<pre><code>
PyObject* PyUnicode_DecodeCharmap(const char *s, Py_ssize_t size, PyObject *mapping, const char *errors)</code></pre><br>Create a Unicode object by decoding size bytes of the encoded string s using the given mapping object. Return NULL if an exception was raised by the codec. If mapping is NULL latin-1 decoding will be done. Else it can be a dictionary mapping byte or a unicode string, which is treated as a lookup table. Byte values greater that the length of the string and U+FFFE “characters” are treated as “undefined mapping”.	https://docs.python.org/3.4/c-api/unicode.html#c.PyUnicode_DecodeCharmap
PyUnicode_AsCharmapString	A							https://docs.python.org			<pre><code>
PyObject* PyUnicode_AsCharmapString(PyObject *unicode, PyObject *mapping)</code></pre><br>Encode a Unicode object using the given mapping object and return the result as Python string object. Error handling is “strict”. Return NULL if an exception was raised by the codec.	https://docs.python.org/3.4/c-api/unicode.html#c.PyUnicode_AsCharmapString
PyUnicode_TranslateCharmap	A							https://docs.python.org			<pre><code>
PyObject* PyUnicode_TranslateCharmap(const Py_UNICODE *s, Py_ssize_t size, PyObject *table, const char *errors)</code></pre><br>Translate a Py_UNICODE buffer of the given size by applying a character mapping table to it and return the resulting Unicode object. Return NULL when an exception was raised by the codec.	https://docs.python.org/3.4/c-api/unicode.html#c.PyUnicode_TranslateCharmap
PyUnicode_EncodeCharmap	A							https://docs.python.org			<pre><code>
PyObject* PyUnicode_EncodeCharmap(const Py_UNICODE *s, Py_ssize_t size, PyObject *mapping, const char *errors)</code></pre><br>Encode the Py_UNICODE buffer of the given size using the given mapping object and return a Python string object. Return NULL if an exception was raised by the codec.	https://docs.python.org/3.4/c-api/unicode.html#c.PyUnicode_EncodeCharmap
PyUnicode_DecodeMBCS	A							https://docs.python.org			<pre><code>
PyObject* PyUnicode_DecodeMBCS(const char *s, Py_ssize_t size, const char *errors)</code></pre><br>Create a Unicode object by decoding size bytes of the MBCS encoded string s. Return NULL if an exception was raised by the codec.	https://docs.python.org/3.4/c-api/unicode.html#c.PyUnicode_DecodeMBCS
PyUnicode_DecodeMBCSStateful	A							https://docs.python.org			<pre><code>
PyObject* PyUnicode_DecodeMBCSStateful(const char *s, int size, const char *errors, int *consumed)</code></pre><br>If consumed is NULL, behave like PyUnicode_DecodeMBCS(). If consumed is not NULL, PyUnicode_DecodeMBCSStateful() will not decode trailing lead byte and the number of bytes that have been decoded will be stored in consumed.	https://docs.python.org/3.4/c-api/unicode.html#c.PyUnicode_DecodeMBCSStateful
PyUnicode_AsMBCSString	A							https://docs.python.org			<pre><code>
PyObject* PyUnicode_AsMBCSString(PyObject *unicode)</code></pre><br>Encode a Unicode object using MBCS and return the result as Python bytes object. Error handling is “strict”. Return NULL if an exception was raised by the codec.	https://docs.python.org/3.4/c-api/unicode.html#c.PyUnicode_AsMBCSString
PyUnicode_EncodeCodePage	A							https://docs.python.org			<pre><code>
PyObject* PyUnicode_EncodeCodePage(int code_page, PyObject *unicode, const char *errors)</code></pre><br>Encode the Unicode object using the specified code page and return a Python bytes object. Return NULL if an exception was raised by the codec. Use CP_ACP code page to get the MBCS encoder.	https://docs.python.org/3.4/c-api/unicode.html#c.PyUnicode_EncodeCodePage
PyUnicode_EncodeMBCS	A							https://docs.python.org			<pre><code>
PyObject* PyUnicode_EncodeMBCS(const Py_UNICODE *s, Py_ssize_t size, const char *errors)</code></pre><br>Encode the Py_UNICODE buffer of the given size using MBCS and return a Python bytes object. Return NULL if an exception was raised by the codec.	https://docs.python.org/3.4/c-api/unicode.html#c.PyUnicode_EncodeMBCS
PyUnicode_Concat	A							https://docs.python.org			<pre><code>
PyObject* PyUnicode_Concat(PyObject *left, PyObject *right)</code></pre><br>Concat two strings giving a new Unicode string.	https://docs.python.org/3.4/c-api/unicode.html#c.PyUnicode_Concat
PyUnicode_Split	A							https://docs.python.org			<pre><code>
PyObject* PyUnicode_Split(PyObject *s, PyObject *sep, Py_ssize_t maxsplit)</code></pre><br>Split a string giving a list of Unicode strings. If sep is NULL, splitting will be done at all whitespace substrings. Otherwise, splits occur at the given separator. At most maxsplit splits will be done. If negative, no limit is set. Separators are not included in the resulting list.	https://docs.python.org/3.4/c-api/unicode.html#c.PyUnicode_Split
PyUnicode_Splitlines	A							https://docs.python.org			<pre><code>
PyObject* PyUnicode_Splitlines(PyObject *s, int keepend)</code></pre><br>Split a Unicode string at line breaks, returning a list of Unicode strings. CRLF is considered to be one line break. If keepend is 0, the Line break characters are not included in the resulting strings.	https://docs.python.org/3.4/c-api/unicode.html#c.PyUnicode_Splitlines
PyUnicode_Translate	A							https://docs.python.org			<pre><code>
PyObject* PyUnicode_Translate(PyObject *str, PyObject *table, const char *errors)</code></pre><br>Translate a string by applying a character mapping table to it and return the resulting Unicode object.	https://docs.python.org/3.4/c-api/unicode.html#c.PyUnicode_Translate
PyUnicode_Join	A							https://docs.python.org			<pre><code>
PyObject* PyUnicode_Join(PyObject *separator, PyObject *seq)</code></pre><br>Join a sequence of strings using the given separator and return the resulting Unicode string.	https://docs.python.org/3.4/c-api/unicode.html#c.PyUnicode_Join
PyUnicode_Tailmatch	A							https://docs.python.org			<pre><code>
Py_ssize_t PyUnicode_Tailmatch(PyObject *str, PyObject *substr, Py_ssize_t start, Py_ssize_t end, int direction)</code></pre><br>Return 1 if substr matches str[start:end] at the given tail end (direction == -1 means to do a prefix match, direction == 1 a suffix match), 0 otherwise. Return -1 if an error occurred.	https://docs.python.org/3.4/c-api/unicode.html#c.PyUnicode_Tailmatch
PyUnicode_Find	A							https://docs.python.org			<pre><code>
Py_ssize_t PyUnicode_Find(PyObject *str, PyObject *substr, Py_ssize_t start, Py_ssize_t end, int direction)</code></pre><br>Return the first position of substr in str[start:end] using the given direction (direction == 1 means to do a forward search, direction == -1 a backward search). The return value is the index of the first match; a value of -1 indicates that no match was found, and -2 indicates that an error occurred and an exception has been set.	https://docs.python.org/3.4/c-api/unicode.html#c.PyUnicode_Find
PyUnicode_FindChar	A							https://docs.python.org			<pre><code>
Py_ssize_t PyUnicode_FindChar(PyObject *str, Py_UCS4 ch, Py_ssize_t start, Py_ssize_t end, int direction)</code></pre><br>Return the first position of the character ch in str[start:end] using the given direction (direction == 1 means to do a forward search, direction == -1 a backward search). The return value is the index of the first match; a value of -1 indicates that no match was found, and -2 indicates that an error occurred and an exception has been set.	https://docs.python.org/3.4/c-api/unicode.html#c.PyUnicode_FindChar
PyUnicode_Count	A							https://docs.python.org			<pre><code>
Py_ssize_t PyUnicode_Count(PyObject *str, PyObject *substr, Py_ssize_t start, Py_ssize_t end)</code></pre><br>Return the number of non-overlapping occurrences of substr in str[start:end]. Return -1 if an error occurred.	https://docs.python.org/3.4/c-api/unicode.html#c.PyUnicode_Count
PyUnicode_Replace	A							https://docs.python.org			<pre><code>
PyObject* PyUnicode_Replace(PyObject *str, PyObject *substr, PyObject *replstr, Py_ssize_t maxcount)</code></pre><br>Replace at most maxcount occurrences of substr in str with replstr and return the resulting Unicode object. maxcount == -1 means replace all occurrences.	https://docs.python.org/3.4/c-api/unicode.html#c.PyUnicode_Replace
PyUnicode_Compare	A							https://docs.python.org			<pre><code>
int PyUnicode_Compare(PyObject *left, PyObject *right)</code></pre><br>Compare two strings and return -1, 0, 1 for less than, equal, and greater than, respectively.	https://docs.python.org/3.4/c-api/unicode.html#c.PyUnicode_Compare
PyUnicode_CompareWithASCIIString	A							https://docs.python.org			<pre><code>
int PyUnicode_CompareWithASCIIString(PyObject *uni, const char *string)</code></pre><br>Compare a unicode object, uni, with string and return -1, 0, 1 for less than, equal, and greater than, respectively. It is best to pass only ASCII-encoded strings, but the function interprets the input string as ISO-8859-1 if it contains non-ASCII characters.	https://docs.python.org/3.4/c-api/unicode.html#c.PyUnicode_CompareWithASCIIString
PyUnicode_RichCompare	A							https://docs.python.org			<pre><code>
PyObject* PyUnicode_RichCompare(PyObject *left, PyObject *right, int op)</code></pre><br>Rich compare two unicode strings and return one of the following:	https://docs.python.org/3.4/c-api/unicode.html#c.PyUnicode_RichCompare
PyUnicode_Format	A							https://docs.python.org			<pre><code>
PyObject* PyUnicode_Format(PyObject *format, PyObject *args)</code></pre><br>Return a new string object from format and args; this is analogous to format % args.	https://docs.python.org/3.4/c-api/unicode.html#c.PyUnicode_Format
PyUnicode_Contains	A							https://docs.python.org			<pre><code>
int PyUnicode_Contains(PyObject *container, PyObject *element)</code></pre><br>Check whether element is contained in container and return true or false accordingly.	https://docs.python.org/3.4/c-api/unicode.html#c.PyUnicode_Contains
PyUnicode_InternInPlace	A							https://docs.python.org			<pre><code>
void PyUnicode_InternInPlace(PyObject **string)</code></pre><br>Intern the argument *string in place. The argument must be the address of a pointer variable pointing to a Python unicode string object. If there is an existing interned string that is the same as *string, it sets *string to it (decrementing the reference count of the old string object and incrementing the reference count of the interned string object), otherwise it leaves *string alone and interns it (incrementing its reference count). (Clarification: even though there is a lot of talk about reference counts, think of this function as reference-count-neutral; you own the object after the call if and only if you owned it before the call.)	https://docs.python.org/3.4/c-api/unicode.html#c.PyUnicode_InternInPlace
PyUnicode_InternFromString	A							https://docs.python.org			<pre><code>
PyObject* PyUnicode_InternFromString(const char *v)</code></pre><br>A combination of PyUnicode_FromString() and PyUnicode_InternInPlace(), returning either a new unicode string object that has been interned, or a new (“owned”) reference to an earlier interned string object with the same value.	https://docs.python.org/3.4/c-api/unicode.html#c.PyUnicode_InternFromString
Py_Main	A							https://docs.python.org			<pre><code>
int Py_Main(int argc, wchar_t **argv)</code></pre><br>The main program for the standard interpreter. This is made available for programs which embed Python. The argc and argv parameters should be prepared exactly as those which are passed to a C program’s main() function (converted to wchar_t according to the user’s locale). It is important to note that the argument list may be modified (but the contents of the strings pointed to by the argument list are not). The return value will be 0 if the interpreter exits normally (i.e., without an exception), 1 if the interpreter exits due to an exception, or 2 if the parameter list does not represent a valid Python command line.	https://docs.python.org/3.4/c-api/veryhigh.html#c.Py_Main
PyRun_AnyFile	A							https://docs.python.org			<pre><code>
int PyRun_AnyFile(FILE *fp, const char *filename)</code></pre><br>This is a simplified interface to PyRun_AnyFileExFlags() below, leaving closeit set to 0 and flags set to NULL.	https://docs.python.org/3.4/c-api/veryhigh.html#c.PyRun_AnyFile
PyRun_AnyFileFlags	A							https://docs.python.org			<pre><code>
int PyRun_AnyFileFlags(FILE *fp, const char *filename, PyCompilerFlags *flags)</code></pre><br>This is a simplified interface to PyRun_AnyFileExFlags() below, leaving the closeit argument set to 0.	https://docs.python.org/3.4/c-api/veryhigh.html#c.PyRun_AnyFileFlags
PyRun_AnyFileEx	A							https://docs.python.org			<pre><code>
int PyRun_AnyFileEx(FILE *fp, const char *filename, int closeit)</code></pre><br>This is a simplified interface to PyRun_AnyFileExFlags() below, leaving the flags argument set to NULL.	https://docs.python.org/3.4/c-api/veryhigh.html#c.PyRun_AnyFileEx
PyRun_AnyFileExFlags	A							https://docs.python.org			<pre><code>
int PyRun_AnyFileExFlags(FILE *fp, const char *filename, int closeit, PyCompilerFlags *flags)</code></pre><br>If fp refers to a file associated with an interactive device (console or terminal input or Unix pseudo-terminal), return the value of PyRun_InteractiveLoop(), otherwise return the result of PyRun_SimpleFile(). filename is decoded from the filesystem encoding (sys.getfilesystemencoding()). If filename is NULL, this function uses "???" as the filename.	https://docs.python.org/3.4/c-api/veryhigh.html#c.PyRun_AnyFileExFlags
PyRun_SimpleString	A							https://docs.python.org			<pre><code>
int PyRun_SimpleString(const char *command)</code></pre><br>This is a simplified interface to PyRun_SimpleStringFlags() below, leaving the PyCompilerFlags* argument set to NULL.	https://docs.python.org/3.4/c-api/veryhigh.html#c.PyRun_SimpleString
PyRun_SimpleStringFlags	A							https://docs.python.org			<pre><code>
int PyRun_SimpleStringFlags(const char *command, PyCompilerFlags *flags)</code></pre><br>Executes the Python source code from command in the __main__ module according to the flags argument. If __main__ does not already exist, it is created. Returns 0 on success or -1 if an exception was raised. If there was an error, there is no way to get the exception information. For the meaning of flags, see below.	https://docs.python.org/3.4/c-api/veryhigh.html#c.PyRun_SimpleStringFlags
PyRun_SimpleFile	A							https://docs.python.org			<pre><code>
int PyRun_SimpleFile(FILE *fp, const char *filename)</code></pre><br>This is a simplified interface to PyRun_SimpleFileExFlags() below, leaving closeit set to 0 and flags set to NULL.	https://docs.python.org/3.4/c-api/veryhigh.html#c.PyRun_SimpleFile
PyRun_SimpleFileEx	A							https://docs.python.org			<pre><code>
int PyRun_SimpleFileEx(FILE *fp, const char *filename, int closeit)</code></pre><br>This is a simplified interface to PyRun_SimpleFileExFlags() below, leaving flags set to NULL.	https://docs.python.org/3.4/c-api/veryhigh.html#c.PyRun_SimpleFileEx
PyRun_SimpleFileExFlags	A							https://docs.python.org			<pre><code>
int PyRun_SimpleFileExFlags(FILE *fp, const char *filename, int closeit, PyCompilerFlags *flags)</code></pre><br>Similar to PyRun_SimpleStringFlags(), but the Python source code is read from fp instead of an in-memory string. filename should be the name of the file, it is decoded from the filesystem encoding (sys.getfilesystemencoding()). If closeit is true, the file is closed before PyRun_SimpleFileExFlags returns.	https://docs.python.org/3.4/c-api/veryhigh.html#c.PyRun_SimpleFileExFlags
PyRun_InteractiveOne	A							https://docs.python.org			<pre><code>
int PyRun_InteractiveOne(FILE *fp, const char *filename)</code></pre><br>This is a simplified interface to PyRun_InteractiveOneFlags() below, leaving flags set to NULL.	https://docs.python.org/3.4/c-api/veryhigh.html#c.PyRun_InteractiveOne
PyRun_InteractiveOneFlags	A							https://docs.python.org			<pre><code>
int PyRun_InteractiveOneFlags(FILE *fp, const char *filename, PyCompilerFlags *flags)</code></pre><br>Read and execute a single statement from a file associated with an interactive device according to the flags argument. The user will be prompted using sys.ps1 and sys.ps2. filename is decoded from the filesystem encoding (sys.getfilesystemencoding()).	https://docs.python.org/3.4/c-api/veryhigh.html#c.PyRun_InteractiveOneFlags
PyRun_InteractiveLoop	A							https://docs.python.org			<pre><code>
int PyRun_InteractiveLoop(FILE *fp, const char *filename)</code></pre><br>This is a simplified interface to PyRun_InteractiveLoopFlags() below, leaving flags set to NULL.	https://docs.python.org/3.4/c-api/veryhigh.html#c.PyRun_InteractiveLoop
PyRun_InteractiveLoopFlags	A							https://docs.python.org			<pre><code>
int PyRun_InteractiveLoopFlags(FILE *fp, const char *filename, PyCompilerFlags *flags)</code></pre><br>Read and execute statements from a file associated with an interactive device until EOF is reached. The user will be prompted using sys.ps1 and sys.ps2. filename is decoded from the filesystem encoding (sys.getfilesystemencoding()). Returns 0 at EOF.	https://docs.python.org/3.4/c-api/veryhigh.html#c.PyRun_InteractiveLoopFlags
PyParser_SimpleParseString	A							https://docs.python.org			<pre><code>
struct _node* PyParser_SimpleParseString(const char *str, int start)</code></pre><br>This is a simplified interface to PyParser_SimpleParseStringFlagsFilename() below, leaving filename set to NULL and flags set to 0.	https://docs.python.org/3.4/c-api/veryhigh.html#c.PyParser_SimpleParseString
PyParser_SimpleParseStringFlags	A							https://docs.python.org			<pre><code>
struct _node* PyParser_SimpleParseStringFlags(const char *str, int start, int flags)</code></pre><br>This is a simplified interface to PyParser_SimpleParseStringFlagsFilename() below, leaving filename set to NULL.	https://docs.python.org/3.4/c-api/veryhigh.html#c.PyParser_SimpleParseStringFlags
PyParser_SimpleParseStringFlagsFilename	A							https://docs.python.org			<pre><code>
struct _node* PyParser_SimpleParseStringFlagsFilename(const char *str, const char *filename, int start, int flags)</code></pre><br>Parse Python source code from str using the start token start according to the flags argument. The result can be used to create a code object which can be evaluated efficiently. This is useful if a code fragment must be evaluated many times. filename is decoded from the filesystem encoding (sys.getfilesystemencoding()).	https://docs.python.org/3.4/c-api/veryhigh.html#c.PyParser_SimpleParseStringFlagsFilename
PyParser_SimpleParseFile	A							https://docs.python.org			<pre><code>
struct _node* PyParser_SimpleParseFile(FILE *fp, const char *filename, int start)</code></pre><br>This is a simplified interface to PyParser_SimpleParseFileFlags() below, leaving flags set to 0.	https://docs.python.org/3.4/c-api/veryhigh.html#c.PyParser_SimpleParseFile
PyParser_SimpleParseFileFlags	A							https://docs.python.org			<pre><code>
struct _node* PyParser_SimpleParseFileFlags(FILE *fp, const char *filename, int start, int flags)</code></pre><br>Similar to PyParser_SimpleParseStringFlagsFilename(), but the Python source code is read from fp instead of an in-memory string.	https://docs.python.org/3.4/c-api/veryhigh.html#c.PyParser_SimpleParseFileFlags
PyRun_String	A							https://docs.python.org			<pre><code>
PyObject* PyRun_String(const char *str, int start, PyObject *globals, PyObject *locals)</code></pre><br>This is a simplified interface to PyRun_StringFlags() below, leaving flags set to NULL.	https://docs.python.org/3.4/c-api/veryhigh.html#c.PyRun_String
PyRun_StringFlags	A							https://docs.python.org			<pre><code>
PyObject* PyRun_StringFlags(const char *str, int start, PyObject *globals, PyObject *locals, PyCompilerFlags *flags)</code></pre><br>Execute Python source code from str in the context specified by the dictionaries globals and locals with the compiler flags specified by flags. The parameter start specifies the start token that should be used to parse the source code.	https://docs.python.org/3.4/c-api/veryhigh.html#c.PyRun_StringFlags
PyRun_File	A							https://docs.python.org			<pre><code>
PyObject* PyRun_File(FILE *fp, const char *filename, int start, PyObject *globals, PyObject *locals)</code></pre><br>This is a simplified interface to PyRun_FileExFlags() below, leaving closeit set to 0 and flags set to NULL.	https://docs.python.org/3.4/c-api/veryhigh.html#c.PyRun_File
PyRun_FileEx	A							https://docs.python.org			<pre><code>
PyObject* PyRun_FileEx(FILE *fp, const char *filename, int start, PyObject *globals, PyObject *locals, int closeit)</code></pre><br>This is a simplified interface to PyRun_FileExFlags() below, leaving flags set to NULL.	https://docs.python.org/3.4/c-api/veryhigh.html#c.PyRun_FileEx
PyRun_FileFlags	A							https://docs.python.org			<pre><code>
PyObject* PyRun_FileFlags(FILE *fp, const char *filename, int start, PyObject *globals, PyObject *locals, PyCompilerFlags *flags)</code></pre><br>This is a simplified interface to PyRun_FileExFlags() below, leaving closeit set to 0.	https://docs.python.org/3.4/c-api/veryhigh.html#c.PyRun_FileFlags
PyRun_FileExFlags	A							https://docs.python.org			<pre><code>
PyObject* PyRun_FileExFlags(FILE *fp, const char *filename, int start, PyObject *globals, PyObject *locals, int closeit, PyCompilerFlags *flags)</code></pre><br>Similar to PyRun_StringFlags(), but the Python source code is read from fp instead of an in-memory string. filename should be the name of the file, it is decoded from the filesystem encoding (sys.getfilesystemencoding()). If closeit is true, the file is closed before PyRun_FileExFlags() returns.	https://docs.python.org/3.4/c-api/veryhigh.html#c.PyRun_FileExFlags
Py_CompileString	A							https://docs.python.org			<pre><code>
PyObject* Py_CompileString(const char *str, const char *filename, int start)</code></pre><br>This is a simplified interface to Py_CompileStringFlags() below, leaving flags set to NULL.	https://docs.python.org/3.4/c-api/veryhigh.html#c.Py_CompileString
Py_CompileStringFlags	A							https://docs.python.org			<pre><code>
PyObject* Py_CompileStringFlags(const char *str, const char *filename, int start, PyCompilerFlags *flags)</code></pre><br>This is a simplified interface to Py_CompileStringExFlags() below, with optimize set to -1.	https://docs.python.org/3.4/c-api/veryhigh.html#c.Py_CompileStringFlags
Py_CompileStringObject	A							https://docs.python.org			<pre><code>
PyObject* Py_CompileStringObject(const char *str, PyObject *filename, int start, PyCompilerFlags *flags, int optimize)</code></pre><br>Parse and compile the Python source code in str, returning the resulting code object. The start token is given by start; this can be used to constrain the code which can be compiled and should be Py_eval_input, Py_file_input, or Py_single_input. The filename specified by filename is used to construct the code object and may appear in tracebacks or SyntaxError exception messages. This returns NULL if the code cannot be parsed or compiled.	https://docs.python.org/3.4/c-api/veryhigh.html#c.Py_CompileStringObject
Py_CompileStringExFlags	A							https://docs.python.org			<pre><code>
PyObject* Py_CompileStringExFlags(const char *str, const char *filename, int start, PyCompilerFlags *flags, int optimize)</code></pre><br>Like Py_CompileStringExFlags(), but filename is a byte string decoded from the filesystem encoding (os.fsdecode()).	https://docs.python.org/3.4/c-api/veryhigh.html#c.Py_CompileStringExFlags
PyEval_EvalCode	A							https://docs.python.org			<pre><code>
PyObject* PyEval_EvalCode(PyObject *co, PyObject *globals, PyObject *locals)</code></pre><br>This is a simplified interface to PyEval_EvalCodeEx(), with just the code object, and the dictionaries of global and local variables. The other arguments are set to NULL.	https://docs.python.org/3.4/c-api/veryhigh.html#c.PyEval_EvalCode
PyEval_EvalCodeEx	A							https://docs.python.org			<pre><code>
PyObject* PyEval_EvalCodeEx(PyObject *co, PyObject *globals, PyObject *locals, PyObject **args, int argcount, PyObject **kws, int kwcount, PyObject **defs, int defcount, PyObject *closure)</code></pre><br>Evaluate a precompiled code object, given a particular environment for its evaluation. This environment consists of dictionaries of global and local variables, arrays of arguments, keywords and defaults, and a closure tuple of cells.	https://docs.python.org/3.4/c-api/veryhigh.html#c.PyEval_EvalCodeEx
PyEval_EvalFrame	A							https://docs.python.org			<pre><code>
PyObject* PyEval_EvalFrame(PyFrameObject *f)</code></pre><br>Evaluate an execution frame. This is a simplified interface to PyEval_EvalFrameEx, for backward compatibility.	https://docs.python.org/3.4/c-api/veryhigh.html#c.PyEval_EvalFrame
PyEval_EvalFrameEx	A							https://docs.python.org			<pre><code>
PyObject* PyEval_EvalFrameEx(PyFrameObject *f, int throwflag)</code></pre><br>This is the main, unvarnished function of Python interpretation. It is literally 2000 lines long. The code object associated with the execution frame f is executed, interpreting bytecode and executing calls as needed. The additional throwflag parameter can mostly be ignored - if true, then it causes an exception to immediately be thrown; this is used for the throw() methods of generator objects.	https://docs.python.org/3.4/c-api/veryhigh.html#c.PyEval_EvalFrameEx
PyEval_MergeCompilerFlags	A							https://docs.python.org			<pre><code>
int PyEval_MergeCompilerFlags(PyCompilerFlags *cf)</code></pre><br>This function changes the flags of the current evaluation frame, and returns true on success, false on failure.	https://docs.python.org/3.4/c-api/veryhigh.html#c.PyEval_MergeCompilerFlags
PyWeakref_Check	A							https://docs.python.org			<pre><code>
int PyWeakref_Check(ob)</code></pre><br>Return true if ob is either a reference or proxy object.	https://docs.python.org/3.4/c-api/weakref.html#c.PyWeakref_Check
PyWeakref_CheckRef	A							https://docs.python.org			<pre><code>
int PyWeakref_CheckRef(ob)</code></pre><br>Return true if ob is a reference object.	https://docs.python.org/3.4/c-api/weakref.html#c.PyWeakref_CheckRef
PyWeakref_CheckProxy	A							https://docs.python.org			<pre><code>
int PyWeakref_CheckProxy(ob)</code></pre><br>Return true if ob is a proxy object.	https://docs.python.org/3.4/c-api/weakref.html#c.PyWeakref_CheckProxy
PyWeakref_NewRef	A							https://docs.python.org			<pre><code>
PyObject* PyWeakref_NewRef(PyObject *ob, PyObject *callback)</code></pre><br>Return a weak reference object for the object ob. This will always return a new reference, but is not guaranteed to create a new object; an existing reference object may be returned. The second parameter, callback, can be a callable object that receives notification when ob is garbage collected; it should accept a single parameter, which will be the weak reference object itself. callback may also be None or NULL. If ob is not a weakly-referencable object, or if callback is not callable, None, or NULL, this will return NULL and raise TypeError.	https://docs.python.org/3.4/c-api/weakref.html#c.PyWeakref_NewRef
PyWeakref_NewProxy	A							https://docs.python.org			<pre><code>
PyObject* PyWeakref_NewProxy(PyObject *ob, PyObject *callback)</code></pre><br>Return a weak reference proxy object for the object ob. This will always return a new reference, but is not guaranteed to create a new object; an existing proxy object may be returned. The second parameter, callback, can be a callable object that receives notification when ob is garbage collected; it should accept a single parameter, which will be the weak reference object itself. callback may also be None or NULL. If ob is not a weakly-referencable object, or if callback is not callable, None, or NULL, this will return NULL and raise TypeError.	https://docs.python.org/3.4/c-api/weakref.html#c.PyWeakref_NewProxy
PyWeakref_GetObject	A							https://docs.python.org			<pre><code>
PyObject* PyWeakref_GetObject(PyObject *ref)</code></pre><br>Return the referenced object from a weak reference, ref. If the referent is no longer live, returns Py_None.	https://docs.python.org/3.4/c-api/weakref.html#c.PyWeakref_GetObject
PyWeakref_GET_OBJECT	A							https://docs.python.org			<pre><code>
PyObject* PyWeakref_GET_OBJECT(PyObject *ref)</code></pre><br>Similar to PyWeakref_GetObject(), but implemented as a macro that does no error checking.	https://docs.python.org/3.4/c-api/weakref.html#c.PyWeakref_GET_OBJECT
distutils.core setup	A							https://docs.python.org			<pre><code>
distutils.core.setup(arguments)</code></pre><br>The basic do-everything function that does most everything you could ever ask for from a Distutils method.	https://docs.python.org/3.4/distutils/apiref.html#distutils.core.setup
distutils.core run_setup	A							https://docs.python.org			<pre><code>
distutils.core.run_setup(script_name[, script_args=None, stop_after='run'])</code></pre><br>Run a setup script in a somewhat controlled environment, and return the distutils.dist.Distribution instance that drives things.  This is useful if you need to find out the distribution meta-data (passed as keyword args from script to setup()), or the contents of the config files or command-line.	https://docs.python.org/3.4/distutils/apiref.html#distutils.core.run_setup
distutils.ccompiler gen_lib_options	A							https://docs.python.org			<pre><code>
distutils.ccompiler.gen_lib_options(compiler, library_dirs, runtime_library_dirs, libraries)</code></pre><br>Generate linker options for searching library directories and linking with specific libraries. libraries and library_dirs are, respectively, lists of library names (not filenames!) and search directories. Returns a list of command-line options suitable for use with some compiler (depending on the two format strings passed in).	https://docs.python.org/3.4/distutils/apiref.html#distutils.ccompiler.gen_lib_options
distutils.ccompiler gen_preprocess_options	A							https://docs.python.org			<pre><code>
distutils.ccompiler.gen_preprocess_options(macros, include_dirs)</code></pre><br>Generate C pre-processor options (-D, -U, -I) as used by at least two types of compilers: the typical Unix compiler and Visual C++. macros is the usual thing, a list of 1- or 2-tuples, where (name,) means undefine (-U) macro name, and (name, value) means define (-D) macro name to value. include_dirs is just a list of directory names to be added to the header file search path (-I). Returns a list of command-line options suitable for either Unix compilers or Visual C++.	https://docs.python.org/3.4/distutils/apiref.html#distutils.ccompiler.gen_preprocess_options
distutils.ccompiler get_default_compiler	A							https://docs.python.org			<pre><code>
distutils.ccompiler.get_default_compiler(osname, platform)</code></pre><br>Determine the default compiler to use for the given platform.	https://docs.python.org/3.4/distutils/apiref.html#distutils.ccompiler.get_default_compiler
distutils.ccompiler new_compiler	A							https://docs.python.org			<pre><code>
distutils.ccompiler.new_compiler(plat=None, compiler=None, verbose=0, dry_run=0, force=0)</code></pre><br>Factory function to generate an instance of some CCompiler subclass for the supplied platform/compiler combination. plat defaults to os.name (eg. 'posix', 'nt'), and compiler defaults to the default compiler for that platform. Currently only 'posix' and 'nt' are supported, and the default compilers are “traditional Unix interface” (UnixCCompiler class) and Visual C++ (MSVCCompiler class). Note that it’s perfectly possible to ask for a Unix compiler object under Windows, and a Microsoft compiler object under Unix—if you supply a value for compiler, plat is ignored.	https://docs.python.org/3.4/distutils/apiref.html#distutils.ccompiler.new_compiler
distutils.ccompiler show_compilers	A							https://docs.python.org			<pre><code>
distutils.ccompiler.show_compilers()</code></pre><br>Print list of available compilers (used by the --help-compiler options to build, build_ext, build_clib).	https://docs.python.org/3.4/distutils/apiref.html#distutils.ccompiler.show_compilers
distutils.archive_util make_archive	A							https://docs.python.org			<pre><code>
distutils.archive_util.make_archive(base_name, format[, root_dir=None, base_dir=None, verbose=0, dry_run=0])</code></pre><br>Create an archive file (eg. zip or tar). base_name is the name of the file to create, minus any format-specific extension; format is the archive format: one of zip, tar, ztar, or gztar. root_dir is a directory that will be the root directory of the archive; ie. we typically chdir into root_dir before creating the archive. base_dir is the directory where we start archiving from; ie. base_dir will be the common prefix of all files and directories in the archive. root_dir and base_dir both default to the current directory. Returns the name of the archive file.	https://docs.python.org/3.4/distutils/apiref.html#distutils.archive_util.make_archive
distutils.archive_util make_tarball	A							https://docs.python.org			<pre><code>
distutils.archive_util.make_tarball(base_name, base_dir[, compress='gzip', verbose=0, dry_run=0])</code></pre><br>‘Create an (optional compressed) archive as a tar file from all files in and under base_dir. compress must be 'gzip' (the default), 'compress', 'bzip2', or None. Both tar and the compression utility named by compress must be on the default program search path, so this is probably Unix-specific. The output tar file will be named base_dir.tar, possibly plus the appropriate compression extension (.gz, .bz2 or .Z). Return the output filename.	https://docs.python.org/3.4/distutils/apiref.html#distutils.archive_util.make_tarball
distutils.archive_util make_zipfile	A							https://docs.python.org			<pre><code>
distutils.archive_util.make_zipfile(base_name, base_dir[, verbose=0, dry_run=0])</code></pre><br>Create a zip file from all files in and under base_dir. The output zip file will be named base_name + .zip. Uses either the zipfile Python module (if available) or the InfoZIP zip utility (if installed and found on the default search path). If neither tool is available, raises DistutilsExecError.  Returns the name of the output zip file.	https://docs.python.org/3.4/distutils/apiref.html#distutils.archive_util.make_zipfile
distutils.dep_util newer	A							https://docs.python.org			<pre><code>
distutils.dep_util.newer(source, target)</code></pre><br>Return true if source exists and is more recently modified than target, or if source exists and target doesn’t. Return false if both exist and target is the same age or newer than source. Raise DistutilsFileError if source does not exist.	https://docs.python.org/3.4/distutils/apiref.html#distutils.dep_util.newer
distutils.dep_util newer_pairwise	A							https://docs.python.org			<pre><code>
distutils.dep_util.newer_pairwise(sources, targets)</code></pre><br>Walk two filename lists in parallel, testing if each source is newer than its corresponding target. Return a pair of lists (sources, targets) where source is newer than target, according to the semantics of newer().	https://docs.python.org/3.4/distutils/apiref.html#distutils.dep_util.newer_pairwise
distutils.dep_util newer_group	A							https://docs.python.org			<pre><code>
distutils.dep_util.newer_group(sources, target[, missing='error'])</code></pre><br>Return true if target is out-of-date with respect to any file listed in sources In other words, if target exists and is newer than every file in sources, return false; otherwise return true. missing controls what we do when a source file is missing; the default ('error') is to blow up with an OSError from inside os.stat(); if it is 'ignore', we silently drop any missing source files; if it is 'newer', any missing source files make us assume that target is out-of-date (this is handy in “dry-run” mode: it’ll make you pretend to carry out commands that wouldn’t work because inputs are missing, but that doesn’t matter because you’re not actually going to run the commands).	https://docs.python.org/3.4/distutils/apiref.html#distutils.dep_util.newer_group
distutils.dir_util mkpath	A							https://docs.python.org			<pre><code>
distutils.dir_util.mkpath(name[, mode=0o777, verbose=0, dry_run=0])</code></pre><br>Create a directory and any missing ancestor directories. If the directory already exists (or if name is the empty string, which means the current directory, which of course exists), then do nothing. Raise DistutilsFileError if unable to create some directory along the way (eg. some sub-path exists, but is a file rather than a directory). If verbose is true, print a one-line summary of each mkdir to stdout. Return the list of directories actually created.	https://docs.python.org/3.4/distutils/apiref.html#distutils.dir_util.mkpath
distutils.dir_util create_tree	A							https://docs.python.org			<pre><code>
distutils.dir_util.create_tree(base_dir, files[, mode=0o777, verbose=0, dry_run=0])</code></pre><br>Create all the empty directories under base_dir needed to put files there. base_dir is just the name of a directory which doesn’t necessarily exist yet; files is a list of filenames to be interpreted relative to base_dir. base_dir + the directory portion of every file in files will be created if it doesn’t already exist. mode, verbose and dry_run flags are as for mkpath().	https://docs.python.org/3.4/distutils/apiref.html#distutils.dir_util.create_tree
distutils.dir_util copy_tree	A							https://docs.python.org			<pre><code>
distutils.dir_util.copy_tree(src, dst[, preserve_mode=1, preserve_times=1, preserve_symlinks=0, update=0, verbose=0, dry_run=0])</code></pre><br>Copy an entire directory tree src to a new location dst. Both src and dst must be directory names. If src is not a directory, raise DistutilsFileError. If dst does not exist, it is created with mkpath(). The end result of the copy is that every file in src is copied to dst, and directories under src are recursively copied to dst. Return the list of files that were copied or might have been copied, using their output name. The return value is unaffected by update or dry_run: it is simply the list of all files under src, with the names changed to be under dst.	https://docs.python.org/3.4/distutils/apiref.html#distutils.dir_util.copy_tree
distutils.dir_util remove_tree	A							https://docs.python.org			<pre><code>
distutils.dir_util.remove_tree(directory[, verbose=0, dry_run=0])</code></pre><br>Recursively remove directory and all files and directories underneath it. Any errors are ignored (apart from being reported to sys.stdout if verbose is true).	https://docs.python.org/3.4/distutils/apiref.html#distutils.dir_util.remove_tree
distutils.file_util copy_file	A							https://docs.python.org			<pre><code>
distutils.file_util.copy_file(src, dst[, preserve_mode=1, preserve_times=1, update=0, link=None, verbose=0, dry_run=0])</code></pre><br>Copy file src to dst. If dst is a directory, then src is copied there with the same name; otherwise, it must be a filename. (If the file exists, it will be ruthlessly clobbered.) If preserve_mode is true (the default), the file’s mode (type and permission bits, or whatever is analogous on the current platform) is copied. If preserve_times is true (the default), the last-modified and last-access times are copied as well. If update is true, src will only be copied if dst does not exist, or if dst does exist but is older than src.	https://docs.python.org/3.4/distutils/apiref.html#distutils.file_util.copy_file
distutils.file_util move_file	A							https://docs.python.org			<pre><code>
distutils.file_util.move_file(src, dst[, verbose, dry_run])</code></pre><br>Move file src to dst. If dst is a directory, the file will be moved into it with the same name; otherwise, src is just renamed to dst. Returns the new full name of the file.	https://docs.python.org/3.4/distutils/apiref.html#distutils.file_util.move_file
distutils.file_util write_file	A							https://docs.python.org			<pre><code>
distutils.file_util.write_file(filename, contents)</code></pre><br>Create a file called filename and write contents (a sequence of strings without line terminators) to it.	https://docs.python.org/3.4/distutils/apiref.html#distutils.file_util.write_file
distutils.util get_platform	A							https://docs.python.org			<pre><code>
distutils.util.get_platform()</code></pre><br>Return a string that identifies the current platform. This is used mainly to distinguish platform-specific build directories and platform-specific built distributions. Typically includes the OS name and version and the architecture (as supplied by ‘os.uname()’), although the exact information included depends on the OS; eg. for IRIX the architecture isn’t particularly important (IRIX only runs on SGI hardware), but for Linux the kernel version isn’t particularly important.	https://docs.python.org/3.4/distutils/apiref.html#distutils.util.get_platform
distutils.util convert_path	A							https://docs.python.org			<pre><code>
distutils.util.convert_path(pathname)</code></pre><br>Return ‘pathname’ as a name that will work on the native filesystem, i.e. split it on ‘/’ and put it back together again using the current directory separator. Needed because filenames in the setup script are always supplied in Unix style, and have to be converted to the local convention before we can actually use them in the filesystem. Raises ValueError on non-Unix-ish systems if pathname either starts or ends with a slash.	https://docs.python.org/3.4/distutils/apiref.html#distutils.util.convert_path
distutils.util change_root	A							https://docs.python.org			<pre><code>
distutils.util.change_root(new_root, pathname)</code></pre><br>Return pathname with new_root prepended. If pathname is relative, this is equivalent to os.path.join(new_root,pathname) Otherwise, it requires making pathname relative and then joining the two, which is tricky on DOS/Windows.	https://docs.python.org/3.4/distutils/apiref.html#distutils.util.change_root
distutils.util check_environ	A							https://docs.python.org			<pre><code>
distutils.util.check_environ()</code></pre><br>Ensure that ‘os.environ’ has all the environment variables we guarantee that users can use in config files, command-line options, etc. Currently this includes:	https://docs.python.org/3.4/distutils/apiref.html#distutils.util.check_environ
distutils.util subst_vars	A							https://docs.python.org			<pre><code>
distutils.util.subst_vars(s, local_vars)</code></pre><br>Perform shell/Perl-style variable substitution on s. Every occurrence of $ followed by a name is considered a variable, and variable is substituted by the value found in the local_vars dictionary, or in os.environ if it’s not in local_vars. os.environ is first checked/augmented to guarantee that it contains certain values: see check_environ(). Raise ValueError for any variables not found in either local_vars or os.environ.	https://docs.python.org/3.4/distutils/apiref.html#distutils.util.subst_vars
distutils.util split_quoted	A							https://docs.python.org			<pre><code>
distutils.util.split_quoted(s)</code></pre><br>Split a string up according to Unix shell-like rules for quotes and backslashes. In short: words are delimited by spaces, as long as those spaces are not escaped by a backslash, or inside a quoted string. Single and double quotes are equivalent, and the quote characters can be backslash-escaped. The backslash is stripped from any two-character escape sequence, leaving only the escaped character. The quote characters are stripped from any quoted string. Returns a list of words.	https://docs.python.org/3.4/distutils/apiref.html#distutils.util.split_quoted
distutils.util execute	A							https://docs.python.org			<pre><code>
distutils.util.execute(func, args[, msg=None, verbose=0, dry_run=0])</code></pre><br>Perform some action that affects the outside world (for instance, writing to the filesystem). Such actions are special because they are disabled by the dry_run flag. This method takes care of all that bureaucracy for you; all you have to do is supply the function to call and an argument tuple for it (to embody the “external action” being performed), and an optional message to print.	https://docs.python.org/3.4/distutils/apiref.html#distutils.util.execute
distutils.util strtobool	A							https://docs.python.org			<pre><code>
distutils.util.strtobool(val)</code></pre><br>Convert a string representation of truth to true (1) or false (0).	https://docs.python.org/3.4/distutils/apiref.html#distutils.util.strtobool
distutils.util byte_compile	A							https://docs.python.org			<pre><code>
distutils.util.byte_compile(py_files[, optimize=0, force=0, prefix=None, base_dir=None, verbose=1, dry_run=0, direct=None])</code></pre><br>Byte-compile a collection of Python source files to either .pyc or .pyo files in a __pycache__ subdirectory (see PEP 3147). py_files is a list of files to compile; any files that don’t end in .py are silently skipped. optimize must be one of the following:	https://docs.python.org/3.4/distutils/apiref.html#distutils.util.byte_compile
distutils.util rfc822_escape	A							https://docs.python.org			<pre><code>
distutils.util.rfc822_escape(header)</code></pre><br>Return a version of header escaped for inclusion in an RFC 822 header, by ensuring there are 8 spaces space after each newline. Note that it does no other modification of the string.	https://docs.python.org/3.4/distutils/apiref.html#distutils.util.rfc822_escape
distutils.fancy_getopt fancy_getopt	A							https://docs.python.org			<pre><code>
distutils.fancy_getopt.fancy_getopt(options, negative_opt, object, args)</code></pre><br>Wrapper function. options is a list of (long_option, short_option, help_string) 3-tuples as described in the constructor for FancyGetopt. negative_opt should be a dictionary mapping option names to option names, both the key and value should be in the options list. object is an object which will be used to store values (see the getopt() method of the FancyGetopt class). args is the argument list. Will use sys.argv[1:] if you pass None as args.	https://docs.python.org/3.4/distutils/apiref.html#distutils.fancy_getopt.fancy_getopt
distutils.fancy_getopt wrap_text	A							https://docs.python.org			<pre><code>
distutils.fancy_getopt.wrap_text(text, width)</code></pre><br>Wraps text to less than width wide.	https://docs.python.org/3.4/distutils/apiref.html#distutils.fancy_getopt.wrap_text
distutils.sysconfig get_config_var	A							https://docs.python.org			<pre><code>
distutils.sysconfig.get_config_var(name)</code></pre><br>Return the value of a single variable. This is equivalent to get_config_vars().get(name).	https://docs.python.org/3.4/distutils/apiref.html#distutils.sysconfig.get_config_var
distutils.sysconfig get_config_vars	A							https://docs.python.org			<pre><code>
distutils.sysconfig.get_config_vars(...)</code></pre><br>Return a set of variable definitions. If there are no arguments, this returns a dictionary mapping names of configuration variables to values. If arguments are provided, they should be strings, and the return value will be a sequence giving the associated values. If a given name does not have a corresponding value, None will be included for that variable.	https://docs.python.org/3.4/distutils/apiref.html#distutils.sysconfig.get_config_vars
distutils.sysconfig get_config_h_filename	A							https://docs.python.org			<pre><code>
distutils.sysconfig.get_config_h_filename()</code></pre><br>Return the full path name of the configuration header. For Unix, this will be the header generated by the configure script; for other platforms the header will have been supplied directly by the Python source distribution. The file is a platform-specific text file.	https://docs.python.org/3.4/distutils/apiref.html#distutils.sysconfig.get_config_h_filename
distutils.sysconfig get_makefile_filename	A							https://docs.python.org			<pre><code>
distutils.sysconfig.get_makefile_filename()</code></pre><br>Return the full path name of the Makefile used to build Python. For Unix, this will be a file generated by the configure script; the meaning for other platforms will vary. The file is a platform-specific text file, if it exists. This function is only useful on POSIX platforms.	https://docs.python.org/3.4/distutils/apiref.html#distutils.sysconfig.get_makefile_filename
distutils.sysconfig get_python_inc	A							https://docs.python.org			<pre><code>
distutils.sysconfig.get_python_inc([plat_specific[, prefix]])</code></pre><br>Return the directory for either the general or platform-dependent C include files. If plat_specific is true, the platform-dependent include directory is returned; if false or omitted, the platform-independent directory is returned. If prefix is given, it is used as either the prefix instead of PREFIX, or as the exec-prefix instead of EXEC_PREFIX if plat_specific is true.	https://docs.python.org/3.4/distutils/apiref.html#distutils.sysconfig.get_python_inc
distutils.sysconfig get_python_lib	A							https://docs.python.org			<pre><code>
distutils.sysconfig.get_python_lib([plat_specific[, standard_lib[, prefix]]])</code></pre><br>Return the directory for either the general or platform-dependent library installation. If plat_specific is true, the platform-dependent include directory is returned; if false or omitted, the platform-independent directory is returned. If prefix is given, it is used as either the prefix instead of PREFIX, or as the exec-prefix instead of EXEC_PREFIX if plat_specific is true. If standard_lib is true, the directory for the standard library is returned rather than the directory for the installation of third-party extensions.	https://docs.python.org/3.4/distutils/apiref.html#distutils.sysconfig.get_python_lib
distutils.sysconfig customize_compiler	A							https://docs.python.org			<pre><code>
distutils.sysconfig.customize_compiler(compiler)</code></pre><br>Do any platform-specific customization of a distutils.ccompiler.CCompiler instance.	https://docs.python.org/3.4/distutils/apiref.html#distutils.sysconfig.customize_compiler
distutils.sysconfig set_python_build	A							https://docs.python.org			<pre><code>
distutils.sysconfig.set_python_build()</code></pre><br>Inform the distutils.sysconfig module that it is being used as part of the build process for Python. This changes a lot of relative locations for files, allowing them to be located in the build area rather than in an installed Python.	https://docs.python.org/3.4/distutils/apiref.html#distutils.sysconfig.set_python_build
distutils.core setup	A							https://docs.python.org			<pre><code>
distutils.core.setup(arguments)</code></pre><br>The basic do-everything function that does most everything you could ever ask for from a Distutils method.	https://docs.python.org/3.4/distutils/apiref.html#distutils.core.setup
distutils.core run_setup	A							https://docs.python.org			<pre><code>
distutils.core.run_setup(script_name[, script_args=None, stop_after='run'])</code></pre><br>Run a setup script in a somewhat controlled environment, and return the distutils.dist.Distribution instance that drives things.  This is useful if you need to find out the distribution meta-data (passed as keyword args from script to setup()), or the contents of the config files or command-line.	https://docs.python.org/3.4/distutils/apiref.html#distutils.core.run_setup
distutils.ccompiler gen_lib_options	A							https://docs.python.org			<pre><code>
distutils.ccompiler.gen_lib_options(compiler, library_dirs, runtime_library_dirs, libraries)</code></pre><br>Generate linker options for searching library directories and linking with specific libraries. libraries and library_dirs are, respectively, lists of library names (not filenames!) and search directories. Returns a list of command-line options suitable for use with some compiler (depending on the two format strings passed in).	https://docs.python.org/3.4/distutils/apiref.html#distutils.ccompiler.gen_lib_options
distutils.ccompiler gen_preprocess_options	A							https://docs.python.org			<pre><code>
distutils.ccompiler.gen_preprocess_options(macros, include_dirs)</code></pre><br>Generate C pre-processor options (-D, -U, -I) as used by at least two types of compilers: the typical Unix compiler and Visual C++. macros is the usual thing, a list of 1- or 2-tuples, where (name,) means undefine (-U) macro name, and (name, value) means define (-D) macro name to value. include_dirs is just a list of directory names to be added to the header file search path (-I). Returns a list of command-line options suitable for either Unix compilers or Visual C++.	https://docs.python.org/3.4/distutils/apiref.html#distutils.ccompiler.gen_preprocess_options
distutils.ccompiler get_default_compiler	A							https://docs.python.org			<pre><code>
distutils.ccompiler.get_default_compiler(osname, platform)</code></pre><br>Determine the default compiler to use for the given platform.	https://docs.python.org/3.4/distutils/apiref.html#distutils.ccompiler.get_default_compiler
distutils.ccompiler new_compiler	A							https://docs.python.org			<pre><code>
distutils.ccompiler.new_compiler(plat=None, compiler=None, verbose=0, dry_run=0, force=0)</code></pre><br>Factory function to generate an instance of some CCompiler subclass for the supplied platform/compiler combination. plat defaults to os.name (eg. 'posix', 'nt'), and compiler defaults to the default compiler for that platform. Currently only 'posix' and 'nt' are supported, and the default compilers are “traditional Unix interface” (UnixCCompiler class) and Visual C++ (MSVCCompiler class). Note that it’s perfectly possible to ask for a Unix compiler object under Windows, and a Microsoft compiler object under Unix—if you supply a value for compiler, plat is ignored.	https://docs.python.org/3.4/distutils/apiref.html#distutils.ccompiler.new_compiler
distutils.ccompiler show_compilers	A							https://docs.python.org			<pre><code>
distutils.ccompiler.show_compilers()</code></pre><br>Print list of available compilers (used by the --help-compiler options to build, build_ext, build_clib).	https://docs.python.org/3.4/distutils/apiref.html#distutils.ccompiler.show_compilers
distutils.archive_util make_archive	A							https://docs.python.org			<pre><code>
distutils.archive_util.make_archive(base_name, format[, root_dir=None, base_dir=None, verbose=0, dry_run=0])</code></pre><br>Create an archive file (eg. zip or tar). base_name is the name of the file to create, minus any format-specific extension; format is the archive format: one of zip, tar, ztar, or gztar. root_dir is a directory that will be the root directory of the archive; ie. we typically chdir into root_dir before creating the archive. base_dir is the directory where we start archiving from; ie. base_dir will be the common prefix of all files and directories in the archive. root_dir and base_dir both default to the current directory. Returns the name of the archive file.	https://docs.python.org/3.4/distutils/apiref.html#distutils.archive_util.make_archive
distutils.archive_util make_tarball	A							https://docs.python.org			<pre><code>
distutils.archive_util.make_tarball(base_name, base_dir[, compress='gzip', verbose=0, dry_run=0])</code></pre><br>‘Create an (optional compressed) archive as a tar file from all files in and under base_dir. compress must be 'gzip' (the default), 'compress', 'bzip2', or None. Both tar and the compression utility named by compress must be on the default program search path, so this is probably Unix-specific. The output tar file will be named base_dir.tar, possibly plus the appropriate compression extension (.gz, .bz2 or .Z). Return the output filename.	https://docs.python.org/3.4/distutils/apiref.html#distutils.archive_util.make_tarball
distutils.archive_util make_zipfile	A							https://docs.python.org			<pre><code>
distutils.archive_util.make_zipfile(base_name, base_dir[, verbose=0, dry_run=0])</code></pre><br>Create a zip file from all files in and under base_dir. The output zip file will be named base_name + .zip. Uses either the zipfile Python module (if available) or the InfoZIP zip utility (if installed and found on the default search path). If neither tool is available, raises DistutilsExecError.  Returns the name of the output zip file.	https://docs.python.org/3.4/distutils/apiref.html#distutils.archive_util.make_zipfile
distutils.dep_util newer	A							https://docs.python.org			<pre><code>
distutils.dep_util.newer(source, target)</code></pre><br>Return true if source exists and is more recently modified than target, or if source exists and target doesn’t. Return false if both exist and target is the same age or newer than source. Raise DistutilsFileError if source does not exist.	https://docs.python.org/3.4/distutils/apiref.html#distutils.dep_util.newer
distutils.dep_util newer_pairwise	A							https://docs.python.org			<pre><code>
distutils.dep_util.newer_pairwise(sources, targets)</code></pre><br>Walk two filename lists in parallel, testing if each source is newer than its corresponding target. Return a pair of lists (sources, targets) where source is newer than target, according to the semantics of newer().	https://docs.python.org/3.4/distutils/apiref.html#distutils.dep_util.newer_pairwise
distutils.dep_util newer_group	A							https://docs.python.org			<pre><code>
distutils.dep_util.newer_group(sources, target[, missing='error'])</code></pre><br>Return true if target is out-of-date with respect to any file listed in sources In other words, if target exists and is newer than every file in sources, return false; otherwise return true. missing controls what we do when a source file is missing; the default ('error') is to blow up with an OSError from inside os.stat(); if it is 'ignore', we silently drop any missing source files; if it is 'newer', any missing source files make us assume that target is out-of-date (this is handy in “dry-run” mode: it’ll make you pretend to carry out commands that wouldn’t work because inputs are missing, but that doesn’t matter because you’re not actually going to run the commands).	https://docs.python.org/3.4/distutils/apiref.html#distutils.dep_util.newer_group
distutils.dir_util mkpath	A							https://docs.python.org			<pre><code>
distutils.dir_util.mkpath(name[, mode=0o777, verbose=0, dry_run=0])</code></pre><br>Create a directory and any missing ancestor directories. If the directory already exists (or if name is the empty string, which means the current directory, which of course exists), then do nothing. Raise DistutilsFileError if unable to create some directory along the way (eg. some sub-path exists, but is a file rather than a directory). If verbose is true, print a one-line summary of each mkdir to stdout. Return the list of directories actually created.	https://docs.python.org/3.4/distutils/apiref.html#distutils.dir_util.mkpath
distutils.dir_util create_tree	A							https://docs.python.org			<pre><code>
distutils.dir_util.create_tree(base_dir, files[, mode=0o777, verbose=0, dry_run=0])</code></pre><br>Create all the empty directories under base_dir needed to put files there. base_dir is just the name of a directory which doesn’t necessarily exist yet; files is a list of filenames to be interpreted relative to base_dir. base_dir + the directory portion of every file in files will be created if it doesn’t already exist. mode, verbose and dry_run flags are as for mkpath().	https://docs.python.org/3.4/distutils/apiref.html#distutils.dir_util.create_tree
distutils.dir_util copy_tree	A							https://docs.python.org			<pre><code>
distutils.dir_util.copy_tree(src, dst[, preserve_mode=1, preserve_times=1, preserve_symlinks=0, update=0, verbose=0, dry_run=0])</code></pre><br>Copy an entire directory tree src to a new location dst. Both src and dst must be directory names. If src is not a directory, raise DistutilsFileError. If dst does not exist, it is created with mkpath(). The end result of the copy is that every file in src is copied to dst, and directories under src are recursively copied to dst. Return the list of files that were copied or might have been copied, using their output name. The return value is unaffected by update or dry_run: it is simply the list of all files under src, with the names changed to be under dst.	https://docs.python.org/3.4/distutils/apiref.html#distutils.dir_util.copy_tree
distutils.dir_util remove_tree	A							https://docs.python.org			<pre><code>
distutils.dir_util.remove_tree(directory[, verbose=0, dry_run=0])</code></pre><br>Recursively remove directory and all files and directories underneath it. Any errors are ignored (apart from being reported to sys.stdout if verbose is true).	https://docs.python.org/3.4/distutils/apiref.html#distutils.dir_util.remove_tree
distutils.file_util copy_file	A							https://docs.python.org			<pre><code>
distutils.file_util.copy_file(src, dst[, preserve_mode=1, preserve_times=1, update=0, link=None, verbose=0, dry_run=0])</code></pre><br>Copy file src to dst. If dst is a directory, then src is copied there with the same name; otherwise, it must be a filename. (If the file exists, it will be ruthlessly clobbered.) If preserve_mode is true (the default), the file’s mode (type and permission bits, or whatever is analogous on the current platform) is copied. If preserve_times is true (the default), the last-modified and last-access times are copied as well. If update is true, src will only be copied if dst does not exist, or if dst does exist but is older than src.	https://docs.python.org/3.4/distutils/apiref.html#distutils.file_util.copy_file
distutils.file_util move_file	A							https://docs.python.org			<pre><code>
distutils.file_util.move_file(src, dst[, verbose, dry_run])</code></pre><br>Move file src to dst. If dst is a directory, the file will be moved into it with the same name; otherwise, src is just renamed to dst. Returns the new full name of the file.	https://docs.python.org/3.4/distutils/apiref.html#distutils.file_util.move_file
distutils.file_util write_file	A							https://docs.python.org			<pre><code>
distutils.file_util.write_file(filename, contents)</code></pre><br>Create a file called filename and write contents (a sequence of strings without line terminators) to it.	https://docs.python.org/3.4/distutils/apiref.html#distutils.file_util.write_file
distutils.util get_platform	A							https://docs.python.org			<pre><code>
distutils.util.get_platform()</code></pre><br>Return a string that identifies the current platform. This is used mainly to distinguish platform-specific build directories and platform-specific built distributions. Typically includes the OS name and version and the architecture (as supplied by ‘os.uname()’), although the exact information included depends on the OS; eg. for IRIX the architecture isn’t particularly important (IRIX only runs on SGI hardware), but for Linux the kernel version isn’t particularly important.	https://docs.python.org/3.4/distutils/apiref.html#distutils.util.get_platform
distutils.util convert_path	A							https://docs.python.org			<pre><code>
distutils.util.convert_path(pathname)</code></pre><br>Return ‘pathname’ as a name that will work on the native filesystem, i.e. split it on ‘/’ and put it back together again using the current directory separator. Needed because filenames in the setup script are always supplied in Unix style, and have to be converted to the local convention before we can actually use them in the filesystem. Raises ValueError on non-Unix-ish systems if pathname either starts or ends with a slash.	https://docs.python.org/3.4/distutils/apiref.html#distutils.util.convert_path
distutils.util change_root	A							https://docs.python.org			<pre><code>
distutils.util.change_root(new_root, pathname)</code></pre><br>Return pathname with new_root prepended. If pathname is relative, this is equivalent to os.path.join(new_root,pathname) Otherwise, it requires making pathname relative and then joining the two, which is tricky on DOS/Windows.	https://docs.python.org/3.4/distutils/apiref.html#distutils.util.change_root
distutils.util check_environ	A							https://docs.python.org			<pre><code>
distutils.util.check_environ()</code></pre><br>Ensure that ‘os.environ’ has all the environment variables we guarantee that users can use in config files, command-line options, etc. Currently this includes:	https://docs.python.org/3.4/distutils/apiref.html#distutils.util.check_environ
distutils.util subst_vars	A							https://docs.python.org			<pre><code>
distutils.util.subst_vars(s, local_vars)</code></pre><br>Perform shell/Perl-style variable substitution on s. Every occurrence of $ followed by a name is considered a variable, and variable is substituted by the value found in the local_vars dictionary, or in os.environ if it’s not in local_vars. os.environ is first checked/augmented to guarantee that it contains certain values: see check_environ(). Raise ValueError for any variables not found in either local_vars or os.environ.	https://docs.python.org/3.4/distutils/apiref.html#distutils.util.subst_vars
distutils.util split_quoted	A							https://docs.python.org			<pre><code>
distutils.util.split_quoted(s)</code></pre><br>Split a string up according to Unix shell-like rules for quotes and backslashes. In short: words are delimited by spaces, as long as those spaces are not escaped by a backslash, or inside a quoted string. Single and double quotes are equivalent, and the quote characters can be backslash-escaped. The backslash is stripped from any two-character escape sequence, leaving only the escaped character. The quote characters are stripped from any quoted string. Returns a list of words.	https://docs.python.org/3.4/distutils/apiref.html#distutils.util.split_quoted
distutils.util execute	A							https://docs.python.org			<pre><code>
distutils.util.execute(func, args[, msg=None, verbose=0, dry_run=0])</code></pre><br>Perform some action that affects the outside world (for instance, writing to the filesystem). Such actions are special because they are disabled by the dry_run flag. This method takes care of all that bureaucracy for you; all you have to do is supply the function to call and an argument tuple for it (to embody the “external action” being performed), and an optional message to print.	https://docs.python.org/3.4/distutils/apiref.html#distutils.util.execute
distutils.util strtobool	A							https://docs.python.org			<pre><code>
distutils.util.strtobool(val)</code></pre><br>Convert a string representation of truth to true (1) or false (0).	https://docs.python.org/3.4/distutils/apiref.html#distutils.util.strtobool
distutils.util byte_compile	A							https://docs.python.org			<pre><code>
distutils.util.byte_compile(py_files[, optimize=0, force=0, prefix=None, base_dir=None, verbose=1, dry_run=0, direct=None])</code></pre><br>Byte-compile a collection of Python source files to either .pyc or .pyo files in a __pycache__ subdirectory (see PEP 3147). py_files is a list of files to compile; any files that don’t end in .py are silently skipped. optimize must be one of the following:	https://docs.python.org/3.4/distutils/apiref.html#distutils.util.byte_compile
distutils.util rfc822_escape	A							https://docs.python.org			<pre><code>
distutils.util.rfc822_escape(header)</code></pre><br>Return a version of header escaped for inclusion in an RFC 822 header, by ensuring there are 8 spaces space after each newline. Note that it does no other modification of the string.	https://docs.python.org/3.4/distutils/apiref.html#distutils.util.rfc822_escape
distutils.fancy_getopt fancy_getopt	A							https://docs.python.org			<pre><code>
distutils.fancy_getopt.fancy_getopt(options, negative_opt, object, args)</code></pre><br>Wrapper function. options is a list of (long_option, short_option, help_string) 3-tuples as described in the constructor for FancyGetopt. negative_opt should be a dictionary mapping option names to option names, both the key and value should be in the options list. object is an object which will be used to store values (see the getopt() method of the FancyGetopt class). args is the argument list. Will use sys.argv[1:] if you pass None as args.	https://docs.python.org/3.4/distutils/apiref.html#distutils.fancy_getopt.fancy_getopt
distutils.fancy_getopt wrap_text	A							https://docs.python.org			<pre><code>
distutils.fancy_getopt.wrap_text(text, width)</code></pre><br>Wraps text to less than width wide.	https://docs.python.org/3.4/distutils/apiref.html#distutils.fancy_getopt.wrap_text
distutils.sysconfig get_config_var	A							https://docs.python.org			<pre><code>
distutils.sysconfig.get_config_var(name)</code></pre><br>Return the value of a single variable. This is equivalent to get_config_vars().get(name).	https://docs.python.org/3.4/distutils/apiref.html#distutils.sysconfig.get_config_var
distutils.sysconfig get_config_vars	A							https://docs.python.org			<pre><code>
distutils.sysconfig.get_config_vars(...)</code></pre><br>Return a set of variable definitions. If there are no arguments, this returns a dictionary mapping names of configuration variables to values. If arguments are provided, they should be strings, and the return value will be a sequence giving the associated values. If a given name does not have a corresponding value, None will be included for that variable.	https://docs.python.org/3.4/distutils/apiref.html#distutils.sysconfig.get_config_vars
distutils.sysconfig get_config_h_filename	A							https://docs.python.org			<pre><code>
distutils.sysconfig.get_config_h_filename()</code></pre><br>Return the full path name of the configuration header. For Unix, this will be the header generated by the configure script; for other platforms the header will have been supplied directly by the Python source distribution. The file is a platform-specific text file.	https://docs.python.org/3.4/distutils/apiref.html#distutils.sysconfig.get_config_h_filename
distutils.sysconfig get_makefile_filename	A							https://docs.python.org			<pre><code>
distutils.sysconfig.get_makefile_filename()</code></pre><br>Return the full path name of the Makefile used to build Python. For Unix, this will be a file generated by the configure script; the meaning for other platforms will vary. The file is a platform-specific text file, if it exists. This function is only useful on POSIX platforms.	https://docs.python.org/3.4/distutils/apiref.html#distutils.sysconfig.get_makefile_filename
distutils.sysconfig get_python_inc	A							https://docs.python.org			<pre><code>
distutils.sysconfig.get_python_inc([plat_specific[, prefix]])</code></pre><br>Return the directory for either the general or platform-dependent C include files. If plat_specific is true, the platform-dependent include directory is returned; if false or omitted, the platform-independent directory is returned. If prefix is given, it is used as either the prefix instead of PREFIX, or as the exec-prefix instead of EXEC_PREFIX if plat_specific is true.	https://docs.python.org/3.4/distutils/apiref.html#distutils.sysconfig.get_python_inc
distutils.sysconfig get_python_lib	A							https://docs.python.org			<pre><code>
distutils.sysconfig.get_python_lib([plat_specific[, standard_lib[, prefix]]])</code></pre><br>Return the directory for either the general or platform-dependent library installation. If plat_specific is true, the platform-dependent include directory is returned; if false or omitted, the platform-independent directory is returned. If prefix is given, it is used as either the prefix instead of PREFIX, or as the exec-prefix instead of EXEC_PREFIX if plat_specific is true. If standard_lib is true, the directory for the standard library is returned rather than the directory for the installation of third-party extensions.	https://docs.python.org/3.4/distutils/apiref.html#distutils.sysconfig.get_python_lib
distutils.sysconfig customize_compiler	A							https://docs.python.org			<pre><code>
distutils.sysconfig.customize_compiler(compiler)</code></pre><br>Do any platform-specific customization of a distutils.ccompiler.CCompiler instance.	https://docs.python.org/3.4/distutils/apiref.html#distutils.sysconfig.customize_compiler
distutils.sysconfig set_python_build	A							https://docs.python.org			<pre><code>
distutils.sysconfig.set_python_build()</code></pre><br>Inform the distutils.sysconfig module that it is being used as part of the build process for Python. This changes a lot of relative locations for files, allowing them to be located in the build area rather than in an installed Python.	https://docs.python.org/3.4/distutils/apiref.html#distutils.sysconfig.set_python_build
directory_created	A							https://docs.python.org			<pre><code>
directory_created(path)</code></pre><br>These functions should be called when a directory or file is created by the postinstall script at installation time. It will register path with the uninstaller, so that it will be removed when the distribution is uninstalled. To be safe, directories are only removed if they are empty.	https://docs.python.org/3.4/distutils/builtdist.html#directory_created
get_special_folder_path	A							https://docs.python.org			<pre><code>
get_special_folder_path(csidl_string)</code></pre><br>This function can be used to retrieve special folder locations on Windows like the Start Menu or the Desktop. It returns the full path to the folder. csidl_string must be one of the following strings:	https://docs.python.org/3.4/distutils/builtdist.html#get_special_folder_path
create_shortcut	A							https://docs.python.org			<pre><code>
create_shortcut(target, description, filename[, arguments[, workdir[, iconpath[, iconindex]]]])</code></pre><br>This function creates a shortcut. target is the path to the program to be started by the shortcut. description is the description of the shortcut. filename is the title of the shortcut that the user will see. arguments specifies the command line arguments, if any. workdir is the working directory for the program. iconpath is the file containing the icon for the shortcut, and iconindex is the index of the icon in the file iconpath. Again, for details consult the Microsoft documentation for the IShellLink interface.	https://docs.python.org/3.4/distutils/builtdist.html#create_shortcut
directory_created	A							https://docs.python.org			<pre><code>
directory_created(path)</code></pre><br>These functions should be called when a directory or file is created by the postinstall script at installation time. It will register path with the uninstaller, so that it will be removed when the distribution is uninstalled. To be safe, directories are only removed if they are empty.	https://docs.python.org/3.4/distutils/builtdist.html#directory_created
get_special_folder_path	A							https://docs.python.org			<pre><code>
get_special_folder_path(csidl_string)</code></pre><br>This function can be used to retrieve special folder locations on Windows like the Start Menu or the Desktop. It returns the full path to the folder. csidl_string must be one of the following strings:	https://docs.python.org/3.4/distutils/builtdist.html#get_special_folder_path
create_shortcut	A							https://docs.python.org			<pre><code>
create_shortcut(target, description, filename[, arguments[, workdir[, iconpath[, iconindex]]]])</code></pre><br>This function creates a shortcut. target is the path to the program to be started by the shortcut. description is the description of the shortcut. filename is the title of the shortcut that the user will see. arguments specifies the command line arguments, if any. workdir is the working directory for the program. iconpath is the file containing the icon for the shortcut, and iconindex is the index of the icon in the file iconpath. Again, for details consult the Microsoft documentation for the IShellLink interface.	https://docs.python.org/3.4/distutils/builtdist.html#create_shortcut
directory_created	A							https://docs.python.org			<pre><code>
directory_created(path)</code></pre><br>These functions should be called when a directory or file is created by the postinstall script at installation time. It will register path with the uninstaller, so that it will be removed when the distribution is uninstalled. To be safe, directories are only removed if they are empty.	https://docs.python.org/3.4/distutils/builtdist.html#directory_created
get_special_folder_path	A							https://docs.python.org			<pre><code>
get_special_folder_path(csidl_string)</code></pre><br>This function can be used to retrieve special folder locations on Windows like the Start Menu or the Desktop. It returns the full path to the folder. csidl_string must be one of the following strings:	https://docs.python.org/3.4/distutils/builtdist.html#get_special_folder_path
create_shortcut	A							https://docs.python.org			<pre><code>
create_shortcut(target, description, filename[, arguments[, workdir[, iconpath[, iconindex]]]])</code></pre><br>This function creates a shortcut. target is the path to the program to be started by the shortcut. description is the description of the shortcut. filename is the title of the shortcut that the user will see. arguments specifies the command line arguments, if any. workdir is the working directory for the program. iconpath is the file containing the icon for the shortcut, and iconindex is the index of the icon in the file iconpath. Again, for details consult the Microsoft documentation for the IShellLink interface.	https://docs.python.org/3.4/distutils/builtdist.html#create_shortcut
_thread start_new_thread	A							https://docs.python.org			<pre><code>
_thread.start_new_thread(function, args[, kwargs])</code></pre><br>Start a new thread and return its identifier. The thread executes the function function with the argument list args (which must be a tuple). The optional kwargs argument specifies a dictionary of keyword arguments. When the function returns, the thread silently exits. When the function terminates with an unhandled exception, a stack trace is printed and then the thread exits (but other threads continue to run).	https://docs.python.org/3.4/library/_thread.html#_thread.start_new_thread
_thread interrupt_main	A							https://docs.python.org			<pre><code>
_thread.interrupt_main()</code></pre><br>Raise a KeyboardInterrupt exception in the main thread. A subthread can use this function to interrupt the main thread.	https://docs.python.org/3.4/library/_thread.html#_thread.interrupt_main
_thread exit	A							https://docs.python.org			<pre><code>
_thread.exit()</code></pre><br>Raise the SystemExit exception. When not caught, this will cause the thread to exit silently.	https://docs.python.org/3.4/library/_thread.html#_thread.exit
_thread allocate_lock	A							https://docs.python.org			<pre><code>
_thread.allocate_lock()</code></pre><br>Return a new lock object. Methods of locks are described below. The lock is initially unlocked.	https://docs.python.org/3.4/library/_thread.html#_thread.allocate_lock
_thread get_ident	A							https://docs.python.org			<pre><code>
_thread.get_ident()</code></pre><br>Return the ‘thread identifier’ of the current thread. This is a nonzero integer. Its value has no direct meaning; it is intended as a magic cookie to be used e.g. to index a dictionary of thread-specific data. Thread identifiers may be recycled when a thread exits and another thread is created.	https://docs.python.org/3.4/library/_thread.html#_thread.get_ident
_thread stack_size	A							https://docs.python.org			<pre><code>
_thread.stack_size([size])</code></pre><br>Return the thread stack size used when creating new threads. The optional size argument specifies the stack size to be used for subsequently created threads, and must be 0 (use platform or configured default) or a positive integer value of at least 32,768 (32 KiB). If size is not specified, 0 is used. If changing the thread stack size is unsupported, a RuntimeError is raised. If the specified stack size is invalid, a ValueError is raised and the stack size is unmodified. 32 KiB is currently the minimum supported stack size value to guarantee sufficient stack space for the interpreter itself. Note that some platforms may have particular restrictions on values for the stack size, such as requiring a minimum stack size > 32 KiB or requiring allocation in multiples of the system memory page size - platform documentation should be referred to for more information (4 KiB pages are common; using multiples of 4096 for the stack size is the suggested approach in the absence of more specific information). Availability: Windows, systems with POSIX threads.	https://docs.python.org/3.4/library/_thread.html#_thread.stack_size
@ abstractmethod	A							https://docs.python.org			<pre><code>
@abc.abstractmethod</code></pre><br>A decorator indicating abstract methods.	https://docs.python.org/3.4/library/abc.html#abc.abstractmethod
@ abstractclassmethod	A							https://docs.python.org			<pre><code>
@abc.abstractclassmethod</code></pre><br>A subclass of the built-in classmethod(), indicating an abstract classmethod. Otherwise it is similar to abstractmethod().	https://docs.python.org/3.4/library/abc.html#abc.abstractclassmethod
@ abstractstaticmethod	A							https://docs.python.org			<pre><code>
@abc.abstractstaticmethod</code></pre><br>A subclass of the built-in staticmethod(), indicating an abstract staticmethod. Otherwise it is similar to abstractmethod().	https://docs.python.org/3.4/library/abc.html#abc.abstractstaticmethod
@ abstractproperty	A							https://docs.python.org			<pre><code>
@abc.abstractproperty(fget=None, fset=None, fdel=None, doc=None)</code></pre><br>A subclass of the built-in property(), indicating an abstract property.	https://docs.python.org/3.4/library/abc.html#abc.abstractproperty
abc get_cache_token	A							https://docs.python.org			<pre><code>
abc.get_cache_token()</code></pre><br>Returns the current abstract base class cache token.	https://docs.python.org/3.4/library/abc.html#abc.get_cache_token
aifc open	A							https://docs.python.org			<pre><code>
aifc.open(file, mode=None)</code></pre><br>Open an AIFF or AIFF-C file and return an object instance with methods that are described below. The argument file is either a string naming a file or a file object. mode must be 'r' or 'rb' when the file must be opened for reading, or 'w' or 'wb' when the file must be opened for writing. If omitted, file.mode is used if it exists, otherwise 'rb' is used. When used for writing, the file object should be seekable, unless you know ahead of time how many samples you are going to write in total and use writeframesraw() and setnframes(). The open() function may be used in a with statement. When the with block completes, the close() method is called.	https://docs.python.org/3.4/library/aifc.html#aifc.open
ast parse	A							https://docs.python.org			<pre><code>
ast.parse(source, filename='<unknown>', mode='exec')</code></pre><br>Parse the source into an AST node. Equivalent to compile(source, filename, mode, ast.PyCF_ONLY_AST).	https://docs.python.org/3.4/library/ast.html#ast.parse
ast literal_eval	A							https://docs.python.org			<pre><code>
ast.literal_eval(node_or_string)</code></pre><br>Safely evaluate an expression node or a string containing a Python literal or container display. The string or node provided may only consist of the following Python literal structures: strings, bytes, numbers, tuples, lists, dicts, sets, booleans, and None.	https://docs.python.org/3.4/library/ast.html#ast.literal_eval
ast get_docstring	A							https://docs.python.org			<pre><code>
ast.get_docstring(node, clean=True)</code></pre><br>Return the docstring of the given node (which must be a FunctionDef, ClassDef or Module node), or None if it has no docstring. If clean is true, clean up the docstring’s indentation with inspect.cleandoc().	https://docs.python.org/3.4/library/ast.html#ast.get_docstring
ast fix_missing_locations	A							https://docs.python.org			<pre><code>
ast.fix_missing_locations(node)</code></pre><br>When you compile a node tree with compile(), the compiler expects lineno and col_offset attributes for every node that supports them. This is rather tedious to fill in for generated nodes, so this helper adds these attributes recursively where not already set, by setting them to the values of the parent node. It works recursively starting at node.	https://docs.python.org/3.4/library/ast.html#ast.fix_missing_locations
ast increment_lineno	A							https://docs.python.org			<pre><code>
ast.increment_lineno(node, n=1)</code></pre><br>Increment the line number of each node in the tree starting at node by n. This is useful to “move code” to a different location in a file.	https://docs.python.org/3.4/library/ast.html#ast.increment_lineno
ast copy_location	A							https://docs.python.org			<pre><code>
ast.copy_location(new_node, old_node)</code></pre><br>Copy source location (lineno and col_offset) from old_node to new_node if possible, and return new_node.	https://docs.python.org/3.4/library/ast.html#ast.copy_location
ast iter_fields	A							https://docs.python.org			<pre><code>
ast.iter_fields(node)</code></pre><br>Yield a tuple of (fieldname, value) for each field in node._fields that is present on node.	https://docs.python.org/3.4/library/ast.html#ast.iter_fields
ast iter_child_nodes	A							https://docs.python.org			<pre><code>
ast.iter_child_nodes(node)</code></pre><br>Yield all direct child nodes of node, that is, all fields that are nodes and all items of fields that are lists of nodes.	https://docs.python.org/3.4/library/ast.html#ast.iter_child_nodes
ast walk	A							https://docs.python.org			<pre><code>
ast.walk(node)</code></pre><br>Recursively yield all descendant nodes in the tree starting at node (including node itself), in no specified order. This is useful if you only want to modify nodes in place and don’t care about the context.	https://docs.python.org/3.4/library/ast.html#ast.walk
ast dump	A							https://docs.python.org			<pre><code>
ast.dump(node, annotate_fields=True, include_attributes=False)</code></pre><br>Return a formatted dump of the tree in node. This is mainly useful for debugging purposes. The returned string will show the names and the values for fields. This makes the code impossible to evaluate, so if evaluation is wanted annotate_fields must be set to False. Attributes such as line numbers and column offsets are not dumped by default. If this is wanted, include_attributes can be set to True.	https://docs.python.org/3.4/library/ast.html#ast.dump
ast parse	A							https://docs.python.org			<pre><code>
ast.parse(source, filename='<unknown>', mode='exec')</code></pre><br>Parse the source into an AST node. Equivalent to compile(source, filename, mode, ast.PyCF_ONLY_AST).	https://docs.python.org/3.4/library/ast.html#ast.parse
ast literal_eval	A							https://docs.python.org			<pre><code>
ast.literal_eval(node_or_string)</code></pre><br>Safely evaluate an expression node or a string containing a Python literal or container display. The string or node provided may only consist of the following Python literal structures: strings, bytes, numbers, tuples, lists, dicts, sets, booleans, and None.	https://docs.python.org/3.4/library/ast.html#ast.literal_eval
ast get_docstring	A							https://docs.python.org			<pre><code>
ast.get_docstring(node, clean=True)</code></pre><br>Return the docstring of the given node (which must be a FunctionDef, ClassDef or Module node), or None if it has no docstring. If clean is true, clean up the docstring’s indentation with inspect.cleandoc().	https://docs.python.org/3.4/library/ast.html#ast.get_docstring
ast fix_missing_locations	A							https://docs.python.org			<pre><code>
ast.fix_missing_locations(node)</code></pre><br>When you compile a node tree with compile(), the compiler expects lineno and col_offset attributes for every node that supports them. This is rather tedious to fill in for generated nodes, so this helper adds these attributes recursively where not already set, by setting them to the values of the parent node. It works recursively starting at node.	https://docs.python.org/3.4/library/ast.html#ast.fix_missing_locations
ast increment_lineno	A							https://docs.python.org			<pre><code>
ast.increment_lineno(node, n=1)</code></pre><br>Increment the line number of each node in the tree starting at node by n. This is useful to “move code” to a different location in a file.	https://docs.python.org/3.4/library/ast.html#ast.increment_lineno
ast copy_location	A							https://docs.python.org			<pre><code>
ast.copy_location(new_node, old_node)</code></pre><br>Copy source location (lineno and col_offset) from old_node to new_node if possible, and return new_node.	https://docs.python.org/3.4/library/ast.html#ast.copy_location
ast iter_fields	A							https://docs.python.org			<pre><code>
ast.iter_fields(node)</code></pre><br>Yield a tuple of (fieldname, value) for each field in node._fields that is present on node.	https://docs.python.org/3.4/library/ast.html#ast.iter_fields
ast iter_child_nodes	A							https://docs.python.org			<pre><code>
ast.iter_child_nodes(node)</code></pre><br>Yield all direct child nodes of node, that is, all fields that are nodes and all items of fields that are lists of nodes.	https://docs.python.org/3.4/library/ast.html#ast.iter_child_nodes
ast walk	A							https://docs.python.org			<pre><code>
ast.walk(node)</code></pre><br>Recursively yield all descendant nodes in the tree starting at node (including node itself), in no specified order. This is useful if you only want to modify nodes in place and don’t care about the context.	https://docs.python.org/3.4/library/ast.html#ast.walk
ast dump	A							https://docs.python.org			<pre><code>
ast.dump(node, annotate_fields=True, include_attributes=False)</code></pre><br>Return a formatted dump of the tree in node. This is mainly useful for debugging purposes. The returned string will show the names and the values for fields. This makes the code impossible to evaluate, so if evaluation is wanted annotate_fields must be set to False. Attributes such as line numbers and column offsets are not dumped by default. If this is wanted, include_attributes can be set to True.	https://docs.python.org/3.4/library/ast.html#ast.dump
asyncio get_event_loop	A							https://docs.python.org			<pre><code>
asyncio.get_event_loop()</code></pre><br>Equivalent to calling get_event_loop_policy().get_event_loop().	https://docs.python.org/3.4/library/asyncio-eventloops.html#asyncio.get_event_loop
asyncio set_event_loop	A							https://docs.python.org			<pre><code>
asyncio.set_event_loop(loop)</code></pre><br>Equivalent to calling get_event_loop_policy().set_event_loop(loop).	https://docs.python.org/3.4/library/asyncio-eventloops.html#asyncio.set_event_loop
asyncio new_event_loop	A							https://docs.python.org			<pre><code>
asyncio.new_event_loop()</code></pre><br>Equivalent to calling get_event_loop_policy().new_event_loop().	https://docs.python.org/3.4/library/asyncio-eventloops.html#asyncio.new_event_loop
asyncio get_event_loop_policy	A							https://docs.python.org			<pre><code>
asyncio.get_event_loop_policy()</code></pre><br>Get the current event loop policy.	https://docs.python.org/3.4/library/asyncio-eventloops.html#asyncio.get_event_loop_policy
asyncio set_event_loop_policy	A							https://docs.python.org			<pre><code>
asyncio.set_event_loop_policy(policy)</code></pre><br>Set the current event loop policy. If policy is None, the default policy is restored.	https://docs.python.org/3.4/library/asyncio-eventloops.html#asyncio.set_event_loop_policy
asyncio get_event_loop	A							https://docs.python.org			<pre><code>
asyncio.get_event_loop()</code></pre><br>Equivalent to calling get_event_loop_policy().get_event_loop().	https://docs.python.org/3.4/library/asyncio-eventloops.html#asyncio.get_event_loop
asyncio set_event_loop	A							https://docs.python.org			<pre><code>
asyncio.set_event_loop(loop)</code></pre><br>Equivalent to calling get_event_loop_policy().set_event_loop(loop).	https://docs.python.org/3.4/library/asyncio-eventloops.html#asyncio.set_event_loop
asyncio new_event_loop	A							https://docs.python.org			<pre><code>
asyncio.new_event_loop()</code></pre><br>Equivalent to calling get_event_loop_policy().new_event_loop().	https://docs.python.org/3.4/library/asyncio-eventloops.html#asyncio.new_event_loop
asyncio get_event_loop_policy	A							https://docs.python.org			<pre><code>
asyncio.get_event_loop_policy()</code></pre><br>Get the current event loop policy.	https://docs.python.org/3.4/library/asyncio-eventloops.html#asyncio.get_event_loop_policy
asyncio set_event_loop_policy	A							https://docs.python.org			<pre><code>
asyncio.set_event_loop_policy(policy)</code></pre><br>Set the current event loop policy. If policy is None, the default policy is restored.	https://docs.python.org/3.4/library/asyncio-eventloops.html#asyncio.set_event_loop_policy
asyncio open_connection	A							https://docs.python.org			<pre><code>
coroutine asyncio.open_connection(host=None, port=None, *, loop=None, limit=None, **kwds)</code></pre><br>A wrapper for create_connection() returning a (reader, writer) pair.	https://docs.python.org/3.4/library/asyncio-stream.html#asyncio.open_connection
asyncio start_server	A							https://docs.python.org			<pre><code>
coroutine asyncio.start_server(client_connected_cb, host=None, port=None, *, loop=None, limit=None, **kwds)</code></pre><br>Start a socket server, with a callback for each client connected. The return value is the same as create_server().	https://docs.python.org/3.4/library/asyncio-stream.html#asyncio.start_server
asyncio open_unix_connection	A							https://docs.python.org			<pre><code>
coroutine asyncio.open_unix_connection(path=None, *, loop=None, limit=None, **kwds)</code></pre><br>A wrapper for create_unix_connection() returning a (reader, writer) pair.	https://docs.python.org/3.4/library/asyncio-stream.html#asyncio.open_unix_connection
asyncio start_unix_server	A							https://docs.python.org			<pre><code>
coroutine asyncio.start_unix_server(client_connected_cb, path=None, *, loop=None, limit=None, **kwds)</code></pre><br>Start a UNIX Domain Socket server, with a callback for each client connected.	https://docs.python.org/3.4/library/asyncio-stream.html#asyncio.start_unix_server
asyncio open_connection	A							https://docs.python.org			<pre><code>
coroutine asyncio.open_connection(host=None, port=None, *, loop=None, limit=None, **kwds)</code></pre><br>A wrapper for create_connection() returning a (reader, writer) pair.	https://docs.python.org/3.4/library/asyncio-stream.html#asyncio.open_connection
asyncio start_server	A							https://docs.python.org			<pre><code>
coroutine asyncio.start_server(client_connected_cb, host=None, port=None, *, loop=None, limit=None, **kwds)</code></pre><br>Start a socket server, with a callback for each client connected. The return value is the same as create_server().	https://docs.python.org/3.4/library/asyncio-stream.html#asyncio.start_server
asyncio open_unix_connection	A							https://docs.python.org			<pre><code>
coroutine asyncio.open_unix_connection(path=None, *, loop=None, limit=None, **kwds)</code></pre><br>A wrapper for create_unix_connection() returning a (reader, writer) pair.	https://docs.python.org/3.4/library/asyncio-stream.html#asyncio.open_unix_connection
asyncio start_unix_server	A							https://docs.python.org			<pre><code>
coroutine asyncio.start_unix_server(client_connected_cb, path=None, *, loop=None, limit=None, **kwds)</code></pre><br>Start a UNIX Domain Socket server, with a callback for each client connected.	https://docs.python.org/3.4/library/asyncio-stream.html#asyncio.start_unix_server
asyncio create_subprocess_exec	A							https://docs.python.org			<pre><code>
coroutine asyncio.create_subprocess_exec(*args, stdin=None, stdout=None, stderr=None, loop=None, limit=None, **kwds)</code></pre><br>Create a subprocess.	https://docs.python.org/3.4/library/asyncio-subprocess.html#asyncio.create_subprocess_exec
asyncio create_subprocess_shell	A							https://docs.python.org			<pre><code>
coroutine asyncio.create_subprocess_shell(cmd, stdin=None, stdout=None, stderr=None, loop=None, limit=None, **kwds)</code></pre><br>Run the shell command cmd.	https://docs.python.org/3.4/library/asyncio-subprocess.html#asyncio.create_subprocess_shell
asyncio create_subprocess_exec	A							https://docs.python.org			<pre><code>
coroutine asyncio.create_subprocess_exec(*args, stdin=None, stdout=None, stderr=None, loop=None, limit=None, **kwds)</code></pre><br>Create a subprocess.	https://docs.python.org/3.4/library/asyncio-subprocess.html#asyncio.create_subprocess_exec
asyncio create_subprocess_shell	A							https://docs.python.org			<pre><code>
coroutine asyncio.create_subprocess_shell(cmd, stdin=None, stdout=None, stderr=None, loop=None, limit=None, **kwds)</code></pre><br>Run the shell command cmd.	https://docs.python.org/3.4/library/asyncio-subprocess.html#asyncio.create_subprocess_shell
@ coroutine	A							https://docs.python.org			<pre><code>
@asyncio.coroutine</code></pre><br>Decorator to mark coroutines.	https://docs.python.org/3.4/library/asyncio-task.html#asyncio.coroutine
asyncio as_completed	A							https://docs.python.org			<pre><code>
asyncio.as_completed(fs, *, loop=None, timeout=None)</code></pre><br>Return an iterator whose values, when waited for, are Future instances.	https://docs.python.org/3.4/library/asyncio-task.html#asyncio.as_completed
asyncio ensure_future	A							https://docs.python.org			<pre><code>
asyncio.ensure_future(coro_or_future, *, loop=None)</code></pre><br>Schedule the execution of a coroutine object: wrap it in a future. Return a Task object.	https://docs.python.org/3.4/library/asyncio-task.html#asyncio.ensure_future
asyncio async	A							https://docs.python.org			<pre><code>
asyncio.async(coro_or_future, *, loop=None)</code></pre><br>A deprecated alias to ensure_future().	https://docs.python.org/3.4/library/asyncio-task.html#asyncio.async
asyncio gather	A							https://docs.python.org			<pre><code>
asyncio.gather(*coros_or_futures, loop=None, return_exceptions=False)</code></pre><br>Return a future aggregating results from the given coroutine objects or futures.	https://docs.python.org/3.4/library/asyncio-task.html#asyncio.gather
asyncio iscoroutine	A							https://docs.python.org			<pre><code>
asyncio.iscoroutine(obj)</code></pre><br>Return True if obj is a coroutine object.	https://docs.python.org/3.4/library/asyncio-task.html#asyncio.iscoroutine
asyncio iscoroutinefunction	A							https://docs.python.org			<pre><code>
asyncio.iscoroutinefunction(obj)</code></pre><br>Return True if func is a decorated coroutine function.	https://docs.python.org/3.4/library/asyncio-task.html#asyncio.iscoroutinefunction
asyncio run_coroutine_threadsafe	A							https://docs.python.org			<pre><code>
asyncio.run_coroutine_threadsafe(coro, loop)</code></pre><br>Submit a coroutine object to a given event loop.	https://docs.python.org/3.4/library/asyncio-task.html#asyncio.run_coroutine_threadsafe
asyncio sleep	A							https://docs.python.org			<pre><code>
coroutine asyncio.sleep(delay, result=None, *, loop=None)</code></pre><br>Create a coroutine that completes after a given time (in seconds). If result is provided, it is produced to the caller when the coroutine completes.	https://docs.python.org/3.4/library/asyncio-task.html#asyncio.sleep
asyncio shield	A							https://docs.python.org			<pre><code>
asyncio.shield(arg, *, loop=None)</code></pre><br>Wait for a future, shielding it from cancellation.	https://docs.python.org/3.4/library/asyncio-task.html#asyncio.shield
asyncio timeout	A							https://docs.python.org			<pre><code>
asyncio.timeout(timeout, *, loop=None)</code></pre><br>Return a context manager that cancels a block on timeout expiring:	https://docs.python.org/3.4/library/asyncio-task.html#asyncio.timeout
asyncio wait	A							https://docs.python.org			<pre><code>
coroutine asyncio.wait(futures, *, loop=None, timeout=None, return_when=ALL_COMPLETED)</code></pre><br>Wait for the Futures and coroutine objects given by the sequence futures to complete. Coroutines will be wrapped in Tasks. Returns two sets of Future: (done, pending).	https://docs.python.org/3.4/library/asyncio-task.html#asyncio.wait
asyncio wait_for	A							https://docs.python.org			<pre><code>
coroutine asyncio.wait_for(fut, timeout, *, loop=None)</code></pre><br>Wait for the single Future or coroutine object to complete with timeout. If timeout is None, block until the future completes.	https://docs.python.org/3.4/library/asyncio-task.html#asyncio.wait_for
@ coroutine	A							https://docs.python.org			<pre><code>
@asyncio.coroutine</code></pre><br>Decorator to mark coroutines.	https://docs.python.org/3.4/library/asyncio-task.html#asyncio.coroutine
asyncio as_completed	A							https://docs.python.org			<pre><code>
asyncio.as_completed(fs, *, loop=None, timeout=None)</code></pre><br>Return an iterator whose values, when waited for, are Future instances.	https://docs.python.org/3.4/library/asyncio-task.html#asyncio.as_completed
asyncio ensure_future	A							https://docs.python.org			<pre><code>
asyncio.ensure_future(coro_or_future, *, loop=None)</code></pre><br>Schedule the execution of a coroutine object: wrap it in a future. Return a Task object.	https://docs.python.org/3.4/library/asyncio-task.html#asyncio.ensure_future
asyncio async	A							https://docs.python.org			<pre><code>
asyncio.async(coro_or_future, *, loop=None)</code></pre><br>A deprecated alias to ensure_future().	https://docs.python.org/3.4/library/asyncio-task.html#asyncio.async
asyncio gather	A							https://docs.python.org			<pre><code>
asyncio.gather(*coros_or_futures, loop=None, return_exceptions=False)</code></pre><br>Return a future aggregating results from the given coroutine objects or futures.	https://docs.python.org/3.4/library/asyncio-task.html#asyncio.gather
asyncio iscoroutine	A							https://docs.python.org			<pre><code>
asyncio.iscoroutine(obj)</code></pre><br>Return True if obj is a coroutine object.	https://docs.python.org/3.4/library/asyncio-task.html#asyncio.iscoroutine
asyncio iscoroutinefunction	A							https://docs.python.org			<pre><code>
asyncio.iscoroutinefunction(obj)</code></pre><br>Return True if func is a decorated coroutine function.	https://docs.python.org/3.4/library/asyncio-task.html#asyncio.iscoroutinefunction
asyncio run_coroutine_threadsafe	A							https://docs.python.org			<pre><code>
asyncio.run_coroutine_threadsafe(coro, loop)</code></pre><br>Submit a coroutine object to a given event loop.	https://docs.python.org/3.4/library/asyncio-task.html#asyncio.run_coroutine_threadsafe
asyncio sleep	A							https://docs.python.org			<pre><code>
coroutine asyncio.sleep(delay, result=None, *, loop=None)</code></pre><br>Create a coroutine that completes after a given time (in seconds). If result is provided, it is produced to the caller when the coroutine completes.	https://docs.python.org/3.4/library/asyncio-task.html#asyncio.sleep
asyncio shield	A							https://docs.python.org			<pre><code>
asyncio.shield(arg, *, loop=None)</code></pre><br>Wait for a future, shielding it from cancellation.	https://docs.python.org/3.4/library/asyncio-task.html#asyncio.shield
asyncio timeout	A							https://docs.python.org			<pre><code>
asyncio.timeout(timeout, *, loop=None)</code></pre><br>Return a context manager that cancels a block on timeout expiring:	https://docs.python.org/3.4/library/asyncio-task.html#asyncio.timeout
asyncio wait	A							https://docs.python.org			<pre><code>
coroutine asyncio.wait(futures, *, loop=None, timeout=None, return_when=ALL_COMPLETED)</code></pre><br>Wait for the Futures and coroutine objects given by the sequence futures to complete. Coroutines will be wrapped in Tasks. Returns two sets of Future: (done, pending).	https://docs.python.org/3.4/library/asyncio-task.html#asyncio.wait
asyncio wait_for	A							https://docs.python.org			<pre><code>
coroutine asyncio.wait_for(fut, timeout, *, loop=None)</code></pre><br>Wait for the single Future or coroutine object to complete with timeout. If timeout is None, block until the future completes.	https://docs.python.org/3.4/library/asyncio-task.html#asyncio.wait_for
asyncore loop	A							https://docs.python.org			<pre><code>
asyncore.loop([timeout[, use_poll[, map[, count]]]])</code></pre><br>Enter a polling loop that terminates after count passes or all open channels have been closed. All arguments are optional. The count parameter defaults to None, resulting in the loop terminating only when all channels have been closed. The timeout argument sets the timeout parameter for the appropriate select() or poll() call, measured in seconds; the default is 30 seconds. The use_poll parameter, if true, indicates that poll() should be used in preference to select() (the default is False).	https://docs.python.org/3.4/library/asyncore.html#asyncore.loop
atexit register	A							https://docs.python.org			<pre><code>
atexit.register(func, *args, **kargs)</code></pre><br>Register func as a function to be executed at termination. Any optional arguments that are to be passed to func must be passed as arguments to register(). It is possible to register the same function and arguments more than once.	https://docs.python.org/3.4/library/atexit.html#atexit.register
atexit unregister	A							https://docs.python.org			<pre><code>
atexit.unregister(func)</code></pre><br>Remove func from the list of functions to be run at interpreter shutdown. After calling unregister(), func is guaranteed not to be called when the interpreter shuts down, even if it was registered more than once. unregister() silently does nothing if func was not previously registered.	https://docs.python.org/3.4/library/atexit.html#atexit.unregister
audioop add	A							https://docs.python.org			<pre><code>
audioop.add(fragment1, fragment2, width)</code></pre><br>Return a fragment which is the addition of the two samples passed as parameters. width is the sample width in bytes, either 1, 2, 3 or 4. Both fragments should have the same length. Samples are truncated in case of overflow.	https://docs.python.org/3.4/library/audioop.html#audioop.add
audioop adpcm2lin	A							https://docs.python.org			<pre><code>
audioop.adpcm2lin(adpcmfragment, width, state)</code></pre><br>Decode an Intel/DVI ADPCM coded fragment to a linear fragment. See the description of lin2adpcm() for details on ADPCM coding. Return a tuple (sample, newstate) where the sample has the width specified in width.	https://docs.python.org/3.4/library/audioop.html#audioop.adpcm2lin
audioop alaw2lin	A							https://docs.python.org			<pre><code>
audioop.alaw2lin(fragment, width)</code></pre><br>Convert sound fragments in a-LAW encoding to linearly encoded sound fragments. a-LAW encoding always uses 8 bits samples, so width refers only to the sample width of the output fragment here.	https://docs.python.org/3.4/library/audioop.html#audioop.alaw2lin
audioop avg	A							https://docs.python.org			<pre><code>
audioop.avg(fragment, width)</code></pre><br>Return the average over all samples in the fragment.	https://docs.python.org/3.4/library/audioop.html#audioop.avg
audioop avgpp	A							https://docs.python.org			<pre><code>
audioop.avgpp(fragment, width)</code></pre><br>Return the average peak-peak value over all samples in the fragment. No filtering is done, so the usefulness of this routine is questionable.	https://docs.python.org/3.4/library/audioop.html#audioop.avgpp
audioop bias	A							https://docs.python.org			<pre><code>
audioop.bias(fragment, width, bias)</code></pre><br>Return a fragment that is the original fragment with a bias added to each sample. Samples wrap around in case of overflow.	https://docs.python.org/3.4/library/audioop.html#audioop.bias
audioop byteswap	A							https://docs.python.org			<pre><code>
audioop.byteswap(fragment, width)</code></pre><br>“Byteswap” all samples in a fragment and returns the modified fragment. Converts big-endian samples to little-endian and vice versa.	https://docs.python.org/3.4/library/audioop.html#audioop.byteswap
audioop cross	A							https://docs.python.org			<pre><code>
audioop.cross(fragment, width)</code></pre><br>Return the number of zero crossings in the fragment passed as an argument.	https://docs.python.org/3.4/library/audioop.html#audioop.cross
audioop findfactor	A							https://docs.python.org			<pre><code>
audioop.findfactor(fragment, reference)</code></pre><br>Return a factor F such that rms(add(fragment, mul(reference, -F))) is minimal, i.e., return the factor with which you should multiply reference to make it match as well as possible to fragment. The fragments should both contain 2-byte samples.	https://docs.python.org/3.4/library/audioop.html#audioop.findfactor
audioop findfit	A							https://docs.python.org			<pre><code>
audioop.findfit(fragment, reference)</code></pre><br>Try to match reference as well as possible to a portion of fragment (which should be the longer fragment). This is (conceptually) done by taking slices out of fragment, using findfactor() to compute the best match, and minimizing the result. The fragments should both contain 2-byte samples. Return a tuple (offset, factor) where offset is the (integer) offset into fragment where the optimal match started and factor is the (floating-point) factor as per findfactor().	https://docs.python.org/3.4/library/audioop.html#audioop.findfit
audioop findmax	A							https://docs.python.org			<pre><code>
audioop.findmax(fragment, length)</code></pre><br>Search fragment for a slice of length length samples (not bytes!) with maximum energy, i.e., return i for which rms(fragment[i*2:(i+length)*2]) is maximal. The fragments should both contain 2-byte samples.	https://docs.python.org/3.4/library/audioop.html#audioop.findmax
audioop getsample	A							https://docs.python.org			<pre><code>
audioop.getsample(fragment, width, index)</code></pre><br>Return the value of sample index from the fragment.	https://docs.python.org/3.4/library/audioop.html#audioop.getsample
audioop lin2adpcm	A							https://docs.python.org			<pre><code>
audioop.lin2adpcm(fragment, width, state)</code></pre><br>Convert samples to 4 bit Intel/DVI ADPCM encoding. ADPCM coding is an adaptive coding scheme, whereby each 4 bit number is the difference between one sample and the next, divided by a (varying) step. The Intel/DVI ADPCM algorithm has been selected for use by the IMA, so it may well become a standard.	https://docs.python.org/3.4/library/audioop.html#audioop.lin2adpcm
audioop lin2alaw	A							https://docs.python.org			<pre><code>
audioop.lin2alaw(fragment, width)</code></pre><br>Convert samples in the audio fragment to a-LAW encoding and return this as a bytes object. a-LAW is an audio encoding format whereby you get a dynamic range of about 13 bits using only 8 bit samples. It is used by the Sun audio hardware, among others.	https://docs.python.org/3.4/library/audioop.html#audioop.lin2alaw
audioop lin2lin	A							https://docs.python.org			<pre><code>
audioop.lin2lin(fragment, width, newwidth)</code></pre><br>Convert samples between 1-, 2-, 3- and 4-byte formats.	https://docs.python.org/3.4/library/audioop.html#audioop.lin2lin
audioop lin2ulaw	A							https://docs.python.org			<pre><code>
audioop.lin2ulaw(fragment, width)</code></pre><br>Convert samples in the audio fragment to u-LAW encoding and return this as a bytes object. u-LAW is an audio encoding format whereby you get a dynamic range of about 14 bits using only 8 bit samples. It is used by the Sun audio hardware, among others.	https://docs.python.org/3.4/library/audioop.html#audioop.lin2ulaw
audioop max	A							https://docs.python.org			<pre><code>
audioop.max(fragment, width)</code></pre><br>Return the maximum of the absolute value of all samples in a fragment.	https://docs.python.org/3.4/library/audioop.html#audioop.max
audioop maxpp	A							https://docs.python.org			<pre><code>
audioop.maxpp(fragment, width)</code></pre><br>Return the maximum peak-peak value in the sound fragment.	https://docs.python.org/3.4/library/audioop.html#audioop.maxpp
audioop minmax	A							https://docs.python.org			<pre><code>
audioop.minmax(fragment, width)</code></pre><br>Return a tuple consisting of the minimum and maximum values of all samples in the sound fragment.	https://docs.python.org/3.4/library/audioop.html#audioop.minmax
audioop mul	A							https://docs.python.org			<pre><code>
audioop.mul(fragment, width, factor)</code></pre><br>Return a fragment that has all samples in the original fragment multiplied by the floating-point value factor. Samples are truncated in case of overflow.	https://docs.python.org/3.4/library/audioop.html#audioop.mul
audioop ratecv	A							https://docs.python.org			<pre><code>
audioop.ratecv(fragment, width, nchannels, inrate, outrate, state[, weightA[, weightB]])</code></pre><br>Convert the frame rate of the input fragment.	https://docs.python.org/3.4/library/audioop.html#audioop.ratecv
audioop reverse	A							https://docs.python.org			<pre><code>
audioop.reverse(fragment, width)</code></pre><br>Reverse the samples in a fragment and returns the modified fragment.	https://docs.python.org/3.4/library/audioop.html#audioop.reverse
audioop rms	A							https://docs.python.org			<pre><code>
audioop.rms(fragment, width)</code></pre><br>Return the root-mean-square of the fragment, i.e. sqrt(sum(S_i^2)/n).	https://docs.python.org/3.4/library/audioop.html#audioop.rms
audioop tomono	A							https://docs.python.org			<pre><code>
audioop.tomono(fragment, width, lfactor, rfactor)</code></pre><br>Convert a stereo fragment to a mono fragment. The left channel is multiplied by lfactor and the right channel by rfactor before adding the two channels to give a mono signal.	https://docs.python.org/3.4/library/audioop.html#audioop.tomono
audioop tostereo	A							https://docs.python.org			<pre><code>
audioop.tostereo(fragment, width, lfactor, rfactor)</code></pre><br>Generate a stereo fragment from a mono fragment. Each pair of samples in the stereo fragment are computed from the mono sample, whereby left channel samples are multiplied by lfactor and right channel samples by rfactor.	https://docs.python.org/3.4/library/audioop.html#audioop.tostereo
audioop ulaw2lin	A							https://docs.python.org			<pre><code>
audioop.ulaw2lin(fragment, width)</code></pre><br>Convert sound fragments in u-LAW encoding to linearly encoded sound fragments. u-LAW encoding always uses 8 bits samples, so width refers only to the sample width of the output fragment here.	https://docs.python.org/3.4/library/audioop.html#audioop.ulaw2lin
base64 b64encode	A							https://docs.python.org			<pre><code>
base64.b64encode(s, altchars=None)</code></pre><br>Encode a byte string using Base64.	https://docs.python.org/3.4/library/base64.html#base64.b64encode
base64 b64decode	A							https://docs.python.org			<pre><code>
base64.b64decode(s, altchars=None, validate=False)</code></pre><br>Decode a Base64 encoded byte string.	https://docs.python.org/3.4/library/base64.html#base64.b64decode
base64 standard_b64encode	A							https://docs.python.org			<pre><code>
base64.standard_b64encode(s)</code></pre><br>Encode byte string s using the standard Base64 alphabet.	https://docs.python.org/3.4/library/base64.html#base64.standard_b64encode
base64 standard_b64decode	A							https://docs.python.org			<pre><code>
base64.standard_b64decode(s)</code></pre><br>Decode byte string s using the standard Base64 alphabet.	https://docs.python.org/3.4/library/base64.html#base64.standard_b64decode
base64 urlsafe_b64encode	A							https://docs.python.org			<pre><code>
base64.urlsafe_b64encode(s)</code></pre><br>Encode byte string s using a URL-safe alphabet, which substitutes - instead of + and _ instead of / in the standard Base64 alphabet. The result can still contain =.	https://docs.python.org/3.4/library/base64.html#base64.urlsafe_b64encode
base64 urlsafe_b64decode	A							https://docs.python.org			<pre><code>
base64.urlsafe_b64decode(s)</code></pre><br>Decode byte string s using a URL-safe alphabet, which substitutes - instead of + and _ instead of / in the standard Base64 alphabet.	https://docs.python.org/3.4/library/base64.html#base64.urlsafe_b64decode
base64 b32encode	A							https://docs.python.org			<pre><code>
base64.b32encode(s)</code></pre><br>Encode a byte string using Base32. s is the string to encode. The encoded string is returned.	https://docs.python.org/3.4/library/base64.html#base64.b32encode
base64 b32decode	A							https://docs.python.org			<pre><code>
base64.b32decode(s, casefold=False, map01=None)</code></pre><br>Decode a Base32 encoded byte string.	https://docs.python.org/3.4/library/base64.html#base64.b32decode
base64 b16encode	A							https://docs.python.org			<pre><code>
base64.b16encode(s)</code></pre><br>Encode a byte string using Base16.	https://docs.python.org/3.4/library/base64.html#base64.b16encode
base64 b16decode	A							https://docs.python.org			<pre><code>
base64.b16decode(s, casefold=False)</code></pre><br>Decode a Base16 encoded byte string.	https://docs.python.org/3.4/library/base64.html#base64.b16decode
base64 a85encode	A							https://docs.python.org			<pre><code>
base64.a85encode(s, *, foldspaces=False, wrapcol=0, pad=False, adobe=False)</code></pre><br>Encode a byte string using Ascii85.	https://docs.python.org/3.4/library/base64.html#base64.a85encode
base64 a85decode	A							https://docs.python.org			<pre><code>
base64.a85decode(s, *, foldspaces=False, adobe=False, ignorechars=b' \t\n\r\v')</code></pre><br>Decode an Ascii85 encoded byte string.	https://docs.python.org/3.4/library/base64.html#base64.a85decode
base64 b85encode	A							https://docs.python.org			<pre><code>
base64.b85encode(s, pad=False)</code></pre><br>Encode a byte string using base85, as used in e.g. git-style binary diffs.	https://docs.python.org/3.4/library/base64.html#base64.b85encode
base64 b85decode	A							https://docs.python.org			<pre><code>
base64.b85decode(b)</code></pre><br>Decode base85-encoded byte string. Padding is implicitly removed, if necessary.	https://docs.python.org/3.4/library/base64.html#base64.b85decode
base64 decode	A							https://docs.python.org			<pre><code>
base64.decode(input, output)</code></pre><br>Decode the contents of the binary input file and write the resulting binary data to the output file. input and output must be file objects. input will be read until input.read() returns an empty bytes object.	https://docs.python.org/3.4/library/base64.html#base64.decode
base64 decodebytes	A							https://docs.python.org			<pre><code>
base64.decodebytes(s)</code></pre><br>Decode the byte string s, which must contain one or more lines of base64 encoded data, and return a byte string containing the resulting binary data. decodestring is a deprecated alias.	https://docs.python.org/3.4/library/base64.html#base64.decodebytes
base64 encode	A							https://docs.python.org			<pre><code>
base64.encode(input, output)</code></pre><br>Encode the contents of the binary input file and write the resulting base64 encoded data to the output file. input and output must be file objects. input will be read until input.read() returns an empty bytes object. encode() returns the encoded data plus a trailing newline character (b'\n').	https://docs.python.org/3.4/library/base64.html#base64.encode
base64 encodebytes	A							https://docs.python.org			<pre><code>
base64.encodebytes(s)</code></pre><br>Encode the byte string s, which can contain arbitrary binary data, and return a byte string containing one or more lines of base64-encoded data. encodebytes() returns a string containing one or more lines of base64-encoded data always including an extra trailing newline (b'\n'). encodestring is a deprecated alias.	https://docs.python.org/3.4/library/base64.html#base64.encodebytes
bdb checkfuncname	A							https://docs.python.org			<pre><code>
bdb.checkfuncname(b, frame)</code></pre><br>Check whether we should break here, depending on the way the breakpoint b was set.	https://docs.python.org/3.4/library/bdb.html#bdb.checkfuncname
bdb effective	A							https://docs.python.org			<pre><code>
bdb.effective(file, line, frame)</code></pre><br>Determine if there is an effective (active) breakpoint at this line of code. Return a tuple of the breakpoint and a boolean that indicates if it is ok to delete a temporary breakpoint. Return (None, None) if there is no matching breakpoint.	https://docs.python.org/3.4/library/bdb.html#bdb.effective
bdb set_trace	A							https://docs.python.org			<pre><code>
bdb.set_trace()</code></pre><br>Start debugging with a Bdb instance from caller’s frame.	https://docs.python.org/3.4/library/bdb.html#bdb.set_trace
binascii a2b_uu	A							https://docs.python.org			<pre><code>
binascii.a2b_uu(string)</code></pre><br>Convert a single line of uuencoded data back to binary and return the binary data. Lines normally contain 45 (binary) bytes, except for the last line. Line data may be followed by whitespace.	https://docs.python.org/3.4/library/binascii.html#binascii.a2b_uu
binascii b2a_uu	A							https://docs.python.org			<pre><code>
binascii.b2a_uu(data)</code></pre><br>Convert binary data to a line of ASCII characters, the return value is the converted line, including a newline char. The length of data should be at most 45.	https://docs.python.org/3.4/library/binascii.html#binascii.b2a_uu
binascii a2b_base64	A							https://docs.python.org			<pre><code>
binascii.a2b_base64(string)</code></pre><br>Convert a block of base64 data back to binary and return the binary data. More than one line may be passed at a time.	https://docs.python.org/3.4/library/binascii.html#binascii.a2b_base64
binascii b2a_base64	A							https://docs.python.org			<pre><code>
binascii.b2a_base64(data)</code></pre><br>Convert binary data to a line of ASCII characters in base64 coding. The return value is the converted line, including a newline char. The newline is added because the original use case for this function was to feed it a series of 57 byte input lines to get output lines that conform to the MIME-base64 standard. Otherwise the output conforms to RFC 3548.	https://docs.python.org/3.4/library/binascii.html#binascii.b2a_base64
binascii a2b_qp	A							https://docs.python.org			<pre><code>
binascii.a2b_qp(data, header=False)</code></pre><br>Convert a block of quoted-printable data back to binary and return the binary data. More than one line may be passed at a time. If the optional argument header is present and true, underscores will be decoded as spaces.	https://docs.python.org/3.4/library/binascii.html#binascii.a2b_qp
binascii b2a_qp	A							https://docs.python.org			<pre><code>
binascii.b2a_qp(data, quotetabs=False, istext=True, header=False)</code></pre><br>Convert binary data to a line(s) of ASCII characters in quoted-printable encoding. The return value is the converted line(s). If the optional argument quotetabs is present and true, all tabs and spaces will be encoded.  If the optional argument istext is present and true, newlines are not encoded but trailing whitespace will be encoded. If the optional argument header is present and true, spaces will be encoded as underscores per RFC1522. If the optional argument header is present and false, newline characters will be encoded as well; otherwise linefeed conversion might corrupt the binary data stream.	https://docs.python.org/3.4/library/binascii.html#binascii.b2a_qp
binascii a2b_hqx	A							https://docs.python.org			<pre><code>
binascii.a2b_hqx(string)</code></pre><br>Convert binhex4 formatted ASCII data to binary, without doing RLE-decompression. The string should contain a complete number of binary bytes, or (in case of the last portion of the binhex4 data) have the remaining bits zero.	https://docs.python.org/3.4/library/binascii.html#binascii.a2b_hqx
binascii rledecode_hqx	A							https://docs.python.org			<pre><code>
binascii.rledecode_hqx(data)</code></pre><br>Perform RLE-decompression on the data, as per the binhex4 standard. The algorithm uses 0x90 after a byte as a repeat indicator, followed by a count. A count of 0 specifies a byte value of 0x90. The routine returns the decompressed data, unless data input data ends in an orphaned repeat indicator, in which case the Incomplete exception is raised.	https://docs.python.org/3.4/library/binascii.html#binascii.rledecode_hqx
binascii rlecode_hqx	A							https://docs.python.org			<pre><code>
binascii.rlecode_hqx(data)</code></pre><br>Perform binhex4 style RLE-compression on data and return the result.	https://docs.python.org/3.4/library/binascii.html#binascii.rlecode_hqx
binascii b2a_hqx	A							https://docs.python.org			<pre><code>
binascii.b2a_hqx(data)</code></pre><br>Perform hexbin4 binary-to-ASCII translation and return the resulting string. The argument should already be RLE-coded, and have a length divisible by 3 (except possibly the last fragment).	https://docs.python.org/3.4/library/binascii.html#binascii.b2a_hqx
binascii crc_hqx	A							https://docs.python.org			<pre><code>
binascii.crc_hqx(data, crc)</code></pre><br>Compute the binhex4 crc value of data, starting with an initial crc and returning the result.	https://docs.python.org/3.4/library/binascii.html#binascii.crc_hqx
binascii crc32	A							https://docs.python.org			<pre><code>
binascii.crc32(data[, crc])</code></pre><br>Compute CRC-32, the 32-bit checksum of data, starting with an initial crc. This is consistent with the ZIP file checksum. Since the algorithm is designed for use as a checksum algorithm, it is not suitable for use as a general hash algorithm. Use as follows:	https://docs.python.org/3.4/library/binascii.html#binascii.crc32
binascii b2a_hex	A							https://docs.python.org			<pre><code>
binascii.b2a_hex(data)</code></pre><br>Return the hexadecimal representation of the binary data. Every byte of data is converted into the corresponding 2-digit hex representation. The returned bytes object is therefore twice as long as the length of data.	https://docs.python.org/3.4/library/binascii.html#binascii.b2a_hex
binascii a2b_hex	A							https://docs.python.org			<pre><code>
binascii.a2b_hex(hexstr)</code></pre><br>Return the binary data represented by the hexadecimal string hexstr. This function is the inverse of b2a_hex(). hexstr must contain an even number of hexadecimal digits (which can be upper or lower case), otherwise a TypeError is raised.	https://docs.python.org/3.4/library/binascii.html#binascii.a2b_hex
binhex binhex	A							https://docs.python.org			<pre><code>
binhex.binhex(input, output)</code></pre><br>Convert a binary file with filename input to binhex file output. The output parameter can either be a filename or a file-like object (any object supporting a write() and close() method).	https://docs.python.org/3.4/library/binhex.html#binhex.binhex
binhex hexbin	A							https://docs.python.org			<pre><code>
binhex.hexbin(input, output)</code></pre><br>Decode a binhex file input. input may be a filename or a file-like object supporting read() and close() methods. The resulting file is written to a file named output, unless the argument is None in which case the output filename is read from the binhex file.	https://docs.python.org/3.4/library/binhex.html#binhex.hexbin
bisect bisect_left	A							https://docs.python.org			<pre><code>
bisect.bisect_left(a, x, lo=0, hi=len(a))</code></pre><br>Locate the insertion point for x in a to maintain sorted order. The parameters lo and hi may be used to specify a subset of the list which should be considered; by default the entire list is used. If x is already present in a, the insertion point will be before (to the left of) any existing entries. The return value is suitable for use as the first parameter to list.insert() assuming that a is already sorted.	https://docs.python.org/3.4/library/bisect.html#bisect.bisect_left
bisect bisect_right	A							https://docs.python.org			<pre><code>
bisect.bisect_right(a, x, lo=0, hi=len(a))</code></pre><br>Similar to bisect_left(), but returns an insertion point which comes after (to the right of) any existing entries of x in a.	https://docs.python.org/3.4/library/bisect.html#bisect.bisect_right
bisect insort_left	A							https://docs.python.org			<pre><code>
bisect.insort_left(a, x, lo=0, hi=len(a))</code></pre><br>Insert x in a in sorted order. This is equivalent to a.insert(bisect.bisect_left(a, x, lo, hi), x) assuming that a is already sorted. Keep in mind that the O(log n) search is dominated by the slow O(n) insertion step.	https://docs.python.org/3.4/library/bisect.html#bisect.insort_left
bisect insort_right	A							https://docs.python.org			<pre><code>
bisect.insort_right(a, x, lo=0, hi=len(a))</code></pre><br>Similar to insort_left(), but inserting x in a after any existing entries of x.	https://docs.python.org/3.4/library/bisect.html#bisect.insort_right
bz2 open	A							https://docs.python.org			<pre><code>
bz2.open(filename, mode='r', compresslevel=9, encoding=None, errors=None, newline=None)</code></pre><br>Open a bzip2-compressed file in binary or text mode, returning a file object.	https://docs.python.org/3.4/library/bz2.html#bz2.open
bz2 compress	A							https://docs.python.org			<pre><code>
bz2.compress(data, compresslevel=9)</code></pre><br>Compress data.	https://docs.python.org/3.4/library/bz2.html#bz2.compress
bz2 decompress	A							https://docs.python.org			<pre><code>
bz2.decompress(data)</code></pre><br>Decompress data.	https://docs.python.org/3.4/library/bz2.html#bz2.decompress
bz2 open	A							https://docs.python.org			<pre><code>
bz2.open(filename, mode='r', compresslevel=9, encoding=None, errors=None, newline=None)</code></pre><br>Open a bzip2-compressed file in binary or text mode, returning a file object.	https://docs.python.org/3.4/library/bz2.html#bz2.open
bz2 compress	A							https://docs.python.org			<pre><code>
bz2.compress(data, compresslevel=9)</code></pre><br>Compress data.	https://docs.python.org/3.4/library/bz2.html#bz2.compress
bz2 decompress	A							https://docs.python.org			<pre><code>
bz2.decompress(data)</code></pre><br>Decompress data.	https://docs.python.org/3.4/library/bz2.html#bz2.decompress
calendar setfirstweekday	A							https://docs.python.org			<pre><code>
calendar.setfirstweekday(weekday)</code></pre><br>Sets the weekday (0 is Monday, 6 is Sunday) to start each week. The values MONDAY, TUESDAY, WEDNESDAY, THURSDAY, FRIDAY, SATURDAY, and SUNDAY are provided for convenience. For example, to set the first weekday to Sunday:	https://docs.python.org/3.4/library/calendar.html#calendar.setfirstweekday
calendar firstweekday	A							https://docs.python.org			<pre><code>
calendar.firstweekday()</code></pre><br>Returns the current setting for the weekday to start each week.	https://docs.python.org/3.4/library/calendar.html#calendar.firstweekday
calendar isleap	A							https://docs.python.org			<pre><code>
calendar.isleap(year)</code></pre><br>Returns True if year is a leap year, otherwise False.	https://docs.python.org/3.4/library/calendar.html#calendar.isleap
calendar leapdays	A							https://docs.python.org			<pre><code>
calendar.leapdays(y1, y2)</code></pre><br>Returns the number of leap years in the range from y1 to y2 (exclusive), where y1 and y2 are years.	https://docs.python.org/3.4/library/calendar.html#calendar.leapdays
calendar weekday	A							https://docs.python.org			<pre><code>
calendar.weekday(year, month, day)</code></pre><br>Returns the day of the week (0 is Monday) for year (1970–...), month (1–12), day (1–31).	https://docs.python.org/3.4/library/calendar.html#calendar.weekday
calendar weekheader	A							https://docs.python.org			<pre><code>
calendar.weekheader(n)</code></pre><br>Return a header containing abbreviated weekday names. n specifies the width in characters for one weekday.	https://docs.python.org/3.4/library/calendar.html#calendar.weekheader
calendar monthrange	A							https://docs.python.org			<pre><code>
calendar.monthrange(year, month)</code></pre><br>Returns weekday of first day of the month and number of days in month, for the specified year and month.	https://docs.python.org/3.4/library/calendar.html#calendar.monthrange
calendar monthcalendar	A							https://docs.python.org			<pre><code>
calendar.monthcalendar(year, month)</code></pre><br>Returns a matrix representing a month’s calendar. Each row represents a week; days outside of the month a represented by zeros. Each week begins with Monday unless set by setfirstweekday().	https://docs.python.org/3.4/library/calendar.html#calendar.monthcalendar
calendar prmonth	A							https://docs.python.org			<pre><code>
calendar.prmonth(theyear, themonth, w=0, l=0)</code></pre><br>Prints a month’s calendar as returned by month().	https://docs.python.org/3.4/library/calendar.html#calendar.prmonth
calendar month	A							https://docs.python.org			<pre><code>
calendar.month(theyear, themonth, w=0, l=0)</code></pre><br>Returns a month’s calendar in a multi-line string using the formatmonth() of the TextCalendar class.	https://docs.python.org/3.4/library/calendar.html#calendar.month
calendar prcal	A							https://docs.python.org			<pre><code>
calendar.prcal(year, w=0, l=0, c=6, m=3)</code></pre><br>Prints the calendar for an entire year as returned by calendar().	https://docs.python.org/3.4/library/calendar.html#calendar.prcal
calendar calendar	A							https://docs.python.org			<pre><code>
calendar.calendar(year, w=2, l=1, c=6, m=3)</code></pre><br>Returns a 3-column calendar for an entire year as a multi-line string using the formatyear() of the TextCalendar class.	https://docs.python.org/3.4/library/calendar.html#calendar.calendar
calendar timegm	A							https://docs.python.org			<pre><code>
calendar.timegm(tuple)</code></pre><br>An unrelated but handy function that takes a time tuple such as returned by the gmtime() function in the time module, and returns the corresponding Unix timestamp value, assuming an epoch of 1970, and the POSIX encoding. In fact, time.gmtime() and timegm() are each others’ inverse.	https://docs.python.org/3.4/library/calendar.html#calendar.timegm
cgi parse	A							https://docs.python.org			<pre><code>
cgi.parse(fp=None, environ=os.environ, keep_blank_values=False, strict_parsing=False)</code></pre><br>Parse a query in the environment or from a file (the file defaults to sys.stdin). The keep_blank_values and strict_parsing parameters are passed to urllib.parse.parse_qs() unchanged.	https://docs.python.org/3.4/library/cgi.html#cgi.parse
cgi parse_qs	A							https://docs.python.org			<pre><code>
cgi.parse_qs(qs, keep_blank_values=False, strict_parsing=False)</code></pre><br>This function is deprecated in this module. Use urllib.parse.parse_qs() instead. It is maintained here only for backward compatibility.	https://docs.python.org/3.4/library/cgi.html#cgi.parse_qs
cgi parse_qsl	A							https://docs.python.org			<pre><code>
cgi.parse_qsl(qs, keep_blank_values=False, strict_parsing=False)</code></pre><br>This function is deprecated in this module. Use urllib.parse.parse_qsl() instead. It is maintained here only for backward compatibility.	https://docs.python.org/3.4/library/cgi.html#cgi.parse_qsl
cgi parse_multipart	A							https://docs.python.org			<pre><code>
cgi.parse_multipart(fp, pdict)</code></pre><br>Parse input of type multipart/form-data (for file uploads). Arguments are fp for the input file and pdict for a dictionary containing other parameters in the Content-Type header.	https://docs.python.org/3.4/library/cgi.html#cgi.parse_multipart
cgi parse_header	A							https://docs.python.org			<pre><code>
cgi.parse_header(string)</code></pre><br>Parse a MIME header (such as Content-Type) into a main value and a dictionary of parameters.	https://docs.python.org/3.4/library/cgi.html#cgi.parse_header
cgi test	A							https://docs.python.org			<pre><code>
cgi.test()</code></pre><br>Robust test CGI script, usable as main program. Writes minimal HTTP headers and formats all information provided to the script in HTML form.	https://docs.python.org/3.4/library/cgi.html#cgi.test
cgi print_environ	A							https://docs.python.org			<pre><code>
cgi.print_environ()</code></pre><br>Format the shell environment in HTML.	https://docs.python.org/3.4/library/cgi.html#cgi.print_environ
cgi print_form	A							https://docs.python.org			<pre><code>
cgi.print_form(form)</code></pre><br>Format a form in HTML.	https://docs.python.org/3.4/library/cgi.html#cgi.print_form
cgi print_directory	A							https://docs.python.org			<pre><code>
cgi.print_directory()</code></pre><br>Format the current directory in HTML.	https://docs.python.org/3.4/library/cgi.html#cgi.print_directory
cgi print_environ_usage	A							https://docs.python.org			<pre><code>
cgi.print_environ_usage()</code></pre><br>Print a list of useful (used by CGI) environment variables in HTML.	https://docs.python.org/3.4/library/cgi.html#cgi.print_environ_usage
cgi escape	A							https://docs.python.org			<pre><code>
cgi.escape(s, quote=False)</code></pre><br>Convert the characters '&', '<' and '>' in string s to HTML-safe sequences. Use this if you need to display text that might contain such characters in HTML. If the optional flag quote is true, the quotation mark character (") is also translated; this helps for inclusion in an HTML attribute value delimited by double quotes, as in <a href="...">. Note that single quotes are never translated.	https://docs.python.org/3.4/library/cgi.html#cgi.escape
cgi parse	A							https://docs.python.org			<pre><code>
cgi.parse(fp=None, environ=os.environ, keep_blank_values=False, strict_parsing=False)</code></pre><br>Parse a query in the environment or from a file (the file defaults to sys.stdin). The keep_blank_values and strict_parsing parameters are passed to urllib.parse.parse_qs() unchanged.	https://docs.python.org/3.4/library/cgi.html#cgi.parse
cgi parse_qs	A							https://docs.python.org			<pre><code>
cgi.parse_qs(qs, keep_blank_values=False, strict_parsing=False)</code></pre><br>This function is deprecated in this module. Use urllib.parse.parse_qs() instead. It is maintained here only for backward compatibility.	https://docs.python.org/3.4/library/cgi.html#cgi.parse_qs
cgi parse_qsl	A							https://docs.python.org			<pre><code>
cgi.parse_qsl(qs, keep_blank_values=False, strict_parsing=False)</code></pre><br>This function is deprecated in this module. Use urllib.parse.parse_qsl() instead. It is maintained here only for backward compatibility.	https://docs.python.org/3.4/library/cgi.html#cgi.parse_qsl
cgi parse_multipart	A							https://docs.python.org			<pre><code>
cgi.parse_multipart(fp, pdict)</code></pre><br>Parse input of type multipart/form-data (for file uploads). Arguments are fp for the input file and pdict for a dictionary containing other parameters in the Content-Type header.	https://docs.python.org/3.4/library/cgi.html#cgi.parse_multipart
cgi parse_header	A							https://docs.python.org			<pre><code>
cgi.parse_header(string)</code></pre><br>Parse a MIME header (such as Content-Type) into a main value and a dictionary of parameters.	https://docs.python.org/3.4/library/cgi.html#cgi.parse_header
cgi test	A							https://docs.python.org			<pre><code>
cgi.test()</code></pre><br>Robust test CGI script, usable as main program. Writes minimal HTTP headers and formats all information provided to the script in HTML form.	https://docs.python.org/3.4/library/cgi.html#cgi.test
cgi print_environ	A							https://docs.python.org			<pre><code>
cgi.print_environ()</code></pre><br>Format the shell environment in HTML.	https://docs.python.org/3.4/library/cgi.html#cgi.print_environ
cgi print_form	A							https://docs.python.org			<pre><code>
cgi.print_form(form)</code></pre><br>Format a form in HTML.	https://docs.python.org/3.4/library/cgi.html#cgi.print_form
cgi print_directory	A							https://docs.python.org			<pre><code>
cgi.print_directory()</code></pre><br>Format the current directory in HTML.	https://docs.python.org/3.4/library/cgi.html#cgi.print_directory
cgi print_environ_usage	A							https://docs.python.org			<pre><code>
cgi.print_environ_usage()</code></pre><br>Print a list of useful (used by CGI) environment variables in HTML.	https://docs.python.org/3.4/library/cgi.html#cgi.print_environ_usage
cgi escape	A							https://docs.python.org			<pre><code>
cgi.escape(s, quote=False)</code></pre><br>Convert the characters '&', '<' and '>' in string s to HTML-safe sequences. Use this if you need to display text that might contain such characters in HTML. If the optional flag quote is true, the quotation mark character (") is also translated; this helps for inclusion in an HTML attribute value delimited by double quotes, as in <a href="...">. Note that single quotes are never translated.	https://docs.python.org/3.4/library/cgi.html#cgi.escape
cgitb enable	A							https://docs.python.org			<pre><code>
cgitb.enable(display=1, logdir=None, context=5, format="html")</code></pre><br>This function causes the cgitb module to take over the interpreter’s default handling for exceptions by setting the value of sys.excepthook.	https://docs.python.org/3.4/library/cgitb.html#cgitb.enable
cgitb handler	A							https://docs.python.org			<pre><code>
cgitb.handler(info=None)</code></pre><br>This function handles an exception using the default settings (that is, show a report in the browser, but don’t log to a file). This can be used when you’ve caught an exception and want to report it using cgitb. The optional info argument should be a 3-tuple containing an exception type, exception value, and traceback object, exactly like the tuple returned by sys.exc_info(). If the info argument is not supplied, the current exception is obtained from sys.exc_info().	https://docs.python.org/3.4/library/cgitb.html#cgitb.handler
cmath phase	A							https://docs.python.org			<pre><code>
cmath.phase(x)</code></pre><br>Return the phase of x (also known as the argument of x), as a float. phase(x) is equivalent to math.atan2(x.imag, x.real). The result lies in the range [-π, π], and the branch cut for this operation lies along the negative real axis, continuous from above. On systems with support for signed zeros (which includes most systems in current use), this means that the sign of the result is the same as the sign of x.imag, even when x.imag is zero:	https://docs.python.org/3.4/library/cmath.html#cmath.phase
cmath polar	A							https://docs.python.org			<pre><code>
cmath.polar(x)</code></pre><br>Return the representation of x in polar coordinates. Returns a pair (r, phi) where r is the modulus of x and phi is the phase of x. polar(x) is equivalent to (abs(x), phase(x)).	https://docs.python.org/3.4/library/cmath.html#cmath.polar
cmath rect	A							https://docs.python.org			<pre><code>
cmath.rect(r, phi)</code></pre><br>Return the complex number x with polar coordinates r and phi. Equivalent to r * (math.cos(phi) + math.sin(phi)*1j).	https://docs.python.org/3.4/library/cmath.html#cmath.rect
cmath exp	A							https://docs.python.org			<pre><code>
cmath.exp(x)</code></pre><br>Return the exponential value e**x.	https://docs.python.org/3.4/library/cmath.html#cmath.exp
cmath log	A							https://docs.python.org			<pre><code>
cmath.log(x[, base])</code></pre><br>Returns the logarithm of x to the given base. If the base is not specified, returns the natural logarithm of x. There is one branch cut, from 0 along the negative real axis to -∞, continuous from above.	https://docs.python.org/3.4/library/cmath.html#cmath.log
cmath log10	A							https://docs.python.org			<pre><code>
cmath.log10(x)</code></pre><br>Return the base-10 logarithm of x. This has the same branch cut as log().	https://docs.python.org/3.4/library/cmath.html#cmath.log10
cmath sqrt	A							https://docs.python.org			<pre><code>
cmath.sqrt(x)</code></pre><br>Return the square root of x. This has the same branch cut as log().	https://docs.python.org/3.4/library/cmath.html#cmath.sqrt
cmath acos	A							https://docs.python.org			<pre><code>
cmath.acos(x)</code></pre><br>Return the arc cosine of x. There are two branch cuts: One extends right from 1 along the real axis to ∞, continuous from below. The other extends left from -1 along the real axis to -∞, continuous from above.	https://docs.python.org/3.4/library/cmath.html#cmath.acos
cmath asin	A							https://docs.python.org			<pre><code>
cmath.asin(x)</code></pre><br>Return the arc sine of x. This has the same branch cuts as acos().	https://docs.python.org/3.4/library/cmath.html#cmath.asin
cmath atan	A							https://docs.python.org			<pre><code>
cmath.atan(x)</code></pre><br>Return the arc tangent of x. There are two branch cuts: One extends from 1j along the imaginary axis to ∞j, continuous from the right. The other extends from -1j along the imaginary axis to -∞j, continuous from the left.	https://docs.python.org/3.4/library/cmath.html#cmath.atan
cmath cos	A							https://docs.python.org			<pre><code>
cmath.cos(x)</code></pre><br>Return the cosine of x.	https://docs.python.org/3.4/library/cmath.html#cmath.cos
cmath sin	A							https://docs.python.org			<pre><code>
cmath.sin(x)</code></pre><br>Return the sine of x.	https://docs.python.org/3.4/library/cmath.html#cmath.sin
cmath tan	A							https://docs.python.org			<pre><code>
cmath.tan(x)</code></pre><br>Return the tangent of x.	https://docs.python.org/3.4/library/cmath.html#cmath.tan
cmath acosh	A							https://docs.python.org			<pre><code>
cmath.acosh(x)</code></pre><br>Return the inverse hyperbolic cosine of x. There is one branch cut, extending left from 1 along the real axis to -∞, continuous from above.	https://docs.python.org/3.4/library/cmath.html#cmath.acosh
cmath asinh	A							https://docs.python.org			<pre><code>
cmath.asinh(x)</code></pre><br>Return the inverse hyperbolic sine of x. There are two branch cuts: One extends from 1j along the imaginary axis to ∞j, continuous from the right. The other extends from -1j along the imaginary axis to -∞j, continuous from the left.	https://docs.python.org/3.4/library/cmath.html#cmath.asinh
cmath atanh	A							https://docs.python.org			<pre><code>
cmath.atanh(x)</code></pre><br>Return the inverse hyperbolic tangent of x. There are two branch cuts: One extends from 1 along the real axis to ∞, continuous from below. The other extends from -1 along the real axis to -∞, continuous from above.	https://docs.python.org/3.4/library/cmath.html#cmath.atanh
cmath cosh	A							https://docs.python.org			<pre><code>
cmath.cosh(x)</code></pre><br>Return the hyperbolic cosine of x.	https://docs.python.org/3.4/library/cmath.html#cmath.cosh
cmath sinh	A							https://docs.python.org			<pre><code>
cmath.sinh(x)</code></pre><br>Return the hyperbolic sine of x.	https://docs.python.org/3.4/library/cmath.html#cmath.sinh
cmath tanh	A							https://docs.python.org			<pre><code>
cmath.tanh(x)</code></pre><br>Return the hyperbolic tangent of x.	https://docs.python.org/3.4/library/cmath.html#cmath.tanh
cmath isfinite	A							https://docs.python.org			<pre><code>
cmath.isfinite(x)</code></pre><br>Return True if both the real and imaginary parts of x are finite, and False otherwise.	https://docs.python.org/3.4/library/cmath.html#cmath.isfinite
cmath isinf	A							https://docs.python.org			<pre><code>
cmath.isinf(x)</code></pre><br>Return True if either the real or the imaginary part of x is an infinity, and False otherwise.	https://docs.python.org/3.4/library/cmath.html#cmath.isinf
cmath isnan	A							https://docs.python.org			<pre><code>
cmath.isnan(x)</code></pre><br>Return True if either the real or the imaginary part of x is a NaN, and False otherwise.	https://docs.python.org/3.4/library/cmath.html#cmath.isnan
cmath phase	A							https://docs.python.org			<pre><code>
cmath.phase(x)</code></pre><br>Return the phase of x (also known as the argument of x), as a float. phase(x) is equivalent to math.atan2(x.imag, x.real). The result lies in the range [-π, π], and the branch cut for this operation lies along the negative real axis, continuous from above. On systems with support for signed zeros (which includes most systems in current use), this means that the sign of the result is the same as the sign of x.imag, even when x.imag is zero:	https://docs.python.org/3.4/library/cmath.html#cmath.phase
cmath polar	A							https://docs.python.org			<pre><code>
cmath.polar(x)</code></pre><br>Return the representation of x in polar coordinates. Returns a pair (r, phi) where r is the modulus of x and phi is the phase of x. polar(x) is equivalent to (abs(x), phase(x)).	https://docs.python.org/3.4/library/cmath.html#cmath.polar
cmath rect	A							https://docs.python.org			<pre><code>
cmath.rect(r, phi)</code></pre><br>Return the complex number x with polar coordinates r and phi. Equivalent to r * (math.cos(phi) + math.sin(phi)*1j).	https://docs.python.org/3.4/library/cmath.html#cmath.rect
cmath exp	A							https://docs.python.org			<pre><code>
cmath.exp(x)</code></pre><br>Return the exponential value e**x.	https://docs.python.org/3.4/library/cmath.html#cmath.exp
cmath log	A							https://docs.python.org			<pre><code>
cmath.log(x[, base])</code></pre><br>Returns the logarithm of x to the given base. If the base is not specified, returns the natural logarithm of x. There is one branch cut, from 0 along the negative real axis to -∞, continuous from above.	https://docs.python.org/3.4/library/cmath.html#cmath.log
cmath log10	A							https://docs.python.org			<pre><code>
cmath.log10(x)</code></pre><br>Return the base-10 logarithm of x. This has the same branch cut as log().	https://docs.python.org/3.4/library/cmath.html#cmath.log10
cmath sqrt	A							https://docs.python.org			<pre><code>
cmath.sqrt(x)</code></pre><br>Return the square root of x. This has the same branch cut as log().	https://docs.python.org/3.4/library/cmath.html#cmath.sqrt
cmath acos	A							https://docs.python.org			<pre><code>
cmath.acos(x)</code></pre><br>Return the arc cosine of x. There are two branch cuts: One extends right from 1 along the real axis to ∞, continuous from below. The other extends left from -1 along the real axis to -∞, continuous from above.	https://docs.python.org/3.4/library/cmath.html#cmath.acos
cmath asin	A							https://docs.python.org			<pre><code>
cmath.asin(x)</code></pre><br>Return the arc sine of x. This has the same branch cuts as acos().	https://docs.python.org/3.4/library/cmath.html#cmath.asin
cmath atan	A							https://docs.python.org			<pre><code>
cmath.atan(x)</code></pre><br>Return the arc tangent of x. There are two branch cuts: One extends from 1j along the imaginary axis to ∞j, continuous from the right. The other extends from -1j along the imaginary axis to -∞j, continuous from the left.	https://docs.python.org/3.4/library/cmath.html#cmath.atan
cmath cos	A							https://docs.python.org			<pre><code>
cmath.cos(x)</code></pre><br>Return the cosine of x.	https://docs.python.org/3.4/library/cmath.html#cmath.cos
cmath sin	A							https://docs.python.org			<pre><code>
cmath.sin(x)</code></pre><br>Return the sine of x.	https://docs.python.org/3.4/library/cmath.html#cmath.sin
cmath tan	A							https://docs.python.org			<pre><code>
cmath.tan(x)</code></pre><br>Return the tangent of x.	https://docs.python.org/3.4/library/cmath.html#cmath.tan
cmath acosh	A							https://docs.python.org			<pre><code>
cmath.acosh(x)</code></pre><br>Return the inverse hyperbolic cosine of x. There is one branch cut, extending left from 1 along the real axis to -∞, continuous from above.	https://docs.python.org/3.4/library/cmath.html#cmath.acosh
cmath asinh	A							https://docs.python.org			<pre><code>
cmath.asinh(x)</code></pre><br>Return the inverse hyperbolic sine of x. There are two branch cuts: One extends from 1j along the imaginary axis to ∞j, continuous from the right. The other extends from -1j along the imaginary axis to -∞j, continuous from the left.	https://docs.python.org/3.4/library/cmath.html#cmath.asinh
cmath atanh	A							https://docs.python.org			<pre><code>
cmath.atanh(x)</code></pre><br>Return the inverse hyperbolic tangent of x. There are two branch cuts: One extends from 1 along the real axis to ∞, continuous from below. The other extends from -1 along the real axis to -∞, continuous from above.	https://docs.python.org/3.4/library/cmath.html#cmath.atanh
cmath cosh	A							https://docs.python.org			<pre><code>
cmath.cosh(x)</code></pre><br>Return the hyperbolic cosine of x.	https://docs.python.org/3.4/library/cmath.html#cmath.cosh
cmath sinh	A							https://docs.python.org			<pre><code>
cmath.sinh(x)</code></pre><br>Return the hyperbolic sine of x.	https://docs.python.org/3.4/library/cmath.html#cmath.sinh
cmath tanh	A							https://docs.python.org			<pre><code>
cmath.tanh(x)</code></pre><br>Return the hyperbolic tangent of x.	https://docs.python.org/3.4/library/cmath.html#cmath.tanh
cmath isfinite	A							https://docs.python.org			<pre><code>
cmath.isfinite(x)</code></pre><br>Return True if both the real and imaginary parts of x are finite, and False otherwise.	https://docs.python.org/3.4/library/cmath.html#cmath.isfinite
cmath isinf	A							https://docs.python.org			<pre><code>
cmath.isinf(x)</code></pre><br>Return True if either the real or the imaginary part of x is an infinity, and False otherwise.	https://docs.python.org/3.4/library/cmath.html#cmath.isinf
cmath isnan	A							https://docs.python.org			<pre><code>
cmath.isnan(x)</code></pre><br>Return True if either the real or the imaginary part of x is a NaN, and False otherwise.	https://docs.python.org/3.4/library/cmath.html#cmath.isnan
code interact	A							https://docs.python.org			<pre><code>
code.interact(banner=None, readfunc=None, local=None)</code></pre><br>Convenience function to run a read-eval-print loop. This creates a new instance of InteractiveConsole and sets readfunc to be used as the InteractiveConsole.raw_input() method, if provided. If local is provided, it is passed to the InteractiveConsole constructor for use as the default namespace for the interpreter loop. The interact() method of the instance is then run with banner passed as the banner to use, if provided. The console object is discarded after use.	https://docs.python.org/3.4/library/code.html#code.interact
code compile_command	A							https://docs.python.org			<pre><code>
code.compile_command(source, filename="<input>", symbol="single")</code></pre><br>This function is useful for programs that want to emulate Python’s interpreter main loop (a.k.a. the read-eval-print loop). The tricky part is to determine when the user has entered an incomplete command that can be completed by entering more text (as opposed to a complete command or a syntax error). This function almost always makes the same decision as the real interpreter main loop.	https://docs.python.org/3.4/library/code.html#code.compile_command
codecs encode	A							https://docs.python.org			<pre><code>
codecs.encode(obj[, encoding[, errors]])</code></pre><br>Encodes obj using the codec registered for encoding. The default encoding is utf-8.	https://docs.python.org/3.4/library/codecs.html#codecs.encode
codecs decode	A							https://docs.python.org			<pre><code>
codecs.decode(obj[, encoding[, errors]])</code></pre><br>Decodes obj using the codec registered for encoding. The default encoding is utf-8.	https://docs.python.org/3.4/library/codecs.html#codecs.decode
codecs lookup	A							https://docs.python.org			<pre><code>
codecs.lookup(encoding)</code></pre><br>Looks up the codec info in the Python codec registry and returns a CodecInfo object as defined below.	https://docs.python.org/3.4/library/codecs.html#codecs.lookup
codecs getencoder	A							https://docs.python.org			<pre><code>
codecs.getencoder(encoding)</code></pre><br>Look up the codec for the given encoding and return its encoder function.	https://docs.python.org/3.4/library/codecs.html#codecs.getencoder
codecs getdecoder	A							https://docs.python.org			<pre><code>
codecs.getdecoder(encoding)</code></pre><br>Look up the codec for the given encoding and return its decoder function.	https://docs.python.org/3.4/library/codecs.html#codecs.getdecoder
codecs getincrementalencoder	A							https://docs.python.org			<pre><code>
codecs.getincrementalencoder(encoding)</code></pre><br>Look up the codec for the given encoding and return its incremental encoder class or factory function.	https://docs.python.org/3.4/library/codecs.html#codecs.getincrementalencoder
codecs getincrementaldecoder	A							https://docs.python.org			<pre><code>
codecs.getincrementaldecoder(encoding)</code></pre><br>Look up the codec for the given encoding and return its incremental decoder class or factory function.	https://docs.python.org/3.4/library/codecs.html#codecs.getincrementaldecoder
codecs getreader	A							https://docs.python.org			<pre><code>
codecs.getreader(encoding)</code></pre><br>Look up the codec for the given encoding and return its StreamReader class or factory function.	https://docs.python.org/3.4/library/codecs.html#codecs.getreader
codecs getwriter	A							https://docs.python.org			<pre><code>
codecs.getwriter(encoding)</code></pre><br>Look up the codec for the given encoding and return its StreamWriter class or factory function.	https://docs.python.org/3.4/library/codecs.html#codecs.getwriter
codecs register	A							https://docs.python.org			<pre><code>
codecs.register(search_function)</code></pre><br>Register a codec search function. Search functions are expected to take one argument, being the encoding name in all lower case letters, and return a CodecInfo object. In case a search function cannot find a given encoding, it should return None.	https://docs.python.org/3.4/library/codecs.html#codecs.register
codecs open	A							https://docs.python.org			<pre><code>
codecs.open(filename, mode='r', encoding=None, errors='strict', buffering=1)</code></pre><br>Open an encoded file using the given mode and return an instance of StreamReaderWriter, providing transparent encoding/decoding. The default file mode is 'r', meaning to open the file in read mode.	https://docs.python.org/3.4/library/codecs.html#codecs.open
codecs EncodedFile	A							https://docs.python.org			<pre><code>
codecs.EncodedFile(file, data_encoding, file_encoding=None, errors='strict')</code></pre><br>Return a StreamRecoder instance, a wrapped version of file which provides transparent transcoding. The original file is closed when the wrapped version is closed.	https://docs.python.org/3.4/library/codecs.html#codecs.EncodedFile
codecs iterencode	A							https://docs.python.org			<pre><code>
codecs.iterencode(iterator, encoding, errors='strict', **kwargs)</code></pre><br>Uses an incremental encoder to iteratively encode the input provided by iterator. This function is a generator. The errors argument (as well as any other keyword argument) is passed through to the incremental encoder.	https://docs.python.org/3.4/library/codecs.html#codecs.iterencode
codecs iterdecode	A							https://docs.python.org			<pre><code>
codecs.iterdecode(iterator, encoding, errors='strict', **kwargs)</code></pre><br>Uses an incremental decoder to iteratively decode the input provided by iterator. This function is a generator. The errors argument (as well as any other keyword argument) is passed through to the incremental decoder.	https://docs.python.org/3.4/library/codecs.html#codecs.iterdecode
codecs register_error	A							https://docs.python.org			<pre><code>
codecs.register_error(name, error_handler)</code></pre><br>Register the error handling function error_handler under the name name. The error_handler argument will be called during encoding and decoding in case of an error, when name is specified as the errors parameter.	https://docs.python.org/3.4/library/codecs.html#codecs.register_error
codecs lookup_error	A							https://docs.python.org			<pre><code>
codecs.lookup_error(name)</code></pre><br>Return the error handler previously registered under the name name.	https://docs.python.org/3.4/library/codecs.html#codecs.lookup_error
codecs strict_errors	A							https://docs.python.org			<pre><code>
codecs.strict_errors(exception)</code></pre><br>Implements the 'strict' error handling: each encoding or decoding error raises a UnicodeError.	https://docs.python.org/3.4/library/codecs.html#codecs.strict_errors
codecs replace_errors	A							https://docs.python.org			<pre><code>
codecs.replace_errors(exception)</code></pre><br>Implements the 'replace' error handling (for text encodings only): substitutes '?' for encoding errors (to be encoded by the codec), and '\ufffd' (the Unicode replacement character) for decoding errors.	https://docs.python.org/3.4/library/codecs.html#codecs.replace_errors
codecs ignore_errors	A							https://docs.python.org			<pre><code>
codecs.ignore_errors(exception)</code></pre><br>Implements the 'ignore' error handling: malformed data is ignored and encoding or decoding is continued without further notice.	https://docs.python.org/3.4/library/codecs.html#codecs.ignore_errors
codecs xmlcharrefreplace_errors	A							https://docs.python.org			<pre><code>
codecs.xmlcharrefreplace_errors(exception)</code></pre><br>Implements the 'xmlcharrefreplace' error handling (for encoding with text encodings only): the unencodable character is replaced by an appropriate XML character reference.	https://docs.python.org/3.4/library/codecs.html#codecs.xmlcharrefreplace_errors
codecs backslashreplace_errors	A							https://docs.python.org			<pre><code>
codecs.backslashreplace_errors(exception)</code></pre><br>Implements the 'backslashreplace' error handling (for encoding with text encodings only): the unencodable character is replaced by a backslashed escape sequence.	https://docs.python.org/3.4/library/codecs.html#codecs.backslashreplace_errors
encodings.idna nameprep	A							https://docs.python.org			<pre><code>
encodings.idna.nameprep(label)</code></pre><br>Return the nameprepped version of label. The implementation currently assumes query strings, so AllowUnassigned is true.	https://docs.python.org/3.4/library/codecs.html#encodings.idna.nameprep
encodings.idna ToASCII	A							https://docs.python.org			<pre><code>
encodings.idna.ToASCII(label)</code></pre><br>Convert a label to ASCII, as specified in RFC 3490. UseSTD3ASCIIRules is assumed to be false.	https://docs.python.org/3.4/library/codecs.html#encodings.idna.ToASCII
encodings.idna ToUnicode	A							https://docs.python.org			<pre><code>
encodings.idna.ToUnicode(label)</code></pre><br>Convert a label to Unicode, as specified in RFC 3490.	https://docs.python.org/3.4/library/codecs.html#encodings.idna.ToUnicode
codecs register_error	A							https://docs.python.org			<pre><code>
codecs.register_error(name, error_handler)</code></pre><br>Register the error handling function error_handler under the name name. The error_handler argument will be called during encoding and decoding in case of an error, when name is specified as the errors parameter.	https://docs.python.org/3.4/library/codecs.html#codecs.register_error
codecs lookup_error	A							https://docs.python.org			<pre><code>
codecs.lookup_error(name)</code></pre><br>Return the error handler previously registered under the name name.	https://docs.python.org/3.4/library/codecs.html#codecs.lookup_error
codecs strict_errors	A							https://docs.python.org			<pre><code>
codecs.strict_errors(exception)</code></pre><br>Implements the 'strict' error handling: each encoding or decoding error raises a UnicodeError.	https://docs.python.org/3.4/library/codecs.html#codecs.strict_errors
codecs replace_errors	A							https://docs.python.org			<pre><code>
codecs.replace_errors(exception)</code></pre><br>Implements the 'replace' error handling (for text encodings only): substitutes '?' for encoding errors (to be encoded by the codec), and '\ufffd' (the Unicode replacement character) for decoding errors.	https://docs.python.org/3.4/library/codecs.html#codecs.replace_errors
codecs ignore_errors	A							https://docs.python.org			<pre><code>
codecs.ignore_errors(exception)</code></pre><br>Implements the 'ignore' error handling: malformed data is ignored and encoding or decoding is continued without further notice.	https://docs.python.org/3.4/library/codecs.html#codecs.ignore_errors
codecs xmlcharrefreplace_errors	A							https://docs.python.org			<pre><code>
codecs.xmlcharrefreplace_errors(exception)</code></pre><br>Implements the 'xmlcharrefreplace' error handling (for encoding with text encodings only): the unencodable character is replaced by an appropriate XML character reference.	https://docs.python.org/3.4/library/codecs.html#codecs.xmlcharrefreplace_errors
codecs backslashreplace_errors	A							https://docs.python.org			<pre><code>
codecs.backslashreplace_errors(exception)</code></pre><br>Implements the 'backslashreplace' error handling (for encoding with text encodings only): the unencodable character is replaced by a backslashed escape sequence.	https://docs.python.org/3.4/library/codecs.html#codecs.backslashreplace_errors
codecs register_error	A							https://docs.python.org			<pre><code>
codecs.register_error(name, error_handler)</code></pre><br>Register the error handling function error_handler under the name name. The error_handler argument will be called during encoding and decoding in case of an error, when name is specified as the errors parameter.	https://docs.python.org/3.4/library/codecs.html#codecs.register_error
codecs lookup_error	A							https://docs.python.org			<pre><code>
codecs.lookup_error(name)</code></pre><br>Return the error handler previously registered under the name name.	https://docs.python.org/3.4/library/codecs.html#codecs.lookup_error
codecs strict_errors	A							https://docs.python.org			<pre><code>
codecs.strict_errors(exception)</code></pre><br>Implements the 'strict' error handling: each encoding or decoding error raises a UnicodeError.	https://docs.python.org/3.4/library/codecs.html#codecs.strict_errors
codecs replace_errors	A							https://docs.python.org			<pre><code>
codecs.replace_errors(exception)</code></pre><br>Implements the 'replace' error handling (for text encodings only): substitutes '?' for encoding errors (to be encoded by the codec), and '\ufffd' (the Unicode replacement character) for decoding errors.	https://docs.python.org/3.4/library/codecs.html#codecs.replace_errors
codecs ignore_errors	A							https://docs.python.org			<pre><code>
codecs.ignore_errors(exception)</code></pre><br>Implements the 'ignore' error handling: malformed data is ignored and encoding or decoding is continued without further notice.	https://docs.python.org/3.4/library/codecs.html#codecs.ignore_errors
codecs xmlcharrefreplace_errors	A							https://docs.python.org			<pre><code>
codecs.xmlcharrefreplace_errors(exception)</code></pre><br>Implements the 'xmlcharrefreplace' error handling (for encoding with text encodings only): the unencodable character is replaced by an appropriate XML character reference.	https://docs.python.org/3.4/library/codecs.html#codecs.xmlcharrefreplace_errors
codecs backslashreplace_errors	A							https://docs.python.org			<pre><code>
codecs.backslashreplace_errors(exception)</code></pre><br>Implements the 'backslashreplace' error handling (for encoding with text encodings only): the unencodable character is replaced by a backslashed escape sequence.	https://docs.python.org/3.4/library/codecs.html#codecs.backslashreplace_errors
encodings.idna nameprep	A							https://docs.python.org			<pre><code>
encodings.idna.nameprep(label)</code></pre><br>Return the nameprepped version of label. The implementation currently assumes query strings, so AllowUnassigned is true.	https://docs.python.org/3.4/library/codecs.html#encodings.idna.nameprep
encodings.idna ToASCII	A							https://docs.python.org			<pre><code>
encodings.idna.ToASCII(label)</code></pre><br>Convert a label to ASCII, as specified in RFC 3490. UseSTD3ASCIIRules is assumed to be false.	https://docs.python.org/3.4/library/codecs.html#encodings.idna.ToASCII
encodings.idna ToUnicode	A							https://docs.python.org			<pre><code>
encodings.idna.ToUnicode(label)</code></pre><br>Convert a label to Unicode, as specified in RFC 3490.	https://docs.python.org/3.4/library/codecs.html#encodings.idna.ToUnicode
codeop compile_command	A							https://docs.python.org			<pre><code>
codeop.compile_command(source, filename="<input>", symbol="single")</code></pre><br>Tries to compile source, which should be a string of Python code and return a code object if source is valid Python code. In that case, the filename attribute of the code object will be filename, which defaults to '<input>'. Returns None if source is not valid Python code, but is a prefix of valid Python code.	https://docs.python.org/3.4/library/codeop.html#codeop.compile_command
collections namedtuple	A							https://docs.python.org			<pre><code>
collections.namedtuple(typename, field_names, verbose=False, rename=False)</code></pre><br>Returns a new tuple subclass named typename. The new subclass is used to create tuple-like objects that have fields accessible by attribute lookup as well as being indexable and iterable. Instances of the subclass also have a helpful docstring (with typename and field_names) and a helpful __repr__() method which lists the tuple contents in a name=value format.	https://docs.python.org/3.4/library/collections.html#collections.namedtuple
collections namedtuple	A							https://docs.python.org			<pre><code>
collections.namedtuple(typename, field_names, verbose=False, rename=False)</code></pre><br>Returns a new tuple subclass named typename. The new subclass is used to create tuple-like objects that have fields accessible by attribute lookup as well as being indexable and iterable. Instances of the subclass also have a helpful docstring (with typename and field_names) and a helpful __repr__() method which lists the tuple contents in a name=value format.	https://docs.python.org/3.4/library/collections.html#collections.namedtuple
colorsys rgb_to_yiq	A							https://docs.python.org			<pre><code>
colorsys.rgb_to_yiq(r, g, b)</code></pre><br>Convert the color from RGB coordinates to YIQ coordinates.	https://docs.python.org/3.4/library/colorsys.html#colorsys.rgb_to_yiq
colorsys yiq_to_rgb	A							https://docs.python.org			<pre><code>
colorsys.yiq_to_rgb(y, i, q)</code></pre><br>Convert the color from YIQ coordinates to RGB coordinates.	https://docs.python.org/3.4/library/colorsys.html#colorsys.yiq_to_rgb
colorsys rgb_to_hls	A							https://docs.python.org			<pre><code>
colorsys.rgb_to_hls(r, g, b)</code></pre><br>Convert the color from RGB coordinates to HLS coordinates.	https://docs.python.org/3.4/library/colorsys.html#colorsys.rgb_to_hls
colorsys hls_to_rgb	A							https://docs.python.org			<pre><code>
colorsys.hls_to_rgb(h, l, s)</code></pre><br>Convert the color from HLS coordinates to RGB coordinates.	https://docs.python.org/3.4/library/colorsys.html#colorsys.hls_to_rgb
colorsys rgb_to_hsv	A							https://docs.python.org			<pre><code>
colorsys.rgb_to_hsv(r, g, b)</code></pre><br>Convert the color from RGB coordinates to HSV coordinates.	https://docs.python.org/3.4/library/colorsys.html#colorsys.rgb_to_hsv
colorsys hsv_to_rgb	A							https://docs.python.org			<pre><code>
colorsys.hsv_to_rgb(h, s, v)</code></pre><br>Convert the color from HSV coordinates to RGB coordinates.	https://docs.python.org/3.4/library/colorsys.html#colorsys.hsv_to_rgb
compileall compile_dir	A							https://docs.python.org			<pre><code>
compileall.compile_dir(dir, maxlevels=10, ddir=None, force=False, rx=None, quiet=False, legacy=False, optimize=-1)</code></pre><br>Recursively descend the directory tree named by dir, compiling all .py files along the way.	https://docs.python.org/3.4/library/compileall.html#compileall.compile_dir
compileall compile_file	A							https://docs.python.org			<pre><code>
compileall.compile_file(fullname, ddir=None, force=False, rx=None, quiet=False, legacy=False, optimize=-1)</code></pre><br>Compile the file with path fullname.	https://docs.python.org/3.4/library/compileall.html#compileall.compile_file
compileall compile_path	A							https://docs.python.org			<pre><code>
compileall.compile_path(skip_curdir=True, maxlevels=0, force=False, legacy=False, optimize=-1)</code></pre><br>Byte-compile all the .py files found along sys.path. If skip_curdir is true (the default), the current directory is not included in the search. All other parameters are passed to the compile_dir() function. Note that unlike the other compile functions, maxlevels defaults to 0.	https://docs.python.org/3.4/library/compileall.html#compileall.compile_path
compileall compile_dir	A							https://docs.python.org			<pre><code>
compileall.compile_dir(dir, maxlevels=10, ddir=None, force=False, rx=None, quiet=False, legacy=False, optimize=-1)</code></pre><br>Recursively descend the directory tree named by dir, compiling all .py files along the way.	https://docs.python.org/3.4/library/compileall.html#compileall.compile_dir
compileall compile_file	A							https://docs.python.org			<pre><code>
compileall.compile_file(fullname, ddir=None, force=False, rx=None, quiet=False, legacy=False, optimize=-1)</code></pre><br>Compile the file with path fullname.	https://docs.python.org/3.4/library/compileall.html#compileall.compile_file
compileall compile_path	A							https://docs.python.org			<pre><code>
compileall.compile_path(skip_curdir=True, maxlevels=0, force=False, legacy=False, optimize=-1)</code></pre><br>Byte-compile all the .py files found along sys.path. If skip_curdir is true (the default), the current directory is not included in the search. All other parameters are passed to the compile_dir() function. Note that unlike the other compile functions, maxlevels defaults to 0.	https://docs.python.org/3.4/library/compileall.html#compileall.compile_path
concurrent.futures wait	A							https://docs.python.org			<pre><code>
concurrent.futures.wait(fs, timeout=None, return_when=ALL_COMPLETED)</code></pre><br>Wait for the Future instances (possibly created by different Executor instances) given by fs to complete. Returns a named 2-tuple of sets. The first set, named done, contains the futures that completed (finished or were cancelled) before the wait completed. The second set, named not_done, contains uncompleted futures.	https://docs.python.org/3.4/library/concurrent.futures.html#concurrent.futures.wait
concurrent.futures as_completed	A							https://docs.python.org			<pre><code>
concurrent.futures.as_completed(fs, timeout=None)</code></pre><br>Returns an iterator over the Future instances (possibly created by different Executor instances) given by fs that yields futures as they complete (finished or were cancelled). Any futures given by fs that are duplicated will be returned once. Any futures that completed before as_completed() is called will be yielded first. The returned iterator raises a TimeoutError if __next__() is called and the result isn’t available after timeout seconds from the original call to as_completed(). timeout can be an int or float. If timeout is not specified or None, there is no limit to the wait time.	https://docs.python.org/3.4/library/concurrent.futures.html#concurrent.futures.as_completed
concurrent.futures wait	A							https://docs.python.org			<pre><code>
concurrent.futures.wait(fs, timeout=None, return_when=ALL_COMPLETED)</code></pre><br>Wait for the Future instances (possibly created by different Executor instances) given by fs to complete. Returns a named 2-tuple of sets. The first set, named done, contains the futures that completed (finished or were cancelled) before the wait completed. The second set, named not_done, contains uncompleted futures.	https://docs.python.org/3.4/library/concurrent.futures.html#concurrent.futures.wait
concurrent.futures as_completed	A							https://docs.python.org			<pre><code>
concurrent.futures.as_completed(fs, timeout=None)</code></pre><br>Returns an iterator over the Future instances (possibly created by different Executor instances) given by fs that yields futures as they complete (finished or were cancelled). Any futures given by fs that are duplicated will be returned once. Any futures that completed before as_completed() is called will be yielded first. The returned iterator raises a TimeoutError if __next__() is called and the result isn’t available after timeout seconds from the original call to as_completed(). timeout can be an int or float. If timeout is not specified or None, there is no limit to the wait time.	https://docs.python.org/3.4/library/concurrent.futures.html#concurrent.futures.as_completed
@ contextmanager	A							https://docs.python.org			<pre><code>
@contextlib.contextmanager</code></pre><br>This function is a decorator that can be used to define a factory function for with statement context managers, without needing to create a class or separate __enter__() and __exit__() methods.	https://docs.python.org/3.4/library/contextlib.html#contextlib.contextmanager
contextlib closing	A							https://docs.python.org			<pre><code>
contextlib.closing(thing)</code></pre><br>Return a context manager that closes thing upon completion of the block. This is basically equivalent to:	https://docs.python.org/3.4/library/contextlib.html#contextlib.closing
contextlib suppress	A							https://docs.python.org			<pre><code>
contextlib.suppress(*exceptions)</code></pre><br>Return a context manager that suppresses any of the specified exceptions if they occur in the body of a with statement and then resumes execution with the first statement following the end of the with statement.	https://docs.python.org/3.4/library/contextlib.html#contextlib.suppress
contextlib redirect_stdout	A							https://docs.python.org			<pre><code>
contextlib.redirect_stdout(new_target)</code></pre><br>Context manager for temporarily redirecting sys.stdout to another file or file-like object.	https://docs.python.org/3.4/library/contextlib.html#contextlib.redirect_stdout
@ contextmanager	A							https://docs.python.org			<pre><code>
@contextlib.contextmanager</code></pre><br>This function is a decorator that can be used to define a factory function for with statement context managers, without needing to create a class or separate __enter__() and __exit__() methods.	https://docs.python.org/3.4/library/contextlib.html#contextlib.contextmanager
contextlib closing	A							https://docs.python.org			<pre><code>
contextlib.closing(thing)</code></pre><br>Return a context manager that closes thing upon completion of the block. This is basically equivalent to:	https://docs.python.org/3.4/library/contextlib.html#contextlib.closing
contextlib suppress	A							https://docs.python.org			<pre><code>
contextlib.suppress(*exceptions)</code></pre><br>Return a context manager that suppresses any of the specified exceptions if they occur in the body of a with statement and then resumes execution with the first statement following the end of the with statement.	https://docs.python.org/3.4/library/contextlib.html#contextlib.suppress
contextlib redirect_stdout	A							https://docs.python.org			<pre><code>
contextlib.redirect_stdout(new_target)</code></pre><br>Context manager for temporarily redirecting sys.stdout to another file or file-like object.	https://docs.python.org/3.4/library/contextlib.html#contextlib.redirect_stdout
copy copy	A							https://docs.python.org			<pre><code>
copy.copy(x)</code></pre><br>Return a shallow copy of x.	https://docs.python.org/3.4/library/copy.html#copy.copy
copy deepcopy	A							https://docs.python.org			<pre><code>
copy.deepcopy(x)</code></pre><br>Return a deep copy of x.	https://docs.python.org/3.4/library/copy.html#copy.deepcopy
copyreg constructor	A							https://docs.python.org			<pre><code>
copyreg.constructor(object)</code></pre><br>Declares object to be a valid constructor. If object is not callable (and hence not valid as a constructor), raises TypeError.	https://docs.python.org/3.4/library/copyreg.html#copyreg.constructor
copyreg pickle	A							https://docs.python.org			<pre><code>
copyreg.pickle(type, function, constructor=None)</code></pre><br>Declares that function should be used as a “reduction” function for objects of type type. function should return either a string or a tuple containing two or three elements.	https://docs.python.org/3.4/library/copyreg.html#copyreg.pickle
crypt crypt	A							https://docs.python.org			<pre><code>
crypt.crypt(word, salt=None)</code></pre><br>word will usually be a user’s password as typed at a prompt or in a graphical interface. The optional salt is either a string as returned from mksalt(), one of the crypt.METHOD_* values (though not all may be available on all platforms), or a full encrypted password including salt, as returned by this function. If salt is not provided, the strongest method will be used (as returned by methods().	https://docs.python.org/3.4/library/crypt.html#crypt.crypt
crypt mksalt	A							https://docs.python.org			<pre><code>
crypt.mksalt(method=None)</code></pre><br>Return a randomly generated salt of the specified method. If no method is given, the strongest method available as returned by methods() is used.	https://docs.python.org/3.4/library/crypt.html#crypt.mksalt
crypt crypt	A							https://docs.python.org			<pre><code>
crypt.crypt(word, salt=None)</code></pre><br>word will usually be a user’s password as typed at a prompt or in a graphical interface. The optional salt is either a string as returned from mksalt(), one of the crypt.METHOD_* values (though not all may be available on all platforms), or a full encrypted password including salt, as returned by this function. If salt is not provided, the strongest method will be used (as returned by methods().	https://docs.python.org/3.4/library/crypt.html#crypt.crypt
crypt mksalt	A							https://docs.python.org			<pre><code>
crypt.mksalt(method=None)</code></pre><br>Return a randomly generated salt of the specified method. If no method is given, the strongest method available as returned by methods() is used.	https://docs.python.org/3.4/library/crypt.html#crypt.mksalt
csv reader	A							https://docs.python.org			<pre><code>
csv.reader(csvfile, dialect='excel', **fmtparams)</code></pre><br>Return a reader object which will iterate over lines in the given csvfile. csvfile can be any object which supports the iterator protocol and returns a string each time its __next__() method is called — file objects and list objects are both suitable.  If csvfile is a file object, it should be opened with newline=''. [1] An optional dialect parameter can be given which is used to define a set of parameters specific to a particular CSV dialect. It may be an instance of a subclass of the Dialect class or one of the strings returned by the list_dialects() function. The other optional fmtparams keyword arguments can be given to override individual formatting parameters in the current dialect. For full details about the dialect and formatting parameters, see section Dialects and Formatting Parameters.	https://docs.python.org/3.4/library/csv.html#csv.reader
csv writer	A							https://docs.python.org			<pre><code>
csv.writer(csvfile, dialect='excel', **fmtparams)</code></pre><br>Return a writer object responsible for converting the user’s data into delimited strings on the given file-like object. csvfile can be any object with a write() method. If csvfile is a file object, it should be opened with newline='' [1]. An optional dialect parameter can be given which is used to define a set of parameters specific to a particular CSV dialect. It may be an instance of a subclass of the Dialect class or one of the strings returned by the list_dialects() function. The other optional fmtparams keyword arguments can be given to override individual formatting parameters in the current dialect. For full details about the dialect and formatting parameters, see section Dialects and Formatting Parameters. To make it as easy as possible to interface with modules which implement the DB API, the value None is written as the empty string. While this isn’t a reversible transformation, it makes it easier to dump SQL NULL data values to CSV files without preprocessing the data returned from a cursor.fetch* call. All other non-string data are stringified with str() before being written.	https://docs.python.org/3.4/library/csv.html#csv.writer
csv register_dialect	A							https://docs.python.org			<pre><code>
csv.register_dialect(name[, dialect[, **fmtparams]])</code></pre><br>Associate dialect with name. name must be a string. The dialect can be specified either by passing a sub-class of Dialect, or by fmtparams keyword arguments, or both, with keyword arguments overriding parameters of the dialect. For full details about the dialect and formatting parameters, see section Dialects and Formatting Parameters.	https://docs.python.org/3.4/library/csv.html#csv.register_dialect
csv unregister_dialect	A							https://docs.python.org			<pre><code>
csv.unregister_dialect(name)</code></pre><br>Delete the dialect associated with name from the dialect registry. An Error is raised if name is not a registered dialect name.	https://docs.python.org/3.4/library/csv.html#csv.unregister_dialect
csv get_dialect	A							https://docs.python.org			<pre><code>
csv.get_dialect(name)</code></pre><br>Return the dialect associated with name. An Error is raised if name is not a registered dialect name. This function returns an immutable Dialect.	https://docs.python.org/3.4/library/csv.html#csv.get_dialect
csv list_dialects	A							https://docs.python.org			<pre><code>
csv.list_dialects()</code></pre><br>Return the names of all registered dialects.	https://docs.python.org/3.4/library/csv.html#csv.list_dialects
csv field_size_limit	A							https://docs.python.org			<pre><code>
csv.field_size_limit([new_limit])</code></pre><br>Returns the current maximum field size allowed by the parser. If new_limit is given, this becomes the new limit.	https://docs.python.org/3.4/library/csv.html#csv.field_size_limit
csv reader	A							https://docs.python.org			<pre><code>
csv.reader(csvfile, dialect='excel', **fmtparams)</code></pre><br>Return a reader object which will iterate over lines in the given csvfile. csvfile can be any object which supports the iterator protocol and returns a string each time its __next__() method is called — file objects and list objects are both suitable.  If csvfile is a file object, it should be opened with newline=''. [1] An optional dialect parameter can be given which is used to define a set of parameters specific to a particular CSV dialect. It may be an instance of a subclass of the Dialect class or one of the strings returned by the list_dialects() function. The other optional fmtparams keyword arguments can be given to override individual formatting parameters in the current dialect. For full details about the dialect and formatting parameters, see section Dialects and Formatting Parameters.	https://docs.python.org/3.4/library/csv.html#csv.reader
csv writer	A							https://docs.python.org			<pre><code>
csv.writer(csvfile, dialect='excel', **fmtparams)</code></pre><br>Return a writer object responsible for converting the user’s data into delimited strings on the given file-like object. csvfile can be any object with a write() method. If csvfile is a file object, it should be opened with newline='' [1]. An optional dialect parameter can be given which is used to define a set of parameters specific to a particular CSV dialect. It may be an instance of a subclass of the Dialect class or one of the strings returned by the list_dialects() function. The other optional fmtparams keyword arguments can be given to override individual formatting parameters in the current dialect. For full details about the dialect and formatting parameters, see section Dialects and Formatting Parameters. To make it as easy as possible to interface with modules which implement the DB API, the value None is written as the empty string. While this isn’t a reversible transformation, it makes it easier to dump SQL NULL data values to CSV files without preprocessing the data returned from a cursor.fetch* call. All other non-string data are stringified with str() before being written.	https://docs.python.org/3.4/library/csv.html#csv.writer
csv register_dialect	A							https://docs.python.org			<pre><code>
csv.register_dialect(name[, dialect[, **fmtparams]])</code></pre><br>Associate dialect with name. name must be a string. The dialect can be specified either by passing a sub-class of Dialect, or by fmtparams keyword arguments, or both, with keyword arguments overriding parameters of the dialect. For full details about the dialect and formatting parameters, see section Dialects and Formatting Parameters.	https://docs.python.org/3.4/library/csv.html#csv.register_dialect
csv unregister_dialect	A							https://docs.python.org			<pre><code>
csv.unregister_dialect(name)</code></pre><br>Delete the dialect associated with name from the dialect registry. An Error is raised if name is not a registered dialect name.	https://docs.python.org/3.4/library/csv.html#csv.unregister_dialect
csv get_dialect	A							https://docs.python.org			<pre><code>
csv.get_dialect(name)</code></pre><br>Return the dialect associated with name. An Error is raised if name is not a registered dialect name. This function returns an immutable Dialect.	https://docs.python.org/3.4/library/csv.html#csv.get_dialect
csv list_dialects	A							https://docs.python.org			<pre><code>
csv.list_dialects()</code></pre><br>Return the names of all registered dialects.	https://docs.python.org/3.4/library/csv.html#csv.list_dialects
csv field_size_limit	A							https://docs.python.org			<pre><code>
csv.field_size_limit([new_limit])</code></pre><br>Returns the current maximum field size allowed by the parser. If new_limit is given, this becomes the new limit.	https://docs.python.org/3.4/library/csv.html#csv.field_size_limit
callable	A							https://docs.python.org			<pre><code>
callable(result, func, arguments)</code></pre><br>result is what the foreign function returns, as specified by the restype attribute.	https://docs.python.org/3.4/library/ctypes.html
ctypes CFUNCTYPE	A							https://docs.python.org			<pre><code>
ctypes.CFUNCTYPE(restype, *argtypes, use_errno=False, use_last_error=False)</code></pre><br>The returned function prototype creates functions that use the standard C calling convention. The function will release the GIL during the call. If use_errno is set to True, the ctypes private copy of the system errno variable is exchanged with the real errno value before and after the call; use_last_error does the same for the Windows error code.	https://docs.python.org/3.4/library/ctypes.html#ctypes.CFUNCTYPE
ctypes WINFUNCTYPE	A							https://docs.python.org			<pre><code>
ctypes.WINFUNCTYPE(restype, *argtypes, use_errno=False, use_last_error=False)</code></pre><br>Windows only: The returned function prototype creates functions that use the stdcall calling convention, except on Windows CE where WINFUNCTYPE() is the same as CFUNCTYPE(). The function will release the GIL during the call. use_errno and use_last_error have the same meaning as above.	https://docs.python.org/3.4/library/ctypes.html#ctypes.WINFUNCTYPE
ctypes PYFUNCTYPE	A							https://docs.python.org			<pre><code>
ctypes.PYFUNCTYPE(restype, *argtypes)</code></pre><br>The returned function prototype creates functions that use the Python calling convention. The function will not release the GIL during the call.	https://docs.python.org/3.4/library/ctypes.html#ctypes.PYFUNCTYPE
prototype	A							https://docs.python.org			<pre><code>
prototype(address)</code></pre><br>Returns a foreign function at the specified address which must be an integer.	https://docs.python.org/3.4/library/ctypes.html
prototype	A							https://docs.python.org			<pre><code>
prototype(callable)</code></pre><br>Create a C callable function (a callback function) from a Python callable.	https://docs.python.org/3.4/library/ctypes.html
prototype	A							https://docs.python.org			<pre><code>
prototype(func_spec[, paramflags])</code></pre><br>Returns a foreign function exported by a shared library. func_spec must be a 2-tuple (name_or_ordinal, library). The first item is the name of the exported function as string, or the ordinal of the exported function as small integer. The second item is the shared library instance.	https://docs.python.org/3.4/library/ctypes.html
prototype	A							https://docs.python.org			<pre><code>
prototype(vtbl_index, name[, paramflags[, iid]])</code></pre><br>Returns a foreign function that will call a COM method. vtbl_index is the index into the virtual function table, a small non-negative integer. name is name of the COM method. iid is an optional pointer to the interface identifier which is used in extended error reporting.	https://docs.python.org/3.4/library/ctypes.html
ctypes addressof	A							https://docs.python.org			<pre><code>
ctypes.addressof(obj)</code></pre><br>Returns the address of the memory buffer as integer. obj must be an instance of a ctypes type.	https://docs.python.org/3.4/library/ctypes.html#ctypes.addressof
ctypes alignment	A							https://docs.python.org			<pre><code>
ctypes.alignment(obj_or_type)</code></pre><br>Returns the alignment requirements of a ctypes type. obj_or_type must be a ctypes type or instance.	https://docs.python.org/3.4/library/ctypes.html#ctypes.alignment
ctypes byref	A							https://docs.python.org			<pre><code>
ctypes.byref(obj[, offset])</code></pre><br>Returns a light-weight pointer to obj, which must be an instance of a ctypes type. offset defaults to zero, and must be an integer that will be added to the internal pointer value.	https://docs.python.org/3.4/library/ctypes.html#ctypes.byref
ctypes cast	A							https://docs.python.org			<pre><code>
ctypes.cast(obj, type)</code></pre><br>This function is similar to the cast operator in C. It returns a new instance of type which points to the same memory block as obj. type must be a pointer type, and obj must be an object that can be interpreted as a pointer.	https://docs.python.org/3.4/library/ctypes.html#ctypes.cast
ctypes create_string_buffer	A							https://docs.python.org			<pre><code>
ctypes.create_string_buffer(init_or_size, size=None)</code></pre><br>This function creates a mutable character buffer. The returned object is a ctypes array of c_char.	https://docs.python.org/3.4/library/ctypes.html#ctypes.create_string_buffer
ctypes create_unicode_buffer	A							https://docs.python.org			<pre><code>
ctypes.create_unicode_buffer(init_or_size, size=None)</code></pre><br>This function creates a mutable unicode character buffer. The returned object is a ctypes array of c_wchar.	https://docs.python.org/3.4/library/ctypes.html#ctypes.create_unicode_buffer
ctypes DllCanUnloadNow	A							https://docs.python.org			<pre><code>
ctypes.DllCanUnloadNow()</code></pre><br>Windows only: This function is a hook which allows to implement in-process COM servers with ctypes. It is called from the DllCanUnloadNow function that the _ctypes extension dll exports.	https://docs.python.org/3.4/library/ctypes.html#ctypes.DllCanUnloadNow
ctypes DllGetClassObject	A							https://docs.python.org			<pre><code>
ctypes.DllGetClassObject()</code></pre><br>Windows only: This function is a hook which allows to implement in-process COM servers with ctypes. It is called from the DllGetClassObject function that the _ctypes extension dll exports.	https://docs.python.org/3.4/library/ctypes.html#ctypes.DllGetClassObject
ctypes.util find_library	A							https://docs.python.org			<pre><code>
ctypes.util.find_library(name)</code></pre><br>Try to find a library and return a pathname. name is the library name without any prefix like lib, suffix like .so, .dylib or version number (this is the form used for the posix linker option -l). If no library can be found, returns None.	https://docs.python.org/3.4/library/ctypes.html#ctypes.util.find_library
ctypes.util find_msvcrt	A							https://docs.python.org			<pre><code>
ctypes.util.find_msvcrt()</code></pre><br>Windows only: return the filename of the VC runtime library used by Python, and by the extension modules. If the name of the library cannot be determined, None is returned.	https://docs.python.org/3.4/library/ctypes.html#ctypes.util.find_msvcrt
ctypes FormatError	A							https://docs.python.org			<pre><code>
ctypes.FormatError([code])</code></pre><br>Windows only: Returns a textual description of the error code code. If no error code is specified, the last error code is used by calling the Windows api function GetLastError.	https://docs.python.org/3.4/library/ctypes.html#ctypes.FormatError
ctypes GetLastError	A							https://docs.python.org			<pre><code>
ctypes.GetLastError()</code></pre><br>Windows only: Returns the last error code set by Windows in the calling thread. This function calls the Windows GetLastError() function directly, it does not return the ctypes-private copy of the error code.	https://docs.python.org/3.4/library/ctypes.html#ctypes.GetLastError
ctypes get_errno	A							https://docs.python.org			<pre><code>
ctypes.get_errno()</code></pre><br>Returns the current value of the ctypes-private copy of the system errno variable in the calling thread.	https://docs.python.org/3.4/library/ctypes.html#ctypes.get_errno
ctypes get_last_error	A							https://docs.python.org			<pre><code>
ctypes.get_last_error()</code></pre><br>Windows only: returns the current value of the ctypes-private copy of the system LastError variable in the calling thread.	https://docs.python.org/3.4/library/ctypes.html#ctypes.get_last_error
ctypes memmove	A							https://docs.python.org			<pre><code>
ctypes.memmove(dst, src, count)</code></pre><br>Same as the standard C memmove library function: copies count bytes from src to dst. dst and src must be integers or ctypes instances that can be converted to pointers.	https://docs.python.org/3.4/library/ctypes.html#ctypes.memmove
ctypes memset	A							https://docs.python.org			<pre><code>
ctypes.memset(dst, c, count)</code></pre><br>Same as the standard C memset library function: fills the memory block at address dst with count bytes of value c. dst must be an integer specifying an address, or a ctypes instance.	https://docs.python.org/3.4/library/ctypes.html#ctypes.memset
ctypes POINTER	A							https://docs.python.org			<pre><code>
ctypes.POINTER(type)</code></pre><br>This factory function creates and returns a new ctypes pointer type. Pointer types are cached an reused internally, so calling this function repeatedly is cheap. type must be a ctypes type.	https://docs.python.org/3.4/library/ctypes.html#ctypes.POINTER
ctypes pointer	A							https://docs.python.org			<pre><code>
ctypes.pointer(obj)</code></pre><br>This function creates a new pointer instance, pointing to obj. The returned object is of the type POINTER(type(obj)).	https://docs.python.org/3.4/library/ctypes.html#ctypes.pointer
ctypes resize	A							https://docs.python.org			<pre><code>
ctypes.resize(obj, size)</code></pre><br>This function resizes the internal memory buffer of obj, which must be an instance of a ctypes type. It is not possible to make the buffer smaller than the native size of the objects type, as given by sizeof(type(obj)), but it is possible to enlarge the buffer.	https://docs.python.org/3.4/library/ctypes.html#ctypes.resize
ctypes set_errno	A							https://docs.python.org			<pre><code>
ctypes.set_errno(value)</code></pre><br>Set the current value of the ctypes-private copy of the system errno variable in the calling thread to value and return the previous value.	https://docs.python.org/3.4/library/ctypes.html#ctypes.set_errno
ctypes set_last_error	A							https://docs.python.org			<pre><code>
ctypes.set_last_error(value)</code></pre><br>Windows only: set the current value of the ctypes-private copy of the system LastError variable in the calling thread to value and return the previous value.	https://docs.python.org/3.4/library/ctypes.html#ctypes.set_last_error
ctypes sizeof	A							https://docs.python.org			<pre><code>
ctypes.sizeof(obj_or_type)</code></pre><br>Returns the size in bytes of a ctypes type or instance memory buffer. Does the same as the C sizeof operator.	https://docs.python.org/3.4/library/ctypes.html#ctypes.sizeof
ctypes string_at	A							https://docs.python.org			<pre><code>
ctypes.string_at(address, size=-1)</code></pre><br>This function returns the C string starting at memory address address as a bytes object. If size is specified, it is used as size, otherwise the string is assumed to be zero-terminated.	https://docs.python.org/3.4/library/ctypes.html#ctypes.string_at
ctypes WinError	A							https://docs.python.org			<pre><code>
ctypes.WinError(code=None, descr=None)</code></pre><br>Windows only: this function is probably the worst-named thing in ctypes. It creates an instance of OSError. If code is not specified, GetLastError is called to determine the error code. If descr is not specified, FormatError() is called to get a textual description of the error.	https://docs.python.org/3.4/library/ctypes.html#ctypes.WinError
ctypes wstring_at	A							https://docs.python.org			<pre><code>
ctypes.wstring_at(address, size=-1)</code></pre><br>This function returns the wide character string starting at memory address address as a string. If size is specified, it is used as the number of characters of the string, otherwise the string is assumed to be zero-terminated.	https://docs.python.org/3.4/library/ctypes.html#ctypes.wstring_at
callable	A							https://docs.python.org			<pre><code>
callable(result, func, arguments)</code></pre><br>result is what the foreign function returns, as specified by the restype attribute.	https://docs.python.org/3.4/library/ctypes.html
ctypes CFUNCTYPE	A							https://docs.python.org			<pre><code>
ctypes.CFUNCTYPE(restype, *argtypes, use_errno=False, use_last_error=False)</code></pre><br>The returned function prototype creates functions that use the standard C calling convention. The function will release the GIL during the call. If use_errno is set to True, the ctypes private copy of the system errno variable is exchanged with the real errno value before and after the call; use_last_error does the same for the Windows error code.	https://docs.python.org/3.4/library/ctypes.html#ctypes.CFUNCTYPE
ctypes WINFUNCTYPE	A							https://docs.python.org			<pre><code>
ctypes.WINFUNCTYPE(restype, *argtypes, use_errno=False, use_last_error=False)</code></pre><br>Windows only: The returned function prototype creates functions that use the stdcall calling convention, except on Windows CE where WINFUNCTYPE() is the same as CFUNCTYPE(). The function will release the GIL during the call. use_errno and use_last_error have the same meaning as above.	https://docs.python.org/3.4/library/ctypes.html#ctypes.WINFUNCTYPE
ctypes PYFUNCTYPE	A							https://docs.python.org			<pre><code>
ctypes.PYFUNCTYPE(restype, *argtypes)</code></pre><br>The returned function prototype creates functions that use the Python calling convention. The function will not release the GIL during the call.	https://docs.python.org/3.4/library/ctypes.html#ctypes.PYFUNCTYPE
prototype	A							https://docs.python.org			<pre><code>
prototype(address)</code></pre><br>Returns a foreign function at the specified address which must be an integer.	https://docs.python.org/3.4/library/ctypes.html
prototype	A							https://docs.python.org			<pre><code>
prototype(callable)</code></pre><br>Create a C callable function (a callback function) from a Python callable.	https://docs.python.org/3.4/library/ctypes.html
prototype	A							https://docs.python.org			<pre><code>
prototype(func_spec[, paramflags])</code></pre><br>Returns a foreign function exported by a shared library. func_spec must be a 2-tuple (name_or_ordinal, library). The first item is the name of the exported function as string, or the ordinal of the exported function as small integer. The second item is the shared library instance.	https://docs.python.org/3.4/library/ctypes.html
prototype	A							https://docs.python.org			<pre><code>
prototype(vtbl_index, name[, paramflags[, iid]])</code></pre><br>Returns a foreign function that will call a COM method. vtbl_index is the index into the virtual function table, a small non-negative integer. name is name of the COM method. iid is an optional pointer to the interface identifier which is used in extended error reporting.	https://docs.python.org/3.4/library/ctypes.html
ctypes addressof	A							https://docs.python.org			<pre><code>
ctypes.addressof(obj)</code></pre><br>Returns the address of the memory buffer as integer. obj must be an instance of a ctypes type.	https://docs.python.org/3.4/library/ctypes.html#ctypes.addressof
ctypes alignment	A							https://docs.python.org			<pre><code>
ctypes.alignment(obj_or_type)</code></pre><br>Returns the alignment requirements of a ctypes type. obj_or_type must be a ctypes type or instance.	https://docs.python.org/3.4/library/ctypes.html#ctypes.alignment
ctypes byref	A							https://docs.python.org			<pre><code>
ctypes.byref(obj[, offset])</code></pre><br>Returns a light-weight pointer to obj, which must be an instance of a ctypes type. offset defaults to zero, and must be an integer that will be added to the internal pointer value.	https://docs.python.org/3.4/library/ctypes.html#ctypes.byref
ctypes cast	A							https://docs.python.org			<pre><code>
ctypes.cast(obj, type)</code></pre><br>This function is similar to the cast operator in C. It returns a new instance of type which points to the same memory block as obj. type must be a pointer type, and obj must be an object that can be interpreted as a pointer.	https://docs.python.org/3.4/library/ctypes.html#ctypes.cast
ctypes create_string_buffer	A							https://docs.python.org			<pre><code>
ctypes.create_string_buffer(init_or_size, size=None)</code></pre><br>This function creates a mutable character buffer. The returned object is a ctypes array of c_char.	https://docs.python.org/3.4/library/ctypes.html#ctypes.create_string_buffer
ctypes create_unicode_buffer	A							https://docs.python.org			<pre><code>
ctypes.create_unicode_buffer(init_or_size, size=None)</code></pre><br>This function creates a mutable unicode character buffer. The returned object is a ctypes array of c_wchar.	https://docs.python.org/3.4/library/ctypes.html#ctypes.create_unicode_buffer
ctypes DllCanUnloadNow	A							https://docs.python.org			<pre><code>
ctypes.DllCanUnloadNow()</code></pre><br>Windows only: This function is a hook which allows to implement in-process COM servers with ctypes. It is called from the DllCanUnloadNow function that the _ctypes extension dll exports.	https://docs.python.org/3.4/library/ctypes.html#ctypes.DllCanUnloadNow
ctypes DllGetClassObject	A							https://docs.python.org			<pre><code>
ctypes.DllGetClassObject()</code></pre><br>Windows only: This function is a hook which allows to implement in-process COM servers with ctypes. It is called from the DllGetClassObject function that the _ctypes extension dll exports.	https://docs.python.org/3.4/library/ctypes.html#ctypes.DllGetClassObject
ctypes.util find_library	A							https://docs.python.org			<pre><code>
ctypes.util.find_library(name)</code></pre><br>Try to find a library and return a pathname. name is the library name without any prefix like lib, suffix like .so, .dylib or version number (this is the form used for the posix linker option -l). If no library can be found, returns None.	https://docs.python.org/3.4/library/ctypes.html#ctypes.util.find_library
ctypes.util find_msvcrt	A							https://docs.python.org			<pre><code>
ctypes.util.find_msvcrt()</code></pre><br>Windows only: return the filename of the VC runtime library used by Python, and by the extension modules. If the name of the library cannot be determined, None is returned.	https://docs.python.org/3.4/library/ctypes.html#ctypes.util.find_msvcrt
ctypes FormatError	A							https://docs.python.org			<pre><code>
ctypes.FormatError([code])</code></pre><br>Windows only: Returns a textual description of the error code code. If no error code is specified, the last error code is used by calling the Windows api function GetLastError.	https://docs.python.org/3.4/library/ctypes.html#ctypes.FormatError
ctypes GetLastError	A							https://docs.python.org			<pre><code>
ctypes.GetLastError()</code></pre><br>Windows only: Returns the last error code set by Windows in the calling thread. This function calls the Windows GetLastError() function directly, it does not return the ctypes-private copy of the error code.	https://docs.python.org/3.4/library/ctypes.html#ctypes.GetLastError
ctypes get_errno	A							https://docs.python.org			<pre><code>
ctypes.get_errno()</code></pre><br>Returns the current value of the ctypes-private copy of the system errno variable in the calling thread.	https://docs.python.org/3.4/library/ctypes.html#ctypes.get_errno
ctypes get_last_error	A							https://docs.python.org			<pre><code>
ctypes.get_last_error()</code></pre><br>Windows only: returns the current value of the ctypes-private copy of the system LastError variable in the calling thread.	https://docs.python.org/3.4/library/ctypes.html#ctypes.get_last_error
ctypes memmove	A							https://docs.python.org			<pre><code>
ctypes.memmove(dst, src, count)</code></pre><br>Same as the standard C memmove library function: copies count bytes from src to dst. dst and src must be integers or ctypes instances that can be converted to pointers.	https://docs.python.org/3.4/library/ctypes.html#ctypes.memmove
ctypes memset	A							https://docs.python.org			<pre><code>
ctypes.memset(dst, c, count)</code></pre><br>Same as the standard C memset library function: fills the memory block at address dst with count bytes of value c. dst must be an integer specifying an address, or a ctypes instance.	https://docs.python.org/3.4/library/ctypes.html#ctypes.memset
ctypes POINTER	A							https://docs.python.org			<pre><code>
ctypes.POINTER(type)</code></pre><br>This factory function creates and returns a new ctypes pointer type. Pointer types are cached an reused internally, so calling this function repeatedly is cheap. type must be a ctypes type.	https://docs.python.org/3.4/library/ctypes.html#ctypes.POINTER
ctypes pointer	A							https://docs.python.org			<pre><code>
ctypes.pointer(obj)</code></pre><br>This function creates a new pointer instance, pointing to obj. The returned object is of the type POINTER(type(obj)).	https://docs.python.org/3.4/library/ctypes.html#ctypes.pointer
ctypes resize	A							https://docs.python.org			<pre><code>
ctypes.resize(obj, size)</code></pre><br>This function resizes the internal memory buffer of obj, which must be an instance of a ctypes type. It is not possible to make the buffer smaller than the native size of the objects type, as given by sizeof(type(obj)), but it is possible to enlarge the buffer.	https://docs.python.org/3.4/library/ctypes.html#ctypes.resize
ctypes set_errno	A							https://docs.python.org			<pre><code>
ctypes.set_errno(value)</code></pre><br>Set the current value of the ctypes-private copy of the system errno variable in the calling thread to value and return the previous value.	https://docs.python.org/3.4/library/ctypes.html#ctypes.set_errno
ctypes set_last_error	A							https://docs.python.org			<pre><code>
ctypes.set_last_error(value)</code></pre><br>Windows only: set the current value of the ctypes-private copy of the system LastError variable in the calling thread to value and return the previous value.	https://docs.python.org/3.4/library/ctypes.html#ctypes.set_last_error
ctypes sizeof	A							https://docs.python.org			<pre><code>
ctypes.sizeof(obj_or_type)</code></pre><br>Returns the size in bytes of a ctypes type or instance memory buffer. Does the same as the C sizeof operator.	https://docs.python.org/3.4/library/ctypes.html#ctypes.sizeof
ctypes string_at	A							https://docs.python.org			<pre><code>
ctypes.string_at(address, size=-1)</code></pre><br>This function returns the C string starting at memory address address as a bytes object. If size is specified, it is used as size, otherwise the string is assumed to be zero-terminated.	https://docs.python.org/3.4/library/ctypes.html#ctypes.string_at
ctypes WinError	A							https://docs.python.org			<pre><code>
ctypes.WinError(code=None, descr=None)</code></pre><br>Windows only: this function is probably the worst-named thing in ctypes. It creates an instance of OSError. If code is not specified, GetLastError is called to determine the error code. If descr is not specified, FormatError() is called to get a textual description of the error.	https://docs.python.org/3.4/library/ctypes.html#ctypes.WinError
ctypes wstring_at	A							https://docs.python.org			<pre><code>
ctypes.wstring_at(address, size=-1)</code></pre><br>This function returns the wide character string starting at memory address address as a string. If size is specified, it is used as the number of characters of the string, otherwise the string is assumed to be zero-terminated.	https://docs.python.org/3.4/library/ctypes.html#ctypes.wstring_at
callable	A							https://docs.python.org			<pre><code>
callable(result, func, arguments)</code></pre><br>result is what the foreign function returns, as specified by the restype attribute.	https://docs.python.org/3.4/library/ctypes.html
ctypes CFUNCTYPE	A							https://docs.python.org			<pre><code>
ctypes.CFUNCTYPE(restype, *argtypes, use_errno=False, use_last_error=False)</code></pre><br>The returned function prototype creates functions that use the standard C calling convention. The function will release the GIL during the call. If use_errno is set to True, the ctypes private copy of the system errno variable is exchanged with the real errno value before and after the call; use_last_error does the same for the Windows error code.	https://docs.python.org/3.4/library/ctypes.html#ctypes.CFUNCTYPE
ctypes WINFUNCTYPE	A							https://docs.python.org			<pre><code>
ctypes.WINFUNCTYPE(restype, *argtypes, use_errno=False, use_last_error=False)</code></pre><br>Windows only: The returned function prototype creates functions that use the stdcall calling convention, except on Windows CE where WINFUNCTYPE() is the same as CFUNCTYPE(). The function will release the GIL during the call. use_errno and use_last_error have the same meaning as above.	https://docs.python.org/3.4/library/ctypes.html#ctypes.WINFUNCTYPE
ctypes PYFUNCTYPE	A							https://docs.python.org			<pre><code>
ctypes.PYFUNCTYPE(restype, *argtypes)</code></pre><br>The returned function prototype creates functions that use the Python calling convention. The function will not release the GIL during the call.	https://docs.python.org/3.4/library/ctypes.html#ctypes.PYFUNCTYPE
prototype	A							https://docs.python.org			<pre><code>
prototype(address)</code></pre><br>Returns a foreign function at the specified address which must be an integer.	https://docs.python.org/3.4/library/ctypes.html
prototype	A							https://docs.python.org			<pre><code>
prototype(callable)</code></pre><br>Create a C callable function (a callback function) from a Python callable.	https://docs.python.org/3.4/library/ctypes.html
prototype	A							https://docs.python.org			<pre><code>
prototype(func_spec[, paramflags])</code></pre><br>Returns a foreign function exported by a shared library. func_spec must be a 2-tuple (name_or_ordinal, library). The first item is the name of the exported function as string, or the ordinal of the exported function as small integer. The second item is the shared library instance.	https://docs.python.org/3.4/library/ctypes.html
prototype	A							https://docs.python.org			<pre><code>
prototype(vtbl_index, name[, paramflags[, iid]])</code></pre><br>Returns a foreign function that will call a COM method. vtbl_index is the index into the virtual function table, a small non-negative integer. name is name of the COM method. iid is an optional pointer to the interface identifier which is used in extended error reporting.	https://docs.python.org/3.4/library/ctypes.html
ctypes addressof	A							https://docs.python.org			<pre><code>
ctypes.addressof(obj)</code></pre><br>Returns the address of the memory buffer as integer. obj must be an instance of a ctypes type.	https://docs.python.org/3.4/library/ctypes.html#ctypes.addressof
ctypes alignment	A							https://docs.python.org			<pre><code>
ctypes.alignment(obj_or_type)</code></pre><br>Returns the alignment requirements of a ctypes type. obj_or_type must be a ctypes type or instance.	https://docs.python.org/3.4/library/ctypes.html#ctypes.alignment
ctypes byref	A							https://docs.python.org			<pre><code>
ctypes.byref(obj[, offset])</code></pre><br>Returns a light-weight pointer to obj, which must be an instance of a ctypes type. offset defaults to zero, and must be an integer that will be added to the internal pointer value.	https://docs.python.org/3.4/library/ctypes.html#ctypes.byref
ctypes cast	A							https://docs.python.org			<pre><code>
ctypes.cast(obj, type)</code></pre><br>This function is similar to the cast operator in C. It returns a new instance of type which points to the same memory block as obj. type must be a pointer type, and obj must be an object that can be interpreted as a pointer.	https://docs.python.org/3.4/library/ctypes.html#ctypes.cast
ctypes create_string_buffer	A							https://docs.python.org			<pre><code>
ctypes.create_string_buffer(init_or_size, size=None)</code></pre><br>This function creates a mutable character buffer. The returned object is a ctypes array of c_char.	https://docs.python.org/3.4/library/ctypes.html#ctypes.create_string_buffer
ctypes create_unicode_buffer	A							https://docs.python.org			<pre><code>
ctypes.create_unicode_buffer(init_or_size, size=None)</code></pre><br>This function creates a mutable unicode character buffer. The returned object is a ctypes array of c_wchar.	https://docs.python.org/3.4/library/ctypes.html#ctypes.create_unicode_buffer
ctypes DllCanUnloadNow	A							https://docs.python.org			<pre><code>
ctypes.DllCanUnloadNow()</code></pre><br>Windows only: This function is a hook which allows to implement in-process COM servers with ctypes. It is called from the DllCanUnloadNow function that the _ctypes extension dll exports.	https://docs.python.org/3.4/library/ctypes.html#ctypes.DllCanUnloadNow
ctypes DllGetClassObject	A							https://docs.python.org			<pre><code>
ctypes.DllGetClassObject()</code></pre><br>Windows only: This function is a hook which allows to implement in-process COM servers with ctypes. It is called from the DllGetClassObject function that the _ctypes extension dll exports.	https://docs.python.org/3.4/library/ctypes.html#ctypes.DllGetClassObject
ctypes.util find_library	A							https://docs.python.org			<pre><code>
ctypes.util.find_library(name)</code></pre><br>Try to find a library and return a pathname. name is the library name without any prefix like lib, suffix like .so, .dylib or version number (this is the form used for the posix linker option -l). If no library can be found, returns None.	https://docs.python.org/3.4/library/ctypes.html#ctypes.util.find_library
ctypes.util find_msvcrt	A							https://docs.python.org			<pre><code>
ctypes.util.find_msvcrt()</code></pre><br>Windows only: return the filename of the VC runtime library used by Python, and by the extension modules. If the name of the library cannot be determined, None is returned.	https://docs.python.org/3.4/library/ctypes.html#ctypes.util.find_msvcrt
ctypes FormatError	A							https://docs.python.org			<pre><code>
ctypes.FormatError([code])</code></pre><br>Windows only: Returns a textual description of the error code code. If no error code is specified, the last error code is used by calling the Windows api function GetLastError.	https://docs.python.org/3.4/library/ctypes.html#ctypes.FormatError
ctypes GetLastError	A							https://docs.python.org			<pre><code>
ctypes.GetLastError()</code></pre><br>Windows only: Returns the last error code set by Windows in the calling thread. This function calls the Windows GetLastError() function directly, it does not return the ctypes-private copy of the error code.	https://docs.python.org/3.4/library/ctypes.html#ctypes.GetLastError
ctypes get_errno	A							https://docs.python.org			<pre><code>
ctypes.get_errno()</code></pre><br>Returns the current value of the ctypes-private copy of the system errno variable in the calling thread.	https://docs.python.org/3.4/library/ctypes.html#ctypes.get_errno
ctypes get_last_error	A							https://docs.python.org			<pre><code>
ctypes.get_last_error()</code></pre><br>Windows only: returns the current value of the ctypes-private copy of the system LastError variable in the calling thread.	https://docs.python.org/3.4/library/ctypes.html#ctypes.get_last_error
ctypes memmove	A							https://docs.python.org			<pre><code>
ctypes.memmove(dst, src, count)</code></pre><br>Same as the standard C memmove library function: copies count bytes from src to dst. dst and src must be integers or ctypes instances that can be converted to pointers.	https://docs.python.org/3.4/library/ctypes.html#ctypes.memmove
ctypes memset	A							https://docs.python.org			<pre><code>
ctypes.memset(dst, c, count)</code></pre><br>Same as the standard C memset library function: fills the memory block at address dst with count bytes of value c. dst must be an integer specifying an address, or a ctypes instance.	https://docs.python.org/3.4/library/ctypes.html#ctypes.memset
ctypes POINTER	A							https://docs.python.org			<pre><code>
ctypes.POINTER(type)</code></pre><br>This factory function creates and returns a new ctypes pointer type. Pointer types are cached an reused internally, so calling this function repeatedly is cheap. type must be a ctypes type.	https://docs.python.org/3.4/library/ctypes.html#ctypes.POINTER
ctypes pointer	A							https://docs.python.org			<pre><code>
ctypes.pointer(obj)</code></pre><br>This function creates a new pointer instance, pointing to obj. The returned object is of the type POINTER(type(obj)).	https://docs.python.org/3.4/library/ctypes.html#ctypes.pointer
ctypes resize	A							https://docs.python.org			<pre><code>
ctypes.resize(obj, size)</code></pre><br>This function resizes the internal memory buffer of obj, which must be an instance of a ctypes type. It is not possible to make the buffer smaller than the native size of the objects type, as given by sizeof(type(obj)), but it is possible to enlarge the buffer.	https://docs.python.org/3.4/library/ctypes.html#ctypes.resize
ctypes set_errno	A							https://docs.python.org			<pre><code>
ctypes.set_errno(value)</code></pre><br>Set the current value of the ctypes-private copy of the system errno variable in the calling thread to value and return the previous value.	https://docs.python.org/3.4/library/ctypes.html#ctypes.set_errno
ctypes set_last_error	A							https://docs.python.org			<pre><code>
ctypes.set_last_error(value)</code></pre><br>Windows only: set the current value of the ctypes-private copy of the system LastError variable in the calling thread to value and return the previous value.	https://docs.python.org/3.4/library/ctypes.html#ctypes.set_last_error
ctypes sizeof	A							https://docs.python.org			<pre><code>
ctypes.sizeof(obj_or_type)</code></pre><br>Returns the size in bytes of a ctypes type or instance memory buffer. Does the same as the C sizeof operator.	https://docs.python.org/3.4/library/ctypes.html#ctypes.sizeof
ctypes string_at	A							https://docs.python.org			<pre><code>
ctypes.string_at(address, size=-1)</code></pre><br>This function returns the C string starting at memory address address as a bytes object. If size is specified, it is used as size, otherwise the string is assumed to be zero-terminated.	https://docs.python.org/3.4/library/ctypes.html#ctypes.string_at
ctypes WinError	A							https://docs.python.org			<pre><code>
ctypes.WinError(code=None, descr=None)</code></pre><br>Windows only: this function is probably the worst-named thing in ctypes. It creates an instance of OSError. If code is not specified, GetLastError is called to determine the error code. If descr is not specified, FormatError() is called to get a textual description of the error.	https://docs.python.org/3.4/library/ctypes.html#ctypes.WinError
ctypes wstring_at	A							https://docs.python.org			<pre><code>
ctypes.wstring_at(address, size=-1)</code></pre><br>This function returns the wide character string starting at memory address address as a string. If size is specified, it is used as the number of characters of the string, otherwise the string is assumed to be zero-terminated.	https://docs.python.org/3.4/library/ctypes.html#ctypes.wstring_at
curses.ascii isalnum	A							https://docs.python.org			<pre><code>
curses.ascii.isalnum(c)</code></pre><br>Checks for an ASCII alphanumeric character; it is equivalent to isalpha(c) or isdigit(c).	https://docs.python.org/3.4/library/curses.ascii.html#curses.ascii.isalnum
curses.ascii isalpha	A							https://docs.python.org			<pre><code>
curses.ascii.isalpha(c)</code></pre><br>Checks for an ASCII alphabetic character; it is equivalent to isupper(c) or islower(c).	https://docs.python.org/3.4/library/curses.ascii.html#curses.ascii.isalpha
curses.ascii isascii	A							https://docs.python.org			<pre><code>
curses.ascii.isascii(c)</code></pre><br>Checks for a character value that fits in the 7-bit ASCII set.	https://docs.python.org/3.4/library/curses.ascii.html#curses.ascii.isascii
curses.ascii isblank	A							https://docs.python.org			<pre><code>
curses.ascii.isblank(c)</code></pre><br>Checks for an ASCII whitespace character.	https://docs.python.org/3.4/library/curses.ascii.html#curses.ascii.isblank
curses.ascii iscntrl	A							https://docs.python.org			<pre><code>
curses.ascii.iscntrl(c)</code></pre><br>Checks for an ASCII control character (in the range 0x00 to 0x1f).	https://docs.python.org/3.4/library/curses.ascii.html#curses.ascii.iscntrl
curses.ascii isdigit	A							https://docs.python.org			<pre><code>
curses.ascii.isdigit(c)</code></pre><br>Checks for an ASCII decimal digit, '0' through '9'. This is equivalent to c in string.digits.	https://docs.python.org/3.4/library/curses.ascii.html#curses.ascii.isdigit
curses.ascii isgraph	A							https://docs.python.org			<pre><code>
curses.ascii.isgraph(c)</code></pre><br>Checks for ASCII any printable character except space.	https://docs.python.org/3.4/library/curses.ascii.html#curses.ascii.isgraph
curses.ascii islower	A							https://docs.python.org			<pre><code>
curses.ascii.islower(c)</code></pre><br>Checks for an ASCII lower-case character.	https://docs.python.org/3.4/library/curses.ascii.html#curses.ascii.islower
curses.ascii isprint	A							https://docs.python.org			<pre><code>
curses.ascii.isprint(c)</code></pre><br>Checks for any ASCII printable character including space.	https://docs.python.org/3.4/library/curses.ascii.html#curses.ascii.isprint
curses.ascii ispunct	A							https://docs.python.org			<pre><code>
curses.ascii.ispunct(c)</code></pre><br>Checks for any printable ASCII character which is not a space or an alphanumeric character.	https://docs.python.org/3.4/library/curses.ascii.html#curses.ascii.ispunct
curses.ascii isspace	A							https://docs.python.org			<pre><code>
curses.ascii.isspace(c)</code></pre><br>Checks for ASCII white-space characters; space, line feed, carriage return, form feed, horizontal tab, vertical tab.	https://docs.python.org/3.4/library/curses.ascii.html#curses.ascii.isspace
curses.ascii isupper	A							https://docs.python.org			<pre><code>
curses.ascii.isupper(c)</code></pre><br>Checks for an ASCII uppercase letter.	https://docs.python.org/3.4/library/curses.ascii.html#curses.ascii.isupper
curses.ascii isxdigit	A							https://docs.python.org			<pre><code>
curses.ascii.isxdigit(c)</code></pre><br>Checks for an ASCII hexadecimal digit. This is equivalent to c in string.hexdigits.	https://docs.python.org/3.4/library/curses.ascii.html#curses.ascii.isxdigit
curses.ascii isctrl	A							https://docs.python.org			<pre><code>
curses.ascii.isctrl(c)</code></pre><br>Checks for an ASCII control character (ordinal values 0 to 31).	https://docs.python.org/3.4/library/curses.ascii.html#curses.ascii.isctrl
curses.ascii ismeta	A							https://docs.python.org			<pre><code>
curses.ascii.ismeta(c)</code></pre><br>Checks for a non-ASCII character (ordinal values 0x80 and above).	https://docs.python.org/3.4/library/curses.ascii.html#curses.ascii.ismeta
curses.ascii ascii	A							https://docs.python.org			<pre><code>
curses.ascii.ascii(c)</code></pre><br>Return the ASCII value corresponding to the low 7 bits of c.	https://docs.python.org/3.4/library/curses.ascii.html#curses.ascii.ascii
curses.ascii ctrl	A							https://docs.python.org			<pre><code>
curses.ascii.ctrl(c)</code></pre><br>Return the control character corresponding to the given character (the character bit value is bitwise-anded with 0x1f).	https://docs.python.org/3.4/library/curses.ascii.html#curses.ascii.ctrl
curses.ascii alt	A							https://docs.python.org			<pre><code>
curses.ascii.alt(c)</code></pre><br>Return the 8-bit character corresponding to the given ASCII character (the character bit value is bitwise-ored with 0x80).	https://docs.python.org/3.4/library/curses.ascii.html#curses.ascii.alt
curses.ascii unctrl	A							https://docs.python.org			<pre><code>
curses.ascii.unctrl(c)</code></pre><br>Return a string representation of the ASCII character c. If c is printable, this string is the character itself. If the character is a control character (0x00-0x1f) the string consists of a caret ('^') followed by the corresponding uppercase letter. If the character is an ASCII delete (0x7f) the string is '^?'. If the character has its meta bit (0x80) set, the meta bit is stripped, the preceding rules applied, and '!' prepended to the result.	https://docs.python.org/3.4/library/curses.ascii.html#curses.ascii.unctrl
curses baudrate	A							https://docs.python.org			<pre><code>
curses.baudrate()</code></pre><br>Return the output speed of the terminal in bits per second. On software terminal emulators it will have a fixed high value. Included for historical reasons; in former times, it was used to write output loops for time delays and occasionally to change interfaces depending on the line speed.	https://docs.python.org/3.4/library/curses.html#curses.baudrate
curses beep	A							https://docs.python.org			<pre><code>
curses.beep()</code></pre><br>Emit a short attention sound.	https://docs.python.org/3.4/library/curses.html#curses.beep
curses can_change_color	A							https://docs.python.org			<pre><code>
curses.can_change_color()</code></pre><br>Return True or False, depending on whether the programmer can change the colors displayed by the terminal.	https://docs.python.org/3.4/library/curses.html#curses.can_change_color
curses cbreak	A							https://docs.python.org			<pre><code>
curses.cbreak()</code></pre><br>Enter cbreak mode. In cbreak mode (sometimes called “rare” mode) normal tty line buffering is turned off and characters are available to be read one by one. However, unlike raw mode, special characters (interrupt, quit, suspend, and flow control) retain their effects on the tty driver and calling program. Calling first raw() then cbreak() leaves the terminal in cbreak mode.	https://docs.python.org/3.4/library/curses.html#curses.cbreak
curses color_content	A							https://docs.python.org			<pre><code>
curses.color_content(color_number)</code></pre><br>Return the intensity of the red, green, and blue (RGB) components in the color color_number, which must be between 0 and COLORS. A 3-tuple is returned, containing the R,G,B values for the given color, which will be between 0 (no component) and 1000 (maximum amount of component).	https://docs.python.org/3.4/library/curses.html#curses.color_content
curses color_pair	A							https://docs.python.org			<pre><code>
curses.color_pair(color_number)</code></pre><br>Return the attribute value for displaying text in the specified color. This attribute value can be combined with A_STANDOUT, A_REVERSE, and the other A_* attributes. pair_number() is the counterpart to this function.	https://docs.python.org/3.4/library/curses.html#curses.color_pair
curses curs_set	A							https://docs.python.org			<pre><code>
curses.curs_set(visibility)</code></pre><br>Set the cursor state. visibility can be set to 0, 1, or 2, for invisible, normal, or very visible. If the terminal supports the visibility requested, the previous cursor state is returned; otherwise, an exception is raised. On many terminals, the “visible” mode is an underline cursor and the “very visible” mode is a block cursor.	https://docs.python.org/3.4/library/curses.html#curses.curs_set
curses def_prog_mode	A							https://docs.python.org			<pre><code>
curses.def_prog_mode()</code></pre><br>Save the current terminal mode as the “program” mode, the mode when the running program is using curses. (Its counterpart is the “shell” mode, for when the program is not in curses.) Subsequent calls to reset_prog_mode() will restore this mode.	https://docs.python.org/3.4/library/curses.html#curses.def_prog_mode
curses def_shell_mode	A							https://docs.python.org			<pre><code>
curses.def_shell_mode()</code></pre><br>Save the current terminal mode as the “shell” mode, the mode when the running program is not using curses. (Its counterpart is the “program” mode, when the program is using curses capabilities.) Subsequent calls to reset_shell_mode() will restore this mode.	https://docs.python.org/3.4/library/curses.html#curses.def_shell_mode
curses delay_output	A							https://docs.python.org			<pre><code>
curses.delay_output(ms)</code></pre><br>Insert an ms millisecond pause in output.	https://docs.python.org/3.4/library/curses.html#curses.delay_output
curses doupdate	A							https://docs.python.org			<pre><code>
curses.doupdate()</code></pre><br>Update the physical screen. The curses library keeps two data structures, one representing the current physical screen contents and a virtual screen representing the desired next state. The doupdate() ground updates the physical screen to match the virtual screen.	https://docs.python.org/3.4/library/curses.html#curses.doupdate
curses echo	A							https://docs.python.org			<pre><code>
curses.echo()</code></pre><br>Enter echo mode. In echo mode, each character input is echoed to the screen as it is entered.	https://docs.python.org/3.4/library/curses.html#curses.echo
curses endwin	A							https://docs.python.org			<pre><code>
curses.endwin()</code></pre><br>De-initialize the library, and return terminal to normal status.	https://docs.python.org/3.4/library/curses.html#curses.endwin
curses erasechar	A							https://docs.python.org			<pre><code>
curses.erasechar()</code></pre><br>Return the user’s current erase character. Under Unix operating systems this is a property of the controlling tty of the curses program, and is not set by the curses library itself.	https://docs.python.org/3.4/library/curses.html#curses.erasechar
curses filter	A							https://docs.python.org			<pre><code>
curses.filter()</code></pre><br>The filter() routine, if used, must be called before initscr() is called. The effect is that, during those calls, LINES is set to 1; the capabilities clear, cup, cud, cud1, cuu1, cuu, vpa are disabled; and the home string is set to the value of cr. The effect is that the cursor is confined to the current line, and so are screen updates. This may be used for enabling character-at-a-time line editing without touching the rest of the screen.	https://docs.python.org/3.4/library/curses.html#curses.filter
curses flash	A							https://docs.python.org			<pre><code>
curses.flash()</code></pre><br>Flash the screen. That is, change it to reverse-video and then change it back in a short interval. Some people prefer such as ‘visible bell’ to the audible attention signal produced by beep().	https://docs.python.org/3.4/library/curses.html#curses.flash
curses flushinp	A							https://docs.python.org			<pre><code>
curses.flushinp()</code></pre><br>Flush all input buffers. This throws away any typeahead that has been typed by the user and has not yet been processed by the program.	https://docs.python.org/3.4/library/curses.html#curses.flushinp
curses getmouse	A							https://docs.python.org			<pre><code>
curses.getmouse()</code></pre><br>After getch() returns KEY_MOUSE to signal a mouse event, this method should be call to retrieve the queued mouse event, represented as a 5-tuple (id, x, y, z, bstate). id is an ID value used to distinguish multiple devices, and x, y, z are the event’s coordinates. (z is currently unused.) bstate is an integer value whose bits will be set to indicate the type of event, and will be the bitwise OR of one or more of the following constants, where n is the button number from 1 to 4: BUTTONn_PRESSED, BUTTONn_RELEASED, BUTTONn_CLICKED, BUTTONn_DOUBLE_CLICKED, BUTTONn_TRIPLE_CLICKED, BUTTON_SHIFT, BUTTON_CTRL, BUTTON_ALT.	https://docs.python.org/3.4/library/curses.html#curses.getmouse
curses getsyx	A							https://docs.python.org			<pre><code>
curses.getsyx()</code></pre><br>Return the current coordinates of the virtual screen cursor in y and x. If leaveok is currently true, then -1,-1 is returned.	https://docs.python.org/3.4/library/curses.html#curses.getsyx
curses getwin	A							https://docs.python.org			<pre><code>
curses.getwin(file)</code></pre><br>Read window related data stored in the file by an earlier putwin() call. The routine then creates and initializes a new window using that data, returning the new window object.	https://docs.python.org/3.4/library/curses.html#curses.getwin
curses has_colors	A							https://docs.python.org			<pre><code>
curses.has_colors()</code></pre><br>Return True if the terminal can display colors; otherwise, return False.	https://docs.python.org/3.4/library/curses.html#curses.has_colors
curses has_ic	A							https://docs.python.org			<pre><code>
curses.has_ic()</code></pre><br>Return True if the terminal has insert- and delete-character capabilities. This function is included for historical reasons only, as all modern software terminal emulators have such capabilities.	https://docs.python.org/3.4/library/curses.html#curses.has_ic
curses has_il	A							https://docs.python.org			<pre><code>
curses.has_il()</code></pre><br>Return True if the terminal has insert- and delete-line capabilities, or can simulate them using scrolling regions. This function is included for historical reasons only, as all modern software terminal emulators have such capabilities.	https://docs.python.org/3.4/library/curses.html#curses.has_il
curses has_key	A							https://docs.python.org			<pre><code>
curses.has_key(ch)</code></pre><br>Take a key value ch, and return True if the current terminal type recognizes a key with that value.	https://docs.python.org/3.4/library/curses.html#curses.has_key
curses halfdelay	A							https://docs.python.org			<pre><code>
curses.halfdelay(tenths)</code></pre><br>Used for half-delay mode, which is similar to cbreak mode in that characters typed by the user are immediately available to the program. However, after blocking for tenths tenths of seconds, an exception is raised if nothing has been typed. The value of tenths must be a number between 1 and 255. Use nocbreak() to leave half-delay mode.	https://docs.python.org/3.4/library/curses.html#curses.halfdelay
curses init_color	A							https://docs.python.org			<pre><code>
curses.init_color(color_number, r, g, b)</code></pre><br>Change the definition of a color, taking the number of the color to be changed followed by three RGB values (for the amounts of red, green, and blue components). The value of color_number must be between 0 and COLORS. Each of r, g, b, must be a value between 0 and 1000. When init_color() is used, all occurrences of that color on the screen immediately change to the new definition. This function is a no-op on most terminals; it is active only if can_change_color() returns 1.	https://docs.python.org/3.4/library/curses.html#curses.init_color
curses init_pair	A							https://docs.python.org			<pre><code>
curses.init_pair(pair_number, fg, bg)</code></pre><br>Change the definition of a color-pair. It takes three arguments: the number of the color-pair to be changed, the foreground color number, and the background color number. The value of pair_number must be between 1 and COLOR_PAIRS - 1 (the 0 color pair is wired to white on black and cannot be changed). The value of fg and bg arguments must be between 0 and COLORS. If the color-pair was previously initialized, the screen is refreshed and all occurrences of that color-pair are changed to the new definition.	https://docs.python.org/3.4/library/curses.html#curses.init_pair
curses initscr	A							https://docs.python.org			<pre><code>
curses.initscr()</code></pre><br>Initialize the library. Return a WindowObject which represents the whole screen.	https://docs.python.org/3.4/library/curses.html#curses.initscr
curses is_term_resized	A							https://docs.python.org			<pre><code>
curses.is_term_resized(nlines, ncols)</code></pre><br>Return True if resize_term() would modify the window structure, False otherwise.	https://docs.python.org/3.4/library/curses.html#curses.is_term_resized
curses isendwin	A							https://docs.python.org			<pre><code>
curses.isendwin()</code></pre><br>Return True if endwin() has been called (that is, the curses library has been deinitialized).	https://docs.python.org/3.4/library/curses.html#curses.isendwin
curses keyname	A							https://docs.python.org			<pre><code>
curses.keyname(k)</code></pre><br>Return the name of the key numbered k. The name of a key generating printable ASCII character is the key’s character. The name of a control-key combination is a two-character string consisting of a caret followed by the corresponding printable ASCII character. The name of an alt-key combination (128-255) is a string consisting of the prefix ‘M-‘ followed by the name of the corresponding ASCII character.	https://docs.python.org/3.4/library/curses.html#curses.keyname
curses killchar	A							https://docs.python.org			<pre><code>
curses.killchar()</code></pre><br>Return the user’s current line kill character. Under Unix operating systems this is a property of the controlling tty of the curses program, and is not set by the curses library itself.	https://docs.python.org/3.4/library/curses.html#curses.killchar
curses longname	A							https://docs.python.org			<pre><code>
curses.longname()</code></pre><br>Return a string containing the terminfo long name field describing the current terminal. The maximum length of a verbose description is 128 characters. It is defined only after the call to initscr().	https://docs.python.org/3.4/library/curses.html#curses.longname
curses meta	A							https://docs.python.org			<pre><code>
curses.meta(yes)</code></pre><br>If yes is 1, allow 8-bit characters to be input. If yes is 0, allow only 7-bit chars.	https://docs.python.org/3.4/library/curses.html#curses.meta
curses mouseinterval	A							https://docs.python.org			<pre><code>
curses.mouseinterval(interval)</code></pre><br>Set the maximum time in milliseconds that can elapse between press and release events in order for them to be recognized as a click, and return the previous interval value. The default value is 200 msec, or one fifth of a second.	https://docs.python.org/3.4/library/curses.html#curses.mouseinterval
curses mousemask	A							https://docs.python.org			<pre><code>
curses.mousemask(mousemask)</code></pre><br>Set the mouse events to be reported, and return a tuple (availmask, oldmask).  availmask indicates which of the specified mouse events can be reported; on complete failure it returns 0. oldmask is the previous value of the given window’s mouse event mask. If this function is never called, no mouse events are ever reported.	https://docs.python.org/3.4/library/curses.html#curses.mousemask
curses napms	A							https://docs.python.org			<pre><code>
curses.napms(ms)</code></pre><br>Sleep for ms milliseconds.	https://docs.python.org/3.4/library/curses.html#curses.napms
curses newpad	A							https://docs.python.org			<pre><code>
curses.newpad(nlines, ncols)</code></pre><br>Create and return a pointer to a new pad data structure with the given number of lines and columns. A pad is returned as a window object.	https://docs.python.org/3.4/library/curses.html#curses.newpad
curses newwin	A							https://docs.python.org			<pre><code>
curses.newwin(nlines, ncols)</code></pre><br>Return a new window, whose left-upper corner is at (begin_y, begin_x), and whose height/width is nlines/ncols.	https://docs.python.org/3.4/library/curses.html#curses.newwin
curses nl	A							https://docs.python.org			<pre><code>
curses.nl()</code></pre><br>Enter newline mode. This mode translates the return key into newline on input, and translates newline into return and line-feed on output. Newline mode is initially on.	https://docs.python.org/3.4/library/curses.html#curses.nl
curses nocbreak	A							https://docs.python.org			<pre><code>
curses.nocbreak()</code></pre><br>Leave cbreak mode. Return to normal “cooked” mode with line buffering.	https://docs.python.org/3.4/library/curses.html#curses.nocbreak
curses noecho	A							https://docs.python.org			<pre><code>
curses.noecho()</code></pre><br>Leave echo mode. Echoing of input characters is turned off.	https://docs.python.org/3.4/library/curses.html#curses.noecho
curses nonl	A							https://docs.python.org			<pre><code>
curses.nonl()</code></pre><br>Leave newline mode. Disable translation of return into newline on input, and disable low-level translation of newline into newline/return on output (but this does not change the behavior of addch('\n'), which always does the equivalent of return and line feed on the virtual screen). With translation off, curses can sometimes speed up vertical motion a little; also, it will be able to detect the return key on input.	https://docs.python.org/3.4/library/curses.html#curses.nonl
curses noqiflush	A							https://docs.python.org			<pre><code>
curses.noqiflush()</code></pre><br>When the noqiflush() routine is used, normal flush of input and output queues associated with the INTR, QUIT and SUSP characters will not be done. You may want to call noqiflush() in a signal handler if you want output to continue as though the interrupt had not occurred, after the handler exits.	https://docs.python.org/3.4/library/curses.html#curses.noqiflush
curses noraw	A							https://docs.python.org			<pre><code>
curses.noraw()</code></pre><br>Leave raw mode. Return to normal “cooked” mode with line buffering.	https://docs.python.org/3.4/library/curses.html#curses.noraw
curses pair_content	A							https://docs.python.org			<pre><code>
curses.pair_content(pair_number)</code></pre><br>Return a tuple (fg, bg) containing the colors for the requested color pair. The value of pair_number must be between 1 and COLOR_PAIRS - 1.	https://docs.python.org/3.4/library/curses.html#curses.pair_content
curses pair_number	A							https://docs.python.org			<pre><code>
curses.pair_number(attr)</code></pre><br>Return the number of the color-pair set by the attribute value attr. color_pair() is the counterpart to this function.	https://docs.python.org/3.4/library/curses.html#curses.pair_number
curses putp	A							https://docs.python.org			<pre><code>
curses.putp(string)</code></pre><br>Equivalent to tputs(str, 1, putchar); emit the value of a specified terminfo capability for the current terminal. Note that the output of putp() always goes to standard output.	https://docs.python.org/3.4/library/curses.html#curses.putp
curses qiflush	A							https://docs.python.org			<pre><code>
curses.qiflush([flag])</code></pre><br>If flag is False, the effect is the same as calling noqiflush(). If flag is True, or no argument is provided, the queues will be flushed when these control characters are read.	https://docs.python.org/3.4/library/curses.html#curses.qiflush
curses raw	A							https://docs.python.org			<pre><code>
curses.raw()</code></pre><br>Enter raw mode. In raw mode, normal line buffering and processing of interrupt, quit, suspend, and flow control keys are turned off; characters are presented to curses input functions one by one.	https://docs.python.org/3.4/library/curses.html#curses.raw
curses reset_prog_mode	A							https://docs.python.org			<pre><code>
curses.reset_prog_mode()</code></pre><br>Restore the terminal to “program” mode, as previously saved by def_prog_mode().	https://docs.python.org/3.4/library/curses.html#curses.reset_prog_mode
curses reset_shell_mode	A							https://docs.python.org			<pre><code>
curses.reset_shell_mode()</code></pre><br>Restore the terminal to “shell” mode, as previously saved by def_shell_mode().	https://docs.python.org/3.4/library/curses.html#curses.reset_shell_mode
curses resetty	A							https://docs.python.org			<pre><code>
curses.resetty()</code></pre><br>Restore the state of the terminal modes to what it was at the last call to savetty().	https://docs.python.org/3.4/library/curses.html#curses.resetty
curses resize_term	A							https://docs.python.org			<pre><code>
curses.resize_term(nlines, ncols)</code></pre><br>Backend function used by resizeterm(), performing most of the work; when resizing the windows, resize_term() blank-fills the areas that are extended. The calling application should fill in these areas with appropriate data. The resize_term() function attempts to resize all windows. However, due to the calling convention of pads, it is not possible to resize these without additional interaction with the application.	https://docs.python.org/3.4/library/curses.html#curses.resize_term
curses resizeterm	A							https://docs.python.org			<pre><code>
curses.resizeterm(nlines, ncols)</code></pre><br>Resize the standard and current windows to the specified dimensions, and adjusts other bookkeeping data used by the curses library that record the window dimensions (in particular the SIGWINCH handler).	https://docs.python.org/3.4/library/curses.html#curses.resizeterm
curses savetty	A							https://docs.python.org			<pre><code>
curses.savetty()</code></pre><br>Save the current state of the terminal modes in a buffer, usable by resetty().	https://docs.python.org/3.4/library/curses.html#curses.savetty
curses setsyx	A							https://docs.python.org			<pre><code>
curses.setsyx(y, x)</code></pre><br>Set the virtual screen cursor to y, x. If y and x are both -1, then leaveok is set.	https://docs.python.org/3.4/library/curses.html#curses.setsyx
curses setupterm	A							https://docs.python.org			<pre><code>
curses.setupterm([termstr, fd])</code></pre><br>Initialize the terminal. termstr is a string giving the terminal name; if omitted, the value of the TERM environment variable will be used. fd is the file descriptor to which any initialization sequences will be sent; if not supplied, the file descriptor for sys.stdout will be used.	https://docs.python.org/3.4/library/curses.html#curses.setupterm
curses start_color	A							https://docs.python.org			<pre><code>
curses.start_color()</code></pre><br>Must be called if the programmer wants to use colors, and before any other color manipulation routine is called. It is good practice to call this routine right after initscr().	https://docs.python.org/3.4/library/curses.html#curses.start_color
curses termattrs	A							https://docs.python.org			<pre><code>
curses.termattrs()</code></pre><br>Return a logical OR of all video attributes supported by the terminal. This information is useful when a curses program needs complete control over the appearance of the screen.	https://docs.python.org/3.4/library/curses.html#curses.termattrs
curses termname	A							https://docs.python.org			<pre><code>
curses.termname()</code></pre><br>Return the value of the environment variable TERM, truncated to 14 characters.	https://docs.python.org/3.4/library/curses.html#curses.termname
curses tigetflag	A							https://docs.python.org			<pre><code>
curses.tigetflag(capname)</code></pre><br>Return the value of the Boolean capability corresponding to the terminfo capability name capname. The value -1 is returned if capname is not a Boolean capability, or 0 if it is canceled or absent from the terminal description.	https://docs.python.org/3.4/library/curses.html#curses.tigetflag
curses tigetnum	A							https://docs.python.org			<pre><code>
curses.tigetnum(capname)</code></pre><br>Return the value of the numeric capability corresponding to the terminfo capability name capname. The value -2 is returned if capname is not a numeric capability, or -1 if it is canceled or absent from the terminal description.	https://docs.python.org/3.4/library/curses.html#curses.tigetnum
curses tigetstr	A							https://docs.python.org			<pre><code>
curses.tigetstr(capname)</code></pre><br>Return the value of the string capability corresponding to the terminfo capability name capname. None is returned if capname is not a string capability, or is canceled or absent from the terminal description.	https://docs.python.org/3.4/library/curses.html#curses.tigetstr
curses tparm	A							https://docs.python.org			<pre><code>
curses.tparm(str[, ...])</code></pre><br>Instantiate the string str with the supplied parameters, where str should be a parameterized string obtained from the terminfo database. E.g. tparm(tigetstr("cup"), 5, 3) could result in b'\033[6;4H', the exact result depending on terminal type.	https://docs.python.org/3.4/library/curses.html#curses.tparm
curses typeahead	A							https://docs.python.org			<pre><code>
curses.typeahead(fd)</code></pre><br>Specify that the file descriptor fd be used for typeahead checking. If fd is -1, then no typeahead checking is done.	https://docs.python.org/3.4/library/curses.html#curses.typeahead
curses unctrl	A							https://docs.python.org			<pre><code>
curses.unctrl(ch)</code></pre><br>Return a string which is a printable representation of the character ch. Control characters are displayed as a caret followed by the character, for example as ^C. Printing characters are left as they are.	https://docs.python.org/3.4/library/curses.html#curses.unctrl
curses ungetch	A							https://docs.python.org			<pre><code>
curses.ungetch(ch)</code></pre><br>Push ch so the next getch() will return it.	https://docs.python.org/3.4/library/curses.html#curses.ungetch
curses unget_wch	A							https://docs.python.org			<pre><code>
curses.unget_wch(ch)</code></pre><br>Push ch so the next get_wch() will return it.	https://docs.python.org/3.4/library/curses.html#curses.unget_wch
curses ungetmouse	A							https://docs.python.org			<pre><code>
curses.ungetmouse(id, x, y, z, bstate)</code></pre><br>Push a KEY_MOUSE event onto the input queue, associating the given state data with it.	https://docs.python.org/3.4/library/curses.html#curses.ungetmouse
curses use_env	A							https://docs.python.org			<pre><code>
curses.use_env(flag)</code></pre><br>If used, this function should be called before initscr() or newterm are called. When flag is False, the values of lines and columns specified in the terminfo database will be used, even if environment variables LINES and COLUMNS (used by default) are set, or if curses is running in a window (in which case default behavior would be to use the window size if LINES and COLUMNS are not set).	https://docs.python.org/3.4/library/curses.html#curses.use_env
curses use_default_colors	A							https://docs.python.org			<pre><code>
curses.use_default_colors()</code></pre><br>Allow use of default values for colors on terminals supporting this feature. Use this to support transparency in your application. The default color is assigned to the color number -1. After calling this function, init_pair(x, curses.COLOR_RED, -1) initializes, for instance, color pair x to a red foreground color on the default background.	https://docs.python.org/3.4/library/curses.html#curses.use_default_colors
curses wrapper	A							https://docs.python.org			<pre><code>
curses.wrapper(func, ...)</code></pre><br>Initialize curses and call another callable object, func, which should be the rest of your curses-using application. If the application raises an exception, this function will restore the terminal to a sane state before re-raising the exception and generating a traceback. The callable object func is then passed the main window ‘stdscr’ as its first argument, followed by any other arguments passed to wrapper(). Before calling func, wrapper() turns on cbreak mode, turns off echo, enables the terminal keypad, and initializes colors if the terminal has color support. On exit (whether normally or by exception) it restores cooked mode, turns on echo, and disables the terminal keypad.	https://docs.python.org/3.4/library/curses.html#curses.wrapper
curses baudrate	A							https://docs.python.org			<pre><code>
curses.baudrate()</code></pre><br>Return the output speed of the terminal in bits per second. On software terminal emulators it will have a fixed high value. Included for historical reasons; in former times, it was used to write output loops for time delays and occasionally to change interfaces depending on the line speed.	https://docs.python.org/3.4/library/curses.html#curses.baudrate
curses beep	A							https://docs.python.org			<pre><code>
curses.beep()</code></pre><br>Emit a short attention sound.	https://docs.python.org/3.4/library/curses.html#curses.beep
curses can_change_color	A							https://docs.python.org			<pre><code>
curses.can_change_color()</code></pre><br>Return True or False, depending on whether the programmer can change the colors displayed by the terminal.	https://docs.python.org/3.4/library/curses.html#curses.can_change_color
curses cbreak	A							https://docs.python.org			<pre><code>
curses.cbreak()</code></pre><br>Enter cbreak mode. In cbreak mode (sometimes called “rare” mode) normal tty line buffering is turned off and characters are available to be read one by one. However, unlike raw mode, special characters (interrupt, quit, suspend, and flow control) retain their effects on the tty driver and calling program. Calling first raw() then cbreak() leaves the terminal in cbreak mode.	https://docs.python.org/3.4/library/curses.html#curses.cbreak
curses color_content	A							https://docs.python.org			<pre><code>
curses.color_content(color_number)</code></pre><br>Return the intensity of the red, green, and blue (RGB) components in the color color_number, which must be between 0 and COLORS. A 3-tuple is returned, containing the R,G,B values for the given color, which will be between 0 (no component) and 1000 (maximum amount of component).	https://docs.python.org/3.4/library/curses.html#curses.color_content
curses color_pair	A							https://docs.python.org			<pre><code>
curses.color_pair(color_number)</code></pre><br>Return the attribute value for displaying text in the specified color. This attribute value can be combined with A_STANDOUT, A_REVERSE, and the other A_* attributes. pair_number() is the counterpart to this function.	https://docs.python.org/3.4/library/curses.html#curses.color_pair
curses curs_set	A							https://docs.python.org			<pre><code>
curses.curs_set(visibility)</code></pre><br>Set the cursor state. visibility can be set to 0, 1, or 2, for invisible, normal, or very visible. If the terminal supports the visibility requested, the previous cursor state is returned; otherwise, an exception is raised. On many terminals, the “visible” mode is an underline cursor and the “very visible” mode is a block cursor.	https://docs.python.org/3.4/library/curses.html#curses.curs_set
curses def_prog_mode	A							https://docs.python.org			<pre><code>
curses.def_prog_mode()</code></pre><br>Save the current terminal mode as the “program” mode, the mode when the running program is using curses. (Its counterpart is the “shell” mode, for when the program is not in curses.) Subsequent calls to reset_prog_mode() will restore this mode.	https://docs.python.org/3.4/library/curses.html#curses.def_prog_mode
curses def_shell_mode	A							https://docs.python.org			<pre><code>
curses.def_shell_mode()</code></pre><br>Save the current terminal mode as the “shell” mode, the mode when the running program is not using curses. (Its counterpart is the “program” mode, when the program is using curses capabilities.) Subsequent calls to reset_shell_mode() will restore this mode.	https://docs.python.org/3.4/library/curses.html#curses.def_shell_mode
curses delay_output	A							https://docs.python.org			<pre><code>
curses.delay_output(ms)</code></pre><br>Insert an ms millisecond pause in output.	https://docs.python.org/3.4/library/curses.html#curses.delay_output
curses doupdate	A							https://docs.python.org			<pre><code>
curses.doupdate()</code></pre><br>Update the physical screen. The curses library keeps two data structures, one representing the current physical screen contents and a virtual screen representing the desired next state. The doupdate() ground updates the physical screen to match the virtual screen.	https://docs.python.org/3.4/library/curses.html#curses.doupdate
curses echo	A							https://docs.python.org			<pre><code>
curses.echo()</code></pre><br>Enter echo mode. In echo mode, each character input is echoed to the screen as it is entered.	https://docs.python.org/3.4/library/curses.html#curses.echo
curses endwin	A							https://docs.python.org			<pre><code>
curses.endwin()</code></pre><br>De-initialize the library, and return terminal to normal status.	https://docs.python.org/3.4/library/curses.html#curses.endwin
curses erasechar	A							https://docs.python.org			<pre><code>
curses.erasechar()</code></pre><br>Return the user’s current erase character. Under Unix operating systems this is a property of the controlling tty of the curses program, and is not set by the curses library itself.	https://docs.python.org/3.4/library/curses.html#curses.erasechar
curses filter	A							https://docs.python.org			<pre><code>
curses.filter()</code></pre><br>The filter() routine, if used, must be called before initscr() is called. The effect is that, during those calls, LINES is set to 1; the capabilities clear, cup, cud, cud1, cuu1, cuu, vpa are disabled; and the home string is set to the value of cr. The effect is that the cursor is confined to the current line, and so are screen updates. This may be used for enabling character-at-a-time line editing without touching the rest of the screen.	https://docs.python.org/3.4/library/curses.html#curses.filter
curses flash	A							https://docs.python.org			<pre><code>
curses.flash()</code></pre><br>Flash the screen. That is, change it to reverse-video and then change it back in a short interval. Some people prefer such as ‘visible bell’ to the audible attention signal produced by beep().	https://docs.python.org/3.4/library/curses.html#curses.flash
curses flushinp	A							https://docs.python.org			<pre><code>
curses.flushinp()</code></pre><br>Flush all input buffers. This throws away any typeahead that has been typed by the user and has not yet been processed by the program.	https://docs.python.org/3.4/library/curses.html#curses.flushinp
curses getmouse	A							https://docs.python.org			<pre><code>
curses.getmouse()</code></pre><br>After getch() returns KEY_MOUSE to signal a mouse event, this method should be call to retrieve the queued mouse event, represented as a 5-tuple (id, x, y, z, bstate). id is an ID value used to distinguish multiple devices, and x, y, z are the event’s coordinates. (z is currently unused.) bstate is an integer value whose bits will be set to indicate the type of event, and will be the bitwise OR of one or more of the following constants, where n is the button number from 1 to 4: BUTTONn_PRESSED, BUTTONn_RELEASED, BUTTONn_CLICKED, BUTTONn_DOUBLE_CLICKED, BUTTONn_TRIPLE_CLICKED, BUTTON_SHIFT, BUTTON_CTRL, BUTTON_ALT.	https://docs.python.org/3.4/library/curses.html#curses.getmouse
curses getsyx	A							https://docs.python.org			<pre><code>
curses.getsyx()</code></pre><br>Return the current coordinates of the virtual screen cursor in y and x. If leaveok is currently true, then -1,-1 is returned.	https://docs.python.org/3.4/library/curses.html#curses.getsyx
curses getwin	A							https://docs.python.org			<pre><code>
curses.getwin(file)</code></pre><br>Read window related data stored in the file by an earlier putwin() call. The routine then creates and initializes a new window using that data, returning the new window object.	https://docs.python.org/3.4/library/curses.html#curses.getwin
curses has_colors	A							https://docs.python.org			<pre><code>
curses.has_colors()</code></pre><br>Return True if the terminal can display colors; otherwise, return False.	https://docs.python.org/3.4/library/curses.html#curses.has_colors
curses has_ic	A							https://docs.python.org			<pre><code>
curses.has_ic()</code></pre><br>Return True if the terminal has insert- and delete-character capabilities. This function is included for historical reasons only, as all modern software terminal emulators have such capabilities.	https://docs.python.org/3.4/library/curses.html#curses.has_ic
curses has_il	A							https://docs.python.org			<pre><code>
curses.has_il()</code></pre><br>Return True if the terminal has insert- and delete-line capabilities, or can simulate them using scrolling regions. This function is included for historical reasons only, as all modern software terminal emulators have such capabilities.	https://docs.python.org/3.4/library/curses.html#curses.has_il
curses has_key	A							https://docs.python.org			<pre><code>
curses.has_key(ch)</code></pre><br>Take a key value ch, and return True if the current terminal type recognizes a key with that value.	https://docs.python.org/3.4/library/curses.html#curses.has_key
curses halfdelay	A							https://docs.python.org			<pre><code>
curses.halfdelay(tenths)</code></pre><br>Used for half-delay mode, which is similar to cbreak mode in that characters typed by the user are immediately available to the program. However, after blocking for tenths tenths of seconds, an exception is raised if nothing has been typed. The value of tenths must be a number between 1 and 255. Use nocbreak() to leave half-delay mode.	https://docs.python.org/3.4/library/curses.html#curses.halfdelay
curses init_color	A							https://docs.python.org			<pre><code>
curses.init_color(color_number, r, g, b)</code></pre><br>Change the definition of a color, taking the number of the color to be changed followed by three RGB values (for the amounts of red, green, and blue components). The value of color_number must be between 0 and COLORS. Each of r, g, b, must be a value between 0 and 1000. When init_color() is used, all occurrences of that color on the screen immediately change to the new definition. This function is a no-op on most terminals; it is active only if can_change_color() returns 1.	https://docs.python.org/3.4/library/curses.html#curses.init_color
curses init_pair	A							https://docs.python.org			<pre><code>
curses.init_pair(pair_number, fg, bg)</code></pre><br>Change the definition of a color-pair. It takes three arguments: the number of the color-pair to be changed, the foreground color number, and the background color number. The value of pair_number must be between 1 and COLOR_PAIRS - 1 (the 0 color pair is wired to white on black and cannot be changed). The value of fg and bg arguments must be between 0 and COLORS. If the color-pair was previously initialized, the screen is refreshed and all occurrences of that color-pair are changed to the new definition.	https://docs.python.org/3.4/library/curses.html#curses.init_pair
curses initscr	A							https://docs.python.org			<pre><code>
curses.initscr()</code></pre><br>Initialize the library. Return a WindowObject which represents the whole screen.	https://docs.python.org/3.4/library/curses.html#curses.initscr
curses is_term_resized	A							https://docs.python.org			<pre><code>
curses.is_term_resized(nlines, ncols)</code></pre><br>Return True if resize_term() would modify the window structure, False otherwise.	https://docs.python.org/3.4/library/curses.html#curses.is_term_resized
curses isendwin	A							https://docs.python.org			<pre><code>
curses.isendwin()</code></pre><br>Return True if endwin() has been called (that is, the curses library has been deinitialized).	https://docs.python.org/3.4/library/curses.html#curses.isendwin
curses keyname	A							https://docs.python.org			<pre><code>
curses.keyname(k)</code></pre><br>Return the name of the key numbered k. The name of a key generating printable ASCII character is the key’s character. The name of a control-key combination is a two-character string consisting of a caret followed by the corresponding printable ASCII character. The name of an alt-key combination (128-255) is a string consisting of the prefix ‘M-‘ followed by the name of the corresponding ASCII character.	https://docs.python.org/3.4/library/curses.html#curses.keyname
curses killchar	A							https://docs.python.org			<pre><code>
curses.killchar()</code></pre><br>Return the user’s current line kill character. Under Unix operating systems this is a property of the controlling tty of the curses program, and is not set by the curses library itself.	https://docs.python.org/3.4/library/curses.html#curses.killchar
curses longname	A							https://docs.python.org			<pre><code>
curses.longname()</code></pre><br>Return a string containing the terminfo long name field describing the current terminal. The maximum length of a verbose description is 128 characters. It is defined only after the call to initscr().	https://docs.python.org/3.4/library/curses.html#curses.longname
curses meta	A							https://docs.python.org			<pre><code>
curses.meta(yes)</code></pre><br>If yes is 1, allow 8-bit characters to be input. If yes is 0, allow only 7-bit chars.	https://docs.python.org/3.4/library/curses.html#curses.meta
curses mouseinterval	A							https://docs.python.org			<pre><code>
curses.mouseinterval(interval)</code></pre><br>Set the maximum time in milliseconds that can elapse between press and release events in order for them to be recognized as a click, and return the previous interval value. The default value is 200 msec, or one fifth of a second.	https://docs.python.org/3.4/library/curses.html#curses.mouseinterval
curses mousemask	A							https://docs.python.org			<pre><code>
curses.mousemask(mousemask)</code></pre><br>Set the mouse events to be reported, and return a tuple (availmask, oldmask).  availmask indicates which of the specified mouse events can be reported; on complete failure it returns 0. oldmask is the previous value of the given window’s mouse event mask. If this function is never called, no mouse events are ever reported.	https://docs.python.org/3.4/library/curses.html#curses.mousemask
curses napms	A							https://docs.python.org			<pre><code>
curses.napms(ms)</code></pre><br>Sleep for ms milliseconds.	https://docs.python.org/3.4/library/curses.html#curses.napms
curses newpad	A							https://docs.python.org			<pre><code>
curses.newpad(nlines, ncols)</code></pre><br>Create and return a pointer to a new pad data structure with the given number of lines and columns. A pad is returned as a window object.	https://docs.python.org/3.4/library/curses.html#curses.newpad
curses newwin	A							https://docs.python.org			<pre><code>
curses.newwin(nlines, ncols)</code></pre><br>Return a new window, whose left-upper corner is at (begin_y, begin_x), and whose height/width is nlines/ncols.	https://docs.python.org/3.4/library/curses.html#curses.newwin
curses nl	A							https://docs.python.org			<pre><code>
curses.nl()</code></pre><br>Enter newline mode. This mode translates the return key into newline on input, and translates newline into return and line-feed on output. Newline mode is initially on.	https://docs.python.org/3.4/library/curses.html#curses.nl
curses nocbreak	A							https://docs.python.org			<pre><code>
curses.nocbreak()</code></pre><br>Leave cbreak mode. Return to normal “cooked” mode with line buffering.	https://docs.python.org/3.4/library/curses.html#curses.nocbreak
curses noecho	A							https://docs.python.org			<pre><code>
curses.noecho()</code></pre><br>Leave echo mode. Echoing of input characters is turned off.	https://docs.python.org/3.4/library/curses.html#curses.noecho
curses nonl	A							https://docs.python.org			<pre><code>
curses.nonl()</code></pre><br>Leave newline mode. Disable translation of return into newline on input, and disable low-level translation of newline into newline/return on output (but this does not change the behavior of addch('\n'), which always does the equivalent of return and line feed on the virtual screen). With translation off, curses can sometimes speed up vertical motion a little; also, it will be able to detect the return key on input.	https://docs.python.org/3.4/library/curses.html#curses.nonl
curses noqiflush	A							https://docs.python.org			<pre><code>
curses.noqiflush()</code></pre><br>When the noqiflush() routine is used, normal flush of input and output queues associated with the INTR, QUIT and SUSP characters will not be done. You may want to call noqiflush() in a signal handler if you want output to continue as though the interrupt had not occurred, after the handler exits.	https://docs.python.org/3.4/library/curses.html#curses.noqiflush
curses noraw	A							https://docs.python.org			<pre><code>
curses.noraw()</code></pre><br>Leave raw mode. Return to normal “cooked” mode with line buffering.	https://docs.python.org/3.4/library/curses.html#curses.noraw
curses pair_content	A							https://docs.python.org			<pre><code>
curses.pair_content(pair_number)</code></pre><br>Return a tuple (fg, bg) containing the colors for the requested color pair. The value of pair_number must be between 1 and COLOR_PAIRS - 1.	https://docs.python.org/3.4/library/curses.html#curses.pair_content
curses pair_number	A							https://docs.python.org			<pre><code>
curses.pair_number(attr)</code></pre><br>Return the number of the color-pair set by the attribute value attr. color_pair() is the counterpart to this function.	https://docs.python.org/3.4/library/curses.html#curses.pair_number
curses putp	A							https://docs.python.org			<pre><code>
curses.putp(string)</code></pre><br>Equivalent to tputs(str, 1, putchar); emit the value of a specified terminfo capability for the current terminal. Note that the output of putp() always goes to standard output.	https://docs.python.org/3.4/library/curses.html#curses.putp
curses qiflush	A							https://docs.python.org			<pre><code>
curses.qiflush([flag])</code></pre><br>If flag is False, the effect is the same as calling noqiflush(). If flag is True, or no argument is provided, the queues will be flushed when these control characters are read.	https://docs.python.org/3.4/library/curses.html#curses.qiflush
curses raw	A							https://docs.python.org			<pre><code>
curses.raw()</code></pre><br>Enter raw mode. In raw mode, normal line buffering and processing of interrupt, quit, suspend, and flow control keys are turned off; characters are presented to curses input functions one by one.	https://docs.python.org/3.4/library/curses.html#curses.raw
curses reset_prog_mode	A							https://docs.python.org			<pre><code>
curses.reset_prog_mode()</code></pre><br>Restore the terminal to “program” mode, as previously saved by def_prog_mode().	https://docs.python.org/3.4/library/curses.html#curses.reset_prog_mode
curses reset_shell_mode	A							https://docs.python.org			<pre><code>
curses.reset_shell_mode()</code></pre><br>Restore the terminal to “shell” mode, as previously saved by def_shell_mode().	https://docs.python.org/3.4/library/curses.html#curses.reset_shell_mode
curses resetty	A							https://docs.python.org			<pre><code>
curses.resetty()</code></pre><br>Restore the state of the terminal modes to what it was at the last call to savetty().	https://docs.python.org/3.4/library/curses.html#curses.resetty
curses resize_term	A							https://docs.python.org			<pre><code>
curses.resize_term(nlines, ncols)</code></pre><br>Backend function used by resizeterm(), performing most of the work; when resizing the windows, resize_term() blank-fills the areas that are extended. The calling application should fill in these areas with appropriate data. The resize_term() function attempts to resize all windows. However, due to the calling convention of pads, it is not possible to resize these without additional interaction with the application.	https://docs.python.org/3.4/library/curses.html#curses.resize_term
curses resizeterm	A							https://docs.python.org			<pre><code>
curses.resizeterm(nlines, ncols)</code></pre><br>Resize the standard and current windows to the specified dimensions, and adjusts other bookkeeping data used by the curses library that record the window dimensions (in particular the SIGWINCH handler).	https://docs.python.org/3.4/library/curses.html#curses.resizeterm
curses savetty	A							https://docs.python.org			<pre><code>
curses.savetty()</code></pre><br>Save the current state of the terminal modes in a buffer, usable by resetty().	https://docs.python.org/3.4/library/curses.html#curses.savetty
curses setsyx	A							https://docs.python.org			<pre><code>
curses.setsyx(y, x)</code></pre><br>Set the virtual screen cursor to y, x. If y and x are both -1, then leaveok is set.	https://docs.python.org/3.4/library/curses.html#curses.setsyx
curses setupterm	A							https://docs.python.org			<pre><code>
curses.setupterm([termstr, fd])</code></pre><br>Initialize the terminal. termstr is a string giving the terminal name; if omitted, the value of the TERM environment variable will be used. fd is the file descriptor to which any initialization sequences will be sent; if not supplied, the file descriptor for sys.stdout will be used.	https://docs.python.org/3.4/library/curses.html#curses.setupterm
curses start_color	A							https://docs.python.org			<pre><code>
curses.start_color()</code></pre><br>Must be called if the programmer wants to use colors, and before any other color manipulation routine is called. It is good practice to call this routine right after initscr().	https://docs.python.org/3.4/library/curses.html#curses.start_color
curses termattrs	A							https://docs.python.org			<pre><code>
curses.termattrs()</code></pre><br>Return a logical OR of all video attributes supported by the terminal. This information is useful when a curses program needs complete control over the appearance of the screen.	https://docs.python.org/3.4/library/curses.html#curses.termattrs
curses termname	A							https://docs.python.org			<pre><code>
curses.termname()</code></pre><br>Return the value of the environment variable TERM, truncated to 14 characters.	https://docs.python.org/3.4/library/curses.html#curses.termname
curses tigetflag	A							https://docs.python.org			<pre><code>
curses.tigetflag(capname)</code></pre><br>Return the value of the Boolean capability corresponding to the terminfo capability name capname. The value -1 is returned if capname is not a Boolean capability, or 0 if it is canceled or absent from the terminal description.	https://docs.python.org/3.4/library/curses.html#curses.tigetflag
curses tigetnum	A							https://docs.python.org			<pre><code>
curses.tigetnum(capname)</code></pre><br>Return the value of the numeric capability corresponding to the terminfo capability name capname. The value -2 is returned if capname is not a numeric capability, or -1 if it is canceled or absent from the terminal description.	https://docs.python.org/3.4/library/curses.html#curses.tigetnum
curses tigetstr	A							https://docs.python.org			<pre><code>
curses.tigetstr(capname)</code></pre><br>Return the value of the string capability corresponding to the terminfo capability name capname. None is returned if capname is not a string capability, or is canceled or absent from the terminal description.	https://docs.python.org/3.4/library/curses.html#curses.tigetstr
curses tparm	A							https://docs.python.org			<pre><code>
curses.tparm(str[, ...])</code></pre><br>Instantiate the string str with the supplied parameters, where str should be a parameterized string obtained from the terminfo database. E.g. tparm(tigetstr("cup"), 5, 3) could result in b'\033[6;4H', the exact result depending on terminal type.	https://docs.python.org/3.4/library/curses.html#curses.tparm
curses typeahead	A							https://docs.python.org			<pre><code>
curses.typeahead(fd)</code></pre><br>Specify that the file descriptor fd be used for typeahead checking. If fd is -1, then no typeahead checking is done.	https://docs.python.org/3.4/library/curses.html#curses.typeahead
curses unctrl	A							https://docs.python.org			<pre><code>
curses.unctrl(ch)</code></pre><br>Return a string which is a printable representation of the character ch. Control characters are displayed as a caret followed by the character, for example as ^C. Printing characters are left as they are.	https://docs.python.org/3.4/library/curses.html#curses.unctrl
curses ungetch	A							https://docs.python.org			<pre><code>
curses.ungetch(ch)</code></pre><br>Push ch so the next getch() will return it.	https://docs.python.org/3.4/library/curses.html#curses.ungetch
curses unget_wch	A							https://docs.python.org			<pre><code>
curses.unget_wch(ch)</code></pre><br>Push ch so the next get_wch() will return it.	https://docs.python.org/3.4/library/curses.html#curses.unget_wch
curses ungetmouse	A							https://docs.python.org			<pre><code>
curses.ungetmouse(id, x, y, z, bstate)</code></pre><br>Push a KEY_MOUSE event onto the input queue, associating the given state data with it.	https://docs.python.org/3.4/library/curses.html#curses.ungetmouse
curses use_env	A							https://docs.python.org			<pre><code>
curses.use_env(flag)</code></pre><br>If used, this function should be called before initscr() or newterm are called. When flag is False, the values of lines and columns specified in the terminfo database will be used, even if environment variables LINES and COLUMNS (used by default) are set, or if curses is running in a window (in which case default behavior would be to use the window size if LINES and COLUMNS are not set).	https://docs.python.org/3.4/library/curses.html#curses.use_env
curses use_default_colors	A							https://docs.python.org			<pre><code>
curses.use_default_colors()</code></pre><br>Allow use of default values for colors on terminals supporting this feature. Use this to support transparency in your application. The default color is assigned to the color number -1. After calling this function, init_pair(x, curses.COLOR_RED, -1) initializes, for instance, color pair x to a red foreground color on the default background.	https://docs.python.org/3.4/library/curses.html#curses.use_default_colors
curses wrapper	A							https://docs.python.org			<pre><code>
curses.wrapper(func, ...)</code></pre><br>Initialize curses and call another callable object, func, which should be the rest of your curses-using application. If the application raises an exception, this function will restore the terminal to a sane state before re-raising the exception and generating a traceback. The callable object func is then passed the main window ‘stdscr’ as its first argument, followed by any other arguments passed to wrapper(). Before calling func, wrapper() turns on cbreak mode, turns off echo, enables the terminal keypad, and initializes colors if the terminal has color support. On exit (whether normally or by exception) it restores cooked mode, turns on echo, and disables the terminal keypad.	https://docs.python.org/3.4/library/curses.html#curses.wrapper
curses.textpad rectangle	A							https://docs.python.org			<pre><code>
curses.textpad.rectangle(win, uly, ulx, lry, lrx)</code></pre><br>Draw a rectangle. The first argument must be a window object; the remaining arguments are coordinates relative to that window. The second and third arguments are the y and x coordinates of the upper left hand corner of the rectangle to be drawn; the fourth and fifth arguments are the y and x coordinates of the lower right hand corner. The rectangle will be drawn using VT100/IBM PC forms characters on terminals that make this possible (including xterm and most other software terminal emulators). Otherwise it will be drawn with ASCII dashes, vertical bars, and plus signs.	https://docs.python.org/3.4/library/curses.html#curses.textpad.rectangle
curses.panel bottom_panel	A							https://docs.python.org			<pre><code>
curses.panel.bottom_panel()</code></pre><br>Returns the bottom panel in the panel stack.	https://docs.python.org/3.4/library/curses.panel.html#curses.panel.bottom_panel
curses.panel new_panel	A							https://docs.python.org			<pre><code>
curses.panel.new_panel(win)</code></pre><br>Returns a panel object, associating it with the given window win. Be aware that you need to keep the returned panel object referenced explicitly. If you don’t, the panel object is garbage collected and removed from the panel stack.	https://docs.python.org/3.4/library/curses.panel.html#curses.panel.new_panel
curses.panel top_panel	A							https://docs.python.org			<pre><code>
curses.panel.top_panel()</code></pre><br>Returns the top panel in the panel stack.	https://docs.python.org/3.4/library/curses.panel.html#curses.panel.top_panel
curses.panel update_panels	A							https://docs.python.org			<pre><code>
curses.panel.update_panels()</code></pre><br>Updates the virtual screen after changes in the panel stack. This does not call curses.doupdate(), so you’ll have to do this yourself.	https://docs.python.org/3.4/library/curses.panel.html#curses.panel.update_panels
curses.panel bottom_panel	A							https://docs.python.org			<pre><code>
curses.panel.bottom_panel()</code></pre><br>Returns the bottom panel in the panel stack.	https://docs.python.org/3.4/library/curses.panel.html#curses.panel.bottom_panel
curses.panel new_panel	A							https://docs.python.org			<pre><code>
curses.panel.new_panel(win)</code></pre><br>Returns a panel object, associating it with the given window win. Be aware that you need to keep the returned panel object referenced explicitly. If you don’t, the panel object is garbage collected and removed from the panel stack.	https://docs.python.org/3.4/library/curses.panel.html#curses.panel.new_panel
curses.panel top_panel	A							https://docs.python.org			<pre><code>
curses.panel.top_panel()</code></pre><br>Returns the top panel in the panel stack.	https://docs.python.org/3.4/library/curses.panel.html#curses.panel.top_panel
curses.panel update_panels	A							https://docs.python.org			<pre><code>
curses.panel.update_panels()</code></pre><br>Updates the virtual screen after changes in the panel stack. This does not call curses.doupdate(), so you’ll have to do this yourself.	https://docs.python.org/3.4/library/curses.panel.html#curses.panel.update_panels
dbm whichdb	A							https://docs.python.org			<pre><code>
dbm.whichdb(filename)</code></pre><br>This function attempts to guess which of the several simple database modules available — dbm.gnu, dbm.ndbm or dbm.dumb — should be used to open a given file.	https://docs.python.org/3.4/library/dbm.html#dbm.whichdb
dbm open	A							https://docs.python.org			<pre><code>
dbm.open(file, flag='r', mode=0o666)</code></pre><br>Open the database file file and return a corresponding object.	https://docs.python.org/3.4/library/dbm.html#dbm.open
dbm.gnu open	A							https://docs.python.org			<pre><code>
dbm.gnu.open(filename[, flag[, mode]])</code></pre><br>Open a gdbm database and return a gdbm object. The filename argument is the name of the database file.	https://docs.python.org/3.4/library/dbm.html#dbm.gnu.open
dbm.ndbm open	A							https://docs.python.org			<pre><code>
dbm.ndbm.open(filename[, flag[, mode]])</code></pre><br>Open a dbm database and return a ndbm object. The filename argument is the name of the database file (without the .dir or .pag extensions).	https://docs.python.org/3.4/library/dbm.html#dbm.ndbm.open
dbm.dumb open	A							https://docs.python.org			<pre><code>
dbm.dumb.open(filename[, flag[, mode]])</code></pre><br>Open a dumbdbm database and return a dumbdbm object. The filename argument is the basename of the database file (without any specific extensions). When a dumbdbm database is created, files with .dat and .dir extensions are created.	https://docs.python.org/3.4/library/dbm.html#dbm.dumb.open
dbm.gnu open	A							https://docs.python.org			<pre><code>
dbm.gnu.open(filename[, flag[, mode]])</code></pre><br>Open a gdbm database and return a gdbm object. The filename argument is the name of the database file.	https://docs.python.org/3.4/library/dbm.html#dbm.gnu.open
dbm.ndbm open	A							https://docs.python.org			<pre><code>
dbm.ndbm.open(filename[, flag[, mode]])</code></pre><br>Open a dbm database and return a ndbm object. The filename argument is the name of the database file (without the .dir or .pag extensions).	https://docs.python.org/3.4/library/dbm.html#dbm.ndbm.open
dbm.dumb open	A							https://docs.python.org			<pre><code>
dbm.dumb.open(filename[, flag[, mode]])</code></pre><br>Open a dumbdbm database and return a dumbdbm object. The filename argument is the basename of the database file (without any specific extensions). When a dumbdbm database is created, files with .dat and .dir extensions are created.	https://docs.python.org/3.4/library/dbm.html#dbm.dumb.open
decimal getcontext	A							https://docs.python.org			<pre><code>
decimal.getcontext()</code></pre><br>Return the current context for the active thread.	https://docs.python.org/3.4/library/decimal.html#decimal.getcontext
decimal setcontext	A							https://docs.python.org			<pre><code>
decimal.setcontext(c)</code></pre><br>Set the current context for the active thread to c.	https://docs.python.org/3.4/library/decimal.html#decimal.setcontext
decimal localcontext	A							https://docs.python.org			<pre><code>
decimal.localcontext(ctx=None)</code></pre><br>Return a context manager that will set the current context for the active thread to a copy of ctx on entry to the with-statement and restore the previous context when exiting the with-statement. If no context is specified, a copy of the current context is used.	https://docs.python.org/3.4/library/decimal.html#decimal.localcontext
decimal getcontext	A							https://docs.python.org			<pre><code>
decimal.getcontext()</code></pre><br>Return the current context for the active thread.	https://docs.python.org/3.4/library/decimal.html#decimal.getcontext
decimal setcontext	A							https://docs.python.org			<pre><code>
decimal.setcontext(c)</code></pre><br>Set the current context for the active thread to c.	https://docs.python.org/3.4/library/decimal.html#decimal.setcontext
decimal localcontext	A							https://docs.python.org			<pre><code>
decimal.localcontext(ctx=None)</code></pre><br>Return a context manager that will set the current context for the active thread to a copy of ctx on entry to the with-statement and restore the previous context when exiting the with-statement. If no context is specified, a copy of the current context is used.	https://docs.python.org/3.4/library/decimal.html#decimal.localcontext
difflib context_diff	A							https://docs.python.org			<pre><code>
difflib.context_diff(a, b, fromfile='', tofile='', fromfiledate='', tofiledate='', n=3, lineterm='\n')</code></pre><br>Compare a and b (lists of strings); return a delta (a generator generating the delta lines) in context diff format.	https://docs.python.org/3.4/library/difflib.html#difflib.context_diff
difflib get_close_matches	A							https://docs.python.org			<pre><code>
difflib.get_close_matches(word, possibilities, n=3, cutoff=0.6)</code></pre><br>Return a list of the best “good enough” matches. word is a sequence for which close matches are desired (typically a string), and possibilities is a list of sequences against which to match word (typically a list of strings).	https://docs.python.org/3.4/library/difflib.html#difflib.get_close_matches
difflib ndiff	A							https://docs.python.org			<pre><code>
difflib.ndiff(a, b, linejunk=None, charjunk=IS_CHARACTER_JUNK)</code></pre><br>Compare a and b (lists of strings); return a Differ-style delta (a generator generating the delta lines).	https://docs.python.org/3.4/library/difflib.html#difflib.ndiff
difflib restore	A							https://docs.python.org			<pre><code>
difflib.restore(sequence, which)</code></pre><br>Return one of the two sequences that generated a delta.	https://docs.python.org/3.4/library/difflib.html#difflib.restore
difflib unified_diff	A							https://docs.python.org			<pre><code>
difflib.unified_diff(a, b, fromfile='', tofile='', fromfiledate='', tofiledate='', n=3, lineterm='\n')</code></pre><br>Compare a and b (lists of strings); return a delta (a generator generating the delta lines) in unified diff format.	https://docs.python.org/3.4/library/difflib.html#difflib.unified_diff
difflib IS_LINE_JUNK	A							https://docs.python.org			<pre><code>
difflib.IS_LINE_JUNK(line)</code></pre><br>Return true for ignorable lines. The line line is ignorable if line is blank or contains a single '#', otherwise it is not ignorable. Used as a default for parameter linejunk in ndiff() in older versions.	https://docs.python.org/3.4/library/difflib.html#difflib.IS_LINE_JUNK
difflib IS_CHARACTER_JUNK	A							https://docs.python.org			<pre><code>
difflib.IS_CHARACTER_JUNK(ch)</code></pre><br>Return true for ignorable characters. The character ch is ignorable if ch is a space or tab, otherwise it is not ignorable. Used as a default for parameter charjunk in ndiff().	https://docs.python.org/3.4/library/difflib.html#difflib.IS_CHARACTER_JUNK
dis code_info	A							https://docs.python.org			<pre><code>
dis.code_info(x)</code></pre><br>Return a formatted multi-line string with detailed code object information for the supplied function, method, source code string or code object.	https://docs.python.org/3.4/library/dis.html#dis.code_info
dis show_code	A							https://docs.python.org			<pre><code>
dis.show_code(x, *, file=None)</code></pre><br>Print detailed code object information for the supplied function, method, source code string or code object to file (or sys.stdout if file is not specified).	https://docs.python.org/3.4/library/dis.html#dis.show_code
dis dis	A							https://docs.python.org			<pre><code>
dis.dis(x=None, *, file=None)</code></pre><br>Disassemble the x object. x can denote either a module, a class, a method, a function, a code object, a string of source code or a byte sequence of raw bytecode. For a module, it disassembles all functions. For a class, it disassembles all methods. For a code object or sequence of raw bytecode, it prints one line per bytecode instruction. Strings are first compiled to code objects with the compile() built-in function before being disassembled. If no object is provided, this function disassembles the last traceback.	https://docs.python.org/3.4/library/dis.html#dis.dis
dis distb	A							https://docs.python.org			<pre><code>
dis.distb(tb=None, *, file=None)</code></pre><br>Disassemble the top-of-stack function of a traceback, using the last traceback if none was passed. The instruction causing the exception is indicated.	https://docs.python.org/3.4/library/dis.html#dis.distb
dis disassemble	A							https://docs.python.org			<pre><code>
dis.disassemble(code, lasti=-1, *, file=None)</code></pre><br>Disassemble a code object, indicating the last instruction if lasti was provided. The output is divided in the following columns:	https://docs.python.org/3.4/library/dis.html#dis.disassemble
dis get_instructions	A							https://docs.python.org			<pre><code>
dis.get_instructions(x, *, first_line=None)</code></pre><br>Return an iterator over the instructions in the supplied function, method, source code string or code object.	https://docs.python.org/3.4/library/dis.html#dis.get_instructions
dis findlinestarts	A							https://docs.python.org			<pre><code>
dis.findlinestarts(code)</code></pre><br>This generator function uses the co_firstlineno and co_lnotab attributes of the code object code to find the offsets which are starts of lines in the source code. They are generated as (offset, lineno) pairs.	https://docs.python.org/3.4/library/dis.html#dis.findlinestarts
dis findlabels	A							https://docs.python.org			<pre><code>
dis.findlabels(code)</code></pre><br>Detect all offsets in the code object code which are jump targets, and return a list of these offsets.	https://docs.python.org/3.4/library/dis.html#dis.findlabels
dis stack_effect	A							https://docs.python.org			<pre><code>
dis.stack_effect(opcode[, oparg])</code></pre><br>Compute the stack effect of opcode with argument oparg.	https://docs.python.org/3.4/library/dis.html#dis.stack_effect
dis code_info	A							https://docs.python.org			<pre><code>
dis.code_info(x)</code></pre><br>Return a formatted multi-line string with detailed code object information for the supplied function, method, source code string or code object.	https://docs.python.org/3.4/library/dis.html#dis.code_info
dis show_code	A							https://docs.python.org			<pre><code>
dis.show_code(x, *, file=None)</code></pre><br>Print detailed code object information for the supplied function, method, source code string or code object to file (or sys.stdout if file is not specified).	https://docs.python.org/3.4/library/dis.html#dis.show_code
dis dis	A							https://docs.python.org			<pre><code>
dis.dis(x=None, *, file=None)</code></pre><br>Disassemble the x object. x can denote either a module, a class, a method, a function, a code object, a string of source code or a byte sequence of raw bytecode. For a module, it disassembles all functions. For a class, it disassembles all methods. For a code object or sequence of raw bytecode, it prints one line per bytecode instruction. Strings are first compiled to code objects with the compile() built-in function before being disassembled. If no object is provided, this function disassembles the last traceback.	https://docs.python.org/3.4/library/dis.html#dis.dis
dis distb	A							https://docs.python.org			<pre><code>
dis.distb(tb=None, *, file=None)</code></pre><br>Disassemble the top-of-stack function of a traceback, using the last traceback if none was passed. The instruction causing the exception is indicated.	https://docs.python.org/3.4/library/dis.html#dis.distb
dis disassemble	A							https://docs.python.org			<pre><code>
dis.disassemble(code, lasti=-1, *, file=None)</code></pre><br>Disassemble a code object, indicating the last instruction if lasti was provided. The output is divided in the following columns:	https://docs.python.org/3.4/library/dis.html#dis.disassemble
dis get_instructions	A							https://docs.python.org			<pre><code>
dis.get_instructions(x, *, first_line=None)</code></pre><br>Return an iterator over the instructions in the supplied function, method, source code string or code object.	https://docs.python.org/3.4/library/dis.html#dis.get_instructions
dis findlinestarts	A							https://docs.python.org			<pre><code>
dis.findlinestarts(code)</code></pre><br>This generator function uses the co_firstlineno and co_lnotab attributes of the code object code to find the offsets which are starts of lines in the source code. They are generated as (offset, lineno) pairs.	https://docs.python.org/3.4/library/dis.html#dis.findlinestarts
dis findlabels	A							https://docs.python.org			<pre><code>
dis.findlabels(code)</code></pre><br>Detect all offsets in the code object code which are jump targets, and return a list of these offsets.	https://docs.python.org/3.4/library/dis.html#dis.findlabels
dis stack_effect	A							https://docs.python.org			<pre><code>
dis.stack_effect(opcode[, oparg])</code></pre><br>Compute the stack effect of opcode with argument oparg.	https://docs.python.org/3.4/library/dis.html#dis.stack_effect
doctest register_optionflag	A							https://docs.python.org			<pre><code>
doctest.register_optionflag(name)</code></pre><br>Create a new option flag with a given name, and return the new flag’s integer value. register_optionflag() can be used when subclassing OutputChecker or DocTestRunner to create new options that are supported by your subclasses. register_optionflag() should always be called using the following idiom:	https://docs.python.org/3.4/library/doctest.html#doctest.register_optionflag
doctest testfile	A							https://docs.python.org			<pre><code>
doctest.testfile(filename, module_relative=True, name=None, package=None, globs=None, verbose=None, report=True, optionflags=0, extraglobs=None, raise_on_error=False, parser=DocTestParser(), encoding=None)</code></pre><br>All arguments except filename are optional, and should be specified in keyword form.	https://docs.python.org/3.4/library/doctest.html#doctest.testfile
doctest testmod	A							https://docs.python.org			<pre><code>
doctest.testmod(m=None, name=None, globs=None, verbose=None, report=True, optionflags=0, extraglobs=None, raise_on_error=False, exclude_empty=False)</code></pre><br>All arguments are optional, and all except for m should be specified in keyword form.	https://docs.python.org/3.4/library/doctest.html#doctest.testmod
doctest run_docstring_examples	A							https://docs.python.org			<pre><code>
doctest.run_docstring_examples(f, globs, verbose=False, name="NoName", compileflags=None, optionflags=0)</code></pre><br>Test examples associated with object f; for example, f may be a string, a module, a function, or a class object.	https://docs.python.org/3.4/library/doctest.html#doctest.run_docstring_examples
doctest DocFileSuite	A							https://docs.python.org			<pre><code>
doctest.DocFileSuite(*paths, module_relative=True, package=None, setUp=None, tearDown=None, globs=None, optionflags=0, parser=DocTestParser(), encoding=None)</code></pre><br>Convert doctest tests from one or more text files to a unittest.TestSuite.	https://docs.python.org/3.4/library/doctest.html#doctest.DocFileSuite
doctest DocTestSuite	A							https://docs.python.org			<pre><code>
doctest.DocTestSuite(module=None, globs=None, extraglobs=None, test_finder=None, setUp=None, tearDown=None, checker=None)</code></pre><br>Convert doctest tests for a module to a unittest.TestSuite.	https://docs.python.org/3.4/library/doctest.html#doctest.DocTestSuite
doctest set_unittest_reportflags	A							https://docs.python.org			<pre><code>
doctest.set_unittest_reportflags(flags)</code></pre><br>Set the doctest reporting flags to use.	https://docs.python.org/3.4/library/doctest.html#doctest.set_unittest_reportflags
doctest script_from_examples	A							https://docs.python.org			<pre><code>
doctest.script_from_examples(s)</code></pre><br>Convert text with examples to a script.	https://docs.python.org/3.4/library/doctest.html#doctest.script_from_examples
doctest testsource	A							https://docs.python.org			<pre><code>
doctest.testsource(module, name)</code></pre><br>Convert the doctest for an object to a script.	https://docs.python.org/3.4/library/doctest.html#doctest.testsource
doctest debug	A							https://docs.python.org			<pre><code>
doctest.debug(module, name, pm=False)</code></pre><br>Debug the doctests for an object.	https://docs.python.org/3.4/library/doctest.html#doctest.debug
doctest debug_src	A							https://docs.python.org			<pre><code>
doctest.debug_src(src, pm=False, globs=None)</code></pre><br>Debug the doctests in a string.	https://docs.python.org/3.4/library/doctest.html#doctest.debug_src
doctest register_optionflag	A							https://docs.python.org			<pre><code>
doctest.register_optionflag(name)</code></pre><br>Create a new option flag with a given name, and return the new flag’s integer value. register_optionflag() can be used when subclassing OutputChecker or DocTestRunner to create new options that are supported by your subclasses. register_optionflag() should always be called using the following idiom:	https://docs.python.org/3.4/library/doctest.html#doctest.register_optionflag
doctest register_optionflag	A							https://docs.python.org			<pre><code>
doctest.register_optionflag(name)</code></pre><br>Create a new option flag with a given name, and return the new flag’s integer value. register_optionflag() can be used when subclassing OutputChecker or DocTestRunner to create new options that are supported by your subclasses. register_optionflag() should always be called using the following idiom:	https://docs.python.org/3.4/library/doctest.html#doctest.register_optionflag
doctest testfile	A							https://docs.python.org			<pre><code>
doctest.testfile(filename, module_relative=True, name=None, package=None, globs=None, verbose=None, report=True, optionflags=0, extraglobs=None, raise_on_error=False, parser=DocTestParser(), encoding=None)</code></pre><br>All arguments except filename are optional, and should be specified in keyword form.	https://docs.python.org/3.4/library/doctest.html#doctest.testfile
doctest testmod	A							https://docs.python.org			<pre><code>
doctest.testmod(m=None, name=None, globs=None, verbose=None, report=True, optionflags=0, extraglobs=None, raise_on_error=False, exclude_empty=False)</code></pre><br>All arguments are optional, and all except for m should be specified in keyword form.	https://docs.python.org/3.4/library/doctest.html#doctest.testmod
doctest run_docstring_examples	A							https://docs.python.org			<pre><code>
doctest.run_docstring_examples(f, globs, verbose=False, name="NoName", compileflags=None, optionflags=0)</code></pre><br>Test examples associated with object f; for example, f may be a string, a module, a function, or a class object.	https://docs.python.org/3.4/library/doctest.html#doctest.run_docstring_examples
doctest DocFileSuite	A							https://docs.python.org			<pre><code>
doctest.DocFileSuite(*paths, module_relative=True, package=None, setUp=None, tearDown=None, globs=None, optionflags=0, parser=DocTestParser(), encoding=None)</code></pre><br>Convert doctest tests from one or more text files to a unittest.TestSuite.	https://docs.python.org/3.4/library/doctest.html#doctest.DocFileSuite
doctest DocTestSuite	A							https://docs.python.org			<pre><code>
doctest.DocTestSuite(module=None, globs=None, extraglobs=None, test_finder=None, setUp=None, tearDown=None, checker=None)</code></pre><br>Convert doctest tests for a module to a unittest.TestSuite.	https://docs.python.org/3.4/library/doctest.html#doctest.DocTestSuite
doctest set_unittest_reportflags	A							https://docs.python.org			<pre><code>
doctest.set_unittest_reportflags(flags)</code></pre><br>Set the doctest reporting flags to use.	https://docs.python.org/3.4/library/doctest.html#doctest.set_unittest_reportflags
doctest script_from_examples	A							https://docs.python.org			<pre><code>
doctest.script_from_examples(s)</code></pre><br>Convert text with examples to a script.	https://docs.python.org/3.4/library/doctest.html#doctest.script_from_examples
doctest testsource	A							https://docs.python.org			<pre><code>
doctest.testsource(module, name)</code></pre><br>Convert the doctest for an object to a script.	https://docs.python.org/3.4/library/doctest.html#doctest.testsource
doctest debug	A							https://docs.python.org			<pre><code>
doctest.debug(module, name, pm=False)</code></pre><br>Debug the doctests for an object.	https://docs.python.org/3.4/library/doctest.html#doctest.debug
doctest debug_src	A							https://docs.python.org			<pre><code>
doctest.debug_src(src, pm=False, globs=None)</code></pre><br>Debug the doctests in a string.	https://docs.python.org/3.4/library/doctest.html#doctest.debug_src
email.charset add_charset	A							https://docs.python.org			<pre><code>
email.charset.add_charset(charset, header_enc=None, body_enc=None, output_charset=None)</code></pre><br>Add character properties to the global registry.	https://docs.python.org/3.4/library/email.charset.html#email.charset.add_charset
email.charset add_alias	A							https://docs.python.org			<pre><code>
email.charset.add_alias(alias, canonical)</code></pre><br>Add a character set alias. alias is the alias name, e.g. latin-1. canonical is the character set’s canonical name, e.g. iso-8859-1.	https://docs.python.org/3.4/library/email.charset.html#email.charset.add_alias
email.charset add_codec	A							https://docs.python.org			<pre><code>
email.charset.add_codec(charset, codecname)</code></pre><br>Add a codec that map characters in the given character set to and from Unicode.	https://docs.python.org/3.4/library/email.charset.html#email.charset.add_codec
email.encoders encode_quopri	A							https://docs.python.org			<pre><code>
email.encoders.encode_quopri(msg)</code></pre><br>Encodes the payload into quoted-printable form and sets the Content-Transfer-Encoding header to quoted-printable [1]. This is a good encoding to use when most of your payload is normal printable data, but contains a few unprintable characters.	https://docs.python.org/3.4/library/email.encoders.html#email.encoders.encode_quopri
email.encoders encode_base64	A							https://docs.python.org			<pre><code>
email.encoders.encode_base64(msg)</code></pre><br>Encodes the payload into base64 form and sets the Content-Transfer-Encoding header to base64. This is a good encoding to use when most of your payload is unprintable data since it is a more compact form than quoted-printable. The drawback of base64 encoding is that it renders the text non-human readable.	https://docs.python.org/3.4/library/email.encoders.html#email.encoders.encode_base64
email.encoders encode_7or8bit	A							https://docs.python.org			<pre><code>
email.encoders.encode_7or8bit(msg)</code></pre><br>This doesn’t actually modify the message’s payload, but it does set the Content-Transfer-Encoding header to either 7bit or 8bit as appropriate, based on the payload data.	https://docs.python.org/3.4/library/email.encoders.html#email.encoders.encode_7or8bit
email.encoders encode_noop	A							https://docs.python.org			<pre><code>
email.encoders.encode_noop(msg)</code></pre><br>This does nothing; it doesn’t even set the Content-Transfer-Encoding header.	https://docs.python.org/3.4/library/email.encoders.html#email.encoders.encode_noop
email.header decode_header	A							https://docs.python.org			<pre><code>
email.header.decode_header(header)</code></pre><br>Decode a message header value without converting the character set. The header value is in header.	https://docs.python.org/3.4/library/email.header.html#email.header.decode_header
email.header make_header	A							https://docs.python.org			<pre><code>
email.header.make_header(decoded_seq, maxlinelen=None, header_name=None, continuation_ws=' ')</code></pre><br>Create a Header instance from a sequence of pairs as returned by decode_header().	https://docs.python.org/3.4/library/email.header.html#email.header.make_header
email.iterators body_line_iterator	A							https://docs.python.org			<pre><code>
email.iterators.body_line_iterator(msg, decode=False)</code></pre><br>This iterates over all the payloads in all the subparts of msg, returning the string payloads line-by-line. It skips over all the subpart headers, and it skips over any subpart with a payload that isn’t a Python string. This is somewhat equivalent to reading the flat text representation of the message from a file using readline(), skipping over all the intervening headers.	https://docs.python.org/3.4/library/email.iterators.html#email.iterators.body_line_iterator
email.iterators typed_subpart_iterator	A							https://docs.python.org			<pre><code>
email.iterators.typed_subpart_iterator(msg, maintype='text', subtype=None)</code></pre><br>This iterates over all the subparts of msg, returning only those subparts that match the MIME type specified by maintype and subtype.	https://docs.python.org/3.4/library/email.iterators.html#email.iterators.typed_subpart_iterator
email.iterators _structure	A							https://docs.python.org			<pre><code>
email.iterators._structure(msg, fp=None, level=0, include_default=False)</code></pre><br>Prints an indented representation of the content types of the message object structure. For example:	https://docs.python.org/3.4/library/email.iterators.html#email.iterators._structure
email message_from_string	A							https://docs.python.org			<pre><code>
email.message_from_string(s, _class=email.message.Message, *, policy=policy.compat32)</code></pre><br>Return a message object structure from a string. This is exactly equivalent to Parser().parsestr(s). _class and policy are interpreted as with the Parser class constructor.	https://docs.python.org/3.4/library/email.parser.html#email.message_from_string
email message_from_bytes	A							https://docs.python.org			<pre><code>
email.message_from_bytes(s, _class=email.message.Message, *, policy=policy.compat32)</code></pre><br>Return a message object structure from a byte string. This is exactly equivalent to BytesParser().parsebytes(s). Optional _class and strict are interpreted as with the Parser class constructor.	https://docs.python.org/3.4/library/email.parser.html#email.message_from_bytes
email message_from_file	A							https://docs.python.org			<pre><code>
email.message_from_file(fp, _class=email.message.Message, *, policy=policy.compat32)</code></pre><br>Return a message object structure tree from an open file object. This is exactly equivalent to Parser().parse(fp). _class and policy are interpreted as with the Parser class constructor.	https://docs.python.org/3.4/library/email.parser.html#email.message_from_file
email message_from_binary_file	A							https://docs.python.org			<pre><code>
email.message_from_binary_file(fp, _class=email.message.Message, *, policy=policy.compat32)</code></pre><br>Return a message object structure tree from an open binary file object. This is exactly equivalent to BytesParser().parse(fp). _class and policy are interpreted as with the Parser class constructor.	https://docs.python.org/3.4/library/email.parser.html#email.message_from_binary_file
email message_from_string	A							https://docs.python.org			<pre><code>
email.message_from_string(s, _class=email.message.Message, *, policy=policy.compat32)</code></pre><br>Return a message object structure from a string. This is exactly equivalent to Parser().parsestr(s). _class and policy are interpreted as with the Parser class constructor.	https://docs.python.org/3.4/library/email.parser.html#email.message_from_string
email message_from_bytes	A							https://docs.python.org			<pre><code>
email.message_from_bytes(s, _class=email.message.Message, *, policy=policy.compat32)</code></pre><br>Return a message object structure from a byte string. This is exactly equivalent to BytesParser().parsebytes(s). Optional _class and strict are interpreted as with the Parser class constructor.	https://docs.python.org/3.4/library/email.parser.html#email.message_from_bytes
email message_from_file	A							https://docs.python.org			<pre><code>
email.message_from_file(fp, _class=email.message.Message, *, policy=policy.compat32)</code></pre><br>Return a message object structure tree from an open file object. This is exactly equivalent to Parser().parse(fp). _class and policy are interpreted as with the Parser class constructor.	https://docs.python.org/3.4/library/email.parser.html#email.message_from_file
email message_from_binary_file	A							https://docs.python.org			<pre><code>
email.message_from_binary_file(fp, _class=email.message.Message, *, policy=policy.compat32)</code></pre><br>Return a message object structure tree from an open binary file object. This is exactly equivalent to BytesParser().parse(fp). _class and policy are interpreted as with the Parser class constructor.	https://docs.python.org/3.4/library/email.parser.html#email.message_from_binary_file
email.utils quote	A							https://docs.python.org			<pre><code>
email.utils.quote(str)</code></pre><br>Return a new string with backslashes in str replaced by two backslashes, and double quotes replaced by backslash-double quote.	https://docs.python.org/3.4/library/email.util.html#email.utils.quote
email.utils unquote	A							https://docs.python.org			<pre><code>
email.utils.unquote(str)</code></pre><br>Return a new string which is an unquoted version of str. If str ends and begins with double quotes, they are stripped off. Likewise if str ends and begins with angle brackets, they are stripped off.	https://docs.python.org/3.4/library/email.util.html#email.utils.unquote
email.utils parseaddr	A							https://docs.python.org			<pre><code>
email.utils.parseaddr(address)</code></pre><br>Parse address – which should be the value of some address-containing field such as To or Cc – into its constituent realname and email address parts. Returns a tuple of that information, unless the parse fails, in which case a 2-tuple of ('', '') is returned.	https://docs.python.org/3.4/library/email.util.html#email.utils.parseaddr
email.utils formataddr	A							https://docs.python.org			<pre><code>
email.utils.formataddr(pair, charset='utf-8')</code></pre><br>The inverse of parseaddr(), this takes a 2-tuple of the form (realname, email_address) and returns the string value suitable for a To or Cc header. If the first element of pair is false, then the second element is returned unmodified.	https://docs.python.org/3.4/library/email.util.html#email.utils.formataddr
email.utils getaddresses	A							https://docs.python.org			<pre><code>
email.utils.getaddresses(fieldvalues)</code></pre><br>This method returns a list of 2-tuples of the form returned by parseaddr(). fieldvalues is a sequence of header field values as might be returned by Message.get_all. Here’s a simple example that gets all the recipients of a message:	https://docs.python.org/3.4/library/email.util.html#email.utils.getaddresses
email.utils parsedate	A							https://docs.python.org			<pre><code>
email.utils.parsedate(date)</code></pre><br>Attempts to parse a date according to the rules in RFC 2822. however, some mailers don’t follow that format as specified, so parsedate() tries to guess correctly in such cases. date is a string containing an RFC 2822 date, such as "Mon, 20 Nov 1995 19:12:08 -0500". If it succeeds in parsing the date, parsedate() returns a 9-tuple that can be passed directly to time.mktime(); otherwise None will be returned. Note that indexes 6, 7, and 8 of the result tuple are not usable.	https://docs.python.org/3.4/library/email.util.html#email.utils.parsedate
email.utils parsedate_tz	A							https://docs.python.org			<pre><code>
email.utils.parsedate_tz(date)</code></pre><br>Performs the same function as parsedate(), but returns either None or a 10-tuple; the first 9 elements make up a tuple that can be passed directly to time.mktime(), and the tenth is the offset of the date’s timezone from UTC (which is the official term for Greenwich Mean Time) [1]. If the input string has no timezone, the last element of the tuple returned is None. Note that indexes 6, 7, and 8 of the result tuple are not usable.	https://docs.python.org/3.4/library/email.util.html#email.utils.parsedate_tz
email.utils parsedate_to_datetime	A							https://docs.python.org			<pre><code>
email.utils.parsedate_to_datetime(date)</code></pre><br>The inverse of format_datetime(). Performs the same function as parsedate(), but on success returns a datetime. If the input date has a timezone of -0000, the datetime will be a naive datetime, and if the date is conforming to the RFCs it will represent a time in UTC but with no indication of the actual source timezone of the message the date comes from. If the input date has any other valid timezone offset, the datetime will be an aware datetime with the corresponding a timezone tzinfo.	https://docs.python.org/3.4/library/email.util.html#email.utils.parsedate_to_datetime
email.utils mktime_tz	A							https://docs.python.org			<pre><code>
email.utils.mktime_tz(tuple)</code></pre><br>Turn a 10-tuple as returned by parsedate_tz() into a UTC timestamp (seconds since the Epoch). If the timezone item in the tuple is None, assume local time.	https://docs.python.org/3.4/library/email.util.html#email.utils.mktime_tz
email.utils formatdate	A							https://docs.python.org			<pre><code>
email.utils.formatdate(timeval=None, localtime=False, usegmt=False)</code></pre><br>Returns a date string as per RFC 2822, e.g.:	https://docs.python.org/3.4/library/email.util.html#email.utils.formatdate
email.utils format_datetime	A							https://docs.python.org			<pre><code>
email.utils.format_datetime(dt, usegmt=False)</code></pre><br>Like formatdate, but the input is a datetime instance. If it is a naive datetime, it is assumed to be “UTC with no information about the source timezone”, and the conventional -0000 is used for the timezone. If it is an aware datetime, then the numeric timezone offset is used. If it is an aware timezone with offset zero, then usegmt may be set to True, in which case the string GMT is used instead of the numeric timezone offset. This provides a way to generate standards conformant HTTP date headers.	https://docs.python.org/3.4/library/email.util.html#email.utils.format_datetime
email.utils localtime	A							https://docs.python.org			<pre><code>
email.utils.localtime(dt=None)</code></pre><br>Return local time as an aware datetime object. If called without arguments, return current time. Otherwise dt argument should be a datetime instance, and it is converted to the local time zone according to the system time zone database. If dt is naive (that is, dt.tzinfo is None), it is assumed to be in local time. In this case, a positive or zero value for isdst causes localtime to presume initially that summer time (for example, Daylight Saving Time) is or is not (respectively) in effect for the specified time. A negative value for isdst causes the localtime to attempt to divine whether summer time is in effect for the specified time.	https://docs.python.org/3.4/library/email.util.html#email.utils.localtime
email.utils make_msgid	A							https://docs.python.org			<pre><code>
email.utils.make_msgid(idstring=None, domain=None)</code></pre><br>Returns a string suitable for an RFC 2822-compliant Message-ID header. Optional idstring if given, is a string used to strengthen the uniqueness of the message id. Optional domain if given provides the portion of the msgid after the ‘@’. The default is the local hostname. It is not normally necessary to override this default, but may be useful certain cases, such as a constructing distributed system that uses a consistent domain name across multiple hosts.	https://docs.python.org/3.4/library/email.util.html#email.utils.make_msgid
email.utils decode_rfc2231	A							https://docs.python.org			<pre><code>
email.utils.decode_rfc2231(s)</code></pre><br>Decode the string s according to RFC 2231.	https://docs.python.org/3.4/library/email.util.html#email.utils.decode_rfc2231
email.utils encode_rfc2231	A							https://docs.python.org			<pre><code>
email.utils.encode_rfc2231(s, charset=None, language=None)</code></pre><br>Encode the string s according to RFC 2231. Optional charset and language, if given is the character set name and language name to use. If neither is given, s is returned as-is. If charset is given but language is not, the string is encoded using the empty string for language.	https://docs.python.org/3.4/library/email.util.html#email.utils.encode_rfc2231
email.utils collapse_rfc2231_value	A							https://docs.python.org			<pre><code>
email.utils.collapse_rfc2231_value(value, errors='replace', fallback_charset='us-ascii')</code></pre><br>When a header parameter is encoded in RFC 2231 format, Message.get_param may return a 3-tuple containing the character set, language, and value. collapse_rfc2231_value() turns this into a unicode string. Optional errors is passed to the errors argument of str‘s encode() method; it defaults to 'replace'. Optional fallback_charset specifies the character set to use if the one in the RFC 2231 header is not known by Python; it defaults to 'us-ascii'.	https://docs.python.org/3.4/library/email.util.html#email.utils.collapse_rfc2231_value
email.utils decode_params	A							https://docs.python.org			<pre><code>
email.utils.decode_params(params)</code></pre><br>Decode parameters list according to RFC 2231. params is a sequence of 2-tuples containing elements of the form (content-type, string-value).	https://docs.python.org/3.4/library/email.util.html#email.utils.decode_params
ensurepip version	A							https://docs.python.org			<pre><code>
ensurepip.version()</code></pre><br>Returns a string specifying the bundled version of pip that will be installed when bootstrapping an environment.	https://docs.python.org/3.4/library/ensurepip.html#ensurepip.version
ensurepip bootstrap	A							https://docs.python.org			<pre><code>
ensurepip.bootstrap(root=None, upgrade=False, user=False, altinstall=False, default_pip=False, verbosity=0)</code></pre><br>Bootstraps pip into the current or designated environment.	https://docs.python.org/3.4/library/ensurepip.html#ensurepip.bootstrap
ensurepip version	A							https://docs.python.org			<pre><code>
ensurepip.version()</code></pre><br>Returns a string specifying the bundled version of pip that will be installed when bootstrapping an environment.	https://docs.python.org/3.4/library/ensurepip.html#ensurepip.version
ensurepip bootstrap	A							https://docs.python.org			<pre><code>
ensurepip.bootstrap(root=None, upgrade=False, user=False, altinstall=False, default_pip=False, verbosity=0)</code></pre><br>Bootstraps pip into the current or designated environment.	https://docs.python.org/3.4/library/ensurepip.html#ensurepip.bootstrap
enum unique	A							https://docs.python.org			<pre><code>
enum.unique()</code></pre><br>Enum class decorator that ensures only one name is bound to any one value.	https://docs.python.org/3.4/library/enum.html#enum.unique
@ unique	A							https://docs.python.org			<pre><code>
@enum.unique</code></pre><br>	https://docs.python.org/3.4/library/enum.html
enum unique	A							https://docs.python.org			<pre><code>
enum.unique()</code></pre><br>Enum class decorator that ensures only one name is bound to any one value.	https://docs.python.org/3.4/library/enum.html#enum.unique
@ unique	A							https://docs.python.org			<pre><code>
@enum.unique</code></pre><br>	https://docs.python.org/3.4/library/enum.html
faulthandler dump_traceback	A							https://docs.python.org			<pre><code>
faulthandler.dump_traceback(file=sys.stderr, all_threads=True)</code></pre><br>Dump the tracebacks of all threads into file. If all_threads is False, dump only the current thread.	https://docs.python.org/3.4/library/faulthandler.html#faulthandler.dump_traceback
faulthandler enable	A							https://docs.python.org			<pre><code>
faulthandler.enable(file=sys.stderr, all_threads=True)</code></pre><br>Enable the fault handler: install handlers for the SIGSEGV, SIGFPE, SIGABRT, SIGBUS and SIGILL signals to dump the Python traceback. If all_threads is True, produce tracebacks for every running thread. Otherwise, dump only the current thread.	https://docs.python.org/3.4/library/faulthandler.html#faulthandler.enable
faulthandler disable	A							https://docs.python.org			<pre><code>
faulthandler.disable()</code></pre><br>Disable the fault handler: uninstall the signal handlers installed by enable().	https://docs.python.org/3.4/library/faulthandler.html#faulthandler.disable
faulthandler is_enabled	A							https://docs.python.org			<pre><code>
faulthandler.is_enabled()</code></pre><br>Check if the fault handler is enabled.	https://docs.python.org/3.4/library/faulthandler.html#faulthandler.is_enabled
faulthandler dump_traceback_later	A							https://docs.python.org			<pre><code>
faulthandler.dump_traceback_later(timeout, repeat=False, file=sys.stderr, exit=False)</code></pre><br>Dump the tracebacks of all threads, after a timeout of timeout seconds, or every timeout seconds if repeat is True. If exit is True, call _exit() with status=1 after dumping the tracebacks. (Note _exit() exits the process immediately, which means it doesn’t do any cleanup like flushing file buffers.) If the function is called twice, the new call replaces previous parameters and resets the timeout. The timer has a sub-second resolution.	https://docs.python.org/3.4/library/faulthandler.html#faulthandler.dump_traceback_later
faulthandler cancel_dump_traceback_later	A							https://docs.python.org			<pre><code>
faulthandler.cancel_dump_traceback_later()</code></pre><br>Cancel the last call to dump_traceback_later().	https://docs.python.org/3.4/library/faulthandler.html#faulthandler.cancel_dump_traceback_later
faulthandler register	A							https://docs.python.org			<pre><code>
faulthandler.register(signum, file=sys.stderr, all_threads=True, chain=False)</code></pre><br>Register a user signal: install a handler for the signum signal to dump the traceback of all threads, or of the current thread if all_threads is False, into file. Call the previous handler if chain is True.	https://docs.python.org/3.4/library/faulthandler.html#faulthandler.register
faulthandler unregister	A							https://docs.python.org			<pre><code>
faulthandler.unregister(signum)</code></pre><br>Unregister a user signal: uninstall the handler of the signum signal installed by register(). Return True if the signal was registered, False otherwise.	https://docs.python.org/3.4/library/faulthandler.html#faulthandler.unregister
faulthandler dump_traceback	A							https://docs.python.org			<pre><code>
faulthandler.dump_traceback(file=sys.stderr, all_threads=True)</code></pre><br>Dump the tracebacks of all threads into file. If all_threads is False, dump only the current thread.	https://docs.python.org/3.4/library/faulthandler.html#faulthandler.dump_traceback
faulthandler enable	A							https://docs.python.org			<pre><code>
faulthandler.enable(file=sys.stderr, all_threads=True)</code></pre><br>Enable the fault handler: install handlers for the SIGSEGV, SIGFPE, SIGABRT, SIGBUS and SIGILL signals to dump the Python traceback. If all_threads is True, produce tracebacks for every running thread. Otherwise, dump only the current thread.	https://docs.python.org/3.4/library/faulthandler.html#faulthandler.enable
faulthandler disable	A							https://docs.python.org			<pre><code>
faulthandler.disable()</code></pre><br>Disable the fault handler: uninstall the signal handlers installed by enable().	https://docs.python.org/3.4/library/faulthandler.html#faulthandler.disable
faulthandler is_enabled	A							https://docs.python.org			<pre><code>
faulthandler.is_enabled()</code></pre><br>Check if the fault handler is enabled.	https://docs.python.org/3.4/library/faulthandler.html#faulthandler.is_enabled
faulthandler dump_traceback_later	A							https://docs.python.org			<pre><code>
faulthandler.dump_traceback_later(timeout, repeat=False, file=sys.stderr, exit=False)</code></pre><br>Dump the tracebacks of all threads, after a timeout of timeout seconds, or every timeout seconds if repeat is True. If exit is True, call _exit() with status=1 after dumping the tracebacks. (Note _exit() exits the process immediately, which means it doesn’t do any cleanup like flushing file buffers.) If the function is called twice, the new call replaces previous parameters and resets the timeout. The timer has a sub-second resolution.	https://docs.python.org/3.4/library/faulthandler.html#faulthandler.dump_traceback_later
faulthandler cancel_dump_traceback_later	A							https://docs.python.org			<pre><code>
faulthandler.cancel_dump_traceback_later()</code></pre><br>Cancel the last call to dump_traceback_later().	https://docs.python.org/3.4/library/faulthandler.html#faulthandler.cancel_dump_traceback_later
faulthandler register	A							https://docs.python.org			<pre><code>
faulthandler.register(signum, file=sys.stderr, all_threads=True, chain=False)</code></pre><br>Register a user signal: install a handler for the signum signal to dump the traceback of all threads, or of the current thread if all_threads is False, into file. Call the previous handler if chain is True.	https://docs.python.org/3.4/library/faulthandler.html#faulthandler.register
faulthandler unregister	A							https://docs.python.org			<pre><code>
faulthandler.unregister(signum)</code></pre><br>Unregister a user signal: uninstall the handler of the signum signal installed by register(). Return True if the signal was registered, False otherwise.	https://docs.python.org/3.4/library/faulthandler.html#faulthandler.unregister
fcntl fcntl	A							https://docs.python.org			<pre><code>
fcntl.fcntl(fd, op[, arg])</code></pre><br>Perform the operation op on file descriptor fd (file objects providing a fileno() method are accepted as well). The values used for op are operating system dependent, and are available as constants in the fcntl module, using the same names as used in the relevant C header files. The argument arg is optional, and defaults to the integer value 0. When present, it can either be an integer value, or a string. With the argument missing or an integer value, the return value of this function is the integer return value of the C fcntl() call. When the argument is a string it represents a binary structure, e.g. created by struct.pack(). The binary data is copied to a buffer whose address is passed to the C fcntl() call. The return value after a successful call is the contents of the buffer, converted to a string object. The length of the returned string will be the same as the length of the arg argument. This is limited to 1024 bytes. If the information returned in the buffer by the operating system is larger than 1024 bytes, this is most likely to result in a segmentation violation or a more subtle data corruption.	https://docs.python.org/3.4/library/fcntl.html#fcntl.fcntl
fcntl ioctl	A							https://docs.python.org			<pre><code>
fcntl.ioctl(fd, op[, arg[, mutate_flag]])</code></pre><br>This function is identical to the fcntl() function, except that the argument handling is even more complicated.	https://docs.python.org/3.4/library/fcntl.html#fcntl.ioctl
fcntl flock	A							https://docs.python.org			<pre><code>
fcntl.flock(fd, op)</code></pre><br>Perform the lock operation op on file descriptor fd (file objects providing a fileno() method are accepted as well). See the Unix manual flock(2) for details. (On some systems, this function is emulated using fcntl().)	https://docs.python.org/3.4/library/fcntl.html#fcntl.flock
fcntl lockf	A							https://docs.python.org			<pre><code>
fcntl.lockf(fd, operation[, length[, start[, whence]]])</code></pre><br>This is essentially a wrapper around the fcntl() locking calls. fd is the file descriptor of the file to lock or unlock, and operation is one of the following values:	https://docs.python.org/3.4/library/fcntl.html#fcntl.lockf
filecmp cmp	A							https://docs.python.org			<pre><code>
filecmp.cmp(f1, f2, shallow=True)</code></pre><br>Compare the files named f1 and f2, returning True if they seem equal, False otherwise.	https://docs.python.org/3.4/library/filecmp.html#filecmp.cmp
filecmp cmpfiles	A							https://docs.python.org			<pre><code>
filecmp.cmpfiles(dir1, dir2, common, shallow=True)</code></pre><br>Compare the files in the two directories dir1 and dir2 whose names are given by common.	https://docs.python.org/3.4/library/filecmp.html#filecmp.cmpfiles
filecmp clear_cache	A							https://docs.python.org			<pre><code>
filecmp.clear_cache()</code></pre><br>Clear the filecmp cache. This may be useful if a file is compared so quickly after it is modified that it is within the mtime resolution of the underlying filesystem.	https://docs.python.org/3.4/library/filecmp.html#filecmp.clear_cache
fileinput input	A							https://docs.python.org			<pre><code>
fileinput.input(files=None, inplace=False, backup='', bufsize=0, mode='r', openhook=None)</code></pre><br>Create an instance of the FileInput class. The instance will be used as global state for the functions of this module, and is also returned to use during iteration. The parameters to this function will be passed along to the constructor of the FileInput class.	https://docs.python.org/3.4/library/fileinput.html#fileinput.input
fileinput filename	A							https://docs.python.org			<pre><code>
fileinput.filename()</code></pre><br>Return the name of the file currently being read. Before the first line has been read, returns None.	https://docs.python.org/3.4/library/fileinput.html#fileinput.filename
fileinput fileno	A							https://docs.python.org			<pre><code>
fileinput.fileno()</code></pre><br>Return the integer “file descriptor” for the current file. When no file is opened (before the first line and between files), returns -1.	https://docs.python.org/3.4/library/fileinput.html#fileinput.fileno
fileinput lineno	A							https://docs.python.org			<pre><code>
fileinput.lineno()</code></pre><br>Return the cumulative line number of the line that has just been read. Before the first line has been read, returns 0. After the last line of the last file has been read, returns the line number of that line.	https://docs.python.org/3.4/library/fileinput.html#fileinput.lineno
fileinput filelineno	A							https://docs.python.org			<pre><code>
fileinput.filelineno()</code></pre><br>Return the line number in the current file. Before the first line has been read, returns 0. After the last line of the last file has been read, returns the line number of that line within the file.	https://docs.python.org/3.4/library/fileinput.html#fileinput.filelineno
fileinput isfirstline	A							https://docs.python.org			<pre><code>
fileinput.isfirstline()</code></pre><br>Returns true if the line just read is the first line of its file, otherwise returns false.	https://docs.python.org/3.4/library/fileinput.html#fileinput.isfirstline
fileinput isstdin	A							https://docs.python.org			<pre><code>
fileinput.isstdin()</code></pre><br>Returns true if the last line was read from sys.stdin, otherwise returns false.	https://docs.python.org/3.4/library/fileinput.html#fileinput.isstdin
fileinput nextfile	A							https://docs.python.org			<pre><code>
fileinput.nextfile()</code></pre><br>Close the current file so that the next iteration will read the first line from the next file (if any); lines not read from the file will not count towards the cumulative line count. The filename is not changed until after the first line of the next file has been read. Before the first line has been read, this function has no effect; it cannot be used to skip the first file. After the last line of the last file has been read, this function has no effect.	https://docs.python.org/3.4/library/fileinput.html#fileinput.nextfile
fileinput close	A							https://docs.python.org			<pre><code>
fileinput.close()</code></pre><br>Close the sequence.	https://docs.python.org/3.4/library/fileinput.html#fileinput.close
fileinput hook_compressed	A							https://docs.python.org			<pre><code>
fileinput.hook_compressed(filename, mode)</code></pre><br>Transparently opens files compressed with gzip and bzip2 (recognized by the extensions '.gz' and '.bz2') using the gzip and bz2 modules. If the filename extension is not '.gz' or '.bz2', the file is opened normally (ie, using open() without any decompression).	https://docs.python.org/3.4/library/fileinput.html#fileinput.hook_compressed
fileinput hook_encoded	A							https://docs.python.org			<pre><code>
fileinput.hook_encoded(encoding)</code></pre><br>Returns a hook which opens each file with codecs.open(), using the given encoding to read the file.	https://docs.python.org/3.4/library/fileinput.html#fileinput.hook_encoded
fnmatch fnmatch	A							https://docs.python.org			<pre><code>
fnmatch.fnmatch(filename, pattern)</code></pre><br>Test whether the filename string matches the pattern string, returning True or False. If the operating system is case-insensitive, then both parameters will be normalized to all lower- or upper-case before the comparison is performed. fnmatchcase() can be used to perform a case-sensitive comparison, regardless of whether that’s standard for the operating system.	https://docs.python.org/3.4/library/fnmatch.html#fnmatch.fnmatch
fnmatch fnmatchcase	A							https://docs.python.org			<pre><code>
fnmatch.fnmatchcase(filename, pattern)</code></pre><br>Test whether filename matches pattern, returning True or False; the comparison is case-sensitive.	https://docs.python.org/3.4/library/fnmatch.html#fnmatch.fnmatchcase
fnmatch filter	A							https://docs.python.org			<pre><code>
fnmatch.filter(names, pattern)</code></pre><br>Return the subset of the list of names that match pattern. It is the same as [n for n in names if fnmatch(n, pattern)], but implemented more efficiently.	https://docs.python.org/3.4/library/fnmatch.html#fnmatch.filter
fnmatch translate	A							https://docs.python.org			<pre><code>
fnmatch.translate(pattern)</code></pre><br>Return the shell-style pattern converted to a regular expression.	https://docs.python.org/3.4/library/fnmatch.html#fnmatch.translate
fpectl turnon_sigfpe	A							https://docs.python.org			<pre><code>
fpectl.turnon_sigfpe()</code></pre><br>Turn on the generation of SIGFPE, and set up an appropriate signal handler.	https://docs.python.org/3.4/library/fpectl.html#fpectl.turnon_sigfpe
fpectl turnoff_sigfpe	A							https://docs.python.org			<pre><code>
fpectl.turnoff_sigfpe()</code></pre><br>Reset default handling of floating point exceptions.	https://docs.python.org/3.4/library/fpectl.html#fpectl.turnoff_sigfpe
fractions gcd	A							https://docs.python.org			<pre><code>
fractions.gcd(a, b)</code></pre><br>Return the greatest common divisor of the integers a and b. If either a or b is nonzero, then the absolute value of gcd(a, b) is the largest integer that divides both a and b. gcd(a,b) has the same sign as b if b is nonzero; otherwise it takes the sign of a. gcd(0, 0) returns 0.	https://docs.python.org/3.4/library/fractions.html#fractions.gcd
abs	A							https://docs.python.org			<pre><code>
abs(x)</code></pre><br>Return the absolute value of a number. The argument may be an integer or a floating point number. If the argument is a complex number, its magnitude is returned.	https://docs.python.org/3.4/library/functions.html#abs
all	A							https://docs.python.org			<pre><code>
all(iterable)</code></pre><br>Return True if all elements of the iterable are true (or if the iterable is empty). Equivalent to:	https://docs.python.org/3.4/library/functions.html#all
any	A							https://docs.python.org			<pre><code>
any(iterable)</code></pre><br>Return True if any element of the iterable is true. If the iterable is empty, return False. Equivalent to:	https://docs.python.org/3.4/library/functions.html#any
ascii	A							https://docs.python.org			<pre><code>
ascii(object)</code></pre><br>As repr(), return a string containing a printable representation of an object, but escape the non-ASCII characters in the string returned by repr() using \x, \u or \U escapes. This generates a string similar to that returned by repr() in Python 2.	https://docs.python.org/3.4/library/functions.html#ascii
bin	A							https://docs.python.org			<pre><code>
bin(x)</code></pre><br>Convert an integer number to a binary string. The result is a valid Python expression. If x is not a Python int object, it has to define an __index__() method that returns an integer.	https://docs.python.org/3.4/library/functions.html#bin
callable	A							https://docs.python.org			<pre><code>
callable(object)</code></pre><br>Return True if the object argument appears callable, False if not. If this returns true, it is still possible that a call fails, but if it is false, calling object will never succeed. Note that classes are callable (calling a class returns a new instance); instances are callable if their class has a __call__() method.	https://docs.python.org/3.4/library/functions.html#callable
chr	A							https://docs.python.org			<pre><code>
chr(i)</code></pre><br>Return the string representing a character whose Unicode code point is the integer i. For example, chr(97) returns the string 'a'. This is the inverse of ord(). The valid range for the argument is from 0 through 1,114,111 (0x10FFFF in base 16). ValueError will be raised if i is outside that range.	https://docs.python.org/3.4/library/functions.html#chr
classmethod	A							https://docs.python.org			<pre><code>
classmethod(function)</code></pre><br>Return a class method for function.	https://docs.python.org/3.4/library/functions.html#classmethod
compile	A							https://docs.python.org			<pre><code>
compile(source, filename, mode, flags=0, dont_inherit=False, optimize=-1)</code></pre><br>Compile the source into a code or AST object. Code objects can be executed by exec() or eval(). source can either be a normal string, a byte string, or an AST object. Refer to the ast module documentation for information on how to work with AST objects.	https://docs.python.org/3.4/library/functions.html#compile
delattr	A							https://docs.python.org			<pre><code>
delattr(object, name)</code></pre><br>This is a relative of setattr(). The arguments are an object and a string. The string must be the name of one of the object’s attributes. The function deletes the named attribute, provided the object allows it. For example, delattr(x, 'foobar') is equivalent to del x.foobar.	https://docs.python.org/3.4/library/functions.html#delattr
dir	A							https://docs.python.org			<pre><code>
dir([object])</code></pre><br>Without arguments, return the list of names in the current local scope. With an argument, attempt to return a list of valid attributes for that object.	https://docs.python.org/3.4/library/functions.html#dir
divmod	A							https://docs.python.org			<pre><code>
divmod(a, b)</code></pre><br>Take two (non complex) numbers as arguments and return a pair of numbers consisting of their quotient and remainder when using integer division. With mixed operand types, the rules for binary arithmetic operators apply. For integers, the result is the same as (a // b, a % b). For floating point numbers the result is (q, a % b), where q is usually math.floor(a / b) but may be 1 less than that. In any case q * b + a % b is very close to a, if a % b is non-zero it has the same sign as b, and 0 <= abs(a % b) < abs(b).	https://docs.python.org/3.4/library/functions.html#divmod
enumerate	A							https://docs.python.org			<pre><code>
enumerate(iterable, start=0)</code></pre><br>Return an enumerate object. iterable must be a sequence, an iterator, or some other object which supports iteration. The __next__() method of the iterator returned by enumerate() returns a tuple containing a count (from start which defaults to 0) and the values obtained from iterating over iterable.	https://docs.python.org/3.4/library/functions.html#enumerate
eval	A							https://docs.python.org			<pre><code>
eval(expression, globals=None, locals=None)</code></pre><br>The arguments are a string and optional globals and locals. If provided, globals must be a dictionary. If provided, locals can be any mapping object.	https://docs.python.org/3.4/library/functions.html#eval
exec	A							https://docs.python.org			<pre><code>
exec(object[, globals[, locals]])</code></pre><br>This function supports dynamic execution of Python code. object must be either a string or a code object. If it is a string, the string is parsed as a suite of Python statements which is then executed (unless a syntax error occurs). [1] If it is a code object, it is simply executed. In all cases, the code that’s executed is expected to be valid as file input (see the section “File input” in the Reference Manual). Be aware that the return and yield statements may not be used outside of function definitions even within the context of code passed to the exec() function. The return value is None.	https://docs.python.org/3.4/library/functions.html#exec
filter	A							https://docs.python.org			<pre><code>
filter(function, iterable)</code></pre><br>Construct an iterator from those elements of iterable for which function returns true. iterable may be either a sequence, a container which supports iteration, or an iterator. If function is None, the identity function is assumed, that is, all elements of iterable that are false are removed.	https://docs.python.org/3.4/library/functions.html#filter
format	A							https://docs.python.org			<pre><code>
format(value[, format_spec])</code></pre><br>Convert a value to a “formatted” representation, as controlled by format_spec. The interpretation of format_spec will depend on the type of the value argument, however there is a standard formatting syntax that is used by most built-in types: Format Specification Mini-Language.	https://docs.python.org/3.4/library/functions.html#format
getattr	A							https://docs.python.org			<pre><code>
getattr(object, name[, default])</code></pre><br>Return the value of the named attribute of object. name must be a string. If the string is the name of one of the object’s attributes, the result is the value of that attribute. For example, getattr(x, 'foobar') is equivalent to x.foobar. If the named attribute does not exist, default is returned if provided, otherwise AttributeError is raised.	https://docs.python.org/3.4/library/functions.html#getattr
globals	A							https://docs.python.org			<pre><code>
globals()</code></pre><br>Return a dictionary representing the current global symbol table. This is always the dictionary of the current module (inside a function or method, this is the module where it is defined, not the module from which it is called).	https://docs.python.org/3.4/library/functions.html#globals
hasattr	A							https://docs.python.org			<pre><code>
hasattr(object, name)</code></pre><br>The arguments are an object and a string. The result is True if the string is the name of one of the object’s attributes, False if not. (This is implemented by calling getattr(object, name) and seeing whether it raises an AttributeError or not.)	https://docs.python.org/3.4/library/functions.html#hasattr
hash	A							https://docs.python.org			<pre><code>
hash(object)</code></pre><br>Note	https://docs.python.org/3.4/library/functions.html#hash
help	A							https://docs.python.org			<pre><code>
help([object])</code></pre><br>Invoke the built-in help system. (This function is intended for interactive use.) If no argument is given, the interactive help system starts on the interpreter console. If the argument is a string, then the string is looked up as the name of a module, function, class, method, keyword, or documentation topic, and a help page is printed on the console. If the argument is any other kind of object, a help page on the object is generated.	https://docs.python.org/3.4/library/functions.html#help
hex	A							https://docs.python.org			<pre><code>
hex(x)</code></pre><br>Convert an integer number to a lowercase hexadecimal string prefixed with “0x”, for example:	https://docs.python.org/3.4/library/functions.html#hex
id	A							https://docs.python.org			<pre><code>
id(object)</code></pre><br>Return the “identity” of an object. This is an integer which is guaranteed to be unique and constant for this object during its lifetime. Two objects with non-overlapping lifetimes may have the same id() value.	https://docs.python.org/3.4/library/functions.html#id
input	A							https://docs.python.org			<pre><code>
input([prompt])</code></pre><br>If the prompt argument is present, it is written to standard output without a trailing newline. The function then reads a line from input, converts it to a string (stripping a trailing newline), and returns that. When EOF is read, EOFError is raised. Example:	https://docs.python.org/3.4/library/functions.html#input
isinstance	A							https://docs.python.org			<pre><code>
isinstance(object, classinfo)</code></pre><br>Return true if the object argument is an instance of the classinfo argument, or of a (direct, indirect or virtual) subclass thereof. If object is not an object of the given type, the function always returns false. If classinfo is a tuple of type objects (or recursively, other such tuples), return true if object is an instance of any of the types. If classinfo is not a type or tuple of types and such tuples, a TypeError exception is raised.	https://docs.python.org/3.4/library/functions.html#isinstance
issubclass	A							https://docs.python.org			<pre><code>
issubclass(class, classinfo)</code></pre><br>Return true if class is a subclass (direct, indirect or virtual) of classinfo. A class is considered a subclass of itself. classinfo may be a tuple of class objects, in which case every entry in classinfo will be checked. In any other case, a TypeError exception is raised.	https://docs.python.org/3.4/library/functions.html#issubclass
iter	A							https://docs.python.org			<pre><code>
iter(object[, sentinel])</code></pre><br>Return an iterator object. The first argument is interpreted very differently depending on the presence of the second argument. Without a second argument, object must be a collection object which supports the iteration protocol (the __iter__() method), or it must support the sequence protocol (the __getitem__() method with integer arguments starting at 0). If it does not support either of those protocols, TypeError is raised. If the second argument, sentinel, is given, then object must be a callable object. The iterator created in this case will call object with no arguments for each call to its __next__() method; if the value returned is equal to sentinel, StopIteration will be raised, otherwise the value will be returned.	https://docs.python.org/3.4/library/functions.html#iter
len	A							https://docs.python.org			<pre><code>
len(s)</code></pre><br>Return the length (the number of items) of an object. The argument may be a sequence (such as a string, bytes, tuple, list, or range) or a collection (such as a dictionary, set, or frozen set).	https://docs.python.org/3.4/library/functions.html#len
locals	A							https://docs.python.org			<pre><code>
locals()</code></pre><br>Update and return a dictionary representing the current local symbol table. Free variables are returned by locals() when it is called in function blocks, but not in class blocks.	https://docs.python.org/3.4/library/functions.html#locals
map	A							https://docs.python.org			<pre><code>
map(function, iterable, ...)</code></pre><br>Return an iterator that applies function to every item of iterable, yielding the results. If additional iterable arguments are passed, function must take that many arguments and is applied to the items from all iterables in parallel. With multiple iterables, the iterator stops when the shortest iterable is exhausted. For cases where the function inputs are already arranged into argument tuples, see itertools.starmap().	https://docs.python.org/3.4/library/functions.html#map
max	A							https://docs.python.org			<pre><code>
max(iterable, *[, key, default])</code></pre><br>Return the largest item in an iterable or the largest of two or more arguments.	https://docs.python.org/3.4/library/functions.html#max
memoryview	A							https://docs.python.org			<pre><code>
memoryview(obj)</code></pre><br>Return a “memory view” object created from the given argument. See Memory Views for more information.	https://docs.python.org/3.4/library/functions.html
min	A							https://docs.python.org			<pre><code>
min(iterable, *[, key, default])</code></pre><br>Return the smallest item in an iterable or the smallest of two or more arguments.	https://docs.python.org/3.4/library/functions.html#min
next	A							https://docs.python.org			<pre><code>
next(iterator[, default])</code></pre><br>Retrieve the next item from the iterator by calling its __next__() method. If default is given, it is returned if the iterator is exhausted, otherwise StopIteration is raised.	https://docs.python.org/3.4/library/functions.html#next
oct	A							https://docs.python.org			<pre><code>
oct(x)</code></pre><br>Convert an integer number to an octal string. The result is a valid Python expression. If x is not a Python int object, it has to define an __index__() method that returns an integer.	https://docs.python.org/3.4/library/functions.html#oct
open	A							https://docs.python.org			<pre><code>
open(file, mode='r', buffering=-1, encoding=None, errors=None, newline=None, closefd=True, opener=None)</code></pre><br>Open file and return a corresponding file object. If the file cannot be opened, an OSError is raised.	https://docs.python.org/3.4/library/functions.html#open
ord	A							https://docs.python.org			<pre><code>
ord(c)</code></pre><br>Given a string representing one Unicode character, return an integer representing the Unicode code point of that character. For example, ord('a') returns the integer 97 and ord('\u2020') returns 8224. This is the inverse of chr().	https://docs.python.org/3.4/library/functions.html#ord
pow	A							https://docs.python.org			<pre><code>
pow(x, y[, z])</code></pre><br>Return x to the power y; if z is present, return x to the power y, modulo z (computed more efficiently than pow(x, y) % z). The two-argument form pow(x, y) is equivalent to using the power operator: x**y.	https://docs.python.org/3.4/library/functions.html#pow
print	A							https://docs.python.org			<pre><code>
print(*objects, sep=' ', end='\n', file=sys.stdout, flush=False)</code></pre><br>Print objects to the text stream file, separated by sep and followed by end. sep, end and file, if present, must be given as keyword arguments.	https://docs.python.org/3.4/library/functions.html#print
range	A							https://docs.python.org			<pre><code>
range(stop)</code></pre><br>Rather than being a function, range is actually an immutable sequence type, as documented in Ranges and Sequence Types — list, tuple, range.	https://docs.python.org/3.4/library/functions.html
repr	A							https://docs.python.org			<pre><code>
repr(object)</code></pre><br>Return a string containing a printable representation of an object. For many types, this function makes an attempt to return a string that would yield an object with the same value when passed to eval(), otherwise the representation is a string enclosed in angle brackets that contains the name of the type of the object together with additional information often including the name and address of the object. A class can control what this function returns for its instances by defining a __repr__() method.	https://docs.python.org/3.4/library/functions.html#repr
reversed	A							https://docs.python.org			<pre><code>
reversed(seq)</code></pre><br>Return a reverse iterator. seq must be an object which has a __reversed__() method or supports the sequence protocol (the __len__() method and the __getitem__() method with integer arguments starting at 0).	https://docs.python.org/3.4/library/functions.html#reversed
round	A							https://docs.python.org			<pre><code>
round(number[, ndigits])</code></pre><br>Return the floating point value number rounded to ndigits digits after the decimal point. If ndigits is omitted, it defaults to zero. Delegates to number.__round__(ndigits).	https://docs.python.org/3.4/library/functions.html#round
setattr	A							https://docs.python.org			<pre><code>
setattr(object, name, value)</code></pre><br>This is the counterpart of getattr(). The arguments are an object, a string and an arbitrary value. The string may name an existing attribute or a new attribute. The function assigns the value to the attribute, provided the object allows it. For example, setattr(x, 'foobar', 123) is equivalent to x.foobar = 123.	https://docs.python.org/3.4/library/functions.html#setattr
sorted	A							https://docs.python.org			<pre><code>
sorted(iterable[, key][, reverse])</code></pre><br>Return a new sorted list from the items in iterable.	https://docs.python.org/3.4/library/functions.html#sorted
staticmethod	A							https://docs.python.org			<pre><code>
staticmethod(function)</code></pre><br>Return a static method for function.	https://docs.python.org/3.4/library/functions.html#staticmethod
sum	A							https://docs.python.org			<pre><code>
sum(iterable[, start])</code></pre><br>Sums start and the items of an iterable from left to right and returns the total. start defaults to 0. The iterable‘s items are normally numbers, and the start value is not allowed to be a string.	https://docs.python.org/3.4/library/functions.html#sum
super	A							https://docs.python.org			<pre><code>
super([type[, object-or-type]])</code></pre><br>Return a proxy object that delegates method calls to a parent or sibling class of type. This is useful for accessing inherited methods that have been overridden in a class. The search order is same as that used by getattr() except that the type itself is skipped.	https://docs.python.org/3.4/library/functions.html#super
tuple	A							https://docs.python.org			<pre><code>
tuple([iterable])</code></pre><br>Rather than being a function, tuple is actually an immutable sequence type, as documented in Tuples and Sequence Types — list, tuple, range.	https://docs.python.org/3.4/library/functions.html
vars	A							https://docs.python.org			<pre><code>
vars([object])</code></pre><br>Return the __dict__ attribute for a module, class, instance, or any other object with a __dict__ attribute.	https://docs.python.org/3.4/library/functions.html#vars
zip	A							https://docs.python.org			<pre><code>
zip(*iterables)</code></pre><br>Make an iterator that aggregates elements from each of the iterables.	https://docs.python.org/3.4/library/functions.html#zip
__import__	A							https://docs.python.org			<pre><code>
__import__(name, globals=None, locals=None, fromlist=(), level=0)</code></pre><br>Note	https://docs.python.org/3.4/library/functions.html#__import__
functools cmp_to_key	A							https://docs.python.org			<pre><code>
functools.cmp_to_key(func)</code></pre><br>Transform an old-style comparison function to a key function. Used with tools that accept key functions (such as sorted(), min(), max(), heapq.nlargest(), heapq.nsmallest(), itertools.groupby()). This function is primarily used as a transition tool for programs being converted from Python 2 which supported the use of comparison functions.	https://docs.python.org/3.4/library/functools.html#functools.cmp_to_key
@ lru_cache	A							https://docs.python.org			<pre><code>
@functools.lru_cache(maxsize=128, typed=False)</code></pre><br>Decorator to wrap a function with a memoizing callable that saves up to the maxsize most recent calls. It can save time when an expensive or I/O bound function is periodically called with the same arguments.	https://docs.python.org/3.4/library/functools.html#functools.lru_cache
@ total_ordering	A							https://docs.python.org			<pre><code>
@functools.total_ordering</code></pre><br>Given a class defining one or more rich comparison ordering methods, this class decorator supplies the rest. This simplifies the effort involved in specifying all of the possible rich comparison operations:	https://docs.python.org/3.4/library/functools.html#functools.total_ordering
functools partial	A							https://docs.python.org			<pre><code>
functools.partial(func, *args, **keywords)</code></pre><br>Return a new partial object which when called will behave like func called with the positional arguments args and keyword arguments keywords. If more arguments are supplied to the call, they are appended to args. If additional keyword arguments are supplied, they extend and override keywords. Roughly equivalent to:	https://docs.python.org/3.4/library/functools.html#functools.partial
functools reduce	A							https://docs.python.org			<pre><code>
functools.reduce(function, iterable[, initializer])</code></pre><br>Apply function of two arguments cumulatively to the items of sequence, from left to right, so as to reduce the sequence to a single value. For example, reduce(lambda x, y: x+y, [1, 2, 3, 4, 5]) calculates ((((1+2)+3)+4)+5). The left argument, x, is the accumulated value and the right argument, y, is the update value from the sequence. If the optional initializer is present, it is placed before the items of the sequence in the calculation, and serves as a default when the sequence is empty. If initializer is not given and sequence contains only one item, the first item is returned.	https://docs.python.org/3.4/library/functools.html#functools.reduce
@ singledispatch	A							https://docs.python.org			<pre><code>
@functools.singledispatch(default)</code></pre><br>Transforms a function into a single-dispatch generic function.	https://docs.python.org/3.4/library/functools.html#functools.singledispatch
functools update_wrapper	A							https://docs.python.org			<pre><code>
functools.update_wrapper(wrapper, wrapped, assigned=WRAPPER_ASSIGNMENTS, updated=WRAPPER_UPDATES)</code></pre><br>Update a wrapper function to look like the wrapped function. The optional arguments are tuples to specify which attributes of the original function are assigned directly to the matching attributes on the wrapper function and which attributes of the wrapper function are updated with the corresponding attributes from the original function. The default values for these arguments are the module level constants WRAPPER_ASSIGNMENTS (which assigns to the wrapper function’s __name__, __module__, __annotations__ and __doc__, the documentation string) and WRAPPER_UPDATES (which updates the wrapper function’s __dict__, i.e. the instance dictionary).	https://docs.python.org/3.4/library/functools.html#functools.update_wrapper
@ wraps	A							https://docs.python.org			<pre><code>
@functools.wraps(wrapped, assigned=WRAPPER_ASSIGNMENTS, updated=WRAPPER_UPDATES)</code></pre><br>This is a convenience function for invoking update_wrapper() as a function decorator when defining a wrapper function. It is equivalent to partial(update_wrapper, wrapped=wrapped, assigned=assigned, updated=updated). For example:	https://docs.python.org/3.4/library/functools.html#functools.wraps
gc enable	A							https://docs.python.org			<pre><code>
gc.enable()</code></pre><br>Enable automatic garbage collection.	https://docs.python.org/3.4/library/gc.html#gc.enable
gc disable	A							https://docs.python.org			<pre><code>
gc.disable()</code></pre><br>Disable automatic garbage collection.	https://docs.python.org/3.4/library/gc.html#gc.disable
gc isenabled	A							https://docs.python.org			<pre><code>
gc.isenabled()</code></pre><br>Returns true if automatic collection is enabled.	https://docs.python.org/3.4/library/gc.html#gc.isenabled
gc collect	A							https://docs.python.org			<pre><code>
gc.collect(generations=2)</code></pre><br>With no arguments, run a full collection. The optional argument generation may be an integer specifying which generation to collect (from 0 to 2). A ValueError is raised if the generation number is invalid. The number of unreachable objects found is returned.	https://docs.python.org/3.4/library/gc.html#gc.collect
gc set_debug	A							https://docs.python.org			<pre><code>
gc.set_debug(flags)</code></pre><br>Set the garbage collection debugging flags. Debugging information will be written to sys.stderr. See below for a list of debugging flags which can be combined using bit operations to control debugging.	https://docs.python.org/3.4/library/gc.html#gc.set_debug
gc get_debug	A							https://docs.python.org			<pre><code>
gc.get_debug()</code></pre><br>Return the debugging flags currently set.	https://docs.python.org/3.4/library/gc.html#gc.get_debug
gc get_objects	A							https://docs.python.org			<pre><code>
gc.get_objects()</code></pre><br>Returns a list of all objects tracked by the collector, excluding the list returned.	https://docs.python.org/3.4/library/gc.html#gc.get_objects
gc get_stats	A							https://docs.python.org			<pre><code>
gc.get_stats()</code></pre><br>Return a list of three per-generation dictionaries containing collection statistics since interpreter start. The number of keys may change in the future, but currently each dictionary will contain the following items:	https://docs.python.org/3.4/library/gc.html#gc.get_stats
gc set_threshold	A							https://docs.python.org			<pre><code>
gc.set_threshold(threshold0[, threshold1[, threshold2]])</code></pre><br>Set the garbage collection thresholds (the collection frequency). Setting threshold0 to zero disables collection.	https://docs.python.org/3.4/library/gc.html#gc.set_threshold
gc get_count	A							https://docs.python.org			<pre><code>
gc.get_count()</code></pre><br>Return the current collection counts as a tuple of (count0, count1, count2).	https://docs.python.org/3.4/library/gc.html#gc.get_count
gc get_threshold	A							https://docs.python.org			<pre><code>
gc.get_threshold()</code></pre><br>Return the current collection thresholds as a tuple of (threshold0, threshold1, threshold2).	https://docs.python.org/3.4/library/gc.html#gc.get_threshold
gc get_referrers	A							https://docs.python.org			<pre><code>
gc.get_referrers(*objs)</code></pre><br>Return the list of objects that directly refer to any of objs. This function will only locate those containers which support garbage collection; extension types which do refer to other objects but do not support garbage collection will not be found.	https://docs.python.org/3.4/library/gc.html#gc.get_referrers
gc get_referents	A							https://docs.python.org			<pre><code>
gc.get_referents(*objs)</code></pre><br>Return a list of objects directly referred to by any of the arguments. The referents returned are those objects visited by the arguments’ C-level tp_traverse methods (if any), and may not be all objects actually directly reachable. tp_traverse methods are supported only by objects that support garbage collection, and are only required to visit objects that may be involved in a cycle. So, for example, if an integer is directly reachable from an argument, that integer object may or may not appear in the result list.	https://docs.python.org/3.4/library/gc.html#gc.get_referents
gc is_tracked	A							https://docs.python.org			<pre><code>
gc.is_tracked(obj)</code></pre><br>Returns True if the object is currently tracked by the garbage collector, False otherwise. As a general rule, instances of atomic types aren’t tracked and instances of non-atomic types (containers, user-defined objects...) are. However, some type-specific optimizations can be present in order to suppress the garbage collector footprint of simple instances (e.g. dicts containing only atomic keys and values):	https://docs.python.org/3.4/library/gc.html#gc.is_tracked
getopt getopt	A							https://docs.python.org			<pre><code>
getopt.getopt(args, shortopts, longopts=[])</code></pre><br>Parses command line options and parameter list. args is the argument list to be parsed, without the leading reference to the running program. Typically, this means sys.argv[1:]. shortopts is the string of option letters that the script wants to recognize, with options that require an argument followed by a colon (':'; i.e., the same format that Unix getopt() uses).	https://docs.python.org/3.4/library/getopt.html#getopt.getopt
getopt gnu_getopt	A							https://docs.python.org			<pre><code>
getopt.gnu_getopt(args, shortopts, longopts=[])</code></pre><br>This function works like getopt(), except that GNU style scanning mode is used by default. This means that option and non-option arguments may be intermixed. The getopt() function stops processing options as soon as a non-option argument is encountered.	https://docs.python.org/3.4/library/getopt.html#getopt.gnu_getopt
getpass getpass	A							https://docs.python.org			<pre><code>
getpass.getpass(prompt='Password: ', stream=None)</code></pre><br>Prompt the user for a password without echoing. The user is prompted using the string prompt, which defaults to 'Password: '. On Unix, the prompt is written to the file-like object stream using the replace error handler if needed. stream defaults to the controlling terminal (/dev/tty) or if that is unavailable to sys.stderr (this argument is ignored on Windows).	https://docs.python.org/3.4/library/getpass.html#getpass.getpass
getpass getuser	A							https://docs.python.org			<pre><code>
getpass.getuser()</code></pre><br>Return the “login name” of the user. Availability: Unix, Windows.	https://docs.python.org/3.4/library/getpass.html#getpass.getuser
gettext bindtextdomain	A							https://docs.python.org			<pre><code>
gettext.bindtextdomain(domain, localedir=None)</code></pre><br>Bind the domain to the locale directory localedir. More concretely, gettext will look for binary .mo files for the given domain using the path (on Unix): localedir/language/LC_MESSAGES/domain.mo, where languages is searched for in the environment variables LANGUAGE, LC_ALL, LC_MESSAGES, and LANG respectively.	https://docs.python.org/3.4/library/gettext.html#gettext.bindtextdomain
gettext bind_textdomain_codeset	A							https://docs.python.org			<pre><code>
gettext.bind_textdomain_codeset(domain, codeset=None)</code></pre><br>Bind the domain to codeset, changing the encoding of strings returned by the gettext() family of functions. If codeset is omitted, then the current binding is returned.	https://docs.python.org/3.4/library/gettext.html#gettext.bind_textdomain_codeset
gettext textdomain	A							https://docs.python.org			<pre><code>
gettext.textdomain(domain=None)</code></pre><br>Change or query the current global domain. If domain is None, then the current global domain is returned, otherwise the global domain is set to domain, which is returned.	https://docs.python.org/3.4/library/gettext.html#gettext.textdomain
gettext gettext	A							https://docs.python.org			<pre><code>
gettext.gettext(message)</code></pre><br>Return the localized translation of message, based on the current global domain, language, and locale directory. This function is usually aliased as _() in the local namespace (see examples below).	https://docs.python.org/3.4/library/gettext.html#gettext.gettext
gettext lgettext	A							https://docs.python.org			<pre><code>
gettext.lgettext(message)</code></pre><br>Equivalent to gettext(), but the translation is returned in the preferred system encoding, if no other encoding was explicitly set with bind_textdomain_codeset().	https://docs.python.org/3.4/library/gettext.html#gettext.lgettext
gettext dgettext	A							https://docs.python.org			<pre><code>
gettext.dgettext(domain, message)</code></pre><br>Like gettext(), but look the message up in the specified domain.	https://docs.python.org/3.4/library/gettext.html#gettext.dgettext
gettext ldgettext	A							https://docs.python.org			<pre><code>
gettext.ldgettext(domain, message)</code></pre><br>Equivalent to dgettext(), but the translation is returned in the preferred system encoding, if no other encoding was explicitly set with bind_textdomain_codeset().	https://docs.python.org/3.4/library/gettext.html#gettext.ldgettext
gettext ngettext	A							https://docs.python.org			<pre><code>
gettext.ngettext(singular, plural, n)</code></pre><br>Like gettext(), but consider plural forms. If a translation is found, apply the plural formula to n, and return the resulting message (some languages have more than two plural forms). If no translation is found, return singular if n is 1; return plural otherwise.	https://docs.python.org/3.4/library/gettext.html#gettext.ngettext
gettext lngettext	A							https://docs.python.org			<pre><code>
gettext.lngettext(singular, plural, n)</code></pre><br>Equivalent to ngettext(), but the translation is returned in the preferred system encoding, if no other encoding was explicitly set with bind_textdomain_codeset().	https://docs.python.org/3.4/library/gettext.html#gettext.lngettext
gettext dngettext	A							https://docs.python.org			<pre><code>
gettext.dngettext(domain, singular, plural, n)</code></pre><br>Like ngettext(), but look the message up in the specified domain.	https://docs.python.org/3.4/library/gettext.html#gettext.dngettext
gettext ldngettext	A							https://docs.python.org			<pre><code>
gettext.ldngettext(domain, singular, plural, n)</code></pre><br>Equivalent to dngettext(), but the translation is returned in the preferred system encoding, if no other encoding was explicitly set with bind_textdomain_codeset().	https://docs.python.org/3.4/library/gettext.html#gettext.ldngettext
gettext find	A							https://docs.python.org			<pre><code>
gettext.find(domain, localedir=None, languages=None, all=False)</code></pre><br>This function implements the standard .mo file search algorithm. It takes a domain, identical to what textdomain() takes. Optional localedir is as in bindtextdomain() Optional languages is a list of strings, where each string is a language code.	https://docs.python.org/3.4/library/gettext.html#gettext.find
gettext translation	A							https://docs.python.org			<pre><code>
gettext.translation(domain, localedir=None, languages=None, class_=None, fallback=False, codeset=None)</code></pre><br>Return a Translations instance based on the domain, localedir, and languages, which are first passed to find() to get a list of the associated .mo file paths. Instances with identical .mo file names are cached. The actual class instantiated is either class_ if provided, otherwise GNUTranslations. The class’s constructor must take a single file object argument. If provided, codeset will change the charset used to encode translated strings in the lgettext() and lngettext() methods.	https://docs.python.org/3.4/library/gettext.html#gettext.translation
gettext install	A							https://docs.python.org			<pre><code>
gettext.install(domain, localedir=None, codeset=None, names=None)</code></pre><br>This installs the function _() in Python’s builtins namespace, based on domain, localedir, and codeset which are passed to the function translation().	https://docs.python.org/3.4/library/gettext.html#gettext.install
gettext bindtextdomain	A							https://docs.python.org			<pre><code>
gettext.bindtextdomain(domain, localedir=None)</code></pre><br>Bind the domain to the locale directory localedir. More concretely, gettext will look for binary .mo files for the given domain using the path (on Unix): localedir/language/LC_MESSAGES/domain.mo, where languages is searched for in the environment variables LANGUAGE, LC_ALL, LC_MESSAGES, and LANG respectively.	https://docs.python.org/3.4/library/gettext.html#gettext.bindtextdomain
gettext bind_textdomain_codeset	A							https://docs.python.org			<pre><code>
gettext.bind_textdomain_codeset(domain, codeset=None)</code></pre><br>Bind the domain to codeset, changing the encoding of strings returned by the gettext() family of functions. If codeset is omitted, then the current binding is returned.	https://docs.python.org/3.4/library/gettext.html#gettext.bind_textdomain_codeset
gettext textdomain	A							https://docs.python.org			<pre><code>
gettext.textdomain(domain=None)</code></pre><br>Change or query the current global domain. If domain is None, then the current global domain is returned, otherwise the global domain is set to domain, which is returned.	https://docs.python.org/3.4/library/gettext.html#gettext.textdomain
gettext gettext	A							https://docs.python.org			<pre><code>
gettext.gettext(message)</code></pre><br>Return the localized translation of message, based on the current global domain, language, and locale directory. This function is usually aliased as _() in the local namespace (see examples below).	https://docs.python.org/3.4/library/gettext.html#gettext.gettext
gettext lgettext	A							https://docs.python.org			<pre><code>
gettext.lgettext(message)</code></pre><br>Equivalent to gettext(), but the translation is returned in the preferred system encoding, if no other encoding was explicitly set with bind_textdomain_codeset().	https://docs.python.org/3.4/library/gettext.html#gettext.lgettext
gettext dgettext	A							https://docs.python.org			<pre><code>
gettext.dgettext(domain, message)</code></pre><br>Like gettext(), but look the message up in the specified domain.	https://docs.python.org/3.4/library/gettext.html#gettext.dgettext
gettext ldgettext	A							https://docs.python.org			<pre><code>
gettext.ldgettext(domain, message)</code></pre><br>Equivalent to dgettext(), but the translation is returned in the preferred system encoding, if no other encoding was explicitly set with bind_textdomain_codeset().	https://docs.python.org/3.4/library/gettext.html#gettext.ldgettext
gettext ngettext	A							https://docs.python.org			<pre><code>
gettext.ngettext(singular, plural, n)</code></pre><br>Like gettext(), but consider plural forms. If a translation is found, apply the plural formula to n, and return the resulting message (some languages have more than two plural forms). If no translation is found, return singular if n is 1; return plural otherwise.	https://docs.python.org/3.4/library/gettext.html#gettext.ngettext
gettext lngettext	A							https://docs.python.org			<pre><code>
gettext.lngettext(singular, plural, n)</code></pre><br>Equivalent to ngettext(), but the translation is returned in the preferred system encoding, if no other encoding was explicitly set with bind_textdomain_codeset().	https://docs.python.org/3.4/library/gettext.html#gettext.lngettext
gettext dngettext	A							https://docs.python.org			<pre><code>
gettext.dngettext(domain, singular, plural, n)</code></pre><br>Like ngettext(), but look the message up in the specified domain.	https://docs.python.org/3.4/library/gettext.html#gettext.dngettext
gettext ldngettext	A							https://docs.python.org			<pre><code>
gettext.ldngettext(domain, singular, plural, n)</code></pre><br>Equivalent to dngettext(), but the translation is returned in the preferred system encoding, if no other encoding was explicitly set with bind_textdomain_codeset().	https://docs.python.org/3.4/library/gettext.html#gettext.ldngettext
gettext find	A							https://docs.python.org			<pre><code>
gettext.find(domain, localedir=None, languages=None, all=False)</code></pre><br>This function implements the standard .mo file search algorithm. It takes a domain, identical to what textdomain() takes. Optional localedir is as in bindtextdomain() Optional languages is a list of strings, where each string is a language code.	https://docs.python.org/3.4/library/gettext.html#gettext.find
gettext translation	A							https://docs.python.org			<pre><code>
gettext.translation(domain, localedir=None, languages=None, class_=None, fallback=False, codeset=None)</code></pre><br>Return a Translations instance based on the domain, localedir, and languages, which are first passed to find() to get a list of the associated .mo file paths. Instances with identical .mo file names are cached. The actual class instantiated is either class_ if provided, otherwise GNUTranslations. The class’s constructor must take a single file object argument. If provided, codeset will change the charset used to encode translated strings in the lgettext() and lngettext() methods.	https://docs.python.org/3.4/library/gettext.html#gettext.translation
gettext install	A							https://docs.python.org			<pre><code>
gettext.install(domain, localedir=None, codeset=None, names=None)</code></pre><br>This installs the function _() in Python’s builtins namespace, based on domain, localedir, and codeset which are passed to the function translation().	https://docs.python.org/3.4/library/gettext.html#gettext.install
glob glob	A							https://docs.python.org			<pre><code>
glob.glob(pathname)</code></pre><br>Return a possibly-empty list of path names that match pathname, which must be a string containing a path specification. pathname can be either absolute (like /usr/src/Python-1.5/Makefile) or relative (like ../../Tools/*/*.gif), and can contain shell-style wildcards. Broken symlinks are included in the results (as in the shell).	https://docs.python.org/3.4/library/glob.html#glob.glob
glob iglob	A							https://docs.python.org			<pre><code>
glob.iglob(pathname)</code></pre><br>Return an iterator which yields the same values as glob() without actually storing them all simultaneously.	https://docs.python.org/3.4/library/glob.html#glob.iglob
glob escape	A							https://docs.python.org			<pre><code>
glob.escape(pathname)</code></pre><br>Escape all special characters ('?', '*' and '['). This is useful if you want to match an arbitrary literal string that may have special characters in it. Special characters in drive/UNC sharepoints are not escaped, e.g. on Windows escape('//?/c:/Quo vadis?.txt') returns '//?/c:/Quo vadis[?].txt'.	https://docs.python.org/3.4/library/glob.html#glob.escape
grp getgrgid	A							https://docs.python.org			<pre><code>
grp.getgrgid(gid)</code></pre><br>Return the group database entry for the given numeric group ID. KeyError is raised if the entry asked for cannot be found.	https://docs.python.org/3.4/library/grp.html#grp.getgrgid
grp getgrnam	A							https://docs.python.org			<pre><code>
grp.getgrnam(name)</code></pre><br>Return the group database entry for the given group name. KeyError is raised if the entry asked for cannot be found.	https://docs.python.org/3.4/library/grp.html#grp.getgrnam
grp getgrall	A							https://docs.python.org			<pre><code>
grp.getgrall()</code></pre><br>Return a list of all available group entries, in arbitrary order.	https://docs.python.org/3.4/library/grp.html#grp.getgrall
gzip open	A							https://docs.python.org			<pre><code>
gzip.open(filename, mode='rb', compresslevel=9, encoding=None, errors=None, newline=None)</code></pre><br>Open a gzip-compressed file in binary or text mode, returning a file object.	https://docs.python.org/3.4/library/gzip.html#gzip.open
gzip compress	A							https://docs.python.org			<pre><code>
gzip.compress(data, compresslevel=9)</code></pre><br>Compress the data, returning a bytes object containing the compressed data. compresslevel has the same meaning as in the GzipFile constructor above.	https://docs.python.org/3.4/library/gzip.html#gzip.compress
gzip decompress	A							https://docs.python.org			<pre><code>
gzip.decompress(data)</code></pre><br>Decompress the data, returning a bytes object containing the uncompressed data.	https://docs.python.org/3.4/library/gzip.html#gzip.decompress
hashlib new	A							https://docs.python.org			<pre><code>
hashlib.new(name[, data])</code></pre><br>Is a generic constructor that takes the string name of the desired algorithm as its first parameter. It also exists to allow access to the above listed hashes as well as any other algorithms that your OpenSSL library may offer. The named constructors are much faster than new() and should be preferred.	https://docs.python.org/3.4/library/hashlib.html#hashlib.new
hashlib pbkdf2_hmac	A							https://docs.python.org			<pre><code>
hashlib.pbkdf2_hmac(name, password, salt, rounds, dklen=None)</code></pre><br>The function provides PKCS#5 password-based key derivation function 2. It uses HMAC as pseudorandom function.	https://docs.python.org/3.4/library/hashlib.html#hashlib.pbkdf2_hmac
hashlib new	A							https://docs.python.org			<pre><code>
hashlib.new(name[, data])</code></pre><br>Is a generic constructor that takes the string name of the desired algorithm as its first parameter. It also exists to allow access to the above listed hashes as well as any other algorithms that your OpenSSL library may offer. The named constructors are much faster than new() and should be preferred.	https://docs.python.org/3.4/library/hashlib.html#hashlib.new
hashlib pbkdf2_hmac	A							https://docs.python.org			<pre><code>
hashlib.pbkdf2_hmac(name, password, salt, rounds, dklen=None)</code></pre><br>The function provides PKCS#5 password-based key derivation function 2. It uses HMAC as pseudorandom function.	https://docs.python.org/3.4/library/hashlib.html#hashlib.pbkdf2_hmac
heapq heappush	A							https://docs.python.org			<pre><code>
heapq.heappush(heap, item)</code></pre><br>Push the value item onto the heap, maintaining the heap invariant.	https://docs.python.org/3.4/library/heapq.html#heapq.heappush
heapq heappop	A							https://docs.python.org			<pre><code>
heapq.heappop(heap)</code></pre><br>Pop and return the smallest item from the heap, maintaining the heap invariant. If the heap is empty, IndexError is raised. To access the smallest item without popping it, use heap[0].	https://docs.python.org/3.4/library/heapq.html#heapq.heappop
heapq heappushpop	A							https://docs.python.org			<pre><code>
heapq.heappushpop(heap, item)</code></pre><br>Push item on the heap, then pop and return the smallest item from the heap. The combined action runs more efficiently than heappush() followed by a separate call to heappop().	https://docs.python.org/3.4/library/heapq.html#heapq.heappushpop
heapq heapify	A							https://docs.python.org			<pre><code>
heapq.heapify(x)</code></pre><br>Transform list x into a heap, in-place, in linear time.	https://docs.python.org/3.4/library/heapq.html#heapq.heapify
heapq heapreplace	A							https://docs.python.org			<pre><code>
heapq.heapreplace(heap, item)</code></pre><br>Pop and return the smallest item from the heap, and also push the new item. The heap size doesn’t change. If the heap is empty, IndexError is raised.	https://docs.python.org/3.4/library/heapq.html#heapq.heapreplace
heapq merge	A							https://docs.python.org			<pre><code>
heapq.merge(*iterables)</code></pre><br>Merge multiple sorted inputs into a single sorted output (for example, merge timestamped entries from multiple log files). Returns an iterator over the sorted values.	https://docs.python.org/3.4/library/heapq.html#heapq.merge
heapq nlargest	A							https://docs.python.org			<pre><code>
heapq.nlargest(n, iterable, key=None)</code></pre><br>Return a list with the n largest elements from the dataset defined by iterable. key, if provided, specifies a function of one argument that is used to extract a comparison key from each element in the iterable: key=str.lower Equivalent to: sorted(iterable, key=key, reverse=True)[:n]	https://docs.python.org/3.4/library/heapq.html#heapq.nlargest
heapq nsmallest	A							https://docs.python.org			<pre><code>
heapq.nsmallest(n, iterable, key=None)</code></pre><br>Return a list with the n smallest elements from the dataset defined by iterable. key, if provided, specifies a function of one argument that is used to extract a comparison key from each element in the iterable: key=str.lower Equivalent to: sorted(iterable, key=key)[:n]	https://docs.python.org/3.4/library/heapq.html#heapq.nsmallest
hmac new	A							https://docs.python.org			<pre><code>
hmac.new(key, msg=None, digestmod=None)</code></pre><br>Return a new hmac object. key is a bytes or bytearray object giving the secret key. If msg is present, the method call update(msg) is made. digestmod is the digest name, digest constructor or module for the HMAC object to use. It supports any name suitable to hashlib.new() and defaults to the hashlib.md5 constructor.	https://docs.python.org/3.4/library/hmac.html#hmac.new
hmac compare_digest	A							https://docs.python.org			<pre><code>
hmac.compare_digest(a, b)</code></pre><br>Return a == b. This function uses an approach designed to prevent timing analysis by avoiding content-based short circuiting behaviour, making it appropriate for cryptography. a and b must both be of the same type: either str (ASCII only, as e.g. returned by HMAC.hexdigest()), or a bytes-like object.	https://docs.python.org/3.4/library/hmac.html#hmac.compare_digest
html escape	A							https://docs.python.org			<pre><code>
html.escape(s, quote=True)</code></pre><br>Convert the characters &, < and > in string s to HTML-safe sequences. Use this if you need to display text that might contain such characters in HTML. If the optional flag quote is true, the characters (") and (') are also translated; this helps for inclusion in an HTML attribute value delimited by quotes, as in <a href="...">.	https://docs.python.org/3.4/library/html.html#html.escape
html unescape	A							https://docs.python.org			<pre><code>
html.unescape(s)</code></pre><br>Convert all named and numeric character references (e.g. &gt;, &#62;, &x3e;) in the string s to the corresponding unicode characters. This function uses the rules defined by the HTML 5 standard for both valid and invalid character references, and the list of HTML 5 named character references.	https://docs.python.org/3.4/library/html.html#html.unescape
imaplib Internaldate2tuple	A							https://docs.python.org			<pre><code>
imaplib.Internaldate2tuple(datestr)</code></pre><br>Parse an IMAP4 INTERNALDATE string and return corresponding local time. The return value is a time.struct_time tuple or None if the string has wrong format.	https://docs.python.org/3.4/library/imaplib.html#imaplib.Internaldate2tuple
imaplib Int2AP	A							https://docs.python.org			<pre><code>
imaplib.Int2AP(num)</code></pre><br>Converts an integer into a string representation using characters from the set [A .. P].	https://docs.python.org/3.4/library/imaplib.html#imaplib.Int2AP
imaplib ParseFlags	A							https://docs.python.org			<pre><code>
imaplib.ParseFlags(flagstr)</code></pre><br>Converts an IMAP4 FLAGS response to a tuple of individual flags.	https://docs.python.org/3.4/library/imaplib.html#imaplib.ParseFlags
imaplib Time2Internaldate	A							https://docs.python.org			<pre><code>
imaplib.Time2Internaldate(date_time)</code></pre><br>Convert date_time to an IMAP4 INTERNALDATE representation. The return value is a string in the form: "DD-Mmm-YYYY HH:MM:SS +HHMM" (including double-quotes). The date_time argument can be a number (int or float) representing seconds since epoch (as returned by time.time()), a 9-tuple representing local time an instance of time.struct_time (as returned by time.localtime()), an aware instance of datetime.datetime, or a double-quoted string. In the last case, it is assumed to already be in the correct format.	https://docs.python.org/3.4/library/imaplib.html#imaplib.Time2Internaldate
imghdr what	A							https://docs.python.org			<pre><code>
imghdr.what(filename, h=None)</code></pre><br>Tests the image data contained in the file named by filename, and returns a string describing the image type. If optional h is provided, the filename is ignored and h is assumed to contain the byte stream to test.	https://docs.python.org/3.4/library/imghdr.html#imghdr.what
imp get_magic	A							https://docs.python.org			<pre><code>
imp.get_magic()</code></pre><br>Return the magic string value used to recognize byte-compiled code files (.pyc files). (This value may be different for each Python version.)	https://docs.python.org/3.4/library/imp.html#imp.get_magic
imp get_suffixes	A							https://docs.python.org			<pre><code>
imp.get_suffixes()</code></pre><br>Return a list of 3-element tuples, each describing a particular type of module. Each triple has the form (suffix, mode, type), where suffix is a string to be appended to the module name to form the filename to search for, mode is the mode string to pass to the built-in open() function to open the file (this can be 'r' for text files or 'rb' for binary files), and type is the file type, which has one of the values PY_SOURCE, PY_COMPILED, or C_EXTENSION, described below.	https://docs.python.org/3.4/library/imp.html#imp.get_suffixes
imp find_module	A							https://docs.python.org			<pre><code>
imp.find_module(name[, path])</code></pre><br>Try to find the module name. If path is omitted or None, the list of directory names given by sys.path is searched, but first a few special places are searched: the function tries to find a built-in module with the given name (C_BUILTIN), then a frozen module (PY_FROZEN), and on some systems some other places are looked in as well (on Windows, it looks in the registry which may point to a specific file).	https://docs.python.org/3.4/library/imp.html#imp.find_module
imp load_module	A							https://docs.python.org			<pre><code>
imp.load_module(name, file, pathname, description)</code></pre><br>Load a module that was previously found by find_module() (or by an otherwise conducted search yielding compatible results). This function does more than importing the module: if the module was already imported, it will reload the module! The name argument indicates the full module name (including the package name, if this is a submodule of a package). The file argument is an open file, and pathname is the corresponding file name; these can be None and '', respectively, when the module is a package or not being loaded from a file. The description argument is a tuple, as would be returned by get_suffixes(), describing what kind of module must be loaded.	https://docs.python.org/3.4/library/imp.html#imp.load_module
imp new_module	A							https://docs.python.org			<pre><code>
imp.new_module(name)</code></pre><br>Return a new empty module object called name. This object is not inserted in sys.modules.	https://docs.python.org/3.4/library/imp.html#imp.new_module
imp reload	A							https://docs.python.org			<pre><code>
imp.reload(module)</code></pre><br>Reload a previously imported module. The argument must be a module object, so it must have been successfully imported before. This is useful if you have edited the module source file using an external editor and want to try out the new version without leaving the Python interpreter. The return value is the module object (the same as the module argument).	https://docs.python.org/3.4/library/imp.html#imp.reload
imp cache_from_source	A							https://docs.python.org			<pre><code>
imp.cache_from_source(path, debug_override=None)</code></pre><br>Return the PEP 3147 path to the byte-compiled file associated with the source path. For example, if path is /foo/bar/baz.py the return value would be /foo/bar/__pycache__/baz.cpython-32.pyc for Python 3.2. The cpython-32 string comes from the current magic tag (see get_tag(); if sys.implementation.cache_tag is not defined then NotImplementedError will be raised). The returned path will end in .pyc when __debug__ is True or .pyo for an optimized Python (i.e. __debug__ is False). By passing in True or False for debug_override you can override the system’s value for __debug__ for extension selection.	https://docs.python.org/3.4/library/imp.html#imp.cache_from_source
imp source_from_cache	A							https://docs.python.org			<pre><code>
imp.source_from_cache(path)</code></pre><br>Given the path to a PEP 3147 file name, return the associated source code file path. For example, if path is /foo/bar/__pycache__/baz.cpython-32.pyc the returned path would be /foo/bar/baz.py. path need not exist, however if it does not conform to PEP 3147 format, a ValueError is raised. If sys.implementation.cache_tag is not defined, NotImplementedError is raised.	https://docs.python.org/3.4/library/imp.html#imp.source_from_cache
imp get_tag	A							https://docs.python.org			<pre><code>
imp.get_tag()</code></pre><br>Return the PEP 3147 magic tag string matching this version of Python’s magic number, as returned by get_magic().	https://docs.python.org/3.4/library/imp.html#imp.get_tag
imp lock_held	A							https://docs.python.org			<pre><code>
imp.lock_held()</code></pre><br>Return True if the global import lock is currently held, else False. On platforms without threads, always return False.	https://docs.python.org/3.4/library/imp.html#imp.lock_held
imp acquire_lock	A							https://docs.python.org			<pre><code>
imp.acquire_lock()</code></pre><br>Acquire the interpreter’s global import lock for the current thread. This lock should be used by import hooks to ensure thread-safety when importing modules.	https://docs.python.org/3.4/library/imp.html#imp.acquire_lock
imp release_lock	A							https://docs.python.org			<pre><code>
imp.release_lock()</code></pre><br>Release the interpreter’s global import lock. On platforms without threads, this function does nothing.	https://docs.python.org/3.4/library/imp.html#imp.release_lock
importlib __import__	A							https://docs.python.org			<pre><code>
importlib.__import__(name, globals=None, locals=None, fromlist=(), level=0)</code></pre><br>An implementation of the built-in __import__() function.	https://docs.python.org/3.4/library/importlib.html#importlib.__import__
importlib import_module	A							https://docs.python.org			<pre><code>
importlib.import_module(name, package=None)</code></pre><br>Import a module. The name argument specifies what module to import in absolute or relative terms (e.g. either pkg.mod or ..mod). If the name is specified in relative terms, then the package argument must be set to the name of the package which is to act as the anchor for resolving the package name (e.g. import_module('..mod', 'pkg.subpkg') will import pkg.mod).	https://docs.python.org/3.4/library/importlib.html#importlib.import_module
importlib find_loader	A							https://docs.python.org			<pre><code>
importlib.find_loader(name, path=None)</code></pre><br>Find the loader for a module, optionally within the specified path. If the module is in sys.modules, then sys.modules[name].__loader__ is returned (unless the loader would be None or is not set, in which case ValueError is raised). Otherwise a search using sys.meta_path is done. None is returned if no loader is found.	https://docs.python.org/3.4/library/importlib.html#importlib.find_loader
importlib invalidate_caches	A							https://docs.python.org			<pre><code>
importlib.invalidate_caches()</code></pre><br>Invalidate the internal caches of finders stored at sys.meta_path. If a finder implements invalidate_caches() then it will be called to perform the invalidation. This function should be called if any modules are created/installed while your program is running to guarantee all finders will notice the new module’s existence.	https://docs.python.org/3.4/library/importlib.html#importlib.invalidate_caches
importlib reload	A							https://docs.python.org			<pre><code>
importlib.reload(module)</code></pre><br>Reload a previously imported module. The argument must be a module object, so it must have been successfully imported before. This is useful if you have edited the module source file using an external editor and want to try out the new version without leaving the Python interpreter. The return value is the module object (which can be different if re-importing causes a different object to be placed in sys.modules).	https://docs.python.org/3.4/library/importlib.html#importlib.reload
importlib.machinery all_suffixes	A							https://docs.python.org			<pre><code>
importlib.machinery.all_suffixes()</code></pre><br>Returns a combined list of strings representing all file suffixes for modules recognized by the standard import machinery. This is a helper for code which simply needs to know if a filesystem path potentially refers to a module without needing any details on the kind of module (for example, inspect.getmodulename()).	https://docs.python.org/3.4/library/importlib.html#importlib.machinery.all_suffixes
importlib.util cache_from_source	A							https://docs.python.org			<pre><code>
importlib.util.cache_from_source(path, debug_override=None)</code></pre><br>Return the PEP 3147 path to the byte-compiled file associated with the source path. For example, if path is /foo/bar/baz.py the return value would be /foo/bar/__pycache__/baz.cpython-32.pyc for Python 3.2. The cpython-32 string comes from the current magic tag (see get_tag(); if sys.implementation.cache_tag is not defined then NotImplementedError will be raised). The returned path will end in .pyc when __debug__ is True or .pyo for an optimized Python (i.e. __debug__ is False). By passing in True or False for debug_override you can override the system’s value for __debug__ for extension selection.	https://docs.python.org/3.4/library/importlib.html#importlib.util.cache_from_source
importlib.util source_from_cache	A							https://docs.python.org			<pre><code>
importlib.util.source_from_cache(path)</code></pre><br>Given the path to a PEP 3147 file name, return the associated source code file path. For example, if path is /foo/bar/__pycache__/baz.cpython-32.pyc the returned path would be /foo/bar/baz.py. path need not exist, however if it does not conform to PEP 3147 format, a ValueError is raised. If sys.implementation.cache_tag is not defined, NotImplementedError is raised.	https://docs.python.org/3.4/library/importlib.html#importlib.util.source_from_cache
importlib.util decode_source	A							https://docs.python.org			<pre><code>
importlib.util.decode_source(source_bytes)</code></pre><br>Decode the given bytes representing source code and return it as a string with universal newlines (as required by importlib.abc.InspectLoader.get_source()).	https://docs.python.org/3.4/library/importlib.html#importlib.util.decode_source
importlib.util resolve_name	A							https://docs.python.org			<pre><code>
importlib.util.resolve_name(name, package)</code></pre><br>Resolve a relative module name to an absolute one.	https://docs.python.org/3.4/library/importlib.html#importlib.util.resolve_name
importlib.util find_spec	A							https://docs.python.org			<pre><code>
importlib.util.find_spec(name, package=None)</code></pre><br>Find the spec for a module, optionally relative to the specified package name. If the module is in sys.modules, then sys.modules[name].__spec__ is returned (unless the spec would be None or is not set, in which case ValueError is raised). Otherwise a search using sys.meta_path is done. None is returned if no spec is found.	https://docs.python.org/3.4/library/importlib.html#importlib.util.find_spec
@ module_for_loader	A							https://docs.python.org			<pre><code>
@importlib.util.module_for_loader</code></pre><br>A decorator for importlib.abc.Loader.load_module() to handle selecting the proper module object to load with. The decorated method is expected to have a call signature taking two positional arguments (e.g. load_module(self, module)) for which the second argument will be the module object to be used by the loader. Note that the decorator will not work on static methods because of the assumption of two arguments.	https://docs.python.org/3.4/library/importlib.html#importlib.util.module_for_loader
@ set_loader	A							https://docs.python.org			<pre><code>
@importlib.util.set_loader</code></pre><br>A decorator for importlib.abc.Loader.load_module() to set the __loader__ attribute on the returned module. If the attribute is already set the decorator does nothing. It is assumed that the first positional argument to the wrapped method (i.e. self) is what __loader__ should be set to.	https://docs.python.org/3.4/library/importlib.html#importlib.util.set_loader
@ set_package	A							https://docs.python.org			<pre><code>
@importlib.util.set_package</code></pre><br>A decorator for importlib.abc.Loader.load_module() to set the __package__ attribute on the returned module. If __package__ is set and has a value other than None it will not be changed.	https://docs.python.org/3.4/library/importlib.html#importlib.util.set_package
importlib.util spec_from_loader	A							https://docs.python.org			<pre><code>
importlib.util.spec_from_loader(name, loader, *, origin=None, is_package=None)</code></pre><br>A factory function for creating a ModuleSpec instance based on a loader. The parameters have the same meaning as they do for ModuleSpec. The function uses available loader APIs, such as InspectLoader.is_package(), to fill in any missing information on the spec.	https://docs.python.org/3.4/library/importlib.html#importlib.util.spec_from_loader
importlib.util spec_from_file_location	A							https://docs.python.org			<pre><code>
importlib.util.spec_from_file_location(name, location, *, loader=None, submodule_search_locations=None)</code></pre><br>A factory function for creating a ModuleSpec instance based on the path to a file. Missing information will be filled in on the spec by making use of loader APIs and by the implication that the module will be file-based.	https://docs.python.org/3.4/library/importlib.html#importlib.util.spec_from_file_location
importlib __import__	A							https://docs.python.org			<pre><code>
importlib.__import__(name, globals=None, locals=None, fromlist=(), level=0)</code></pre><br>An implementation of the built-in __import__() function.	https://docs.python.org/3.4/library/importlib.html#importlib.__import__
importlib import_module	A							https://docs.python.org			<pre><code>
importlib.import_module(name, package=None)</code></pre><br>Import a module. The name argument specifies what module to import in absolute or relative terms (e.g. either pkg.mod or ..mod). If the name is specified in relative terms, then the package argument must be set to the name of the package which is to act as the anchor for resolving the package name (e.g. import_module('..mod', 'pkg.subpkg') will import pkg.mod).	https://docs.python.org/3.4/library/importlib.html#importlib.import_module
importlib find_loader	A							https://docs.python.org			<pre><code>
importlib.find_loader(name, path=None)</code></pre><br>Find the loader for a module, optionally within the specified path. If the module is in sys.modules, then sys.modules[name].__loader__ is returned (unless the loader would be None or is not set, in which case ValueError is raised). Otherwise a search using sys.meta_path is done. None is returned if no loader is found.	https://docs.python.org/3.4/library/importlib.html#importlib.find_loader
importlib invalidate_caches	A							https://docs.python.org			<pre><code>
importlib.invalidate_caches()</code></pre><br>Invalidate the internal caches of finders stored at sys.meta_path. If a finder implements invalidate_caches() then it will be called to perform the invalidation. This function should be called if any modules are created/installed while your program is running to guarantee all finders will notice the new module’s existence.	https://docs.python.org/3.4/library/importlib.html#importlib.invalidate_caches
importlib reload	A							https://docs.python.org			<pre><code>
importlib.reload(module)</code></pre><br>Reload a previously imported module. The argument must be a module object, so it must have been successfully imported before. This is useful if you have edited the module source file using an external editor and want to try out the new version without leaving the Python interpreter. The return value is the module object (which can be different if re-importing causes a different object to be placed in sys.modules).	https://docs.python.org/3.4/library/importlib.html#importlib.reload
importlib.machinery all_suffixes	A							https://docs.python.org			<pre><code>
importlib.machinery.all_suffixes()</code></pre><br>Returns a combined list of strings representing all file suffixes for modules recognized by the standard import machinery. This is a helper for code which simply needs to know if a filesystem path potentially refers to a module without needing any details on the kind of module (for example, inspect.getmodulename()).	https://docs.python.org/3.4/library/importlib.html#importlib.machinery.all_suffixes
importlib.util cache_from_source	A							https://docs.python.org			<pre><code>
importlib.util.cache_from_source(path, debug_override=None)</code></pre><br>Return the PEP 3147 path to the byte-compiled file associated with the source path. For example, if path is /foo/bar/baz.py the return value would be /foo/bar/__pycache__/baz.cpython-32.pyc for Python 3.2. The cpython-32 string comes from the current magic tag (see get_tag(); if sys.implementation.cache_tag is not defined then NotImplementedError will be raised). The returned path will end in .pyc when __debug__ is True or .pyo for an optimized Python (i.e. __debug__ is False). By passing in True or False for debug_override you can override the system’s value for __debug__ for extension selection.	https://docs.python.org/3.4/library/importlib.html#importlib.util.cache_from_source
importlib.util source_from_cache	A							https://docs.python.org			<pre><code>
importlib.util.source_from_cache(path)</code></pre><br>Given the path to a PEP 3147 file name, return the associated source code file path. For example, if path is /foo/bar/__pycache__/baz.cpython-32.pyc the returned path would be /foo/bar/baz.py. path need not exist, however if it does not conform to PEP 3147 format, a ValueError is raised. If sys.implementation.cache_tag is not defined, NotImplementedError is raised.	https://docs.python.org/3.4/library/importlib.html#importlib.util.source_from_cache
importlib.util decode_source	A							https://docs.python.org			<pre><code>
importlib.util.decode_source(source_bytes)</code></pre><br>Decode the given bytes representing source code and return it as a string with universal newlines (as required by importlib.abc.InspectLoader.get_source()).	https://docs.python.org/3.4/library/importlib.html#importlib.util.decode_source
importlib.util resolve_name	A							https://docs.python.org			<pre><code>
importlib.util.resolve_name(name, package)</code></pre><br>Resolve a relative module name to an absolute one.	https://docs.python.org/3.4/library/importlib.html#importlib.util.resolve_name
importlib.util find_spec	A							https://docs.python.org			<pre><code>
importlib.util.find_spec(name, package=None)</code></pre><br>Find the spec for a module, optionally relative to the specified package name. If the module is in sys.modules, then sys.modules[name].__spec__ is returned (unless the spec would be None or is not set, in which case ValueError is raised). Otherwise a search using sys.meta_path is done. None is returned if no spec is found.	https://docs.python.org/3.4/library/importlib.html#importlib.util.find_spec
@ module_for_loader	A							https://docs.python.org			<pre><code>
@importlib.util.module_for_loader</code></pre><br>A decorator for importlib.abc.Loader.load_module() to handle selecting the proper module object to load with. The decorated method is expected to have a call signature taking two positional arguments (e.g. load_module(self, module)) for which the second argument will be the module object to be used by the loader. Note that the decorator will not work on static methods because of the assumption of two arguments.	https://docs.python.org/3.4/library/importlib.html#importlib.util.module_for_loader
@ set_loader	A							https://docs.python.org			<pre><code>
@importlib.util.set_loader</code></pre><br>A decorator for importlib.abc.Loader.load_module() to set the __loader__ attribute on the returned module. If the attribute is already set the decorator does nothing. It is assumed that the first positional argument to the wrapped method (i.e. self) is what __loader__ should be set to.	https://docs.python.org/3.4/library/importlib.html#importlib.util.set_loader
@ set_package	A							https://docs.python.org			<pre><code>
@importlib.util.set_package</code></pre><br>A decorator for importlib.abc.Loader.load_module() to set the __package__ attribute on the returned module. If __package__ is set and has a value other than None it will not be changed.	https://docs.python.org/3.4/library/importlib.html#importlib.util.set_package
importlib.util spec_from_loader	A							https://docs.python.org			<pre><code>
importlib.util.spec_from_loader(name, loader, *, origin=None, is_package=None)</code></pre><br>A factory function for creating a ModuleSpec instance based on a loader. The parameters have the same meaning as they do for ModuleSpec. The function uses available loader APIs, such as InspectLoader.is_package(), to fill in any missing information on the spec.	https://docs.python.org/3.4/library/importlib.html#importlib.util.spec_from_loader
importlib.util spec_from_file_location	A							https://docs.python.org			<pre><code>
importlib.util.spec_from_file_location(name, location, *, loader=None, submodule_search_locations=None)</code></pre><br>A factory function for creating a ModuleSpec instance based on the path to a file. Missing information will be filled in on the spec by making use of loader APIs and by the implication that the module will be file-based.	https://docs.python.org/3.4/library/importlib.html#importlib.util.spec_from_file_location
inspect getmembers	A							https://docs.python.org			<pre><code>
inspect.getmembers(object[, predicate])</code></pre><br>Return all the members of an object in a list of (name, value) pairs sorted by name. If the optional predicate argument is supplied, only members for which the predicate returns a true value are included.	https://docs.python.org/3.4/library/inspect.html#inspect.getmembers
inspect getmoduleinfo	A							https://docs.python.org			<pre><code>
inspect.getmoduleinfo(path)</code></pre><br>Returns a named tuple ModuleInfo(name, suffix, mode, module_type) of values that describe how Python will interpret the file identified by path if it is a module, or None if it would not be identified as a module. In that tuple, name is the name of the module without the name of any enclosing package, suffix is the trailing part of the file name (which may not be a dot-delimited extension), mode is the open() mode that would be used ('r' or 'rb'), and module_type is an integer giving the type of the module. module_type will have a value which can be compared to the constants defined in the imp module; see the documentation for that module for more information on module types.	https://docs.python.org/3.4/library/inspect.html#inspect.getmoduleinfo
inspect getmodulename	A							https://docs.python.org			<pre><code>
inspect.getmodulename(path)</code></pre><br>Return the name of the module named by the file path, without including the names of enclosing packages. The file extension is checked against all of the entries in importlib.machinery.all_suffixes(). If it matches, the final path component is returned with the extension removed. Otherwise, None is returned.	https://docs.python.org/3.4/library/inspect.html#inspect.getmodulename
inspect ismodule	A							https://docs.python.org			<pre><code>
inspect.ismodule(object)</code></pre><br>Return true if the object is a module.	https://docs.python.org/3.4/library/inspect.html#inspect.ismodule
inspect isclass	A							https://docs.python.org			<pre><code>
inspect.isclass(object)</code></pre><br>Return true if the object is a class, whether built-in or created in Python code.	https://docs.python.org/3.4/library/inspect.html#inspect.isclass
inspect ismethod	A							https://docs.python.org			<pre><code>
inspect.ismethod(object)</code></pre><br>Return true if the object is a bound method written in Python.	https://docs.python.org/3.4/library/inspect.html#inspect.ismethod
inspect isfunction	A							https://docs.python.org			<pre><code>
inspect.isfunction(object)</code></pre><br>Return true if the object is a Python function, which includes functions created by a lambda expression.	https://docs.python.org/3.4/library/inspect.html#inspect.isfunction
inspect isgeneratorfunction	A							https://docs.python.org			<pre><code>
inspect.isgeneratorfunction(object)</code></pre><br>Return true if the object is a Python generator function.	https://docs.python.org/3.4/library/inspect.html#inspect.isgeneratorfunction
inspect isgenerator	A							https://docs.python.org			<pre><code>
inspect.isgenerator(object)</code></pre><br>Return true if the object is a generator.	https://docs.python.org/3.4/library/inspect.html#inspect.isgenerator
inspect istraceback	A							https://docs.python.org			<pre><code>
inspect.istraceback(object)</code></pre><br>Return true if the object is a traceback.	https://docs.python.org/3.4/library/inspect.html#inspect.istraceback
inspect isframe	A							https://docs.python.org			<pre><code>
inspect.isframe(object)</code></pre><br>Return true if the object is a frame.	https://docs.python.org/3.4/library/inspect.html#inspect.isframe
inspect iscode	A							https://docs.python.org			<pre><code>
inspect.iscode(object)</code></pre><br>Return true if the object is a code.	https://docs.python.org/3.4/library/inspect.html#inspect.iscode
inspect isbuiltin	A							https://docs.python.org			<pre><code>
inspect.isbuiltin(object)</code></pre><br>Return true if the object is a built-in function or a bound built-in method.	https://docs.python.org/3.4/library/inspect.html#inspect.isbuiltin
inspect isroutine	A							https://docs.python.org			<pre><code>
inspect.isroutine(object)</code></pre><br>Return true if the object is a user-defined or built-in function or method.	https://docs.python.org/3.4/library/inspect.html#inspect.isroutine
inspect isabstract	A							https://docs.python.org			<pre><code>
inspect.isabstract(object)</code></pre><br>Return true if the object is an abstract base class.	https://docs.python.org/3.4/library/inspect.html#inspect.isabstract
inspect ismethoddescriptor	A							https://docs.python.org			<pre><code>
inspect.ismethoddescriptor(object)</code></pre><br>Return true if the object is a method descriptor, but not if ismethod(), isclass(), isfunction() or isbuiltin() are true.	https://docs.python.org/3.4/library/inspect.html#inspect.ismethoddescriptor
inspect isdatadescriptor	A							https://docs.python.org			<pre><code>
inspect.isdatadescriptor(object)</code></pre><br>Return true if the object is a data descriptor.	https://docs.python.org/3.4/library/inspect.html#inspect.isdatadescriptor
inspect isgetsetdescriptor	A							https://docs.python.org			<pre><code>
inspect.isgetsetdescriptor(object)</code></pre><br>Return true if the object is a getset descriptor.	https://docs.python.org/3.4/library/inspect.html#inspect.isgetsetdescriptor
inspect ismemberdescriptor	A							https://docs.python.org			<pre><code>
inspect.ismemberdescriptor(object)</code></pre><br>Return true if the object is a member descriptor.	https://docs.python.org/3.4/library/inspect.html#inspect.ismemberdescriptor
inspect getdoc	A							https://docs.python.org			<pre><code>
inspect.getdoc(object)</code></pre><br>Get the documentation string for an object, cleaned up with cleandoc().	https://docs.python.org/3.4/library/inspect.html#inspect.getdoc
inspect getcomments	A							https://docs.python.org			<pre><code>
inspect.getcomments(object)</code></pre><br>Return in a single string any lines of comments immediately preceding the object’s source code (for a class, function, or method), or at the top of the Python source file (if the object is a module).	https://docs.python.org/3.4/library/inspect.html#inspect.getcomments
inspect getfile	A							https://docs.python.org			<pre><code>
inspect.getfile(object)</code></pre><br>Return the name of the (text or binary) file in which an object was defined. This will fail with a TypeError if the object is a built-in module, class, or function.	https://docs.python.org/3.4/library/inspect.html#inspect.getfile
inspect getmodule	A							https://docs.python.org			<pre><code>
inspect.getmodule(object)</code></pre><br>Try to guess which module an object was defined in.	https://docs.python.org/3.4/library/inspect.html#inspect.getmodule
inspect getsourcefile	A							https://docs.python.org			<pre><code>
inspect.getsourcefile(object)</code></pre><br>Return the name of the Python source file in which an object was defined. This will fail with a TypeError if the object is a built-in module, class, or function.	https://docs.python.org/3.4/library/inspect.html#inspect.getsourcefile
inspect getsourcelines	A							https://docs.python.org			<pre><code>
inspect.getsourcelines(object)</code></pre><br>Return a list of source lines and starting line number for an object. The argument may be a module, class, method, function, traceback, frame, or code object. The source code is returned as a list of the lines corresponding to the object and the line number indicates where in the original source file the first line of code was found. An OSError is raised if the source code cannot be retrieved.	https://docs.python.org/3.4/library/inspect.html#inspect.getsourcelines
inspect getsource	A							https://docs.python.org			<pre><code>
inspect.getsource(object)</code></pre><br>Return the text of the source code for an object. The argument may be a module, class, method, function, traceback, frame, or code object. The source code is returned as a single string. An OSError is raised if the source code cannot be retrieved.	https://docs.python.org/3.4/library/inspect.html#inspect.getsource
inspect cleandoc	A							https://docs.python.org			<pre><code>
inspect.cleandoc(doc)</code></pre><br>Clean up indentation from docstrings that are indented to line up with blocks of code. Any whitespace that can be uniformly removed from the second line onwards is removed. Also, all tabs are expanded to spaces.	https://docs.python.org/3.4/library/inspect.html#inspect.cleandoc
inspect signature	A							https://docs.python.org			<pre><code>
inspect.signature(callable)</code></pre><br>Return a Signature object for the given callable:	https://docs.python.org/3.4/library/inspect.html#inspect.signature
inspect getclasstree	A							https://docs.python.org			<pre><code>
inspect.getclasstree(classes, unique=False)</code></pre><br>Arrange the given list of classes into a hierarchy of nested lists. Where a nested list appears, it contains classes derived from the class whose entry immediately precedes the list. Each entry is a 2-tuple containing a class and a tuple of its base classes. If the unique argument is true, exactly one entry appears in the returned structure for each class in the given list. Otherwise, classes using multiple inheritance and their descendants will appear multiple times.	https://docs.python.org/3.4/library/inspect.html#inspect.getclasstree
inspect getargspec	A							https://docs.python.org			<pre><code>
inspect.getargspec(func)</code></pre><br>Get the names and default values of a Python function’s arguments. A named tuple ArgSpec(args, varargs, keywords, defaults) is returned. args is a list of the argument names. varargs and keywords are the names of the * and ** arguments or None. defaults is a tuple of default argument values or None if there are no default arguments; if this tuple has n elements, they correspond to the last n elements listed in args.	https://docs.python.org/3.4/library/inspect.html#inspect.getargspec
inspect getfullargspec	A							https://docs.python.org			<pre><code>
inspect.getfullargspec(func)</code></pre><br>Get the names and default values of a Python function’s arguments. A named tuple is returned:	https://docs.python.org/3.4/library/inspect.html#inspect.getfullargspec
inspect getargvalues	A							https://docs.python.org			<pre><code>
inspect.getargvalues(frame)</code></pre><br>Get information about arguments passed into a particular frame. A named tuple ArgInfo(args, varargs, keywords, locals) is returned. args is a list of the argument names. varargs and keywords are the names of the * and ** arguments or None. locals is the locals dictionary of the given frame.	https://docs.python.org/3.4/library/inspect.html#inspect.getargvalues
inspect formatargspec	A							https://docs.python.org			<pre><code>
inspect.formatargspec(args[, varargs, varkw, defaults, kwonlyargs, kwonlydefaults, annotations[, formatarg, formatvarargs, formatvarkw, formatvalue, formatreturns, formatannotations]])</code></pre><br>Format a pretty argument spec from the values returned by getargspec() or getfullargspec().	https://docs.python.org/3.4/library/inspect.html#inspect.formatargspec
inspect formatargvalues	A							https://docs.python.org			<pre><code>
inspect.formatargvalues(args[, varargs, varkw, locals, formatarg, formatvarargs, formatvarkw, formatvalue])</code></pre><br>Format a pretty argument spec from the four values returned by getargvalues(). The format* arguments are the corresponding optional formatting functions that are called to turn names and values into strings.	https://docs.python.org/3.4/library/inspect.html#inspect.formatargvalues
inspect getmro	A							https://docs.python.org			<pre><code>
inspect.getmro(cls)</code></pre><br>Return a tuple of class cls’s base classes, including cls, in method resolution order. No class appears more than once in this tuple. Note that the method resolution order depends on cls’s type. Unless a very peculiar user-defined metatype is in use, cls will be the first element of the tuple.	https://docs.python.org/3.4/library/inspect.html#inspect.getmro
inspect getcallargs	A							https://docs.python.org			<pre><code>
inspect.getcallargs(func, *args, **kwds)</code></pre><br>Bind the args and kwds to the argument names of the Python function or method func, as if it was called with them. For bound methods, bind also the first argument (typically named self) to the associated instance. A dict is returned, mapping the argument names (including the names of the * and ** arguments, if any) to their values from args and kwds. In case of invoking func incorrectly, i.e. whenever func(*args, **kwds) would raise an exception because of incompatible signature, an exception of the same type and the same or similar message is raised. For example:	https://docs.python.org/3.4/library/inspect.html#inspect.getcallargs
inspect getclosurevars	A							https://docs.python.org			<pre><code>
inspect.getclosurevars(func)</code></pre><br>Get the mapping of external name references in a Python function or method func to their current values. A named tuple ClosureVars(nonlocals, globals, builtins, unbound) is returned. nonlocals maps referenced names to lexical closure variables, globals to the function’s module globals and builtins to the builtins visible from the function body. unbound is the set of names referenced in the function that could not be resolved at all given the current module globals and builtins.	https://docs.python.org/3.4/library/inspect.html#inspect.getclosurevars
inspect unwrap	A							https://docs.python.org			<pre><code>
inspect.unwrap(func, *, stop=None)</code></pre><br>Get the object wrapped by func. It follows the chain of __wrapped__ attributes returning the last object in the chain.	https://docs.python.org/3.4/library/inspect.html#inspect.unwrap
inspect getframeinfo	A							https://docs.python.org			<pre><code>
inspect.getframeinfo(frame, context=1)</code></pre><br>Get information about a frame or traceback object. A named tuple Traceback(filename, lineno, function, code_context, index) is returned.	https://docs.python.org/3.4/library/inspect.html#inspect.getframeinfo
inspect getouterframes	A							https://docs.python.org			<pre><code>
inspect.getouterframes(frame, context=1)</code></pre><br>Get a list of frame records for a frame and all outer frames. These frames represent the calls that lead to the creation of frame. The first entry in the returned list represents frame; the last entry represents the outermost call on frame‘s stack.	https://docs.python.org/3.4/library/inspect.html#inspect.getouterframes
inspect getinnerframes	A							https://docs.python.org			<pre><code>
inspect.getinnerframes(traceback, context=1)</code></pre><br>Get a list of frame records for a traceback’s frame and all inner frames. These frames represent calls made as a consequence of frame. The first entry in the list represents traceback; the last entry represents where the exception was raised.	https://docs.python.org/3.4/library/inspect.html#inspect.getinnerframes
inspect currentframe	A							https://docs.python.org			<pre><code>
inspect.currentframe()</code></pre><br>Return the frame object for the caller’s stack frame.	https://docs.python.org/3.4/library/inspect.html#inspect.currentframe
inspect stack	A							https://docs.python.org			<pre><code>
inspect.stack(context=1)</code></pre><br>Return a list of frame records for the caller’s stack. The first entry in the returned list represents the caller; the last entry represents the outermost call on the stack.	https://docs.python.org/3.4/library/inspect.html#inspect.stack
inspect trace	A							https://docs.python.org			<pre><code>
inspect.trace(context=1)</code></pre><br>Return a list of frame records for the stack between the current frame and the frame in which an exception currently being handled was raised in. The first entry in the list represents the caller; the last entry represents where the exception was raised.	https://docs.python.org/3.4/library/inspect.html#inspect.trace
inspect getattr_static	A							https://docs.python.org			<pre><code>
inspect.getattr_static(obj, attr, default=None)</code></pre><br>Retrieve attributes without triggering dynamic lookup via the descriptor protocol, __getattr__() or __getattribute__().	https://docs.python.org/3.4/library/inspect.html#inspect.getattr_static
inspect getgeneratorstate	A							https://docs.python.org			<pre><code>
inspect.getgeneratorstate(generator)</code></pre><br>Get current state of a generator-iterator.	https://docs.python.org/3.4/library/inspect.html#inspect.getgeneratorstate
inspect getgeneratorlocals	A							https://docs.python.org			<pre><code>
inspect.getgeneratorlocals(generator)</code></pre><br>Get the mapping of live local variables in generator to their current values. A dictionary is returned that maps from variable names to values. This is the equivalent of calling locals() in the body of the generator, and all the same caveats apply.	https://docs.python.org/3.4/library/inspect.html#inspect.getgeneratorlocals
inspect getmembers	A							https://docs.python.org			<pre><code>
inspect.getmembers(object[, predicate])</code></pre><br>Return all the members of an object in a list of (name, value) pairs sorted by name. If the optional predicate argument is supplied, only members for which the predicate returns a true value are included.	https://docs.python.org/3.4/library/inspect.html#inspect.getmembers
inspect getmoduleinfo	A							https://docs.python.org			<pre><code>
inspect.getmoduleinfo(path)</code></pre><br>Returns a named tuple ModuleInfo(name, suffix, mode, module_type) of values that describe how Python will interpret the file identified by path if it is a module, or None if it would not be identified as a module. In that tuple, name is the name of the module without the name of any enclosing package, suffix is the trailing part of the file name (which may not be a dot-delimited extension), mode is the open() mode that would be used ('r' or 'rb'), and module_type is an integer giving the type of the module. module_type will have a value which can be compared to the constants defined in the imp module; see the documentation for that module for more information on module types.	https://docs.python.org/3.4/library/inspect.html#inspect.getmoduleinfo
inspect getmodulename	A							https://docs.python.org			<pre><code>
inspect.getmodulename(path)</code></pre><br>Return the name of the module named by the file path, without including the names of enclosing packages. The file extension is checked against all of the entries in importlib.machinery.all_suffixes(). If it matches, the final path component is returned with the extension removed. Otherwise, None is returned.	https://docs.python.org/3.4/library/inspect.html#inspect.getmodulename
inspect ismodule	A							https://docs.python.org			<pre><code>
inspect.ismodule(object)</code></pre><br>Return true if the object is a module.	https://docs.python.org/3.4/library/inspect.html#inspect.ismodule
inspect isclass	A							https://docs.python.org			<pre><code>
inspect.isclass(object)</code></pre><br>Return true if the object is a class, whether built-in or created in Python code.	https://docs.python.org/3.4/library/inspect.html#inspect.isclass
inspect ismethod	A							https://docs.python.org			<pre><code>
inspect.ismethod(object)</code></pre><br>Return true if the object is a bound method written in Python.	https://docs.python.org/3.4/library/inspect.html#inspect.ismethod
inspect isfunction	A							https://docs.python.org			<pre><code>
inspect.isfunction(object)</code></pre><br>Return true if the object is a Python function, which includes functions created by a lambda expression.	https://docs.python.org/3.4/library/inspect.html#inspect.isfunction
inspect isgeneratorfunction	A							https://docs.python.org			<pre><code>
inspect.isgeneratorfunction(object)</code></pre><br>Return true if the object is a Python generator function.	https://docs.python.org/3.4/library/inspect.html#inspect.isgeneratorfunction
inspect isgenerator	A							https://docs.python.org			<pre><code>
inspect.isgenerator(object)</code></pre><br>Return true if the object is a generator.	https://docs.python.org/3.4/library/inspect.html#inspect.isgenerator
inspect istraceback	A							https://docs.python.org			<pre><code>
inspect.istraceback(object)</code></pre><br>Return true if the object is a traceback.	https://docs.python.org/3.4/library/inspect.html#inspect.istraceback
inspect isframe	A							https://docs.python.org			<pre><code>
inspect.isframe(object)</code></pre><br>Return true if the object is a frame.	https://docs.python.org/3.4/library/inspect.html#inspect.isframe
inspect iscode	A							https://docs.python.org			<pre><code>
inspect.iscode(object)</code></pre><br>Return true if the object is a code.	https://docs.python.org/3.4/library/inspect.html#inspect.iscode
inspect isbuiltin	A							https://docs.python.org			<pre><code>
inspect.isbuiltin(object)</code></pre><br>Return true if the object is a built-in function or a bound built-in method.	https://docs.python.org/3.4/library/inspect.html#inspect.isbuiltin
inspect isroutine	A							https://docs.python.org			<pre><code>
inspect.isroutine(object)</code></pre><br>Return true if the object is a user-defined or built-in function or method.	https://docs.python.org/3.4/library/inspect.html#inspect.isroutine
inspect isabstract	A							https://docs.python.org			<pre><code>
inspect.isabstract(object)</code></pre><br>Return true if the object is an abstract base class.	https://docs.python.org/3.4/library/inspect.html#inspect.isabstract
inspect ismethoddescriptor	A							https://docs.python.org			<pre><code>
inspect.ismethoddescriptor(object)</code></pre><br>Return true if the object is a method descriptor, but not if ismethod(), isclass(), isfunction() or isbuiltin() are true.	https://docs.python.org/3.4/library/inspect.html#inspect.ismethoddescriptor
inspect isdatadescriptor	A							https://docs.python.org			<pre><code>
inspect.isdatadescriptor(object)</code></pre><br>Return true if the object is a data descriptor.	https://docs.python.org/3.4/library/inspect.html#inspect.isdatadescriptor
inspect isgetsetdescriptor	A							https://docs.python.org			<pre><code>
inspect.isgetsetdescriptor(object)</code></pre><br>Return true if the object is a getset descriptor.	https://docs.python.org/3.4/library/inspect.html#inspect.isgetsetdescriptor
inspect ismemberdescriptor	A							https://docs.python.org			<pre><code>
inspect.ismemberdescriptor(object)</code></pre><br>Return true if the object is a member descriptor.	https://docs.python.org/3.4/library/inspect.html#inspect.ismemberdescriptor
inspect getdoc	A							https://docs.python.org			<pre><code>
inspect.getdoc(object)</code></pre><br>Get the documentation string for an object, cleaned up with cleandoc().	https://docs.python.org/3.4/library/inspect.html#inspect.getdoc
inspect getcomments	A							https://docs.python.org			<pre><code>
inspect.getcomments(object)</code></pre><br>Return in a single string any lines of comments immediately preceding the object’s source code (for a class, function, or method), or at the top of the Python source file (if the object is a module).	https://docs.python.org/3.4/library/inspect.html#inspect.getcomments
inspect getfile	A							https://docs.python.org			<pre><code>
inspect.getfile(object)</code></pre><br>Return the name of the (text or binary) file in which an object was defined. This will fail with a TypeError if the object is a built-in module, class, or function.	https://docs.python.org/3.4/library/inspect.html#inspect.getfile
inspect getmodule	A							https://docs.python.org			<pre><code>
inspect.getmodule(object)</code></pre><br>Try to guess which module an object was defined in.	https://docs.python.org/3.4/library/inspect.html#inspect.getmodule
inspect getsourcefile	A							https://docs.python.org			<pre><code>
inspect.getsourcefile(object)</code></pre><br>Return the name of the Python source file in which an object was defined. This will fail with a TypeError if the object is a built-in module, class, or function.	https://docs.python.org/3.4/library/inspect.html#inspect.getsourcefile
inspect getsourcelines	A							https://docs.python.org			<pre><code>
inspect.getsourcelines(object)</code></pre><br>Return a list of source lines and starting line number for an object. The argument may be a module, class, method, function, traceback, frame, or code object. The source code is returned as a list of the lines corresponding to the object and the line number indicates where in the original source file the first line of code was found. An OSError is raised if the source code cannot be retrieved.	https://docs.python.org/3.4/library/inspect.html#inspect.getsourcelines
inspect getsource	A							https://docs.python.org			<pre><code>
inspect.getsource(object)</code></pre><br>Return the text of the source code for an object. The argument may be a module, class, method, function, traceback, frame, or code object. The source code is returned as a single string. An OSError is raised if the source code cannot be retrieved.	https://docs.python.org/3.4/library/inspect.html#inspect.getsource
inspect cleandoc	A							https://docs.python.org			<pre><code>
inspect.cleandoc(doc)</code></pre><br>Clean up indentation from docstrings that are indented to line up with blocks of code. Any whitespace that can be uniformly removed from the second line onwards is removed. Also, all tabs are expanded to spaces.	https://docs.python.org/3.4/library/inspect.html#inspect.cleandoc
inspect signature	A							https://docs.python.org			<pre><code>
inspect.signature(callable)</code></pre><br>Return a Signature object for the given callable:	https://docs.python.org/3.4/library/inspect.html#inspect.signature
inspect getclasstree	A							https://docs.python.org			<pre><code>
inspect.getclasstree(classes, unique=False)</code></pre><br>Arrange the given list of classes into a hierarchy of nested lists. Where a nested list appears, it contains classes derived from the class whose entry immediately precedes the list. Each entry is a 2-tuple containing a class and a tuple of its base classes. If the unique argument is true, exactly one entry appears in the returned structure for each class in the given list. Otherwise, classes using multiple inheritance and their descendants will appear multiple times.	https://docs.python.org/3.4/library/inspect.html#inspect.getclasstree
inspect getargspec	A							https://docs.python.org			<pre><code>
inspect.getargspec(func)</code></pre><br>Get the names and default values of a Python function’s arguments. A named tuple ArgSpec(args, varargs, keywords, defaults) is returned. args is a list of the argument names. varargs and keywords are the names of the * and ** arguments or None. defaults is a tuple of default argument values or None if there are no default arguments; if this tuple has n elements, they correspond to the last n elements listed in args.	https://docs.python.org/3.4/library/inspect.html#inspect.getargspec
inspect getfullargspec	A							https://docs.python.org			<pre><code>
inspect.getfullargspec(func)</code></pre><br>Get the names and default values of a Python function’s arguments. A named tuple is returned:	https://docs.python.org/3.4/library/inspect.html#inspect.getfullargspec
inspect getargvalues	A							https://docs.python.org			<pre><code>
inspect.getargvalues(frame)</code></pre><br>Get information about arguments passed into a particular frame. A named tuple ArgInfo(args, varargs, keywords, locals) is returned. args is a list of the argument names. varargs and keywords are the names of the * and ** arguments or None. locals is the locals dictionary of the given frame.	https://docs.python.org/3.4/library/inspect.html#inspect.getargvalues
inspect formatargspec	A							https://docs.python.org			<pre><code>
inspect.formatargspec(args[, varargs, varkw, defaults, kwonlyargs, kwonlydefaults, annotations[, formatarg, formatvarargs, formatvarkw, formatvalue, formatreturns, formatannotations]])</code></pre><br>Format a pretty argument spec from the values returned by getargspec() or getfullargspec().	https://docs.python.org/3.4/library/inspect.html#inspect.formatargspec
inspect formatargvalues	A							https://docs.python.org			<pre><code>
inspect.formatargvalues(args[, varargs, varkw, locals, formatarg, formatvarargs, formatvarkw, formatvalue])</code></pre><br>Format a pretty argument spec from the four values returned by getargvalues(). The format* arguments are the corresponding optional formatting functions that are called to turn names and values into strings.	https://docs.python.org/3.4/library/inspect.html#inspect.formatargvalues
inspect getmro	A							https://docs.python.org			<pre><code>
inspect.getmro(cls)</code></pre><br>Return a tuple of class cls’s base classes, including cls, in method resolution order. No class appears more than once in this tuple. Note that the method resolution order depends on cls’s type. Unless a very peculiar user-defined metatype is in use, cls will be the first element of the tuple.	https://docs.python.org/3.4/library/inspect.html#inspect.getmro
inspect getcallargs	A							https://docs.python.org			<pre><code>
inspect.getcallargs(func, *args, **kwds)</code></pre><br>Bind the args and kwds to the argument names of the Python function or method func, as if it was called with them. For bound methods, bind also the first argument (typically named self) to the associated instance. A dict is returned, mapping the argument names (including the names of the * and ** arguments, if any) to their values from args and kwds. In case of invoking func incorrectly, i.e. whenever func(*args, **kwds) would raise an exception because of incompatible signature, an exception of the same type and the same or similar message is raised. For example:	https://docs.python.org/3.4/library/inspect.html#inspect.getcallargs
inspect getclosurevars	A							https://docs.python.org			<pre><code>
inspect.getclosurevars(func)</code></pre><br>Get the mapping of external name references in a Python function or method func to their current values. A named tuple ClosureVars(nonlocals, globals, builtins, unbound) is returned. nonlocals maps referenced names to lexical closure variables, globals to the function’s module globals and builtins to the builtins visible from the function body. unbound is the set of names referenced in the function that could not be resolved at all given the current module globals and builtins.	https://docs.python.org/3.4/library/inspect.html#inspect.getclosurevars
inspect unwrap	A							https://docs.python.org			<pre><code>
inspect.unwrap(func, *, stop=None)</code></pre><br>Get the object wrapped by func. It follows the chain of __wrapped__ attributes returning the last object in the chain.	https://docs.python.org/3.4/library/inspect.html#inspect.unwrap
inspect getframeinfo	A							https://docs.python.org			<pre><code>
inspect.getframeinfo(frame, context=1)</code></pre><br>Get information about a frame or traceback object. A named tuple Traceback(filename, lineno, function, code_context, index) is returned.	https://docs.python.org/3.4/library/inspect.html#inspect.getframeinfo
inspect getouterframes	A							https://docs.python.org			<pre><code>
inspect.getouterframes(frame, context=1)</code></pre><br>Get a list of frame records for a frame and all outer frames. These frames represent the calls that lead to the creation of frame. The first entry in the returned list represents frame; the last entry represents the outermost call on frame‘s stack.	https://docs.python.org/3.4/library/inspect.html#inspect.getouterframes
inspect getinnerframes	A							https://docs.python.org			<pre><code>
inspect.getinnerframes(traceback, context=1)</code></pre><br>Get a list of frame records for a traceback’s frame and all inner frames. These frames represent calls made as a consequence of frame. The first entry in the list represents traceback; the last entry represents where the exception was raised.	https://docs.python.org/3.4/library/inspect.html#inspect.getinnerframes
inspect currentframe	A							https://docs.python.org			<pre><code>
inspect.currentframe()</code></pre><br>Return the frame object for the caller’s stack frame.	https://docs.python.org/3.4/library/inspect.html#inspect.currentframe
inspect stack	A							https://docs.python.org			<pre><code>
inspect.stack(context=1)</code></pre><br>Return a list of frame records for the caller’s stack. The first entry in the returned list represents the caller; the last entry represents the outermost call on the stack.	https://docs.python.org/3.4/library/inspect.html#inspect.stack
inspect trace	A							https://docs.python.org			<pre><code>
inspect.trace(context=1)</code></pre><br>Return a list of frame records for the stack between the current frame and the frame in which an exception currently being handled was raised in. The first entry in the list represents the caller; the last entry represents where the exception was raised.	https://docs.python.org/3.4/library/inspect.html#inspect.trace
inspect getattr_static	A							https://docs.python.org			<pre><code>
inspect.getattr_static(obj, attr, default=None)</code></pre><br>Retrieve attributes without triggering dynamic lookup via the descriptor protocol, __getattr__() or __getattribute__().	https://docs.python.org/3.4/library/inspect.html#inspect.getattr_static
inspect getgeneratorstate	A							https://docs.python.org			<pre><code>
inspect.getgeneratorstate(generator)</code></pre><br>Get current state of a generator-iterator.	https://docs.python.org/3.4/library/inspect.html#inspect.getgeneratorstate
inspect getgeneratorlocals	A							https://docs.python.org			<pre><code>
inspect.getgeneratorlocals(generator)</code></pre><br>Get the mapping of live local variables in generator to their current values. A dictionary is returned that maps from variable names to values. This is the equivalent of calling locals() in the body of the generator, and all the same caveats apply.	https://docs.python.org/3.4/library/inspect.html#inspect.getgeneratorlocals
io open	A							https://docs.python.org			<pre><code>
io.open(file, mode='r', buffering=-1, encoding=None, errors=None, newline=None, closefd=True, opener=None)</code></pre><br>This is an alias for the builtin open() function.	https://docs.python.org/3.4/library/io.html#io.open
io open	A							https://docs.python.org			<pre><code>
io.open(file, mode='r', buffering=-1, encoding=None, errors=None, newline=None, closefd=True, opener=None)</code></pre><br>This is an alias for the builtin open() function.	https://docs.python.org/3.4/library/io.html#io.open
ipaddress ip_address	A							https://docs.python.org			<pre><code>
ipaddress.ip_address(address)</code></pre><br>Return an IPv4Address or IPv6Address object depending on the IP address passed as argument. Either IPv4 or IPv6 addresses may be supplied; integers less than 2**32 will be considered to be IPv4 by default. A ValueError is raised if address does not represent a valid IPv4 or IPv6 address.	https://docs.python.org/3.4/library/ipaddress.html#ipaddress.ip_address
ipaddress ip_network	A							https://docs.python.org			<pre><code>
ipaddress.ip_network(address, strict=True)</code></pre><br>Return an IPv4Network or IPv6Network object depending on the IP address passed as argument. address is a string or integer representing the IP network. Either IPv4 or IPv6 networks may be supplied; integers less than 2**32 will be considered to be IPv4 by default. strict is passed to IPv4Network or IPv6Network constructor. A ValueError is raised if address does not represent a valid IPv4 or IPv6 address, or if the network has host bits set.	https://docs.python.org/3.4/library/ipaddress.html#ipaddress.ip_network
ipaddress ip_interface	A							https://docs.python.org			<pre><code>
ipaddress.ip_interface(address)</code></pre><br>Return an IPv4Interface or IPv6Interface object depending on the IP address passed as argument. address is a string or integer representing the IP address. Either IPv4 or IPv6 addresses may be supplied; integers less than 2**32 will be considered to be IPv4 by default. A ValueError is raised if address does not represent a valid IPv4 or IPv6 address.	https://docs.python.org/3.4/library/ipaddress.html#ipaddress.ip_interface
ipaddress v4_int_to_packed	A							https://docs.python.org			<pre><code>
ipaddress.v4_int_to_packed(address)</code></pre><br>Represent an address as 4 packed bytes in network (big-endian) order. address is an integer representation of an IPv4 IP address. A ValueError is raised if the integer is negative or too large to be an IPv4 IP address.	https://docs.python.org/3.4/library/ipaddress.html#ipaddress.v4_int_to_packed
ipaddress v6_int_to_packed	A							https://docs.python.org			<pre><code>
ipaddress.v6_int_to_packed(address)</code></pre><br>Represent an address as 16 packed bytes in network (big-endian) order. address is an integer representation of an IPv6 IP address. A ValueError is raised if the integer is negative or too large to be an IPv6 IP address.	https://docs.python.org/3.4/library/ipaddress.html#ipaddress.v6_int_to_packed
ipaddress summarize_address_range	A							https://docs.python.org			<pre><code>
ipaddress.summarize_address_range(first, last)</code></pre><br>Return an iterator of the summarized network range given the first and last IP addresses. first is the first IPv4Address or IPv6Address in the range and last is the last IPv4Address or IPv6Address in the range. A TypeError is raised if first or last are not IP addresses or are not of the same version. A ValueError is raised if last is not greater than first or if first address version is not 4 or 6.	https://docs.python.org/3.4/library/ipaddress.html#ipaddress.summarize_address_range
ipaddress collapse_addresses	A							https://docs.python.org			<pre><code>
ipaddress.collapse_addresses(addresses)</code></pre><br>Return an iterator of the collapsed IPv4Network or IPv6Network objects. addresses is an iterator of IPv4Network or IPv6Network objects. A TypeError is raised if addresses contains mixed version objects.	https://docs.python.org/3.4/library/ipaddress.html#ipaddress.collapse_addresses
ipaddress get_mixed_type_key	A							https://docs.python.org			<pre><code>
ipaddress.get_mixed_type_key(obj)</code></pre><br>Return a key suitable for sorting between networks and addresses. Address and Network objects are not sortable by default; they’re fundamentally different, so the expression:	https://docs.python.org/3.4/library/ipaddress.html#ipaddress.get_mixed_type_key
ipaddress ip_address	A							https://docs.python.org			<pre><code>
ipaddress.ip_address(address)</code></pre><br>Return an IPv4Address or IPv6Address object depending on the IP address passed as argument. Either IPv4 or IPv6 addresses may be supplied; integers less than 2**32 will be considered to be IPv4 by default. A ValueError is raised if address does not represent a valid IPv4 or IPv6 address.	https://docs.python.org/3.4/library/ipaddress.html#ipaddress.ip_address
ipaddress ip_network	A							https://docs.python.org			<pre><code>
ipaddress.ip_network(address, strict=True)</code></pre><br>Return an IPv4Network or IPv6Network object depending on the IP address passed as argument. address is a string or integer representing the IP network. Either IPv4 or IPv6 networks may be supplied; integers less than 2**32 will be considered to be IPv4 by default. strict is passed to IPv4Network or IPv6Network constructor. A ValueError is raised if address does not represent a valid IPv4 or IPv6 address, or if the network has host bits set.	https://docs.python.org/3.4/library/ipaddress.html#ipaddress.ip_network
ipaddress ip_interface	A							https://docs.python.org			<pre><code>
ipaddress.ip_interface(address)</code></pre><br>Return an IPv4Interface or IPv6Interface object depending on the IP address passed as argument. address is a string or integer representing the IP address. Either IPv4 or IPv6 addresses may be supplied; integers less than 2**32 will be considered to be IPv4 by default. A ValueError is raised if address does not represent a valid IPv4 or IPv6 address.	https://docs.python.org/3.4/library/ipaddress.html#ipaddress.ip_interface
ipaddress v4_int_to_packed	A							https://docs.python.org			<pre><code>
ipaddress.v4_int_to_packed(address)</code></pre><br>Represent an address as 4 packed bytes in network (big-endian) order. address is an integer representation of an IPv4 IP address. A ValueError is raised if the integer is negative or too large to be an IPv4 IP address.	https://docs.python.org/3.4/library/ipaddress.html#ipaddress.v4_int_to_packed
ipaddress v6_int_to_packed	A							https://docs.python.org			<pre><code>
ipaddress.v6_int_to_packed(address)</code></pre><br>Represent an address as 16 packed bytes in network (big-endian) order. address is an integer representation of an IPv6 IP address. A ValueError is raised if the integer is negative or too large to be an IPv6 IP address.	https://docs.python.org/3.4/library/ipaddress.html#ipaddress.v6_int_to_packed
ipaddress summarize_address_range	A							https://docs.python.org			<pre><code>
ipaddress.summarize_address_range(first, last)</code></pre><br>Return an iterator of the summarized network range given the first and last IP addresses. first is the first IPv4Address or IPv6Address in the range and last is the last IPv4Address or IPv6Address in the range. A TypeError is raised if first or last are not IP addresses or are not of the same version. A ValueError is raised if last is not greater than first or if first address version is not 4 or 6.	https://docs.python.org/3.4/library/ipaddress.html#ipaddress.summarize_address_range
ipaddress collapse_addresses	A							https://docs.python.org			<pre><code>
ipaddress.collapse_addresses(addresses)</code></pre><br>Return an iterator of the collapsed IPv4Network or IPv6Network objects. addresses is an iterator of IPv4Network or IPv6Network objects. A TypeError is raised if addresses contains mixed version objects.	https://docs.python.org/3.4/library/ipaddress.html#ipaddress.collapse_addresses
ipaddress get_mixed_type_key	A							https://docs.python.org			<pre><code>
ipaddress.get_mixed_type_key(obj)</code></pre><br>Return a key suitable for sorting between networks and addresses. Address and Network objects are not sortable by default; they’re fundamentally different, so the expression:	https://docs.python.org/3.4/library/ipaddress.html#ipaddress.get_mixed_type_key
itertools accumulate	A							https://docs.python.org			<pre><code>
itertools.accumulate(iterable[, func])</code></pre><br>Make an iterator that returns accumulated sums. Elements may be any addable type including Decimal or Fraction. If the optional func argument is supplied, it should be a function of two arguments and it will be used instead of addition.	https://docs.python.org/3.4/library/itertools.html#itertools.accumulate
itertools chain	A							https://docs.python.org			<pre><code>
itertools.chain(*iterables)</code></pre><br>Make an iterator that returns elements from the first iterable until it is exhausted, then proceeds to the next iterable, until all of the iterables are exhausted. Used for treating consecutive sequences as a single sequence. Equivalent to:	https://docs.python.org/3.4/library/itertools.html#itertools.chain
itertools combinations	A							https://docs.python.org			<pre><code>
itertools.combinations(iterable, r)</code></pre><br>Return r length subsequences of elements from the input iterable.	https://docs.python.org/3.4/library/itertools.html#itertools.combinations
itertools combinations_with_replacement	A							https://docs.python.org			<pre><code>
itertools.combinations_with_replacement(iterable, r)</code></pre><br>Return r length subsequences of elements from the input iterable allowing individual elements to be repeated more than once.	https://docs.python.org/3.4/library/itertools.html#itertools.combinations_with_replacement
itertools compress	A							https://docs.python.org			<pre><code>
itertools.compress(data, selectors)</code></pre><br>Make an iterator that filters elements from data returning only those that have a corresponding element in selectors that evaluates to True. Stops when either the data or selectors iterables has been exhausted. Equivalent to:	https://docs.python.org/3.4/library/itertools.html#itertools.compress
itertools count	A							https://docs.python.org			<pre><code>
itertools.count(start=0, step=1)</code></pre><br>Make an iterator that returns evenly spaced values starting with number start. Often used as an argument to map() to generate consecutive data points. Also, used with zip() to add sequence numbers. Equivalent to:	https://docs.python.org/3.4/library/itertools.html#itertools.count
itertools cycle	A							https://docs.python.org			<pre><code>
itertools.cycle(iterable)</code></pre><br>Make an iterator returning elements from the iterable and saving a copy of each. When the iterable is exhausted, return elements from the saved copy. Repeats indefinitely. Equivalent to:	https://docs.python.org/3.4/library/itertools.html#itertools.cycle
itertools dropwhile	A							https://docs.python.org			<pre><code>
itertools.dropwhile(predicate, iterable)</code></pre><br>Make an iterator that drops elements from the iterable as long as the predicate is true; afterwards, returns every element. Note, the iterator does not produce any output until the predicate first becomes false, so it may have a lengthy start-up time. Equivalent to:	https://docs.python.org/3.4/library/itertools.html#itertools.dropwhile
itertools filterfalse	A							https://docs.python.org			<pre><code>
itertools.filterfalse(predicate, iterable)</code></pre><br>Make an iterator that filters elements from iterable returning only those for which the predicate is False. If predicate is None, return the items that are false. Equivalent to:	https://docs.python.org/3.4/library/itertools.html#itertools.filterfalse
itertools groupby	A							https://docs.python.org			<pre><code>
itertools.groupby(iterable, key=None)</code></pre><br>Make an iterator that returns consecutive keys and groups from the iterable. The key is a function computing a key value for each element. If not specified or is None, key defaults to an identity function and returns the element unchanged. Generally, the iterable needs to already be sorted on the same key function.	https://docs.python.org/3.4/library/itertools.html#itertools.groupby
itertools islice	A							https://docs.python.org			<pre><code>
itertools.islice(iterable, stop)</code></pre><br>Make an iterator that returns selected elements from the iterable. If start is non-zero, then elements from the iterable are skipped until start is reached. Afterward, elements are returned consecutively unless step is set higher than one which results in items being skipped. If stop is None, then iteration continues until the iterator is exhausted, if at all; otherwise, it stops at the specified position. Unlike regular slicing, islice() does not support negative values for start, stop, or step. Can be used to extract related fields from data where the internal structure has been flattened (for example, a multi-line report may list a name field on every third line). Equivalent to:	https://docs.python.org/3.4/library/itertools.html#itertools.islice
itertools permutations	A							https://docs.python.org			<pre><code>
itertools.permutations(iterable, r=None)</code></pre><br>Return successive r length permutations of elements in the iterable.	https://docs.python.org/3.4/library/itertools.html#itertools.permutations
itertools product	A							https://docs.python.org			<pre><code>
itertools.product(*iterables, repeat=1)</code></pre><br>Cartesian product of input iterables.	https://docs.python.org/3.4/library/itertools.html#itertools.product
itertools repeat	A							https://docs.python.org			<pre><code>
itertools.repeat(object[, times])</code></pre><br>Make an iterator that returns object over and over again. Runs indefinitely unless the times argument is specified. Used as argument to map() for invariant parameters to the called function. Also used with zip() to create an invariant part of a tuple record. Equivalent to:	https://docs.python.org/3.4/library/itertools.html#itertools.repeat
itertools starmap	A							https://docs.python.org			<pre><code>
itertools.starmap(function, iterable)</code></pre><br>Make an iterator that computes the function using arguments obtained from the iterable. Used instead of map() when argument parameters are already grouped in tuples from a single iterable (the data has been “pre-zipped”). The difference between map() and starmap() parallels the distinction between function(a,b) and function(*c). Equivalent to:	https://docs.python.org/3.4/library/itertools.html#itertools.starmap
itertools takewhile	A							https://docs.python.org			<pre><code>
itertools.takewhile(predicate, iterable)</code></pre><br>Make an iterator that returns elements from the iterable as long as the predicate is true. Equivalent to:	https://docs.python.org/3.4/library/itertools.html#itertools.takewhile
itertools tee	A							https://docs.python.org			<pre><code>
itertools.tee(iterable, n=2)</code></pre><br>Return n independent iterators from a single iterable. Equivalent to:	https://docs.python.org/3.4/library/itertools.html#itertools.tee
itertools zip_longest	A							https://docs.python.org			<pre><code>
itertools.zip_longest(*iterables, fillvalue=None)</code></pre><br>Make an iterator that aggregates elements from each of the iterables. If the iterables are of uneven length, missing values are filled-in with fillvalue. Iteration continues until the longest iterable is exhausted. Equivalent to:	https://docs.python.org/3.4/library/itertools.html#itertools.zip_longest
itertools accumulate	A							https://docs.python.org			<pre><code>
itertools.accumulate(iterable[, func])</code></pre><br>Make an iterator that returns accumulated sums. Elements may be any addable type including Decimal or Fraction. If the optional func argument is supplied, it should be a function of two arguments and it will be used instead of addition.	https://docs.python.org/3.4/library/itertools.html#itertools.accumulate
itertools chain	A							https://docs.python.org			<pre><code>
itertools.chain(*iterables)</code></pre><br>Make an iterator that returns elements from the first iterable until it is exhausted, then proceeds to the next iterable, until all of the iterables are exhausted. Used for treating consecutive sequences as a single sequence. Equivalent to:	https://docs.python.org/3.4/library/itertools.html#itertools.chain
itertools combinations	A							https://docs.python.org			<pre><code>
itertools.combinations(iterable, r)</code></pre><br>Return r length subsequences of elements from the input iterable.	https://docs.python.org/3.4/library/itertools.html#itertools.combinations
itertools combinations_with_replacement	A							https://docs.python.org			<pre><code>
itertools.combinations_with_replacement(iterable, r)</code></pre><br>Return r length subsequences of elements from the input iterable allowing individual elements to be repeated more than once.	https://docs.python.org/3.4/library/itertools.html#itertools.combinations_with_replacement
itertools compress	A							https://docs.python.org			<pre><code>
itertools.compress(data, selectors)</code></pre><br>Make an iterator that filters elements from data returning only those that have a corresponding element in selectors that evaluates to True. Stops when either the data or selectors iterables has been exhausted. Equivalent to:	https://docs.python.org/3.4/library/itertools.html#itertools.compress
itertools count	A							https://docs.python.org			<pre><code>
itertools.count(start=0, step=1)</code></pre><br>Make an iterator that returns evenly spaced values starting with number start. Often used as an argument to map() to generate consecutive data points. Also, used with zip() to add sequence numbers. Equivalent to:	https://docs.python.org/3.4/library/itertools.html#itertools.count
itertools cycle	A							https://docs.python.org			<pre><code>
itertools.cycle(iterable)</code></pre><br>Make an iterator returning elements from the iterable and saving a copy of each. When the iterable is exhausted, return elements from the saved copy. Repeats indefinitely. Equivalent to:	https://docs.python.org/3.4/library/itertools.html#itertools.cycle
itertools dropwhile	A							https://docs.python.org			<pre><code>
itertools.dropwhile(predicate, iterable)</code></pre><br>Make an iterator that drops elements from the iterable as long as the predicate is true; afterwards, returns every element. Note, the iterator does not produce any output until the predicate first becomes false, so it may have a lengthy start-up time. Equivalent to:	https://docs.python.org/3.4/library/itertools.html#itertools.dropwhile
itertools filterfalse	A							https://docs.python.org			<pre><code>
itertools.filterfalse(predicate, iterable)</code></pre><br>Make an iterator that filters elements from iterable returning only those for which the predicate is False. If predicate is None, return the items that are false. Equivalent to:	https://docs.python.org/3.4/library/itertools.html#itertools.filterfalse
itertools groupby	A							https://docs.python.org			<pre><code>
itertools.groupby(iterable, key=None)</code></pre><br>Make an iterator that returns consecutive keys and groups from the iterable. The key is a function computing a key value for each element. If not specified or is None, key defaults to an identity function and returns the element unchanged. Generally, the iterable needs to already be sorted on the same key function.	https://docs.python.org/3.4/library/itertools.html#itertools.groupby
itertools islice	A							https://docs.python.org			<pre><code>
itertools.islice(iterable, stop)</code></pre><br>Make an iterator that returns selected elements from the iterable. If start is non-zero, then elements from the iterable are skipped until start is reached. Afterward, elements are returned consecutively unless step is set higher than one which results in items being skipped. If stop is None, then iteration continues until the iterator is exhausted, if at all; otherwise, it stops at the specified position. Unlike regular slicing, islice() does not support negative values for start, stop, or step. Can be used to extract related fields from data where the internal structure has been flattened (for example, a multi-line report may list a name field on every third line). Equivalent to:	https://docs.python.org/3.4/library/itertools.html#itertools.islice
itertools permutations	A							https://docs.python.org			<pre><code>
itertools.permutations(iterable, r=None)</code></pre><br>Return successive r length permutations of elements in the iterable.	https://docs.python.org/3.4/library/itertools.html#itertools.permutations
itertools product	A							https://docs.python.org			<pre><code>
itertools.product(*iterables, repeat=1)</code></pre><br>Cartesian product of input iterables.	https://docs.python.org/3.4/library/itertools.html#itertools.product
itertools repeat	A							https://docs.python.org			<pre><code>
itertools.repeat(object[, times])</code></pre><br>Make an iterator that returns object over and over again. Runs indefinitely unless the times argument is specified. Used as argument to map() for invariant parameters to the called function. Also used with zip() to create an invariant part of a tuple record. Equivalent to:	https://docs.python.org/3.4/library/itertools.html#itertools.repeat
itertools starmap	A							https://docs.python.org			<pre><code>
itertools.starmap(function, iterable)</code></pre><br>Make an iterator that computes the function using arguments obtained from the iterable. Used instead of map() when argument parameters are already grouped in tuples from a single iterable (the data has been “pre-zipped”). The difference between map() and starmap() parallels the distinction between function(a,b) and function(*c). Equivalent to:	https://docs.python.org/3.4/library/itertools.html#itertools.starmap
itertools takewhile	A							https://docs.python.org			<pre><code>
itertools.takewhile(predicate, iterable)</code></pre><br>Make an iterator that returns elements from the iterable as long as the predicate is true. Equivalent to:	https://docs.python.org/3.4/library/itertools.html#itertools.takewhile
itertools tee	A							https://docs.python.org			<pre><code>
itertools.tee(iterable, n=2)</code></pre><br>Return n independent iterators from a single iterable. Equivalent to:	https://docs.python.org/3.4/library/itertools.html#itertools.tee
itertools zip_longest	A							https://docs.python.org			<pre><code>
itertools.zip_longest(*iterables, fillvalue=None)</code></pre><br>Make an iterator that aggregates elements from each of the iterables. If the iterables are of uneven length, missing values are filled-in with fillvalue. Iteration continues until the longest iterable is exhausted. Equivalent to:	https://docs.python.org/3.4/library/itertools.html#itertools.zip_longest
json dump	A							https://docs.python.org			<pre><code>
json.dump(obj, fp, skipkeys=False, ensure_ascii=True, check_circular=True, allow_nan=True, cls=None, indent=None, separators=None, default=None, sort_keys=False, **kw)</code></pre><br>Serialize obj as a JSON formatted stream to fp (a .write()-supporting file-like object) using this conversion table.	https://docs.python.org/3.4/library/json.html#json.dump
json dumps	A							https://docs.python.org			<pre><code>
json.dumps(obj, skipkeys=False, ensure_ascii=True, check_circular=True, allow_nan=True, cls=None, indent=None, separators=None, default=None, sort_keys=False, **kw)</code></pre><br>Serialize obj to a JSON formatted str using this conversion table. The arguments have the same meaning as in dump().	https://docs.python.org/3.4/library/json.html#json.dumps
json load	A							https://docs.python.org			<pre><code>
json.load(fp, cls=None, object_hook=None, parse_float=None, parse_int=None, parse_constant=None, object_pairs_hook=None, **kw)</code></pre><br>Deserialize fp (a .read()-supporting file-like object containing a JSON document) to a Python object using this conversion table.	https://docs.python.org/3.4/library/json.html#json.load
json loads	A							https://docs.python.org			<pre><code>
json.loads(s, encoding=None, cls=None, object_hook=None, parse_float=None, parse_int=None, parse_constant=None, object_pairs_hook=None, **kw)</code></pre><br>Deserialize s (a str instance containing a JSON document) to a Python object using this conversion table.	https://docs.python.org/3.4/library/json.html#json.loads
json dump	A							https://docs.python.org			<pre><code>
json.dump(obj, fp, skipkeys=False, ensure_ascii=True, check_circular=True, allow_nan=True, cls=None, indent=None, separators=None, default=None, sort_keys=False, **kw)</code></pre><br>Serialize obj as a JSON formatted stream to fp (a .write()-supporting file-like object) using this conversion table.	https://docs.python.org/3.4/library/json.html#json.dump
json dumps	A							https://docs.python.org			<pre><code>
json.dumps(obj, skipkeys=False, ensure_ascii=True, check_circular=True, allow_nan=True, cls=None, indent=None, separators=None, default=None, sort_keys=False, **kw)</code></pre><br>Serialize obj to a JSON formatted str using this conversion table. The arguments have the same meaning as in dump().	https://docs.python.org/3.4/library/json.html#json.dumps
json load	A							https://docs.python.org			<pre><code>
json.load(fp, cls=None, object_hook=None, parse_float=None, parse_int=None, parse_constant=None, object_pairs_hook=None, **kw)</code></pre><br>Deserialize fp (a .read()-supporting file-like object containing a JSON document) to a Python object using this conversion table.	https://docs.python.org/3.4/library/json.html#json.load
json loads	A							https://docs.python.org			<pre><code>
json.loads(s, encoding=None, cls=None, object_hook=None, parse_float=None, parse_int=None, parse_constant=None, object_pairs_hook=None, **kw)</code></pre><br>Deserialize s (a str instance containing a JSON document) to a Python object using this conversion table.	https://docs.python.org/3.4/library/json.html#json.loads
keyword iskeyword	A							https://docs.python.org			<pre><code>
keyword.iskeyword(s)</code></pre><br>Return true if s is a Python keyword.	https://docs.python.org/3.4/library/keyword.html#keyword.iskeyword
linecache getline	A							https://docs.python.org			<pre><code>
linecache.getline(filename, lineno, module_globals=None)</code></pre><br>Get line lineno from file named filename. This function will never raise an exception — it will return '' on errors (the terminating newline character will be included for lines that are found).	https://docs.python.org/3.4/library/linecache.html#linecache.getline
linecache clearcache	A							https://docs.python.org			<pre><code>
linecache.clearcache()</code></pre><br>Clear the cache. Use this function if you no longer need lines from files previously read using getline().	https://docs.python.org/3.4/library/linecache.html#linecache.clearcache
linecache checkcache	A							https://docs.python.org			<pre><code>
linecache.checkcache(filename=None)</code></pre><br>Check the cache for validity. Use this function if files in the cache may have changed on disk, and you require the updated version. If filename is omitted, it will check all the entries in the cache.	https://docs.python.org/3.4/library/linecache.html#linecache.checkcache
locale setlocale	A							https://docs.python.org			<pre><code>
locale.setlocale(category, locale=None)</code></pre><br>If locale is given and not None, setlocale() modifies the locale setting for the category. The available categories are listed in the data description below. locale may be a string, or an iterable of two strings (language code and encoding). If it’s an iterable, it’s converted to a locale name using the locale aliasing engine. An empty string specifies the user’s default settings. If the modification of the locale fails, the exception Error is raised. If successful, the new locale setting is returned.	https://docs.python.org/3.4/library/locale.html#locale.setlocale
locale localeconv	A							https://docs.python.org			<pre><code>
locale.localeconv()</code></pre><br>Returns the database of the local conventions as a dictionary. This dictionary has the following strings as keys:	https://docs.python.org/3.4/library/locale.html#locale.localeconv
locale nl_langinfo	A							https://docs.python.org			<pre><code>
locale.nl_langinfo(option)</code></pre><br>Return some locale-specific information as a string. This function is not available on all systems, and the set of possible options might also vary across platforms. The possible argument values are numbers, for which symbolic constants are available in the locale module.	https://docs.python.org/3.4/library/locale.html#locale.nl_langinfo
locale getdefaultlocale	A							https://docs.python.org			<pre><code>
locale.getdefaultlocale([envvars])</code></pre><br>Tries to determine the default locale settings and returns them as a tuple of the form (language code, encoding).	https://docs.python.org/3.4/library/locale.html#locale.getdefaultlocale
locale getlocale	A							https://docs.python.org			<pre><code>
locale.getlocale(category=LC_CTYPE)</code></pre><br>Returns the current setting for the given locale category as sequence containing language code, encoding. category may be one of the LC_* values except LC_ALL. It defaults to LC_CTYPE.	https://docs.python.org/3.4/library/locale.html#locale.getlocale
locale getpreferredencoding	A							https://docs.python.org			<pre><code>
locale.getpreferredencoding(do_setlocale=True)</code></pre><br>Return the encoding used for text data, according to user preferences. User preferences are expressed differently on different systems, and might not be available programmatically on some systems, so this function only returns a guess.	https://docs.python.org/3.4/library/locale.html#locale.getpreferredencoding
locale normalize	A							https://docs.python.org			<pre><code>
locale.normalize(localename)</code></pre><br>Returns a normalized locale code for the given locale name. The returned locale code is formatted for use with setlocale(). If normalization fails, the original name is returned unchanged.	https://docs.python.org/3.4/library/locale.html#locale.normalize
locale resetlocale	A							https://docs.python.org			<pre><code>
locale.resetlocale(category=LC_ALL)</code></pre><br>Sets the locale for category to the default setting.	https://docs.python.org/3.4/library/locale.html#locale.resetlocale
locale strcoll	A							https://docs.python.org			<pre><code>
locale.strcoll(string1, string2)</code></pre><br>Compares two strings according to the current LC_COLLATE setting. As any other compare function, returns a negative, or a positive value, or 0, depending on whether string1 collates before or after string2 or is equal to it.	https://docs.python.org/3.4/library/locale.html#locale.strcoll
locale strxfrm	A							https://docs.python.org			<pre><code>
locale.strxfrm(string)</code></pre><br>Transforms a string to one that can be used in locale-aware comparisons. For example, strxfrm(s1) < strxfrm(s2) is equivalent to strcoll(s1, s2) < 0. This function can be used when the same string is compared repeatedly, e.g. when collating a sequence of strings.	https://docs.python.org/3.4/library/locale.html#locale.strxfrm
locale format	A							https://docs.python.org			<pre><code>
locale.format(format, val, grouping=False, monetary=False)</code></pre><br>Formats a number val according to the current LC_NUMERIC setting. The format follows the conventions of the % operator. For floating point values, the decimal point is modified if appropriate. If grouping is true, also takes the grouping into account.	https://docs.python.org/3.4/library/locale.html#locale.format
locale format_string	A							https://docs.python.org			<pre><code>
locale.format_string(format, val, grouping=False)</code></pre><br>Processes formatting specifiers as in format % val, but takes the current locale settings into account.	https://docs.python.org/3.4/library/locale.html#locale.format_string
locale currency	A							https://docs.python.org			<pre><code>
locale.currency(val, symbol=True, grouping=False, international=False)</code></pre><br>Formats a number val according to the current LC_MONETARY settings.	https://docs.python.org/3.4/library/locale.html#locale.currency
locale str	A							https://docs.python.org			<pre><code>
locale.str(float)</code></pre><br>Formats a floating point number using the same format as the built-in function str(float), but takes the decimal point into account.	https://docs.python.org/3.4/library/locale.html#locale.str
locale atof	A							https://docs.python.org			<pre><code>
locale.atof(string)</code></pre><br>Converts a string to a floating point number, following the LC_NUMERIC settings.	https://docs.python.org/3.4/library/locale.html#locale.atof
locale atoi	A							https://docs.python.org			<pre><code>
locale.atoi(string)</code></pre><br>Converts a string to an integer, following the LC_NUMERIC conventions.	https://docs.python.org/3.4/library/locale.html#locale.atoi
logging.config dictConfig	A							https://docs.python.org			<pre><code>
logging.config.dictConfig(config)</code></pre><br>Takes the logging configuration from a dictionary. The contents of this dictionary are described in Configuration dictionary schema below.	https://docs.python.org/3.4/library/logging.config.html#logging.config.dictConfig
logging.config fileConfig	A							https://docs.python.org			<pre><code>
logging.config.fileConfig(fname, defaults=None, disable_existing_loggers=True)</code></pre><br>Reads the logging configuration from a configparser-format file. The format of the file should be as described in Configuration file format. This function can be called several times from an application, allowing an end user to select from various pre-canned configurations (if the developer provides a mechanism to present the choices and load the chosen configuration).	https://docs.python.org/3.4/library/logging.config.html#logging.config.fileConfig
logging.config listen	A							https://docs.python.org			<pre><code>
logging.config.listen(port=DEFAULT_LOGGING_CONFIG_PORT, verify=None)</code></pre><br>Starts up a socket server on the specified port, and listens for new configurations. If no port is specified, the module’s default DEFAULT_LOGGING_CONFIG_PORT is used. Logging configurations will be sent as a file suitable for processing by fileConfig(). Returns a Thread instance on which you can call start() to start the server, and which you can join() when appropriate. To stop the server, call stopListening().	https://docs.python.org/3.4/library/logging.config.html#logging.config.listen
logging.config stopListening	A							https://docs.python.org			<pre><code>
logging.config.stopListening()</code></pre><br>Stops the listening server which was created with a call to listen(). This is typically called before calling join() on the return value from listen().	https://docs.python.org/3.4/library/logging.config.html#logging.config.stopListening
logging.config dictConfig	A							https://docs.python.org			<pre><code>
logging.config.dictConfig(config)</code></pre><br>Takes the logging configuration from a dictionary. The contents of this dictionary are described in Configuration dictionary schema below.	https://docs.python.org/3.4/library/logging.config.html#logging.config.dictConfig
logging.config fileConfig	A							https://docs.python.org			<pre><code>
logging.config.fileConfig(fname, defaults=None, disable_existing_loggers=True)</code></pre><br>Reads the logging configuration from a configparser-format file. The format of the file should be as described in Configuration file format. This function can be called several times from an application, allowing an end user to select from various pre-canned configurations (if the developer provides a mechanism to present the choices and load the chosen configuration).	https://docs.python.org/3.4/library/logging.config.html#logging.config.fileConfig
logging.config listen	A							https://docs.python.org			<pre><code>
logging.config.listen(port=DEFAULT_LOGGING_CONFIG_PORT, verify=None)</code></pre><br>Starts up a socket server on the specified port, and listens for new configurations. If no port is specified, the module’s default DEFAULT_LOGGING_CONFIG_PORT is used. Logging configurations will be sent as a file suitable for processing by fileConfig(). Returns a Thread instance on which you can call start() to start the server, and which you can join() when appropriate. To stop the server, call stopListening().	https://docs.python.org/3.4/library/logging.config.html#logging.config.listen
logging.config stopListening	A							https://docs.python.org			<pre><code>
logging.config.stopListening()</code></pre><br>Stops the listening server which was created with a call to listen(). This is typically called before calling join() on the return value from listen().	https://docs.python.org/3.4/library/logging.config.html#logging.config.stopListening
logging getLogger	A							https://docs.python.org			<pre><code>
logging.getLogger(name=None)</code></pre><br>Return a logger with the specified name or, if name is None, return a logger which is the root logger of the hierarchy. If specified, the name is typically a dot-separated hierarchical name like ‘a’, ‘a.b’ or ‘a.b.c.d’. Choice of these names is entirely up to the developer who is using logging.	https://docs.python.org/3.4/library/logging.html#logging.getLogger
logging getLoggerClass	A							https://docs.python.org			<pre><code>
logging.getLoggerClass()</code></pre><br>Return either the standard Logger class, or the last class passed to setLoggerClass(). This function may be called from within a new class definition, to ensure that installing a customized Logger class will not undo customizations already applied by other code. For example:	https://docs.python.org/3.4/library/logging.html#logging.getLoggerClass
logging getLogRecordFactory	A							https://docs.python.org			<pre><code>
logging.getLogRecordFactory()</code></pre><br>Return a callable which is used to create a LogRecord.	https://docs.python.org/3.4/library/logging.html#logging.getLogRecordFactory
logging debug	A							https://docs.python.org			<pre><code>
logging.debug(msg, *args, **kwargs)</code></pre><br>Logs a message with level DEBUG on the root logger. The msg is the message format string, and the args are the arguments which are merged into msg using the string formatting operator. (Note that this means that you can use keywords in the format string, together with a single dictionary argument.)	https://docs.python.org/3.4/library/logging.html#logging.debug
logging info	A							https://docs.python.org			<pre><code>
logging.info(msg, *args, **kwargs)</code></pre><br>Logs a message with level INFO on the root logger. The arguments are interpreted as for debug().	https://docs.python.org/3.4/library/logging.html#logging.info
logging warning	A							https://docs.python.org			<pre><code>
logging.warning(msg, *args, **kwargs)</code></pre><br>Logs a message with level WARNING on the root logger. The arguments are interpreted as for debug().	https://docs.python.org/3.4/library/logging.html#logging.warning
logging error	A							https://docs.python.org			<pre><code>
logging.error(msg, *args, **kwargs)</code></pre><br>Logs a message with level ERROR on the root logger. The arguments are interpreted as for debug().	https://docs.python.org/3.4/library/logging.html#logging.error
logging critical	A							https://docs.python.org			<pre><code>
logging.critical(msg, *args, **kwargs)</code></pre><br>Logs a message with level CRITICAL on the root logger. The arguments are interpreted as for debug().	https://docs.python.org/3.4/library/logging.html#logging.critical
logging exception	A							https://docs.python.org			<pre><code>
logging.exception(msg, *args, **kwargs)</code></pre><br>Logs a message with level ERROR on the root logger. The arguments are interpreted as for debug(). Exception info is added to the logging message. This function should only be called from an exception handler.	https://docs.python.org/3.4/library/logging.html#logging.exception
logging log	A							https://docs.python.org			<pre><code>
logging.log(level, msg, *args, **kwargs)</code></pre><br>Logs a message with level level on the root logger. The other arguments are interpreted as for debug().	https://docs.python.org/3.4/library/logging.html#logging.log
logging disable	A							https://docs.python.org			<pre><code>
logging.disable(lvl)</code></pre><br>Provides an overriding level lvl for all loggers which takes precedence over the logger’s own level. When the need arises to temporarily throttle logging output down across the whole application, this function can be useful. Its effect is to disable all logging calls of severity lvl and below, so that if you call it with a value of INFO, then all INFO and DEBUG events would be discarded, whereas those of severity WARNING and above would be processed according to the logger’s effective level. If logging.disable(logging.NOTSET) is called, it effectively removes this overriding level, so that logging output again depends on the effective levels of individual loggers.	https://docs.python.org/3.4/library/logging.html#logging.disable
logging addLevelName	A							https://docs.python.org			<pre><code>
logging.addLevelName(lvl, levelName)</code></pre><br>Associates level lvl with text levelName in an internal dictionary, which is used to map numeric levels to a textual representation, for example when a Formatter formats a message. This function can also be used to define your own levels. The only constraints are that all levels used must be registered using this function, levels should be positive integers and they should increase in increasing order of severity.	https://docs.python.org/3.4/library/logging.html#logging.addLevelName
logging getLevelName	A							https://docs.python.org			<pre><code>
logging.getLevelName(lvl)</code></pre><br>Returns the textual representation of logging level lvl. If the level is one of the predefined levels CRITICAL, ERROR, WARNING, INFO or DEBUG then you get the corresponding string. If you have associated levels with names using addLevelName() then the name you have associated with lvl is returned. If a numeric value corresponding to one of the defined levels is passed in, the corresponding string representation is returned. Otherwise, the string ‘Level %s’ % lvl is returned.	https://docs.python.org/3.4/library/logging.html#logging.getLevelName
logging makeLogRecord	A							https://docs.python.org			<pre><code>
logging.makeLogRecord(attrdict)</code></pre><br>Creates and returns a new LogRecord instance whose attributes are defined by attrdict. This function is useful for taking a pickled LogRecord attribute dictionary, sent over a socket, and reconstituting it as a LogRecord instance at the receiving end.	https://docs.python.org/3.4/library/logging.html#logging.makeLogRecord
logging basicConfig	A							https://docs.python.org			<pre><code>
logging.basicConfig(**kwargs)</code></pre><br>Does basic configuration for the logging system by creating a StreamHandler with a default Formatter and adding it to the root logger. The functions debug(), info(), warning(), error() and critical() will call basicConfig() automatically if no handlers are defined for the root logger.	https://docs.python.org/3.4/library/logging.html#logging.basicConfig
logging shutdown	A							https://docs.python.org			<pre><code>
logging.shutdown()</code></pre><br>Informs the logging system to perform an orderly shutdown by flushing and closing all handlers. This should be called at application exit and no further use of the logging system should be made after this call.	https://docs.python.org/3.4/library/logging.html#logging.shutdown
logging setLoggerClass	A							https://docs.python.org			<pre><code>
logging.setLoggerClass(klass)</code></pre><br>Tells the logging system to use the class klass when instantiating a logger. The class should define __init__() such that only a name argument is required, and the __init__() should call Logger.__init__(). This function is typically called before any loggers are instantiated by applications which need to use custom logger behavior.	https://docs.python.org/3.4/library/logging.html#logging.setLoggerClass
logging setLogRecordFactory	A							https://docs.python.org			<pre><code>
logging.setLogRecordFactory(factory)</code></pre><br>Set a callable which is used to create a LogRecord.	https://docs.python.org/3.4/library/logging.html#logging.setLogRecordFactory
logging captureWarnings	A							https://docs.python.org			<pre><code>
logging.captureWarnings(capture)</code></pre><br>This function is used to turn the capture of warnings by logging on and off.	https://docs.python.org/3.4/library/logging.html#logging.captureWarnings
logging getLogger	A							https://docs.python.org			<pre><code>
logging.getLogger(name=None)</code></pre><br>Return a logger with the specified name or, if name is None, return a logger which is the root logger of the hierarchy. If specified, the name is typically a dot-separated hierarchical name like ‘a’, ‘a.b’ or ‘a.b.c.d’. Choice of these names is entirely up to the developer who is using logging.	https://docs.python.org/3.4/library/logging.html#logging.getLogger
logging getLoggerClass	A							https://docs.python.org			<pre><code>
logging.getLoggerClass()</code></pre><br>Return either the standard Logger class, or the last class passed to setLoggerClass(). This function may be called from within a new class definition, to ensure that installing a customized Logger class will not undo customizations already applied by other code. For example:	https://docs.python.org/3.4/library/logging.html#logging.getLoggerClass
logging getLogRecordFactory	A							https://docs.python.org			<pre><code>
logging.getLogRecordFactory()</code></pre><br>Return a callable which is used to create a LogRecord.	https://docs.python.org/3.4/library/logging.html#logging.getLogRecordFactory
logging debug	A							https://docs.python.org			<pre><code>
logging.debug(msg, *args, **kwargs)</code></pre><br>Logs a message with level DEBUG on the root logger. The msg is the message format string, and the args are the arguments which are merged into msg using the string formatting operator. (Note that this means that you can use keywords in the format string, together with a single dictionary argument.)	https://docs.python.org/3.4/library/logging.html#logging.debug
logging info	A							https://docs.python.org			<pre><code>
logging.info(msg, *args, **kwargs)</code></pre><br>Logs a message with level INFO on the root logger. The arguments are interpreted as for debug().	https://docs.python.org/3.4/library/logging.html#logging.info
logging warning	A							https://docs.python.org			<pre><code>
logging.warning(msg, *args, **kwargs)</code></pre><br>Logs a message with level WARNING on the root logger. The arguments are interpreted as for debug().	https://docs.python.org/3.4/library/logging.html#logging.warning
logging error	A							https://docs.python.org			<pre><code>
logging.error(msg, *args, **kwargs)</code></pre><br>Logs a message with level ERROR on the root logger. The arguments are interpreted as for debug().	https://docs.python.org/3.4/library/logging.html#logging.error
logging critical	A							https://docs.python.org			<pre><code>
logging.critical(msg, *args, **kwargs)</code></pre><br>Logs a message with level CRITICAL on the root logger. The arguments are interpreted as for debug().	https://docs.python.org/3.4/library/logging.html#logging.critical
logging exception	A							https://docs.python.org			<pre><code>
logging.exception(msg, *args, **kwargs)</code></pre><br>Logs a message with level ERROR on the root logger. The arguments are interpreted as for debug(). Exception info is added to the logging message. This function should only be called from an exception handler.	https://docs.python.org/3.4/library/logging.html#logging.exception
logging log	A							https://docs.python.org			<pre><code>
logging.log(level, msg, *args, **kwargs)</code></pre><br>Logs a message with level level on the root logger. The other arguments are interpreted as for debug().	https://docs.python.org/3.4/library/logging.html#logging.log
logging disable	A							https://docs.python.org			<pre><code>
logging.disable(lvl)</code></pre><br>Provides an overriding level lvl for all loggers which takes precedence over the logger’s own level. When the need arises to temporarily throttle logging output down across the whole application, this function can be useful. Its effect is to disable all logging calls of severity lvl and below, so that if you call it with a value of INFO, then all INFO and DEBUG events would be discarded, whereas those of severity WARNING and above would be processed according to the logger’s effective level. If logging.disable(logging.NOTSET) is called, it effectively removes this overriding level, so that logging output again depends on the effective levels of individual loggers.	https://docs.python.org/3.4/library/logging.html#logging.disable
logging addLevelName	A							https://docs.python.org			<pre><code>
logging.addLevelName(lvl, levelName)</code></pre><br>Associates level lvl with text levelName in an internal dictionary, which is used to map numeric levels to a textual representation, for example when a Formatter formats a message. This function can also be used to define your own levels. The only constraints are that all levels used must be registered using this function, levels should be positive integers and they should increase in increasing order of severity.	https://docs.python.org/3.4/library/logging.html#logging.addLevelName
logging getLevelName	A							https://docs.python.org			<pre><code>
logging.getLevelName(lvl)</code></pre><br>Returns the textual representation of logging level lvl. If the level is one of the predefined levels CRITICAL, ERROR, WARNING, INFO or DEBUG then you get the corresponding string. If you have associated levels with names using addLevelName() then the name you have associated with lvl is returned. If a numeric value corresponding to one of the defined levels is passed in, the corresponding string representation is returned. Otherwise, the string ‘Level %s’ % lvl is returned.	https://docs.python.org/3.4/library/logging.html#logging.getLevelName
logging makeLogRecord	A							https://docs.python.org			<pre><code>
logging.makeLogRecord(attrdict)</code></pre><br>Creates and returns a new LogRecord instance whose attributes are defined by attrdict. This function is useful for taking a pickled LogRecord attribute dictionary, sent over a socket, and reconstituting it as a LogRecord instance at the receiving end.	https://docs.python.org/3.4/library/logging.html#logging.makeLogRecord
logging basicConfig	A							https://docs.python.org			<pre><code>
logging.basicConfig(**kwargs)</code></pre><br>Does basic configuration for the logging system by creating a StreamHandler with a default Formatter and adding it to the root logger. The functions debug(), info(), warning(), error() and critical() will call basicConfig() automatically if no handlers are defined for the root logger.	https://docs.python.org/3.4/library/logging.html#logging.basicConfig
logging shutdown	A							https://docs.python.org			<pre><code>
logging.shutdown()</code></pre><br>Informs the logging system to perform an orderly shutdown by flushing and closing all handlers. This should be called at application exit and no further use of the logging system should be made after this call.	https://docs.python.org/3.4/library/logging.html#logging.shutdown
logging setLoggerClass	A							https://docs.python.org			<pre><code>
logging.setLoggerClass(klass)</code></pre><br>Tells the logging system to use the class klass when instantiating a logger. The class should define __init__() such that only a name argument is required, and the __init__() should call Logger.__init__(). This function is typically called before any loggers are instantiated by applications which need to use custom logger behavior.	https://docs.python.org/3.4/library/logging.html#logging.setLoggerClass
logging setLogRecordFactory	A							https://docs.python.org			<pre><code>
logging.setLogRecordFactory(factory)</code></pre><br>Set a callable which is used to create a LogRecord.	https://docs.python.org/3.4/library/logging.html#logging.setLogRecordFactory
logging captureWarnings	A							https://docs.python.org			<pre><code>
logging.captureWarnings(capture)</code></pre><br>This function is used to turn the capture of warnings by logging on and off.	https://docs.python.org/3.4/library/logging.html#logging.captureWarnings
lzma open	A							https://docs.python.org			<pre><code>
lzma.open(filename, mode="rb", *, format=None, check=-1, preset=None, filters=None, encoding=None, errors=None, newline=None)</code></pre><br>Open an LZMA-compressed file in binary or text mode, returning a file object.	https://docs.python.org/3.4/library/lzma.html#lzma.open
lzma compress	A							https://docs.python.org			<pre><code>
lzma.compress(data, format=FORMAT_XZ, check=-1, preset=None, filters=None)</code></pre><br>Compress data (a bytes object), returning the compressed data as a bytes object.	https://docs.python.org/3.4/library/lzma.html#lzma.compress
lzma decompress	A							https://docs.python.org			<pre><code>
lzma.decompress(data, format=FORMAT_AUTO, memlimit=None, filters=None)</code></pre><br>Decompress data (a bytes object), returning the uncompressed data as a bytes object.	https://docs.python.org/3.4/library/lzma.html#lzma.decompress
lzma is_check_supported	A							https://docs.python.org			<pre><code>
lzma.is_check_supported(check)</code></pre><br>Returns true if the given integrity check is supported on this system.	https://docs.python.org/3.4/library/lzma.html#lzma.is_check_supported
lzma open	A							https://docs.python.org			<pre><code>
lzma.open(filename, mode="rb", *, format=None, check=-1, preset=None, filters=None, encoding=None, errors=None, newline=None)</code></pre><br>Open an LZMA-compressed file in binary or text mode, returning a file object.	https://docs.python.org/3.4/library/lzma.html#lzma.open
lzma compress	A							https://docs.python.org			<pre><code>
lzma.compress(data, format=FORMAT_XZ, check=-1, preset=None, filters=None)</code></pre><br>Compress data (a bytes object), returning the compressed data as a bytes object.	https://docs.python.org/3.4/library/lzma.html#lzma.compress
lzma decompress	A							https://docs.python.org			<pre><code>
lzma.decompress(data, format=FORMAT_AUTO, memlimit=None, filters=None)</code></pre><br>Decompress data (a bytes object), returning the uncompressed data as a bytes object.	https://docs.python.org/3.4/library/lzma.html#lzma.decompress
lzma is_check_supported	A							https://docs.python.org			<pre><code>
lzma.is_check_supported(check)</code></pre><br>Returns true if the given integrity check is supported on this system.	https://docs.python.org/3.4/library/lzma.html#lzma.is_check_supported
mailcap findmatch	A							https://docs.python.org			<pre><code>
mailcap.findmatch(caps, MIMEtype, key='view', filename='/dev/null', plist=[])</code></pre><br>Return a 2-tuple; the first element is a string containing the command line to be executed (which can be passed to os.system()), and the second element is the mailcap entry for a given MIME type. If no matching MIME type can be found, (None, None) is returned.	https://docs.python.org/3.4/library/mailcap.html#mailcap.findmatch
mailcap getcaps	A							https://docs.python.org			<pre><code>
mailcap.getcaps()</code></pre><br>Returns a dictionary mapping MIME types to a list of mailcap file entries. This dictionary must be passed to the findmatch() function. An entry is stored as a list of dictionaries, but it shouldn’t be necessary to know the details of this representation.	https://docs.python.org/3.4/library/mailcap.html#mailcap.getcaps
marshal dump	A							https://docs.python.org			<pre><code>
marshal.dump(value, file[, version])</code></pre><br>Write the value on the open file. The value must be a supported type. The file must be an open file object such as sys.stdout or returned by open() or os.popen(). It must be opened in binary mode ('wb' or 'w+b').	https://docs.python.org/3.4/library/marshal.html#marshal.dump
marshal load	A							https://docs.python.org			<pre><code>
marshal.load(file)</code></pre><br>Read one value from the open file and return it. If no valid value is read (e.g. because the data has a different Python version’s incompatible marshal format), raise EOFError, ValueError or TypeError. The file must be an open file object opened in binary mode ('rb' or 'r+b').	https://docs.python.org/3.4/library/marshal.html#marshal.load
marshal dumps	A							https://docs.python.org			<pre><code>
marshal.dumps(value[, version])</code></pre><br>Return the string that would be written to a file by dump(value, file). The value must be a supported type. Raise a ValueError exception if value has (or contains an object that has) an unsupported type.	https://docs.python.org/3.4/library/marshal.html#marshal.dumps
marshal loads	A							https://docs.python.org			<pre><code>
marshal.loads(string)</code></pre><br>Convert the string to a value. If no valid value is found, raise EOFError, ValueError or TypeError. Extra characters in the string are ignored.	https://docs.python.org/3.4/library/marshal.html#marshal.loads
math ceil	A							https://docs.python.org			<pre><code>
math.ceil(x)</code></pre><br>Return the ceiling of x, the smallest integer greater than or equal to x. If x is not a float, delegates to x.__ceil__(), which should return an Integral value.	https://docs.python.org/3.4/library/math.html#math.ceil
math copysign	A							https://docs.python.org			<pre><code>
math.copysign(x, y)</code></pre><br>Return a float with the magnitude (absolute value) of x but the sign of y. On platforms that support signed zeros, copysign(1.0, -0.0) returns -1.0.	https://docs.python.org/3.4/library/math.html#math.copysign
math fabs	A							https://docs.python.org			<pre><code>
math.fabs(x)</code></pre><br>Return the absolute value of x.	https://docs.python.org/3.4/library/math.html#math.fabs
math factorial	A							https://docs.python.org			<pre><code>
math.factorial(x)</code></pre><br>Return x factorial. Raises ValueError if x is not integral or is negative.	https://docs.python.org/3.4/library/math.html#math.factorial
math floor	A							https://docs.python.org			<pre><code>
math.floor(x)</code></pre><br>Return the floor of x, the largest integer less than or equal to x. If x is not a float, delegates to x.__floor__(), which should return an Integral value.	https://docs.python.org/3.4/library/math.html#math.floor
math fmod	A							https://docs.python.org			<pre><code>
math.fmod(x, y)</code></pre><br>Return fmod(x, y), as defined by the platform C library. Note that the Python expression x % y may not return the same result. The intent of the C standard is that fmod(x, y) be exactly (mathematically; to infinite precision) equal to x - n*y for some integer n such that the result has the same sign as x and magnitude less than abs(y). Python’s x % y returns a result with the sign of y instead, and may not be exactly computable for float arguments. For example, fmod(-1e-100, 1e100) is -1e-100, but the result of Python’s -1e-100 % 1e100 is 1e100-1e-100, which cannot be represented exactly as a float, and rounds to the surprising 1e100. For this reason, function fmod() is generally preferred when working with floats, while Python’s x % y is preferred when working with integers.	https://docs.python.org/3.4/library/math.html#math.fmod
math frexp	A							https://docs.python.org			<pre><code>
math.frexp(x)</code></pre><br>Return the mantissa and exponent of x as the pair (m, e). m is a float and e is an integer such that x == m * 2**e exactly. If x is zero, returns (0.0, 0), otherwise 0.5 <= abs(m) < 1. This is used to “pick apart” the internal representation of a float in a portable way.	https://docs.python.org/3.4/library/math.html#math.frexp
math fsum	A							https://docs.python.org			<pre><code>
math.fsum(iterable)</code></pre><br>Return an accurate floating point sum of values in the iterable. Avoids loss of precision by tracking multiple intermediate partial sums:	https://docs.python.org/3.4/library/math.html#math.fsum
math isfinite	A							https://docs.python.org			<pre><code>
math.isfinite(x)</code></pre><br>Return True if x is neither an infinity nor a NaN, and False otherwise. (Note that 0.0 is considered finite.)	https://docs.python.org/3.4/library/math.html#math.isfinite
math isinf	A							https://docs.python.org			<pre><code>
math.isinf(x)</code></pre><br>Return True if x is a positive or negative infinity, and False otherwise.	https://docs.python.org/3.4/library/math.html#math.isinf
math isnan	A							https://docs.python.org			<pre><code>
math.isnan(x)</code></pre><br>Return True if x is a NaN (not a number), and False otherwise.	https://docs.python.org/3.4/library/math.html#math.isnan
math ldexp	A							https://docs.python.org			<pre><code>
math.ldexp(x, i)</code></pre><br>Return x * (2**i). This is essentially the inverse of function frexp().	https://docs.python.org/3.4/library/math.html#math.ldexp
math modf	A							https://docs.python.org			<pre><code>
math.modf(x)</code></pre><br>Return the fractional and integer parts of x. Both results carry the sign of x and are floats.	https://docs.python.org/3.4/library/math.html#math.modf
math trunc	A							https://docs.python.org			<pre><code>
math.trunc(x)</code></pre><br>Return the Real value x truncated to an Integral (usually an integer). Delegates to x.__trunc__().	https://docs.python.org/3.4/library/math.html#math.trunc
math exp	A							https://docs.python.org			<pre><code>
math.exp(x)</code></pre><br>Return e**x.	https://docs.python.org/3.4/library/math.html#math.exp
math expm1	A							https://docs.python.org			<pre><code>
math.expm1(x)</code></pre><br>Return e**x - 1. For small floats x, the subtraction in exp(x) - 1 can result in a significant loss of precision; the expm1() function provides a way to compute this quantity to full precision:	https://docs.python.org/3.4/library/math.html#math.expm1
math log	A							https://docs.python.org			<pre><code>
math.log(x[, base])</code></pre><br>With one argument, return the natural logarithm of x (to base e).	https://docs.python.org/3.4/library/math.html#math.log
math log1p	A							https://docs.python.org			<pre><code>
math.log1p(x)</code></pre><br>Return the natural logarithm of 1+x (base e). The result is calculated in a way which is accurate for x near zero.	https://docs.python.org/3.4/library/math.html#math.log1p
math log2	A							https://docs.python.org			<pre><code>
math.log2(x)</code></pre><br>Return the base-2 logarithm of x. This is usually more accurate than log(x, 2).	https://docs.python.org/3.4/library/math.html#math.log2
math log10	A							https://docs.python.org			<pre><code>
math.log10(x)</code></pre><br>Return the base-10 logarithm of x. This is usually more accurate than log(x, 10).	https://docs.python.org/3.4/library/math.html#math.log10
math pow	A							https://docs.python.org			<pre><code>
math.pow(x, y)</code></pre><br>Return x raised to the power y. Exceptional cases follow Annex ‘F’ of the C99 standard as far as possible. In particular, pow(1.0, x) and pow(x, 0.0) always return 1.0, even when x is a zero or a NaN. If both x and y are finite, x is negative, and y is not an integer then pow(x, y) is undefined, and raises ValueError.	https://docs.python.org/3.4/library/math.html#math.pow
math sqrt	A							https://docs.python.org			<pre><code>
math.sqrt(x)</code></pre><br>Return the square root of x.	https://docs.python.org/3.4/library/math.html#math.sqrt
math acos	A							https://docs.python.org			<pre><code>
math.acos(x)</code></pre><br>Return the arc cosine of x, in radians.	https://docs.python.org/3.4/library/math.html#math.acos
math asin	A							https://docs.python.org			<pre><code>
math.asin(x)</code></pre><br>Return the arc sine of x, in radians.	https://docs.python.org/3.4/library/math.html#math.asin
math atan	A							https://docs.python.org			<pre><code>
math.atan(x)</code></pre><br>Return the arc tangent of x, in radians.	https://docs.python.org/3.4/library/math.html#math.atan
math atan2	A							https://docs.python.org			<pre><code>
math.atan2(y, x)</code></pre><br>Return atan(y / x), in radians. The result is between -pi and pi. The vector in the plane from the origin to point (x, y) makes this angle with the positive X axis. The point of atan2() is that the signs of both inputs are known to it, so it can compute the correct quadrant for the angle. For example, atan(1) and atan2(1, 1) are both pi/4, but atan2(-1, -1) is -3*pi/4.	https://docs.python.org/3.4/library/math.html#math.atan2
math cos	A							https://docs.python.org			<pre><code>
math.cos(x)</code></pre><br>Return the cosine of x radians.	https://docs.python.org/3.4/library/math.html#math.cos
math hypot	A							https://docs.python.org			<pre><code>
math.hypot(x, y)</code></pre><br>Return the Euclidean norm, sqrt(x*x + y*y). This is the length of the vector from the origin to point (x, y).	https://docs.python.org/3.4/library/math.html#math.hypot
math sin	A							https://docs.python.org			<pre><code>
math.sin(x)</code></pre><br>Return the sine of x radians.	https://docs.python.org/3.4/library/math.html#math.sin
math tan	A							https://docs.python.org			<pre><code>
math.tan(x)</code></pre><br>Return the tangent of x radians.	https://docs.python.org/3.4/library/math.html#math.tan
math degrees	A							https://docs.python.org			<pre><code>
math.degrees(x)</code></pre><br>Convert angle x from radians to degrees.	https://docs.python.org/3.4/library/math.html#math.degrees
math radians	A							https://docs.python.org			<pre><code>
math.radians(x)</code></pre><br>Convert angle x from degrees to radians.	https://docs.python.org/3.4/library/math.html#math.radians
math acosh	A							https://docs.python.org			<pre><code>
math.acosh(x)</code></pre><br>Return the inverse hyperbolic cosine of x.	https://docs.python.org/3.4/library/math.html#math.acosh
math asinh	A							https://docs.python.org			<pre><code>
math.asinh(x)</code></pre><br>Return the inverse hyperbolic sine of x.	https://docs.python.org/3.4/library/math.html#math.asinh
math atanh	A							https://docs.python.org			<pre><code>
math.atanh(x)</code></pre><br>Return the inverse hyperbolic tangent of x.	https://docs.python.org/3.4/library/math.html#math.atanh
math cosh	A							https://docs.python.org			<pre><code>
math.cosh(x)</code></pre><br>Return the hyperbolic cosine of x.	https://docs.python.org/3.4/library/math.html#math.cosh
math sinh	A							https://docs.python.org			<pre><code>
math.sinh(x)</code></pre><br>Return the hyperbolic sine of x.	https://docs.python.org/3.4/library/math.html#math.sinh
math tanh	A							https://docs.python.org			<pre><code>
math.tanh(x)</code></pre><br>Return the hyperbolic tangent of x.	https://docs.python.org/3.4/library/math.html#math.tanh
math erf	A							https://docs.python.org			<pre><code>
math.erf(x)</code></pre><br>Return the error function at x.	https://docs.python.org/3.4/library/math.html#math.erf
math erfc	A							https://docs.python.org			<pre><code>
math.erfc(x)</code></pre><br>Return the complementary error function at x. The complementary error function is defined as 1.0 - erf(x). It is used for large values of x where a subtraction from one would cause a loss of significance.	https://docs.python.org/3.4/library/math.html#math.erfc
math gamma	A							https://docs.python.org			<pre><code>
math.gamma(x)</code></pre><br>Return the Gamma function at x.	https://docs.python.org/3.4/library/math.html#math.gamma
math lgamma	A							https://docs.python.org			<pre><code>
math.lgamma(x)</code></pre><br>Return the natural logarithm of the absolute value of the Gamma function at x.	https://docs.python.org/3.4/library/math.html#math.lgamma
math ceil	A							https://docs.python.org			<pre><code>
math.ceil(x)</code></pre><br>Return the ceiling of x, the smallest integer greater than or equal to x. If x is not a float, delegates to x.__ceil__(), which should return an Integral value.	https://docs.python.org/3.4/library/math.html#math.ceil
math copysign	A							https://docs.python.org			<pre><code>
math.copysign(x, y)</code></pre><br>Return a float with the magnitude (absolute value) of x but the sign of y. On platforms that support signed zeros, copysign(1.0, -0.0) returns -1.0.	https://docs.python.org/3.4/library/math.html#math.copysign
math fabs	A							https://docs.python.org			<pre><code>
math.fabs(x)</code></pre><br>Return the absolute value of x.	https://docs.python.org/3.4/library/math.html#math.fabs
math factorial	A							https://docs.python.org			<pre><code>
math.factorial(x)</code></pre><br>Return x factorial. Raises ValueError if x is not integral or is negative.	https://docs.python.org/3.4/library/math.html#math.factorial
math floor	A							https://docs.python.org			<pre><code>
math.floor(x)</code></pre><br>Return the floor of x, the largest integer less than or equal to x. If x is not a float, delegates to x.__floor__(), which should return an Integral value.	https://docs.python.org/3.4/library/math.html#math.floor
math fmod	A							https://docs.python.org			<pre><code>
math.fmod(x, y)</code></pre><br>Return fmod(x, y), as defined by the platform C library. Note that the Python expression x % y may not return the same result. The intent of the C standard is that fmod(x, y) be exactly (mathematically; to infinite precision) equal to x - n*y for some integer n such that the result has the same sign as x and magnitude less than abs(y). Python’s x % y returns a result with the sign of y instead, and may not be exactly computable for float arguments. For example, fmod(-1e-100, 1e100) is -1e-100, but the result of Python’s -1e-100 % 1e100 is 1e100-1e-100, which cannot be represented exactly as a float, and rounds to the surprising 1e100. For this reason, function fmod() is generally preferred when working with floats, while Python’s x % y is preferred when working with integers.	https://docs.python.org/3.4/library/math.html#math.fmod
math frexp	A							https://docs.python.org			<pre><code>
math.frexp(x)</code></pre><br>Return the mantissa and exponent of x as the pair (m, e). m is a float and e is an integer such that x == m * 2**e exactly. If x is zero, returns (0.0, 0), otherwise 0.5 <= abs(m) < 1. This is used to “pick apart” the internal representation of a float in a portable way.	https://docs.python.org/3.4/library/math.html#math.frexp
math fsum	A							https://docs.python.org			<pre><code>
math.fsum(iterable)</code></pre><br>Return an accurate floating point sum of values in the iterable. Avoids loss of precision by tracking multiple intermediate partial sums:	https://docs.python.org/3.4/library/math.html#math.fsum
math isfinite	A							https://docs.python.org			<pre><code>
math.isfinite(x)</code></pre><br>Return True if x is neither an infinity nor a NaN, and False otherwise. (Note that 0.0 is considered finite.)	https://docs.python.org/3.4/library/math.html#math.isfinite
math isinf	A							https://docs.python.org			<pre><code>
math.isinf(x)</code></pre><br>Return True if x is a positive or negative infinity, and False otherwise.	https://docs.python.org/3.4/library/math.html#math.isinf
math isnan	A							https://docs.python.org			<pre><code>
math.isnan(x)</code></pre><br>Return True if x is a NaN (not a number), and False otherwise.	https://docs.python.org/3.4/library/math.html#math.isnan
math ldexp	A							https://docs.python.org			<pre><code>
math.ldexp(x, i)</code></pre><br>Return x * (2**i). This is essentially the inverse of function frexp().	https://docs.python.org/3.4/library/math.html#math.ldexp
math modf	A							https://docs.python.org			<pre><code>
math.modf(x)</code></pre><br>Return the fractional and integer parts of x. Both results carry the sign of x and are floats.	https://docs.python.org/3.4/library/math.html#math.modf
math trunc	A							https://docs.python.org			<pre><code>
math.trunc(x)</code></pre><br>Return the Real value x truncated to an Integral (usually an integer). Delegates to x.__trunc__().	https://docs.python.org/3.4/library/math.html#math.trunc
math exp	A							https://docs.python.org			<pre><code>
math.exp(x)</code></pre><br>Return e**x.	https://docs.python.org/3.4/library/math.html#math.exp
math expm1	A							https://docs.python.org			<pre><code>
math.expm1(x)</code></pre><br>Return e**x - 1. For small floats x, the subtraction in exp(x) - 1 can result in a significant loss of precision; the expm1() function provides a way to compute this quantity to full precision:	https://docs.python.org/3.4/library/math.html#math.expm1
math log	A							https://docs.python.org			<pre><code>
math.log(x[, base])</code></pre><br>With one argument, return the natural logarithm of x (to base e).	https://docs.python.org/3.4/library/math.html#math.log
math log1p	A							https://docs.python.org			<pre><code>
math.log1p(x)</code></pre><br>Return the natural logarithm of 1+x (base e). The result is calculated in a way which is accurate for x near zero.	https://docs.python.org/3.4/library/math.html#math.log1p
math log2	A							https://docs.python.org			<pre><code>
math.log2(x)</code></pre><br>Return the base-2 logarithm of x. This is usually more accurate than log(x, 2).	https://docs.python.org/3.4/library/math.html#math.log2
math log10	A							https://docs.python.org			<pre><code>
math.log10(x)</code></pre><br>Return the base-10 logarithm of x. This is usually more accurate than log(x, 10).	https://docs.python.org/3.4/library/math.html#math.log10
math pow	A							https://docs.python.org			<pre><code>
math.pow(x, y)</code></pre><br>Return x raised to the power y. Exceptional cases follow Annex ‘F’ of the C99 standard as far as possible. In particular, pow(1.0, x) and pow(x, 0.0) always return 1.0, even when x is a zero or a NaN. If both x and y are finite, x is negative, and y is not an integer then pow(x, y) is undefined, and raises ValueError.	https://docs.python.org/3.4/library/math.html#math.pow
math sqrt	A							https://docs.python.org			<pre><code>
math.sqrt(x)</code></pre><br>Return the square root of x.	https://docs.python.org/3.4/library/math.html#math.sqrt
math acos	A							https://docs.python.org			<pre><code>
math.acos(x)</code></pre><br>Return the arc cosine of x, in radians.	https://docs.python.org/3.4/library/math.html#math.acos
math asin	A							https://docs.python.org			<pre><code>
math.asin(x)</code></pre><br>Return the arc sine of x, in radians.	https://docs.python.org/3.4/library/math.html#math.asin
math atan	A							https://docs.python.org			<pre><code>
math.atan(x)</code></pre><br>Return the arc tangent of x, in radians.	https://docs.python.org/3.4/library/math.html#math.atan
math atan2	A							https://docs.python.org			<pre><code>
math.atan2(y, x)</code></pre><br>Return atan(y / x), in radians. The result is between -pi and pi. The vector in the plane from the origin to point (x, y) makes this angle with the positive X axis. The point of atan2() is that the signs of both inputs are known to it, so it can compute the correct quadrant for the angle. For example, atan(1) and atan2(1, 1) are both pi/4, but atan2(-1, -1) is -3*pi/4.	https://docs.python.org/3.4/library/math.html#math.atan2
math cos	A							https://docs.python.org			<pre><code>
math.cos(x)</code></pre><br>Return the cosine of x radians.	https://docs.python.org/3.4/library/math.html#math.cos
math hypot	A							https://docs.python.org			<pre><code>
math.hypot(x, y)</code></pre><br>Return the Euclidean norm, sqrt(x*x + y*y). This is the length of the vector from the origin to point (x, y).	https://docs.python.org/3.4/library/math.html#math.hypot
math sin	A							https://docs.python.org			<pre><code>
math.sin(x)</code></pre><br>Return the sine of x radians.	https://docs.python.org/3.4/library/math.html#math.sin
math tan	A							https://docs.python.org			<pre><code>
math.tan(x)</code></pre><br>Return the tangent of x radians.	https://docs.python.org/3.4/library/math.html#math.tan
math degrees	A							https://docs.python.org			<pre><code>
math.degrees(x)</code></pre><br>Convert angle x from radians to degrees.	https://docs.python.org/3.4/library/math.html#math.degrees
math radians	A							https://docs.python.org			<pre><code>
math.radians(x)</code></pre><br>Convert angle x from degrees to radians.	https://docs.python.org/3.4/library/math.html#math.radians
math acosh	A							https://docs.python.org			<pre><code>
math.acosh(x)</code></pre><br>Return the inverse hyperbolic cosine of x.	https://docs.python.org/3.4/library/math.html#math.acosh
math asinh	A							https://docs.python.org			<pre><code>
math.asinh(x)</code></pre><br>Return the inverse hyperbolic sine of x.	https://docs.python.org/3.4/library/math.html#math.asinh
math atanh	A							https://docs.python.org			<pre><code>
math.atanh(x)</code></pre><br>Return the inverse hyperbolic tangent of x.	https://docs.python.org/3.4/library/math.html#math.atanh
math cosh	A							https://docs.python.org			<pre><code>
math.cosh(x)</code></pre><br>Return the hyperbolic cosine of x.	https://docs.python.org/3.4/library/math.html#math.cosh
math sinh	A							https://docs.python.org			<pre><code>
math.sinh(x)</code></pre><br>Return the hyperbolic sine of x.	https://docs.python.org/3.4/library/math.html#math.sinh
math tanh	A							https://docs.python.org			<pre><code>
math.tanh(x)</code></pre><br>Return the hyperbolic tangent of x.	https://docs.python.org/3.4/library/math.html#math.tanh
math erf	A							https://docs.python.org			<pre><code>
math.erf(x)</code></pre><br>Return the error function at x.	https://docs.python.org/3.4/library/math.html#math.erf
math erfc	A							https://docs.python.org			<pre><code>
math.erfc(x)</code></pre><br>Return the complementary error function at x. The complementary error function is defined as 1.0 - erf(x). It is used for large values of x where a subtraction from one would cause a loss of significance.	https://docs.python.org/3.4/library/math.html#math.erfc
math gamma	A							https://docs.python.org			<pre><code>
math.gamma(x)</code></pre><br>Return the Gamma function at x.	https://docs.python.org/3.4/library/math.html#math.gamma
math lgamma	A							https://docs.python.org			<pre><code>
math.lgamma(x)</code></pre><br>Return the natural logarithm of the absolute value of the Gamma function at x.	https://docs.python.org/3.4/library/math.html#math.lgamma
mimetypes guess_type	A							https://docs.python.org			<pre><code>
mimetypes.guess_type(url, strict=True)</code></pre><br>Guess the type of a file based on its filename or URL, given by url. The return value is a tuple (type, encoding) where type is None if the type can’t be guessed (missing or unknown suffix) or a string of the form 'type/subtype', usable for a MIME content-type header.	https://docs.python.org/3.4/library/mimetypes.html#mimetypes.guess_type
mimetypes guess_all_extensions	A							https://docs.python.org			<pre><code>
mimetypes.guess_all_extensions(type, strict=True)</code></pre><br>Guess the extensions for a file based on its MIME type, given by type. The return value is a list of strings giving all possible filename extensions, including the leading dot ('.'). The extensions are not guaranteed to have been associated with any particular data stream, but would be mapped to the MIME type type by guess_type().	https://docs.python.org/3.4/library/mimetypes.html#mimetypes.guess_all_extensions
mimetypes guess_extension	A							https://docs.python.org			<pre><code>
mimetypes.guess_extension(type, strict=True)</code></pre><br>Guess the extension for a file based on its MIME type, given by type. The return value is a string giving a filename extension, including the leading dot ('.'). The extension is not guaranteed to have been associated with any particular data stream, but would be mapped to the MIME type type by guess_type(). If no extension can be guessed for type, None is returned.	https://docs.python.org/3.4/library/mimetypes.html#mimetypes.guess_extension
mimetypes init	A							https://docs.python.org			<pre><code>
mimetypes.init(files=None)</code></pre><br>Initialize the internal data structures. If given, files must be a sequence of file names which should be used to augment the default type map. If omitted, the file names to use are taken from knownfiles; on Windows, the current registry settings are loaded. Each file named in files or knownfiles takes precedence over those named before it. Calling init() repeatedly is allowed.	https://docs.python.org/3.4/library/mimetypes.html#mimetypes.init
mimetypes read_mime_types	A							https://docs.python.org			<pre><code>
mimetypes.read_mime_types(filename)</code></pre><br>Load the type map given in the file filename, if it exists. The type map is returned as a dictionary mapping filename extensions, including the leading dot ('.'), to strings of the form 'type/subtype'. If the file filename does not exist or cannot be read, None is returned.	https://docs.python.org/3.4/library/mimetypes.html#mimetypes.read_mime_types
mimetypes add_type	A							https://docs.python.org			<pre><code>
mimetypes.add_type(type, ext, strict=True)</code></pre><br>Add a mapping from the MIME type type to the extension ext. When the extension is already known, the new type will replace the old one. When the type is already known the extension will be added to the list of known extensions.	https://docs.python.org/3.4/library/mimetypes.html#mimetypes.add_type
modulefinder AddPackagePath	A							https://docs.python.org			<pre><code>
modulefinder.AddPackagePath(pkg_name, path)</code></pre><br>Record that the package named pkg_name can be found in the specified path.	https://docs.python.org/3.4/library/modulefinder.html#modulefinder.AddPackagePath
modulefinder ReplacePackage	A							https://docs.python.org			<pre><code>
modulefinder.ReplacePackage(oldname, newname)</code></pre><br>Allows specifying that the module named oldname is in fact the package named newname.	https://docs.python.org/3.4/library/modulefinder.html#modulefinder.ReplacePackage
msilib FCICreate	A							https://docs.python.org			<pre><code>
msilib.FCICreate(cabname, files)</code></pre><br>Create a new CAB file named cabname. files must be a list of tuples, each containing the name of the file on disk, and the name of the file inside the CAB file.	https://docs.python.org/3.4/library/msilib.html#msilib.FCICreate
msilib UuidCreate	A							https://docs.python.org			<pre><code>
msilib.UuidCreate()</code></pre><br>Return the string representation of a new unique identifier. This wraps the Windows API functions UuidCreate() and UuidToString().	https://docs.python.org/3.4/library/msilib.html#msilib.UuidCreate
msilib OpenDatabase	A							https://docs.python.org			<pre><code>
msilib.OpenDatabase(path, persist)</code></pre><br>Return a new database object by calling MsiOpenDatabase.  path is the file name of the MSI file; persist can be one of the constants MSIDBOPEN_CREATEDIRECT, MSIDBOPEN_CREATE, MSIDBOPEN_DIRECT, MSIDBOPEN_READONLY, or MSIDBOPEN_TRANSACT, and may include the flag MSIDBOPEN_PATCHFILE. See the Microsoft documentation for the meaning of these flags; depending on the flags, an existing database is opened, or a new one created.	https://docs.python.org/3.4/library/msilib.html#msilib.OpenDatabase
msilib CreateRecord	A							https://docs.python.org			<pre><code>
msilib.CreateRecord(count)</code></pre><br>Return a new record object by calling MSICreateRecord(). count is the number of fields of the record.	https://docs.python.org/3.4/library/msilib.html#msilib.CreateRecord
msilib init_database	A							https://docs.python.org			<pre><code>
msilib.init_database(name, schema, ProductName, ProductCode, ProductVersion, Manufacturer)</code></pre><br>Create and return a new database name, initialize it with schema, and set the properties ProductName, ProductCode, ProductVersion, and Manufacturer.	https://docs.python.org/3.4/library/msilib.html#msilib.init_database
msilib add_data	A							https://docs.python.org			<pre><code>
msilib.add_data(database, table, records)</code></pre><br>Add all records to the table named table in database.	https://docs.python.org/3.4/library/msilib.html#msilib.add_data
msilib add_tables	A							https://docs.python.org			<pre><code>
msilib.add_tables(database, module)</code></pre><br>Add all table content from module to database. module must contain an attribute tables listing all tables for which content should be added, and one attribute per table that has the actual content.	https://docs.python.org/3.4/library/msilib.html#msilib.add_tables
msilib add_stream	A							https://docs.python.org			<pre><code>
msilib.add_stream(database, name, path)</code></pre><br>Add the file path into the _Stream table of database, with the stream name name.	https://docs.python.org/3.4/library/msilib.html#msilib.add_stream
msilib gen_uuid	A							https://docs.python.org			<pre><code>
msilib.gen_uuid()</code></pre><br>Return a new UUID, in the format that MSI typically requires (i.e. in curly braces, and with all hexdigits in upper-case).	https://docs.python.org/3.4/library/msilib.html#msilib.gen_uuid
msvcrt locking	A							https://docs.python.org			<pre><code>
msvcrt.locking(fd, mode, nbytes)</code></pre><br>Lock part of a file based on file descriptor fd from the C runtime. Raises OSError on failure. The locked region of the file extends from the current file position for nbytes bytes, and may continue beyond the end of the file. mode must be one of the LK_* constants listed below. Multiple regions in a file may be locked at the same time, but may not overlap. Adjacent regions are not merged; they must be unlocked individually.	https://docs.python.org/3.4/library/msvcrt.html#msvcrt.locking
msvcrt setmode	A							https://docs.python.org			<pre><code>
msvcrt.setmode(fd, flags)</code></pre><br>Set the line-end translation mode for the file descriptor fd. To set it to text mode, flags should be os.O_TEXT; for binary, it should be os.O_BINARY.	https://docs.python.org/3.4/library/msvcrt.html#msvcrt.setmode
msvcrt open_osfhandle	A							https://docs.python.org			<pre><code>
msvcrt.open_osfhandle(handle, flags)</code></pre><br>Create a C runtime file descriptor from the file handle handle. The flags parameter should be a bitwise OR of os.O_APPEND, os.O_RDONLY, and os.O_TEXT. The returned file descriptor may be used as a parameter to os.fdopen() to create a file object.	https://docs.python.org/3.4/library/msvcrt.html#msvcrt.open_osfhandle
msvcrt get_osfhandle	A							https://docs.python.org			<pre><code>
msvcrt.get_osfhandle(fd)</code></pre><br>Return the file handle for the file descriptor fd. Raises OSError if fd is not recognized.	https://docs.python.org/3.4/library/msvcrt.html#msvcrt.get_osfhandle
msvcrt kbhit	A							https://docs.python.org			<pre><code>
msvcrt.kbhit()</code></pre><br>Return true if a keypress is waiting to be read.	https://docs.python.org/3.4/library/msvcrt.html#msvcrt.kbhit
msvcrt getch	A							https://docs.python.org			<pre><code>
msvcrt.getch()</code></pre><br>Read a keypress and return the resulting character as a byte string. Nothing is echoed to the console. This call will block if a keypress is not already available, but will not wait for Enter to be pressed. If the pressed key was a special function key, this will return '\000' or '\xe0'; the next call will return the keycode. The Control-C keypress cannot be read with this function.	https://docs.python.org/3.4/library/msvcrt.html#msvcrt.getch
msvcrt getwch	A							https://docs.python.org			<pre><code>
msvcrt.getwch()</code></pre><br>Wide char variant of getch(), returning a Unicode value.	https://docs.python.org/3.4/library/msvcrt.html#msvcrt.getwch
msvcrt getche	A							https://docs.python.org			<pre><code>
msvcrt.getche()</code></pre><br>Similar to getch(), but the keypress will be echoed if it represents a printable character.	https://docs.python.org/3.4/library/msvcrt.html#msvcrt.getche
msvcrt getwche	A							https://docs.python.org			<pre><code>
msvcrt.getwche()</code></pre><br>Wide char variant of getche(), returning a Unicode value.	https://docs.python.org/3.4/library/msvcrt.html#msvcrt.getwche
msvcrt putch	A							https://docs.python.org			<pre><code>
msvcrt.putch(char)</code></pre><br>Print the byte string char to the console without buffering.	https://docs.python.org/3.4/library/msvcrt.html#msvcrt.putch
msvcrt putwch	A							https://docs.python.org			<pre><code>
msvcrt.putwch(unicode_char)</code></pre><br>Wide char variant of putch(), accepting a Unicode value.	https://docs.python.org/3.4/library/msvcrt.html#msvcrt.putwch
msvcrt ungetch	A							https://docs.python.org			<pre><code>
msvcrt.ungetch(char)</code></pre><br>Cause the byte string char to be “pushed back” into the console buffer; it will be the next character read by getch() or getche().	https://docs.python.org/3.4/library/msvcrt.html#msvcrt.ungetch
msvcrt ungetwch	A							https://docs.python.org			<pre><code>
msvcrt.ungetwch(unicode_char)</code></pre><br>Wide char variant of ungetch(), accepting a Unicode value.	https://docs.python.org/3.4/library/msvcrt.html#msvcrt.ungetwch
msvcrt heapmin	A							https://docs.python.org			<pre><code>
msvcrt.heapmin()</code></pre><br>Force the malloc() heap to clean itself up and return unused blocks to the operating system. On failure, this raises OSError.	https://docs.python.org/3.4/library/msvcrt.html#msvcrt.heapmin
msvcrt locking	A							https://docs.python.org			<pre><code>
msvcrt.locking(fd, mode, nbytes)</code></pre><br>Lock part of a file based on file descriptor fd from the C runtime. Raises OSError on failure. The locked region of the file extends from the current file position for nbytes bytes, and may continue beyond the end of the file. mode must be one of the LK_* constants listed below. Multiple regions in a file may be locked at the same time, but may not overlap. Adjacent regions are not merged; they must be unlocked individually.	https://docs.python.org/3.4/library/msvcrt.html#msvcrt.locking
msvcrt setmode	A							https://docs.python.org			<pre><code>
msvcrt.setmode(fd, flags)</code></pre><br>Set the line-end translation mode for the file descriptor fd. To set it to text mode, flags should be os.O_TEXT; for binary, it should be os.O_BINARY.	https://docs.python.org/3.4/library/msvcrt.html#msvcrt.setmode
msvcrt open_osfhandle	A							https://docs.python.org			<pre><code>
msvcrt.open_osfhandle(handle, flags)</code></pre><br>Create a C runtime file descriptor from the file handle handle. The flags parameter should be a bitwise OR of os.O_APPEND, os.O_RDONLY, and os.O_TEXT. The returned file descriptor may be used as a parameter to os.fdopen() to create a file object.	https://docs.python.org/3.4/library/msvcrt.html#msvcrt.open_osfhandle
msvcrt get_osfhandle	A							https://docs.python.org			<pre><code>
msvcrt.get_osfhandle(fd)</code></pre><br>Return the file handle for the file descriptor fd. Raises OSError if fd is not recognized.	https://docs.python.org/3.4/library/msvcrt.html#msvcrt.get_osfhandle
msvcrt kbhit	A							https://docs.python.org			<pre><code>
msvcrt.kbhit()</code></pre><br>Return true if a keypress is waiting to be read.	https://docs.python.org/3.4/library/msvcrt.html#msvcrt.kbhit
msvcrt getch	A							https://docs.python.org			<pre><code>
msvcrt.getch()</code></pre><br>Read a keypress and return the resulting character as a byte string. Nothing is echoed to the console. This call will block if a keypress is not already available, but will not wait for Enter to be pressed. If the pressed key was a special function key, this will return '\000' or '\xe0'; the next call will return the keycode. The Control-C keypress cannot be read with this function.	https://docs.python.org/3.4/library/msvcrt.html#msvcrt.getch
msvcrt getwch	A							https://docs.python.org			<pre><code>
msvcrt.getwch()</code></pre><br>Wide char variant of getch(), returning a Unicode value.	https://docs.python.org/3.4/library/msvcrt.html#msvcrt.getwch
msvcrt getche	A							https://docs.python.org			<pre><code>
msvcrt.getche()</code></pre><br>Similar to getch(), but the keypress will be echoed if it represents a printable character.	https://docs.python.org/3.4/library/msvcrt.html#msvcrt.getche
msvcrt getwche	A							https://docs.python.org			<pre><code>
msvcrt.getwche()</code></pre><br>Wide char variant of getche(), returning a Unicode value.	https://docs.python.org/3.4/library/msvcrt.html#msvcrt.getwche
msvcrt putch	A							https://docs.python.org			<pre><code>
msvcrt.putch(char)</code></pre><br>Print the byte string char to the console without buffering.	https://docs.python.org/3.4/library/msvcrt.html#msvcrt.putch
msvcrt putwch	A							https://docs.python.org			<pre><code>
msvcrt.putwch(unicode_char)</code></pre><br>Wide char variant of putch(), accepting a Unicode value.	https://docs.python.org/3.4/library/msvcrt.html#msvcrt.putwch
msvcrt ungetch	A							https://docs.python.org			<pre><code>
msvcrt.ungetch(char)</code></pre><br>Cause the byte string char to be “pushed back” into the console buffer; it will be the next character read by getch() or getche().	https://docs.python.org/3.4/library/msvcrt.html#msvcrt.ungetch
msvcrt ungetwch	A							https://docs.python.org			<pre><code>
msvcrt.ungetwch(unicode_char)</code></pre><br>Wide char variant of ungetch(), accepting a Unicode value.	https://docs.python.org/3.4/library/msvcrt.html#msvcrt.ungetwch
msvcrt heapmin	A							https://docs.python.org			<pre><code>
msvcrt.heapmin()</code></pre><br>Force the malloc() heap to clean itself up and return unused blocks to the operating system. On failure, this raises OSError.	https://docs.python.org/3.4/library/msvcrt.html#msvcrt.heapmin
multiprocessing Pipe	A							https://docs.python.org			<pre><code>
multiprocessing.Pipe([duplex])</code></pre><br>Returns a pair (conn1, conn2) of Connection objects representing the ends of a pipe.	https://docs.python.org/3.4/library/multiprocessing.html#multiprocessing.Pipe
multiprocessing active_children	A							https://docs.python.org			<pre><code>
multiprocessing.active_children()</code></pre><br>Return list of all live children of the current process.	https://docs.python.org/3.4/library/multiprocessing.html#multiprocessing.active_children
multiprocessing cpu_count	A							https://docs.python.org			<pre><code>
multiprocessing.cpu_count()</code></pre><br>Return the number of CPUs in the system. May raise NotImplementedError.	https://docs.python.org/3.4/library/multiprocessing.html#multiprocessing.cpu_count
multiprocessing current_process	A							https://docs.python.org			<pre><code>
multiprocessing.current_process()</code></pre><br>Return the Process object corresponding to the current process.	https://docs.python.org/3.4/library/multiprocessing.html#multiprocessing.current_process
multiprocessing freeze_support	A							https://docs.python.org			<pre><code>
multiprocessing.freeze_support()</code></pre><br>Add support for when a program which uses multiprocessing has been frozen to produce a Windows executable. (Has been tested with py2exe, PyInstaller and cx_Freeze.)	https://docs.python.org/3.4/library/multiprocessing.html#multiprocessing.freeze_support
multiprocessing get_all_start_methods	A							https://docs.python.org			<pre><code>
multiprocessing.get_all_start_methods()</code></pre><br>Returns a list of the supported start methods, the first of which is the default. The possible start methods are 'fork', 'spawn' and 'forkserver'. On Windows only 'spawn' is available. On Unix 'fork' and 'spawn' are always supported, with 'fork' being the default.	https://docs.python.org/3.4/library/multiprocessing.html#multiprocessing.get_all_start_methods
multiprocessing get_context	A							https://docs.python.org			<pre><code>
multiprocessing.get_context(method=None)</code></pre><br>Return a context object which has the same attributes as the multiprocessing module.	https://docs.python.org/3.4/library/multiprocessing.html#multiprocessing.get_context
multiprocessing get_start_method	A							https://docs.python.org			<pre><code>
multiprocessing.get_start_method(allow_none=False)</code></pre><br>Return the name of start method used for starting processes.	https://docs.python.org/3.4/library/multiprocessing.html#multiprocessing.get_start_method
multiprocessing set_executable	A							https://docs.python.org			<pre><code>
multiprocessing.set_executable()</code></pre><br>Sets the path of the Python interpreter to use when starting a child process. (By default sys.executable is used). Embedders will probably need to do some thing like	https://docs.python.org/3.4/library/multiprocessing.html#multiprocessing.set_executable
multiprocessing set_start_method	A							https://docs.python.org			<pre><code>
multiprocessing.set_start_method(method)</code></pre><br>Set the method which should be used to start child processes. method can be 'fork', 'spawn' or 'forkserver'.	https://docs.python.org/3.4/library/multiprocessing.html#multiprocessing.set_start_method
multiprocessing Value	A							https://docs.python.org			<pre><code>
multiprocessing.Value(typecode_or_type, *args, lock=True)</code></pre><br>Return a ctypes object allocated from shared memory. By default the return value is actually a synchronized wrapper for the object. The object itself can be accessed via the value attribute of a Value.	https://docs.python.org/3.4/library/multiprocessing.html#multiprocessing.Value
multiprocessing Array	A							https://docs.python.org			<pre><code>
multiprocessing.Array(typecode_or_type, size_or_initializer, *, lock=True)</code></pre><br>Return a ctypes array allocated from shared memory. By default the return value is actually a synchronized wrapper for the array.	https://docs.python.org/3.4/library/multiprocessing.html#multiprocessing.Array
multiprocessing.sharedctypes RawArray	A							https://docs.python.org			<pre><code>
multiprocessing.sharedctypes.RawArray(typecode_or_type, size_or_initializer)</code></pre><br>Return a ctypes array allocated from shared memory.	https://docs.python.org/3.4/library/multiprocessing.html#multiprocessing.sharedctypes.RawArray
multiprocessing.sharedctypes RawValue	A							https://docs.python.org			<pre><code>
multiprocessing.sharedctypes.RawValue(typecode_or_type, *args)</code></pre><br>Return a ctypes object allocated from shared memory.	https://docs.python.org/3.4/library/multiprocessing.html#multiprocessing.sharedctypes.RawValue
multiprocessing.sharedctypes Array	A							https://docs.python.org			<pre><code>
multiprocessing.sharedctypes.Array(typecode_or_type, size_or_initializer, *, lock=True)</code></pre><br>The same as RawArray() except that depending on the value of lock a process-safe synchronization wrapper may be returned instead of a raw ctypes array.	https://docs.python.org/3.4/library/multiprocessing.html#multiprocessing.sharedctypes.Array
multiprocessing.sharedctypes Value	A							https://docs.python.org			<pre><code>
multiprocessing.sharedctypes.Value(typecode_or_type, *args, lock=True)</code></pre><br>The same as RawValue() except that depending on the value of lock a process-safe synchronization wrapper may be returned instead of a raw ctypes object.	https://docs.python.org/3.4/library/multiprocessing.html#multiprocessing.sharedctypes.Value
multiprocessing.sharedctypes copy	A							https://docs.python.org			<pre><code>
multiprocessing.sharedctypes.copy(obj)</code></pre><br>Return a ctypes object allocated from shared memory which is a copy of the ctypes object obj.	https://docs.python.org/3.4/library/multiprocessing.html#multiprocessing.sharedctypes.copy
multiprocessing.sharedctypes synchronized	A							https://docs.python.org			<pre><code>
multiprocessing.sharedctypes.synchronized(obj[, lock])</code></pre><br>Return a process-safe wrapper object for a ctypes object which uses lock to synchronize access. If lock is None (the default) then a multiprocessing.RLock object is created automatically.	https://docs.python.org/3.4/library/multiprocessing.html#multiprocessing.sharedctypes.synchronized
multiprocessing Manager	A							https://docs.python.org			<pre><code>
multiprocessing.Manager()</code></pre><br>Returns a started SyncManager object which can be used for sharing objects between processes. The returned manager object corresponds to a spawned child process and has methods which will create shared objects and return corresponding proxies.	https://docs.python.org/3.4/library/multiprocessing.html#multiprocessing.sharedctypes.multiprocessing.Manager
multiprocessing.connection deliver_challenge	A							https://docs.python.org			<pre><code>
multiprocessing.connection.deliver_challenge(connection, authkey)</code></pre><br>Send a randomly generated message to the other end of the connection and wait for a reply.	https://docs.python.org/3.4/library/multiprocessing.html#multiprocessing.connection.deliver_challenge
multiprocessing.connection answer_challenge	A							https://docs.python.org			<pre><code>
multiprocessing.connection.answer_challenge(connection, authkey)</code></pre><br>Receive a message, calculate the digest of the message using authkey as the key, and then send the digest back.	https://docs.python.org/3.4/library/multiprocessing.html#multiprocessing.connection.answer_challenge
multiprocessing.connection Client	A							https://docs.python.org			<pre><code>
multiprocessing.connection.Client(address[, family[, authenticate[, authkey]]])</code></pre><br>Attempt to set up a connection to the listener which is using address address, returning a Connection.	https://docs.python.org/3.4/library/multiprocessing.html#multiprocessing.connection.Client
multiprocessing.connection wait	A							https://docs.python.org			<pre><code>
multiprocessing.connection.wait(object_list, timeout=None)</code></pre><br>Wait till an object in object_list is ready. Returns the list of those objects in object_list which are ready. If timeout is a float then the call blocks for at most that many seconds. If timeout is None then it will block for an unlimited period. A negative timeout is equivalent to a zero timeout.	https://docs.python.org/3.4/library/multiprocessing.html#multiprocessing.connection.wait
multiprocessing get_logger	A							https://docs.python.org			<pre><code>
multiprocessing.get_logger()</code></pre><br>Returns the logger used by multiprocessing. If necessary, a new one will be created.	https://docs.python.org/3.4/library/multiprocessing.html#multiprocessing.get_logger
multiprocessing log_to_stderr	A							https://docs.python.org			<pre><code>
multiprocessing.log_to_stderr()</code></pre><br>This function performs a call to get_logger() but in addition to returning the logger created by get_logger, it adds a handler which sends output to sys.stderr using format '[%(levelname)s/%(processName)s] %(message)s'.	https://docs.python.org/3.4/library/multiprocessing.html#multiprocessing.log_to_stderr
multiprocessing Pipe	A							https://docs.python.org			<pre><code>
multiprocessing.Pipe([duplex])</code></pre><br>Returns a pair (conn1, conn2) of Connection objects representing the ends of a pipe.	https://docs.python.org/3.4/library/multiprocessing.html#multiprocessing.Pipe
multiprocessing active_children	A							https://docs.python.org			<pre><code>
multiprocessing.active_children()</code></pre><br>Return list of all live children of the current process.	https://docs.python.org/3.4/library/multiprocessing.html#multiprocessing.active_children
multiprocessing cpu_count	A							https://docs.python.org			<pre><code>
multiprocessing.cpu_count()</code></pre><br>Return the number of CPUs in the system. May raise NotImplementedError.	https://docs.python.org/3.4/library/multiprocessing.html#multiprocessing.cpu_count
multiprocessing current_process	A							https://docs.python.org			<pre><code>
multiprocessing.current_process()</code></pre><br>Return the Process object corresponding to the current process.	https://docs.python.org/3.4/library/multiprocessing.html#multiprocessing.current_process
multiprocessing freeze_support	A							https://docs.python.org			<pre><code>
multiprocessing.freeze_support()</code></pre><br>Add support for when a program which uses multiprocessing has been frozen to produce a Windows executable. (Has been tested with py2exe, PyInstaller and cx_Freeze.)	https://docs.python.org/3.4/library/multiprocessing.html#multiprocessing.freeze_support
multiprocessing get_all_start_methods	A							https://docs.python.org			<pre><code>
multiprocessing.get_all_start_methods()</code></pre><br>Returns a list of the supported start methods, the first of which is the default. The possible start methods are 'fork', 'spawn' and 'forkserver'. On Windows only 'spawn' is available. On Unix 'fork' and 'spawn' are always supported, with 'fork' being the default.	https://docs.python.org/3.4/library/multiprocessing.html#multiprocessing.get_all_start_methods
multiprocessing get_context	A							https://docs.python.org			<pre><code>
multiprocessing.get_context(method=None)</code></pre><br>Return a context object which has the same attributes as the multiprocessing module.	https://docs.python.org/3.4/library/multiprocessing.html#multiprocessing.get_context
multiprocessing get_start_method	A							https://docs.python.org			<pre><code>
multiprocessing.get_start_method(allow_none=False)</code></pre><br>Return the name of start method used for starting processes.	https://docs.python.org/3.4/library/multiprocessing.html#multiprocessing.get_start_method
multiprocessing set_executable	A							https://docs.python.org			<pre><code>
multiprocessing.set_executable()</code></pre><br>Sets the path of the Python interpreter to use when starting a child process. (By default sys.executable is used). Embedders will probably need to do some thing like	https://docs.python.org/3.4/library/multiprocessing.html#multiprocessing.set_executable
multiprocessing set_start_method	A							https://docs.python.org			<pre><code>
multiprocessing.set_start_method(method)</code></pre><br>Set the method which should be used to start child processes. method can be 'fork', 'spawn' or 'forkserver'.	https://docs.python.org/3.4/library/multiprocessing.html#multiprocessing.set_start_method
multiprocessing Value	A							https://docs.python.org			<pre><code>
multiprocessing.Value(typecode_or_type, *args, lock=True)</code></pre><br>Return a ctypes object allocated from shared memory. By default the return value is actually a synchronized wrapper for the object. The object itself can be accessed via the value attribute of a Value.	https://docs.python.org/3.4/library/multiprocessing.html#multiprocessing.Value
multiprocessing Array	A							https://docs.python.org			<pre><code>
multiprocessing.Array(typecode_or_type, size_or_initializer, *, lock=True)</code></pre><br>Return a ctypes array allocated from shared memory. By default the return value is actually a synchronized wrapper for the array.	https://docs.python.org/3.4/library/multiprocessing.html#multiprocessing.Array
multiprocessing.sharedctypes RawArray	A							https://docs.python.org			<pre><code>
multiprocessing.sharedctypes.RawArray(typecode_or_type, size_or_initializer)</code></pre><br>Return a ctypes array allocated from shared memory.	https://docs.python.org/3.4/library/multiprocessing.html#multiprocessing.sharedctypes.RawArray
multiprocessing.sharedctypes RawValue	A							https://docs.python.org			<pre><code>
multiprocessing.sharedctypes.RawValue(typecode_or_type, *args)</code></pre><br>Return a ctypes object allocated from shared memory.	https://docs.python.org/3.4/library/multiprocessing.html#multiprocessing.sharedctypes.RawValue
multiprocessing.sharedctypes Array	A							https://docs.python.org			<pre><code>
multiprocessing.sharedctypes.Array(typecode_or_type, size_or_initializer, *, lock=True)</code></pre><br>The same as RawArray() except that depending on the value of lock a process-safe synchronization wrapper may be returned instead of a raw ctypes array.	https://docs.python.org/3.4/library/multiprocessing.html#multiprocessing.sharedctypes.Array
multiprocessing.sharedctypes Value	A							https://docs.python.org			<pre><code>
multiprocessing.sharedctypes.Value(typecode_or_type, *args, lock=True)</code></pre><br>The same as RawValue() except that depending on the value of lock a process-safe synchronization wrapper may be returned instead of a raw ctypes object.	https://docs.python.org/3.4/library/multiprocessing.html#multiprocessing.sharedctypes.Value
multiprocessing.sharedctypes copy	A							https://docs.python.org			<pre><code>
multiprocessing.sharedctypes.copy(obj)</code></pre><br>Return a ctypes object allocated from shared memory which is a copy of the ctypes object obj.	https://docs.python.org/3.4/library/multiprocessing.html#multiprocessing.sharedctypes.copy
multiprocessing.sharedctypes synchronized	A							https://docs.python.org			<pre><code>
multiprocessing.sharedctypes.synchronized(obj[, lock])</code></pre><br>Return a process-safe wrapper object for a ctypes object which uses lock to synchronize access. If lock is None (the default) then a multiprocessing.RLock object is created automatically.	https://docs.python.org/3.4/library/multiprocessing.html#multiprocessing.sharedctypes.synchronized
multiprocessing Manager	A							https://docs.python.org			<pre><code>
multiprocessing.Manager()</code></pre><br>Returns a started SyncManager object which can be used for sharing objects between processes. The returned manager object corresponds to a spawned child process and has methods which will create shared objects and return corresponding proxies.	https://docs.python.org/3.4/library/multiprocessing.html#multiprocessing.sharedctypes.multiprocessing.Manager
multiprocessing.connection deliver_challenge	A							https://docs.python.org			<pre><code>
multiprocessing.connection.deliver_challenge(connection, authkey)</code></pre><br>Send a randomly generated message to the other end of the connection and wait for a reply.	https://docs.python.org/3.4/library/multiprocessing.html#multiprocessing.connection.deliver_challenge
multiprocessing.connection answer_challenge	A							https://docs.python.org			<pre><code>
multiprocessing.connection.answer_challenge(connection, authkey)</code></pre><br>Receive a message, calculate the digest of the message using authkey as the key, and then send the digest back.	https://docs.python.org/3.4/library/multiprocessing.html#multiprocessing.connection.answer_challenge
multiprocessing.connection Client	A							https://docs.python.org			<pre><code>
multiprocessing.connection.Client(address[, family[, authenticate[, authkey]]])</code></pre><br>Attempt to set up a connection to the listener which is using address address, returning a Connection.	https://docs.python.org/3.4/library/multiprocessing.html#multiprocessing.connection.Client
multiprocessing.connection wait	A							https://docs.python.org			<pre><code>
multiprocessing.connection.wait(object_list, timeout=None)</code></pre><br>Wait till an object in object_list is ready. Returns the list of those objects in object_list which are ready. If timeout is a float then the call blocks for at most that many seconds. If timeout is None then it will block for an unlimited period. A negative timeout is equivalent to a zero timeout.	https://docs.python.org/3.4/library/multiprocessing.html#multiprocessing.connection.wait
multiprocessing get_logger	A							https://docs.python.org			<pre><code>
multiprocessing.get_logger()</code></pre><br>Returns the logger used by multiprocessing. If necessary, a new one will be created.	https://docs.python.org/3.4/library/multiprocessing.html#multiprocessing.get_logger
multiprocessing log_to_stderr	A							https://docs.python.org			<pre><code>
multiprocessing.log_to_stderr()</code></pre><br>This function performs a call to get_logger() but in addition to returning the logger created by get_logger, it adds a handler which sends output to sys.stderr using format '[%(levelname)s/%(processName)s] %(message)s'.	https://docs.python.org/3.4/library/multiprocessing.html#multiprocessing.log_to_stderr
multiprocessing Pipe	A							https://docs.python.org			<pre><code>
multiprocessing.Pipe([duplex])</code></pre><br>Returns a pair (conn1, conn2) of Connection objects representing the ends of a pipe.	https://docs.python.org/3.4/library/multiprocessing.html#multiprocessing.Pipe
multiprocessing active_children	A							https://docs.python.org			<pre><code>
multiprocessing.active_children()</code></pre><br>Return list of all live children of the current process.	https://docs.python.org/3.4/library/multiprocessing.html#multiprocessing.active_children
multiprocessing cpu_count	A							https://docs.python.org			<pre><code>
multiprocessing.cpu_count()</code></pre><br>Return the number of CPUs in the system. May raise NotImplementedError.	https://docs.python.org/3.4/library/multiprocessing.html#multiprocessing.cpu_count
multiprocessing current_process	A							https://docs.python.org			<pre><code>
multiprocessing.current_process()</code></pre><br>Return the Process object corresponding to the current process.	https://docs.python.org/3.4/library/multiprocessing.html#multiprocessing.current_process
multiprocessing freeze_support	A							https://docs.python.org			<pre><code>
multiprocessing.freeze_support()</code></pre><br>Add support for when a program which uses multiprocessing has been frozen to produce a Windows executable. (Has been tested with py2exe, PyInstaller and cx_Freeze.)	https://docs.python.org/3.4/library/multiprocessing.html#multiprocessing.freeze_support
multiprocessing get_all_start_methods	A							https://docs.python.org			<pre><code>
multiprocessing.get_all_start_methods()</code></pre><br>Returns a list of the supported start methods, the first of which is the default. The possible start methods are 'fork', 'spawn' and 'forkserver'. On Windows only 'spawn' is available. On Unix 'fork' and 'spawn' are always supported, with 'fork' being the default.	https://docs.python.org/3.4/library/multiprocessing.html#multiprocessing.get_all_start_methods
multiprocessing get_context	A							https://docs.python.org			<pre><code>
multiprocessing.get_context(method=None)</code></pre><br>Return a context object which has the same attributes as the multiprocessing module.	https://docs.python.org/3.4/library/multiprocessing.html#multiprocessing.get_context
multiprocessing get_start_method	A							https://docs.python.org			<pre><code>
multiprocessing.get_start_method(allow_none=False)</code></pre><br>Return the name of start method used for starting processes.	https://docs.python.org/3.4/library/multiprocessing.html#multiprocessing.get_start_method
multiprocessing set_executable	A							https://docs.python.org			<pre><code>
multiprocessing.set_executable()</code></pre><br>Sets the path of the Python interpreter to use when starting a child process. (By default sys.executable is used). Embedders will probably need to do some thing like	https://docs.python.org/3.4/library/multiprocessing.html#multiprocessing.set_executable
multiprocessing set_start_method	A							https://docs.python.org			<pre><code>
multiprocessing.set_start_method(method)</code></pre><br>Set the method which should be used to start child processes. method can be 'fork', 'spawn' or 'forkserver'.	https://docs.python.org/3.4/library/multiprocessing.html#multiprocessing.set_start_method
multiprocessing Value	A							https://docs.python.org			<pre><code>
multiprocessing.Value(typecode_or_type, *args, lock=True)</code></pre><br>Return a ctypes object allocated from shared memory. By default the return value is actually a synchronized wrapper for the object. The object itself can be accessed via the value attribute of a Value.	https://docs.python.org/3.4/library/multiprocessing.html#multiprocessing.Value
multiprocessing Array	A							https://docs.python.org			<pre><code>
multiprocessing.Array(typecode_or_type, size_or_initializer, *, lock=True)</code></pre><br>Return a ctypes array allocated from shared memory. By default the return value is actually a synchronized wrapper for the array.	https://docs.python.org/3.4/library/multiprocessing.html#multiprocessing.Array
multiprocessing.sharedctypes RawArray	A							https://docs.python.org			<pre><code>
multiprocessing.sharedctypes.RawArray(typecode_or_type, size_or_initializer)</code></pre><br>Return a ctypes array allocated from shared memory.	https://docs.python.org/3.4/library/multiprocessing.html#multiprocessing.sharedctypes.RawArray
multiprocessing.sharedctypes RawValue	A							https://docs.python.org			<pre><code>
multiprocessing.sharedctypes.RawValue(typecode_or_type, *args)</code></pre><br>Return a ctypes object allocated from shared memory.	https://docs.python.org/3.4/library/multiprocessing.html#multiprocessing.sharedctypes.RawValue
multiprocessing.sharedctypes Array	A							https://docs.python.org			<pre><code>
multiprocessing.sharedctypes.Array(typecode_or_type, size_or_initializer, *, lock=True)</code></pre><br>The same as RawArray() except that depending on the value of lock a process-safe synchronization wrapper may be returned instead of a raw ctypes array.	https://docs.python.org/3.4/library/multiprocessing.html#multiprocessing.sharedctypes.Array
multiprocessing.sharedctypes Value	A							https://docs.python.org			<pre><code>
multiprocessing.sharedctypes.Value(typecode_or_type, *args, lock=True)</code></pre><br>The same as RawValue() except that depending on the value of lock a process-safe synchronization wrapper may be returned instead of a raw ctypes object.	https://docs.python.org/3.4/library/multiprocessing.html#multiprocessing.sharedctypes.Value
multiprocessing.sharedctypes copy	A							https://docs.python.org			<pre><code>
multiprocessing.sharedctypes.copy(obj)</code></pre><br>Return a ctypes object allocated from shared memory which is a copy of the ctypes object obj.	https://docs.python.org/3.4/library/multiprocessing.html#multiprocessing.sharedctypes.copy
multiprocessing.sharedctypes synchronized	A							https://docs.python.org			<pre><code>
multiprocessing.sharedctypes.synchronized(obj[, lock])</code></pre><br>Return a process-safe wrapper object for a ctypes object which uses lock to synchronize access. If lock is None (the default) then a multiprocessing.RLock object is created automatically.	https://docs.python.org/3.4/library/multiprocessing.html#multiprocessing.sharedctypes.synchronized
multiprocessing.sharedctypes RawArray	A							https://docs.python.org			<pre><code>
multiprocessing.sharedctypes.RawArray(typecode_or_type, size_or_initializer)</code></pre><br>Return a ctypes array allocated from shared memory.	https://docs.python.org/3.4/library/multiprocessing.html#multiprocessing.sharedctypes.RawArray
multiprocessing.sharedctypes RawValue	A							https://docs.python.org			<pre><code>
multiprocessing.sharedctypes.RawValue(typecode_or_type, *args)</code></pre><br>Return a ctypes object allocated from shared memory.	https://docs.python.org/3.4/library/multiprocessing.html#multiprocessing.sharedctypes.RawValue
multiprocessing.sharedctypes Array	A							https://docs.python.org			<pre><code>
multiprocessing.sharedctypes.Array(typecode_or_type, size_or_initializer, *, lock=True)</code></pre><br>The same as RawArray() except that depending on the value of lock a process-safe synchronization wrapper may be returned instead of a raw ctypes array.	https://docs.python.org/3.4/library/multiprocessing.html#multiprocessing.sharedctypes.Array
multiprocessing.sharedctypes Value	A							https://docs.python.org			<pre><code>
multiprocessing.sharedctypes.Value(typecode_or_type, *args, lock=True)</code></pre><br>The same as RawValue() except that depending on the value of lock a process-safe synchronization wrapper may be returned instead of a raw ctypes object.	https://docs.python.org/3.4/library/multiprocessing.html#multiprocessing.sharedctypes.Value
multiprocessing.sharedctypes copy	A							https://docs.python.org			<pre><code>
multiprocessing.sharedctypes.copy(obj)</code></pre><br>Return a ctypes object allocated from shared memory which is a copy of the ctypes object obj.	https://docs.python.org/3.4/library/multiprocessing.html#multiprocessing.sharedctypes.copy
multiprocessing.sharedctypes synchronized	A							https://docs.python.org			<pre><code>
multiprocessing.sharedctypes.synchronized(obj[, lock])</code></pre><br>Return a process-safe wrapper object for a ctypes object which uses lock to synchronize access. If lock is None (the default) then a multiprocessing.RLock object is created automatically.	https://docs.python.org/3.4/library/multiprocessing.html#multiprocessing.sharedctypes.synchronized
multiprocessing Manager	A							https://docs.python.org			<pre><code>
multiprocessing.Manager()</code></pre><br>Returns a started SyncManager object which can be used for sharing objects between processes. The returned manager object corresponds to a spawned child process and has methods which will create shared objects and return corresponding proxies.	https://docs.python.org/3.4/library/multiprocessing.html#multiprocessing.sharedctypes.multiprocessing.Manager
multiprocessing.connection deliver_challenge	A							https://docs.python.org			<pre><code>
multiprocessing.connection.deliver_challenge(connection, authkey)</code></pre><br>Send a randomly generated message to the other end of the connection and wait for a reply.	https://docs.python.org/3.4/library/multiprocessing.html#multiprocessing.connection.deliver_challenge
multiprocessing.connection answer_challenge	A							https://docs.python.org			<pre><code>
multiprocessing.connection.answer_challenge(connection, authkey)</code></pre><br>Receive a message, calculate the digest of the message using authkey as the key, and then send the digest back.	https://docs.python.org/3.4/library/multiprocessing.html#multiprocessing.connection.answer_challenge
multiprocessing.connection Client	A							https://docs.python.org			<pre><code>
multiprocessing.connection.Client(address[, family[, authenticate[, authkey]]])</code></pre><br>Attempt to set up a connection to the listener which is using address address, returning a Connection.	https://docs.python.org/3.4/library/multiprocessing.html#multiprocessing.connection.Client
multiprocessing.connection wait	A							https://docs.python.org			<pre><code>
multiprocessing.connection.wait(object_list, timeout=None)</code></pre><br>Wait till an object in object_list is ready. Returns the list of those objects in object_list which are ready. If timeout is a float then the call blocks for at most that many seconds. If timeout is None then it will block for an unlimited period. A negative timeout is equivalent to a zero timeout.	https://docs.python.org/3.4/library/multiprocessing.html#multiprocessing.connection.wait
multiprocessing get_logger	A							https://docs.python.org			<pre><code>
multiprocessing.get_logger()</code></pre><br>Returns the logger used by multiprocessing. If necessary, a new one will be created.	https://docs.python.org/3.4/library/multiprocessing.html#multiprocessing.get_logger
multiprocessing log_to_stderr	A							https://docs.python.org			<pre><code>
multiprocessing.log_to_stderr()</code></pre><br>This function performs a call to get_logger() but in addition to returning the logger created by get_logger, it adds a handler which sends output to sys.stderr using format '[%(levelname)s/%(processName)s] %(message)s'.	https://docs.python.org/3.4/library/multiprocessing.html#multiprocessing.log_to_stderr
nis match	A							https://docs.python.org			<pre><code>
nis.match(key, mapname, domain=default_domain)</code></pre><br>Return the match for key in map mapname, or raise an error (nis.error) if there is none. Both should be strings, key is 8-bit clean. Return value is an arbitrary array of bytes (may contain NULL and other joys).	https://docs.python.org/3.4/library/nis.html#nis.match
nis cat	A							https://docs.python.org			<pre><code>
nis.cat(mapname, domain=default_domain)</code></pre><br>Return a dictionary mapping key to value such that match(key, mapname)==value. Note that both keys and values of the dictionary are arbitrary arrays of bytes.	https://docs.python.org/3.4/library/nis.html#nis.cat
nis maps	A							https://docs.python.org			<pre><code>
nis.maps(domain=default_domain)</code></pre><br>Return a list of all valid maps.	https://docs.python.org/3.4/library/nis.html#nis.maps
nis get_default_domain	A							https://docs.python.org			<pre><code>
nis.get_default_domain()</code></pre><br>Return the system default NIS domain.	https://docs.python.org/3.4/library/nis.html#nis.get_default_domain
nntplib decode_header	A							https://docs.python.org			<pre><code>
nntplib.decode_header(header_str)</code></pre><br>Decode a header value, un-escaping any escaped non-ASCII characters. header_str must be a str object. The unescaped value is returned. Using this function is recommended to display some headers in a human readable form:	https://docs.python.org/3.4/library/nntplib.html#nntplib.decode_header
nntplib decode_header	A							https://docs.python.org			<pre><code>
nntplib.decode_header(header_str)</code></pre><br>Decode a header value, un-escaping any escaped non-ASCII characters. header_str must be a str object. The unescaped value is returned. Using this function is recommended to display some headers in a human readable form:	https://docs.python.org/3.4/library/nntplib.html#nntplib.decode_header
operator lt	A							https://docs.python.org			<pre><code>
operator.lt(a, b)</code></pre><br>Perform “rich comparisons” between a and b. Specifically, lt(a, b) is equivalent to a < b, le(a, b) is equivalent to a <= b, eq(a, b) is equivalent to a == b, ne(a, b) is equivalent to a != b, gt(a, b) is equivalent to a > b and ge(a, b) is equivalent to a >= b. Note that these functions can return any value, which may or may not be interpretable as a Boolean value. See Comparisons for more information about rich comparisons.	https://docs.python.org/3.4/library/operator.html#operator.lt
operator not_	A							https://docs.python.org			<pre><code>
operator.not_(obj)</code></pre><br>Return the outcome of not obj. (Note that there is no __not__() method for object instances; only the interpreter core defines this operation. The result is affected by the __bool__() and __len__() methods.)	https://docs.python.org/3.4/library/operator.html#operator.not_
operator truth	A							https://docs.python.org			<pre><code>
operator.truth(obj)</code></pre><br>Return True if obj is true, and False otherwise. This is equivalent to using the bool constructor.	https://docs.python.org/3.4/library/operator.html#operator.truth
operator is_	A							https://docs.python.org			<pre><code>
operator.is_(a, b)</code></pre><br>Return a is b. Tests object identity.	https://docs.python.org/3.4/library/operator.html#operator.is_
operator is_not	A							https://docs.python.org			<pre><code>
operator.is_not(a, b)</code></pre><br>Return a is not b. Tests object identity.	https://docs.python.org/3.4/library/operator.html#operator.is_not
operator abs	A							https://docs.python.org			<pre><code>
operator.abs(obj)</code></pre><br>Return the absolute value of obj.	https://docs.python.org/3.4/library/operator.html#operator.abs
operator add	A							https://docs.python.org			<pre><code>
operator.add(a, b)</code></pre><br>Return a + b, for a and b numbers.	https://docs.python.org/3.4/library/operator.html#operator.add
operator and_	A							https://docs.python.org			<pre><code>
operator.and_(a, b)</code></pre><br>Return the bitwise and of a and b.	https://docs.python.org/3.4/library/operator.html#operator.and_
operator floordiv	A							https://docs.python.org			<pre><code>
operator.floordiv(a, b)</code></pre><br>Return a // b.	https://docs.python.org/3.4/library/operator.html#operator.floordiv
operator index	A							https://docs.python.org			<pre><code>
operator.index(a)</code></pre><br>Return a converted to an integer. Equivalent to a.__index__().	https://docs.python.org/3.4/library/operator.html#operator.index
operator inv	A							https://docs.python.org			<pre><code>
operator.inv(obj)</code></pre><br>Return the bitwise inverse of the number obj. This is equivalent to ~obj.	https://docs.python.org/3.4/library/operator.html#operator.inv
operator lshift	A							https://docs.python.org			<pre><code>
operator.lshift(a, b)</code></pre><br>Return a shifted left by b.	https://docs.python.org/3.4/library/operator.html#operator.lshift
operator mod	A							https://docs.python.org			<pre><code>
operator.mod(a, b)</code></pre><br>Return a % b.	https://docs.python.org/3.4/library/operator.html#operator.mod
operator mul	A							https://docs.python.org			<pre><code>
operator.mul(a, b)</code></pre><br>Return a * b, for a and b numbers.	https://docs.python.org/3.4/library/operator.html#operator.mul
operator neg	A							https://docs.python.org			<pre><code>
operator.neg(obj)</code></pre><br>Return obj negated (-obj).	https://docs.python.org/3.4/library/operator.html#operator.neg
operator or_	A							https://docs.python.org			<pre><code>
operator.or_(a, b)</code></pre><br>Return the bitwise or of a and b.	https://docs.python.org/3.4/library/operator.html#operator.or_
operator pos	A							https://docs.python.org			<pre><code>
operator.pos(obj)</code></pre><br>Return obj positive (+obj).	https://docs.python.org/3.4/library/operator.html#operator.pos
operator pow	A							https://docs.python.org			<pre><code>
operator.pow(a, b)</code></pre><br>Return a ** b, for a and b numbers.	https://docs.python.org/3.4/library/operator.html#operator.pow
operator rshift	A							https://docs.python.org			<pre><code>
operator.rshift(a, b)</code></pre><br>Return a shifted right by b.	https://docs.python.org/3.4/library/operator.html#operator.rshift
operator sub	A							https://docs.python.org			<pre><code>
operator.sub(a, b)</code></pre><br>Return a - b.	https://docs.python.org/3.4/library/operator.html#operator.sub
operator truediv	A							https://docs.python.org			<pre><code>
operator.truediv(a, b)</code></pre><br>Return a / b where 2/3 is .66 rather than 0. This is also known as “true” division.	https://docs.python.org/3.4/library/operator.html#operator.truediv
operator xor	A							https://docs.python.org			<pre><code>
operator.xor(a, b)</code></pre><br>Return the bitwise exclusive or of a and b.	https://docs.python.org/3.4/library/operator.html#operator.xor
operator concat	A							https://docs.python.org			<pre><code>
operator.concat(a, b)</code></pre><br>Return a + b for a and b sequences.	https://docs.python.org/3.4/library/operator.html#operator.concat
operator contains	A							https://docs.python.org			<pre><code>
operator.contains(a, b)</code></pre><br>Return the outcome of the test b in a. Note the reversed operands.	https://docs.python.org/3.4/library/operator.html#operator.contains
operator countOf	A							https://docs.python.org			<pre><code>
operator.countOf(a, b)</code></pre><br>Return the number of occurrences of b in a.	https://docs.python.org/3.4/library/operator.html#operator.countOf
operator delitem	A							https://docs.python.org			<pre><code>
operator.delitem(a, b)</code></pre><br>Remove the value of a at index b.	https://docs.python.org/3.4/library/operator.html#operator.delitem
operator getitem	A							https://docs.python.org			<pre><code>
operator.getitem(a, b)</code></pre><br>Return the value of a at index b.	https://docs.python.org/3.4/library/operator.html#operator.getitem
operator indexOf	A							https://docs.python.org			<pre><code>
operator.indexOf(a, b)</code></pre><br>Return the index of the first of occurrence of b in a.	https://docs.python.org/3.4/library/operator.html#operator.indexOf
operator setitem	A							https://docs.python.org			<pre><code>
operator.setitem(a, b, c)</code></pre><br>Set the value of a at index b to c.	https://docs.python.org/3.4/library/operator.html#operator.setitem
operator length_hint	A							https://docs.python.org			<pre><code>
operator.length_hint(obj, default=0)</code></pre><br>Return an estimated length for the object o. First try to return its actual length, then an estimate using object.__length_hint__(), and finally return the default value.	https://docs.python.org/3.4/library/operator.html#operator.length_hint
operator attrgetter	A							https://docs.python.org			<pre><code>
operator.attrgetter(attr)</code></pre><br>Return a callable object that fetches attr from its operand. If more than one attribute is requested, returns a tuple of attributes. The attribute names can also contain dots. For example:	https://docs.python.org/3.4/library/operator.html#operator.attrgetter
operator itemgetter	A							https://docs.python.org			<pre><code>
operator.itemgetter(item)</code></pre><br>Return a callable object that fetches item from its operand using the operand’s __getitem__() method. If multiple items are specified, returns a tuple of lookup values. For example:	https://docs.python.org/3.4/library/operator.html#operator.itemgetter
operator methodcaller	A							https://docs.python.org			<pre><code>
operator.methodcaller(name[, args...])</code></pre><br>Return a callable object that calls the method name on its operand. If additional arguments and/or keyword arguments are given, they will be given to the method as well. For example:	https://docs.python.org/3.4/library/operator.html#operator.methodcaller
operator iadd	A							https://docs.python.org			<pre><code>
operator.iadd(a, b)</code></pre><br>a = iadd(a, b) is equivalent to a += b.	https://docs.python.org/3.4/library/operator.html#operator.iadd
operator iand	A							https://docs.python.org			<pre><code>
operator.iand(a, b)</code></pre><br>a = iand(a, b) is equivalent to a &= b.	https://docs.python.org/3.4/library/operator.html#operator.iand
operator iconcat	A							https://docs.python.org			<pre><code>
operator.iconcat(a, b)</code></pre><br>a = iconcat(a, b) is equivalent to a += b for a and b sequences.	https://docs.python.org/3.4/library/operator.html#operator.iconcat
operator ifloordiv	A							https://docs.python.org			<pre><code>
operator.ifloordiv(a, b)</code></pre><br>a = ifloordiv(a, b) is equivalent to a //= b.	https://docs.python.org/3.4/library/operator.html#operator.ifloordiv
operator ilshift	A							https://docs.python.org			<pre><code>
operator.ilshift(a, b)</code></pre><br>a = ilshift(a, b) is equivalent to a <<= b.	https://docs.python.org/3.4/library/operator.html#operator.ilshift
operator imod	A							https://docs.python.org			<pre><code>
operator.imod(a, b)</code></pre><br>a = imod(a, b) is equivalent to a %= b.	https://docs.python.org/3.4/library/operator.html#operator.imod
operator imul	A							https://docs.python.org			<pre><code>
operator.imul(a, b)</code></pre><br>a = imul(a, b) is equivalent to a *= b.	https://docs.python.org/3.4/library/operator.html#operator.imul
operator ior	A							https://docs.python.org			<pre><code>
operator.ior(a, b)</code></pre><br>a = ior(a, b) is equivalent to a |= b.	https://docs.python.org/3.4/library/operator.html#operator.ior
operator ipow	A							https://docs.python.org			<pre><code>
operator.ipow(a, b)</code></pre><br>a = ipow(a, b) is equivalent to a **= b.	https://docs.python.org/3.4/library/operator.html#operator.ipow
operator irshift	A							https://docs.python.org			<pre><code>
operator.irshift(a, b)</code></pre><br>a = irshift(a, b) is equivalent to a >>= b.	https://docs.python.org/3.4/library/operator.html#operator.irshift
operator isub	A							https://docs.python.org			<pre><code>
operator.isub(a, b)</code></pre><br>a = isub(a, b) is equivalent to a -= b.	https://docs.python.org/3.4/library/operator.html#operator.isub
operator itruediv	A							https://docs.python.org			<pre><code>
operator.itruediv(a, b)</code></pre><br>a = itruediv(a, b) is equivalent to a /= b.	https://docs.python.org/3.4/library/operator.html#operator.itruediv
operator ixor	A							https://docs.python.org			<pre><code>
operator.ixor(a, b)</code></pre><br>a = ixor(a, b) is equivalent to a ^= b.	https://docs.python.org/3.4/library/operator.html#operator.ixor
operator iadd	A							https://docs.python.org			<pre><code>
operator.iadd(a, b)</code></pre><br>a = iadd(a, b) is equivalent to a += b.	https://docs.python.org/3.4/library/operator.html#operator.iadd
operator iand	A							https://docs.python.org			<pre><code>
operator.iand(a, b)</code></pre><br>a = iand(a, b) is equivalent to a &= b.	https://docs.python.org/3.4/library/operator.html#operator.iand
operator iconcat	A							https://docs.python.org			<pre><code>
operator.iconcat(a, b)</code></pre><br>a = iconcat(a, b) is equivalent to a += b for a and b sequences.	https://docs.python.org/3.4/library/operator.html#operator.iconcat
operator ifloordiv	A							https://docs.python.org			<pre><code>
operator.ifloordiv(a, b)</code></pre><br>a = ifloordiv(a, b) is equivalent to a //= b.	https://docs.python.org/3.4/library/operator.html#operator.ifloordiv
operator ilshift	A							https://docs.python.org			<pre><code>
operator.ilshift(a, b)</code></pre><br>a = ilshift(a, b) is equivalent to a <<= b.	https://docs.python.org/3.4/library/operator.html#operator.ilshift
operator imod	A							https://docs.python.org			<pre><code>
operator.imod(a, b)</code></pre><br>a = imod(a, b) is equivalent to a %= b.	https://docs.python.org/3.4/library/operator.html#operator.imod
operator imul	A							https://docs.python.org			<pre><code>
operator.imul(a, b)</code></pre><br>a = imul(a, b) is equivalent to a *= b.	https://docs.python.org/3.4/library/operator.html#operator.imul
operator ior	A							https://docs.python.org			<pre><code>
operator.ior(a, b)</code></pre><br>a = ior(a, b) is equivalent to a |= b.	https://docs.python.org/3.4/library/operator.html#operator.ior
operator ipow	A							https://docs.python.org			<pre><code>
operator.ipow(a, b)</code></pre><br>a = ipow(a, b) is equivalent to a **= b.	https://docs.python.org/3.4/library/operator.html#operator.ipow
operator irshift	A							https://docs.python.org			<pre><code>
operator.irshift(a, b)</code></pre><br>a = irshift(a, b) is equivalent to a >>= b.	https://docs.python.org/3.4/library/operator.html#operator.irshift
operator isub	A							https://docs.python.org			<pre><code>
operator.isub(a, b)</code></pre><br>a = isub(a, b) is equivalent to a -= b.	https://docs.python.org/3.4/library/operator.html#operator.isub
operator itruediv	A							https://docs.python.org			<pre><code>
operator.itruediv(a, b)</code></pre><br>a = itruediv(a, b) is equivalent to a /= b.	https://docs.python.org/3.4/library/operator.html#operator.itruediv
operator ixor	A							https://docs.python.org			<pre><code>
operator.ixor(a, b)</code></pre><br>a = ixor(a, b) is equivalent to a ^= b.	https://docs.python.org/3.4/library/operator.html#operator.ixor
os ctermid	A							https://docs.python.org			<pre><code>
os.ctermid()</code></pre><br>Return the filename corresponding to the controlling terminal of the process.	https://docs.python.org/3.4/library/os.html#os.ctermid
os chdir	A							https://docs.python.org			<pre><code>
os.chdir(path)</code></pre><br>These functions are described in Files and Directories.	https://docs.python.org/3.4/library/os.html
os fsencode	A							https://docs.python.org			<pre><code>
os.fsencode(filename)</code></pre><br>Encode filename to the filesystem encoding with 'surrogateescape' error handler, or 'strict' on Windows; return bytes unchanged.	https://docs.python.org/3.4/library/os.html#os.fsencode
os fsdecode	A							https://docs.python.org			<pre><code>
os.fsdecode(filename)</code></pre><br>Decode filename from the filesystem encoding with 'surrogateescape' error handler, or 'strict' on Windows; return str unchanged.	https://docs.python.org/3.4/library/os.html#os.fsdecode
os getenv	A							https://docs.python.org			<pre><code>
os.getenv(key, default=None)</code></pre><br>Return the value of the environment variable key if it exists, or default if it doesn’t. key, default and the result are str.	https://docs.python.org/3.4/library/os.html#os.getenv
os getenvb	A							https://docs.python.org			<pre><code>
os.getenvb(key, default=None)</code></pre><br>Return the value of the environment variable key if it exists, or default if it doesn’t. key, default and the result are bytes.	https://docs.python.org/3.4/library/os.html#os.getenvb
os get_exec_path	A							https://docs.python.org			<pre><code>
os.get_exec_path(env=None)</code></pre><br>Returns the list of directories that will be searched for a named executable, similar to a shell, when launching a process. env, when specified, should be an environment variable dictionary to lookup the PATH in. By default, when env is None, environ is used.	https://docs.python.org/3.4/library/os.html#os.get_exec_path
os getegid	A							https://docs.python.org			<pre><code>
os.getegid()</code></pre><br>Return the effective group id of the current process. This corresponds to the “set id” bit on the file being executed in the current process.	https://docs.python.org/3.4/library/os.html#os.getegid
os geteuid	A							https://docs.python.org			<pre><code>
os.geteuid()</code></pre><br>Return the current process’s effective user id.	https://docs.python.org/3.4/library/os.html#os.geteuid
os getgid	A							https://docs.python.org			<pre><code>
os.getgid()</code></pre><br>Return the real group id of the current process.	https://docs.python.org/3.4/library/os.html#os.getgid
os getgrouplist	A							https://docs.python.org			<pre><code>
os.getgrouplist(user, group)</code></pre><br>Return list of group ids that user belongs to. If group is not in the list, it is included; typically, group is specified as the group ID field from the password record for user.	https://docs.python.org/3.4/library/os.html#os.getgrouplist
os getgroups	A							https://docs.python.org			<pre><code>
os.getgroups()</code></pre><br>Return list of supplemental group ids associated with the current process.	https://docs.python.org/3.4/library/os.html#os.getgroups
os getlogin	A							https://docs.python.org			<pre><code>
os.getlogin()</code></pre><br>Return the name of the user logged in on the controlling terminal of the process. For most purposes, it is more useful to use the environment variables LOGNAME or USERNAME to find out who the user is, or pwd.getpwuid(os.getuid())[0] to get the login name of the current real user id.	https://docs.python.org/3.4/library/os.html#os.getlogin
os getpgid	A							https://docs.python.org			<pre><code>
os.getpgid(pid)</code></pre><br>Return the process group id of the process with process id pid. If pid is 0, the process group id of the current process is returned.	https://docs.python.org/3.4/library/os.html#os.getpgid
os getpgrp	A							https://docs.python.org			<pre><code>
os.getpgrp()</code></pre><br>Return the id of the current process group.	https://docs.python.org/3.4/library/os.html#os.getpgrp
os getpid	A							https://docs.python.org			<pre><code>
os.getpid()</code></pre><br>Return the current process id.	https://docs.python.org/3.4/library/os.html#os.getpid
os getppid	A							https://docs.python.org			<pre><code>
os.getppid()</code></pre><br>Return the parent’s process id. When the parent process has exited, on Unix the id returned is the one of the init process (1), on Windows it is still the same id, which may be already reused by another process.	https://docs.python.org/3.4/library/os.html#os.getppid
os getpriority	A							https://docs.python.org			<pre><code>
os.getpriority(which, who)</code></pre><br>Get program scheduling priority. The value which is one of PRIO_PROCESS, PRIO_PGRP, or PRIO_USER, and who is interpreted relative to which (a process identifier for PRIO_PROCESS, process group identifier for PRIO_PGRP, and a user ID for PRIO_USER). A zero value for who denotes (respectively) the calling process, the process group of the calling process, or the real user ID of the calling process.	https://docs.python.org/3.4/library/os.html#os.getpriority
os getresuid	A							https://docs.python.org			<pre><code>
os.getresuid()</code></pre><br>Return a tuple (ruid, euid, suid) denoting the current process’s real, effective, and saved user ids.	https://docs.python.org/3.4/library/os.html#os.getresuid
os getresgid	A							https://docs.python.org			<pre><code>
os.getresgid()</code></pre><br>Return a tuple (rgid, egid, sgid) denoting the current process’s real, effective, and saved group ids.	https://docs.python.org/3.4/library/os.html#os.getresgid
os getuid	A							https://docs.python.org			<pre><code>
os.getuid()</code></pre><br>Return the current process’s real user id.	https://docs.python.org/3.4/library/os.html#os.getuid
os initgroups	A							https://docs.python.org			<pre><code>
os.initgroups(username, gid)</code></pre><br>Call the system initgroups() to initialize the group access list with all of the groups of which the specified username is a member, plus the specified group id.	https://docs.python.org/3.4/library/os.html#os.initgroups
os putenv	A							https://docs.python.org			<pre><code>
os.putenv(key, value)</code></pre><br>Set the environment variable named key to the string value. Such changes to the environment affect subprocesses started with os.system(), popen() or fork() and execv().	https://docs.python.org/3.4/library/os.html#os.putenv
os setegid	A							https://docs.python.org			<pre><code>
os.setegid(egid)</code></pre><br>Set the current process’s effective group id.	https://docs.python.org/3.4/library/os.html#os.setegid
os seteuid	A							https://docs.python.org			<pre><code>
os.seteuid(euid)</code></pre><br>Set the current process’s effective user id.	https://docs.python.org/3.4/library/os.html#os.seteuid
os setgid	A							https://docs.python.org			<pre><code>
os.setgid(gid)</code></pre><br>Set the current process’ group id.	https://docs.python.org/3.4/library/os.html#os.setgid
os setgroups	A							https://docs.python.org			<pre><code>
os.setgroups(groups)</code></pre><br>Set the list of supplemental group ids associated with the current process to groups. groups must be a sequence, and each element must be an integer identifying a group. This operation is typically available only to the superuser.	https://docs.python.org/3.4/library/os.html#os.setgroups
os setpgrp	A							https://docs.python.org			<pre><code>
os.setpgrp()</code></pre><br>Call the system call setpgrp() or setpgrp(0, 0) depending on which version is implemented (if any). See the Unix manual for the semantics.	https://docs.python.org/3.4/library/os.html#os.setpgrp
os setpgid	A							https://docs.python.org			<pre><code>
os.setpgid(pid, pgrp)</code></pre><br>Call the system call setpgid() to set the process group id of the process with id pid to the process group with id pgrp. See the Unix manual for the semantics.	https://docs.python.org/3.4/library/os.html#os.setpgid
os setpriority	A							https://docs.python.org			<pre><code>
os.setpriority(which, who, priority)</code></pre><br>Set program scheduling priority. The value which is one of PRIO_PROCESS, PRIO_PGRP, or PRIO_USER, and who is interpreted relative to which (a process identifier for PRIO_PROCESS, process group identifier for PRIO_PGRP, and a user ID for PRIO_USER). A zero value for who denotes (respectively) the calling process, the process group of the calling process, or the real user ID of the calling process. priority is a value in the range -20 to 19. The default priority is 0; lower priorities cause more favorable scheduling.	https://docs.python.org/3.4/library/os.html#os.setpriority
os setregid	A							https://docs.python.org			<pre><code>
os.setregid(rgid, egid)</code></pre><br>Set the current process’s real and effective group ids.	https://docs.python.org/3.4/library/os.html#os.setregid
os setresgid	A							https://docs.python.org			<pre><code>
os.setresgid(rgid, egid, sgid)</code></pre><br>Set the current process’s real, effective, and saved group ids.	https://docs.python.org/3.4/library/os.html#os.setresgid
os setresuid	A							https://docs.python.org			<pre><code>
os.setresuid(ruid, euid, suid)</code></pre><br>Set the current process’s real, effective, and saved user ids.	https://docs.python.org/3.4/library/os.html#os.setresuid
os setreuid	A							https://docs.python.org			<pre><code>
os.setreuid(ruid, euid)</code></pre><br>Set the current process’s real and effective user ids.	https://docs.python.org/3.4/library/os.html#os.setreuid
os getsid	A							https://docs.python.org			<pre><code>
os.getsid(pid)</code></pre><br>Call the system call getsid(). See the Unix manual for the semantics.	https://docs.python.org/3.4/library/os.html#os.getsid
os setsid	A							https://docs.python.org			<pre><code>
os.setsid()</code></pre><br>Call the system call setsid(). See the Unix manual for the semantics.	https://docs.python.org/3.4/library/os.html#os.setsid
os setuid	A							https://docs.python.org			<pre><code>
os.setuid(uid)</code></pre><br>Set the current process’s user id.	https://docs.python.org/3.4/library/os.html#os.setuid
os strerror	A							https://docs.python.org			<pre><code>
os.strerror(code)</code></pre><br>Return the error message corresponding to the error code in code. On platforms where strerror() returns NULL when given an unknown error number, ValueError is raised.	https://docs.python.org/3.4/library/os.html#os.strerror
os umask	A							https://docs.python.org			<pre><code>
os.umask(mask)</code></pre><br>Set the current numeric umask and return the previous umask.	https://docs.python.org/3.4/library/os.html#os.umask
os uname	A							https://docs.python.org			<pre><code>
os.uname()</code></pre><br>Returns information identifying the current operating system. The return value is an object with five attributes:	https://docs.python.org/3.4/library/os.html#os.uname
os unsetenv	A							https://docs.python.org			<pre><code>
os.unsetenv(key)</code></pre><br>Unset (delete) the environment variable named key. Such changes to the environment affect subprocesses started with os.system(), popen() or fork() and execv().	https://docs.python.org/3.4/library/os.html#os.unsetenv
os fdopen	A							https://docs.python.org			<pre><code>
os.fdopen(fd, *args, **kwargs)</code></pre><br>Return an open file object connected to the file descriptor fd. This is an alias of the open() built-in function and accepts the same arguments. The only difference is that the first argument of fdopen() must always be an integer.	https://docs.python.org/3.4/library/os.html#os.fdopen
os close	A							https://docs.python.org			<pre><code>
os.close(fd)</code></pre><br>Close file descriptor fd.	https://docs.python.org/3.4/library/os.html#os.close
os closerange	A							https://docs.python.org			<pre><code>
os.closerange(fd_low, fd_high)</code></pre><br>Close all file descriptors from fd_low (inclusive) to fd_high (exclusive), ignoring errors. Equivalent to (but much faster than):	https://docs.python.org/3.4/library/os.html#os.closerange
os device_encoding	A							https://docs.python.org			<pre><code>
os.device_encoding(fd)</code></pre><br>Return a string describing the encoding of the device associated with fd if it is connected to a terminal; else return None.	https://docs.python.org/3.4/library/os.html#os.device_encoding
os dup	A							https://docs.python.org			<pre><code>
os.dup(fd)</code></pre><br>Return a duplicate of file descriptor fd. The new file descriptor is non-inheritable.	https://docs.python.org/3.4/library/os.html#os.dup
os dup2	A							https://docs.python.org			<pre><code>
os.dup2(fd, fd2, inheritable=True)</code></pre><br>Duplicate file descriptor fd to fd2, closing the latter first if necessary. The file descriptor fd2 is inheritable by default, or non-inheritable if inheritable is False.	https://docs.python.org/3.4/library/os.html#os.dup2
os fchmod	A							https://docs.python.org			<pre><code>
os.fchmod(fd, mode)</code></pre><br>Change the mode of the file given by fd to the numeric mode. See the docs for chmod() for possible values of mode. As of Python 3.3, this is equivalent to os.chmod(fd, mode).	https://docs.python.org/3.4/library/os.html#os.fchmod
os fchown	A							https://docs.python.org			<pre><code>
os.fchown(fd, uid, gid)</code></pre><br>Change the owner and group id of the file given by fd to the numeric uid and gid. To leave one of the ids unchanged, set it to -1. See chown(). As of Python 3.3, this is equivalent to os.chown(fd, uid, gid).	https://docs.python.org/3.4/library/os.html#os.fchown
os fdatasync	A							https://docs.python.org			<pre><code>
os.fdatasync(fd)</code></pre><br>Force write of file with filedescriptor fd to disk. Does not force update of metadata.	https://docs.python.org/3.4/library/os.html#os.fdatasync
os fpathconf	A							https://docs.python.org			<pre><code>
os.fpathconf(fd, name)</code></pre><br>Return system configuration information relevant to an open file. name specifies the configuration value to retrieve; it may be a string which is the name of a defined system value; these names are specified in a number of standards (POSIX.1, Unix 95, Unix 98, and others). Some platforms define additional names as well. The names known to the host operating system are given in the pathconf_names dictionary. For configuration variables not included in that mapping, passing an integer for name is also accepted.	https://docs.python.org/3.4/library/os.html#os.fpathconf
os fstat	A							https://docs.python.org			<pre><code>
os.fstat(fd)</code></pre><br>Get the status of the file descriptor fd. Return a stat_result object.	https://docs.python.org/3.4/library/os.html#os.fstat
os fstatvfs	A							https://docs.python.org			<pre><code>
os.fstatvfs(fd)</code></pre><br>Return information about the filesystem containing the file associated with file descriptor fd, like statvfs(). As of Python 3.3, this is equivalent to os.statvfs(fd).	https://docs.python.org/3.4/library/os.html#os.fstatvfs
os fsync	A							https://docs.python.org			<pre><code>
os.fsync(fd)</code></pre><br>Force write of file with filedescriptor fd to disk. On Unix, this calls the native fsync() function; on Windows, the MS _commit() function.	https://docs.python.org/3.4/library/os.html#os.fsync
os ftruncate	A							https://docs.python.org			<pre><code>
os.ftruncate(fd, length)</code></pre><br>Truncate the file corresponding to file descriptor fd, so that it is at most length bytes in size. As of Python 3.3, this is equivalent to os.truncate(fd, length).	https://docs.python.org/3.4/library/os.html#os.ftruncate
os isatty	A							https://docs.python.org			<pre><code>
os.isatty(fd)</code></pre><br>Return True if the file descriptor fd is open and connected to a tty(-like) device, else False.	https://docs.python.org/3.4/library/os.html#os.isatty
os lockf	A							https://docs.python.org			<pre><code>
os.lockf(fd, cmd, len)</code></pre><br>Apply, test or remove a POSIX lock on an open file descriptor. fd is an open file descriptor. cmd specifies the command to use - one of F_LOCK, F_TLOCK, F_ULOCK or F_TEST. len specifies the section of the file to lock.	https://docs.python.org/3.4/library/os.html#os.lockf
os lseek	A							https://docs.python.org			<pre><code>
os.lseek(fd, pos, how)</code></pre><br>Set the current position of file descriptor fd to position pos, modified by how: SEEK_SET or 0 to set the position relative to the beginning of the file; SEEK_CUR or 1 to set it relative to the current position; SEEK_END or 2 to set it relative to the end of the file. Return the new cursor position in bytes, starting from the beginning.	https://docs.python.org/3.4/library/os.html#os.lseek
os open	A							https://docs.python.org			<pre><code>
os.open(path, flags, mode=0o777, *, dir_fd=None)</code></pre><br>Open the file path and set various flags according to flags and possibly its mode according to mode. When computing mode, the current umask value is first masked out. Return the file descriptor for the newly opened file. The new file descriptor is non-inheritable.	https://docs.python.org/3.4/library/os.html#os.open
os openpty	A							https://docs.python.org			<pre><code>
os.openpty()</code></pre><br>Open a new pseudo-terminal pair. Return a pair of file descriptors (master, slave) for the pty and the tty, respectively. The new file descriptors are non-inheritable. For a (slightly) more portable approach, use the pty module.	https://docs.python.org/3.4/library/os.html#os.openpty
os pipe	A							https://docs.python.org			<pre><code>
os.pipe()</code></pre><br>Create a pipe. Return a pair of file descriptors (r, w) usable for reading and writing, respectively. The new file descriptor is non-inheritable.	https://docs.python.org/3.4/library/os.html#os.pipe
os pipe2	A							https://docs.python.org			<pre><code>
os.pipe2(flags)</code></pre><br>Create a pipe with flags set atomically. flags can be constructed by ORing together one or more of these values: O_NONBLOCK, O_CLOEXEC. Return a pair of file descriptors (r, w) usable for reading and writing, respectively.	https://docs.python.org/3.4/library/os.html#os.pipe2
os posix_fallocate	A							https://docs.python.org			<pre><code>
os.posix_fallocate(fd, offset, len)</code></pre><br>Ensures that enough disk space is allocated for the file specified by fd starting from offset and continuing for len bytes.	https://docs.python.org/3.4/library/os.html#os.posix_fallocate
os posix_fadvise	A							https://docs.python.org			<pre><code>
os.posix_fadvise(fd, offset, len, advice)</code></pre><br>Announces an intention to access data in a specific pattern thus allowing the kernel to make optimizations. The advice applies to the region of the file specified by fd starting at offset and continuing for len bytes. advice is one of POSIX_FADV_NORMAL, POSIX_FADV_SEQUENTIAL, POSIX_FADV_RANDOM, POSIX_FADV_NOREUSE, POSIX_FADV_WILLNEED or POSIX_FADV_DONTNEED.	https://docs.python.org/3.4/library/os.html#os.posix_fadvise
os pread	A							https://docs.python.org			<pre><code>
os.pread(fd, buffersize, offset)</code></pre><br>Read from a file descriptor, fd, at a position of offset. It will read up to buffersize number of bytes. The file offset remains unchanged.	https://docs.python.org/3.4/library/os.html#os.pread
os pwrite	A							https://docs.python.org			<pre><code>
os.pwrite(fd, str, offset)</code></pre><br>Write bytestring to a file descriptor, fd, from offset, leaving the file offset unchanged.	https://docs.python.org/3.4/library/os.html#os.pwrite
os read	A							https://docs.python.org			<pre><code>
os.read(fd, n)</code></pre><br>Read at most n bytes from file descriptor fd. Return a bytestring containing the bytes read. If the end of the file referred to by fd has been reached, an empty bytes object is returned.	https://docs.python.org/3.4/library/os.html#os.read
os sendfile	A							https://docs.python.org			<pre><code>
os.sendfile(out, in, offset, count)</code></pre><br>Copy count bytes from file descriptor in to file descriptor out starting at offset. Return the number of bytes sent. When EOF is reached return 0.	https://docs.python.org/3.4/library/os.html#os.sendfile
os readv	A							https://docs.python.org			<pre><code>
os.readv(fd, buffers)</code></pre><br>Read from a file descriptor fd into a number of mutable bytes-like objects buffers. readv() will transfer data into each buffer until it is full and then move on to the next buffer in the sequence to hold the rest of the data. readv() returns the total number of bytes read (which may be less than the total capacity of all the objects).	https://docs.python.org/3.4/library/os.html#os.readv
os tcgetpgrp	A							https://docs.python.org			<pre><code>
os.tcgetpgrp(fd)</code></pre><br>Return the process group associated with the terminal given by fd (an open file descriptor as returned by os.open()).	https://docs.python.org/3.4/library/os.html#os.tcgetpgrp
os tcsetpgrp	A							https://docs.python.org			<pre><code>
os.tcsetpgrp(fd, pg)</code></pre><br>Set the process group associated with the terminal given by fd (an open file descriptor as returned by os.open()) to pg.	https://docs.python.org/3.4/library/os.html#os.tcsetpgrp
os ttyname	A							https://docs.python.org			<pre><code>
os.ttyname(fd)</code></pre><br>Return a string which specifies the terminal device associated with file descriptor fd. If fd is not associated with a terminal device, an exception is raised.	https://docs.python.org/3.4/library/os.html#os.ttyname
os write	A							https://docs.python.org			<pre><code>
os.write(fd, str)</code></pre><br>Write the bytestring in str to file descriptor fd. Return the number of bytes actually written.	https://docs.python.org/3.4/library/os.html#os.write
os writev	A							https://docs.python.org			<pre><code>
os.writev(fd, buffers)</code></pre><br>Write the contents of buffers to file descriptor fd. buffers must be a sequence of bytes-like objects. writev() writes the contents of each object to the file descriptor and returns the total number of bytes written.	https://docs.python.org/3.4/library/os.html#os.writev
os get_terminal_size	A							https://docs.python.org			<pre><code>
os.get_terminal_size(fd=STDOUT_FILENO)</code></pre><br>Return the size of the terminal window as (columns, lines), tuple of type terminal_size.	https://docs.python.org/3.4/library/os.html#os.get_terminal_size
os get_inheritable	A							https://docs.python.org			<pre><code>
os.get_inheritable(fd)</code></pre><br>Get the “inheritable” flag of the specified file descriptor (a boolean).	https://docs.python.org/3.4/library/os.html#os.get_inheritable
os set_inheritable	A							https://docs.python.org			<pre><code>
os.set_inheritable(fd, inheritable)</code></pre><br>Set the “inheritable” flag of the specified file descriptor.	https://docs.python.org/3.4/library/os.html#os.set_inheritable
os get_handle_inheritable	A							https://docs.python.org			<pre><code>
os.get_handle_inheritable(handle)</code></pre><br>Get the “inheritable” flag of the specified handle (a boolean).	https://docs.python.org/3.4/library/os.html#os.get_handle_inheritable
os set_handle_inheritable	A							https://docs.python.org			<pre><code>
os.set_handle_inheritable(handle, inheritable)</code></pre><br>Set the “inheritable” flag of the specified handle.	https://docs.python.org/3.4/library/os.html#os.set_handle_inheritable
os access	A							https://docs.python.org			<pre><code>
os.access(path, mode, *, dir_fd=None, effective_ids=False, follow_symlinks=True)</code></pre><br>Use the real uid/gid to test for access to path. Note that most operations will use the effective uid/gid, therefore this routine can be used in a suid/sgid environment to test if the invoking user has the specified access to path. mode should be F_OK to test the existence of path, or it can be the inclusive OR of one or more of R_OK, W_OK, and X_OK to test permissions. Return True if access is allowed, False if not. See the Unix man page access(2) for more information.	https://docs.python.org/3.4/library/os.html#os.access
os chdir	A							https://docs.python.org			<pre><code>
os.chdir(path)</code></pre><br>Change the current working directory to path.	https://docs.python.org/3.4/library/os.html#os.chdir
os chflags	A							https://docs.python.org			<pre><code>
os.chflags(path, flags, *, follow_symlinks=True)</code></pre><br>Set the flags of path to the numeric flags. flags may take a combination (bitwise OR) of the following values (as defined in the stat module):	https://docs.python.org/3.4/library/os.html#os.chflags
os chmod	A							https://docs.python.org			<pre><code>
os.chmod(path, mode, *, dir_fd=None, follow_symlinks=True)</code></pre><br>Change the mode of path to the numeric mode. mode may take one of the following values (as defined in the stat module) or bitwise ORed combinations of them:	https://docs.python.org/3.4/library/os.html#os.chmod
os chown	A							https://docs.python.org			<pre><code>
os.chown(path, uid, gid, *, dir_fd=None, follow_symlinks=True)</code></pre><br>Change the owner and group id of path to the numeric uid and gid. To leave one of the ids unchanged, set it to -1.	https://docs.python.org/3.4/library/os.html#os.chown
os chroot	A							https://docs.python.org			<pre><code>
os.chroot(path)</code></pre><br>Change the root directory of the current process to path.	https://docs.python.org/3.4/library/os.html#os.chroot
os fchdir	A							https://docs.python.org			<pre><code>
os.fchdir(fd)</code></pre><br>Change the current working directory to the directory represented by the file descriptor fd. The descriptor must refer to an opened directory, not an open file. As of Python 3.3, this is equivalent to os.chdir(fd).	https://docs.python.org/3.4/library/os.html#os.fchdir
os getcwd	A							https://docs.python.org			<pre><code>
os.getcwd()</code></pre><br>Return a string representing the current working directory.	https://docs.python.org/3.4/library/os.html#os.getcwd
os getcwdb	A							https://docs.python.org			<pre><code>
os.getcwdb()</code></pre><br>Return a bytestring representing the current working directory.	https://docs.python.org/3.4/library/os.html#os.getcwdb
os lchflags	A							https://docs.python.org			<pre><code>
os.lchflags(path, flags)</code></pre><br>Set the flags of path to the numeric flags, like chflags(), but do not follow symbolic links. As of Python 3.3, this is equivalent to os.chflags(path, flags, follow_symlinks=False).	https://docs.python.org/3.4/library/os.html#os.lchflags
os lchmod	A							https://docs.python.org			<pre><code>
os.lchmod(path, mode)</code></pre><br>Change the mode of path to the numeric mode. If path is a symlink, this affects the symlink rather than the target. See the docs for chmod() for possible values of mode. As of Python 3.3, this is equivalent to os.chmod(path, mode, follow_symlinks=False).	https://docs.python.org/3.4/library/os.html#os.lchmod
os lchown	A							https://docs.python.org			<pre><code>
os.lchown(path, uid, gid)</code></pre><br>Change the owner and group id of path to the numeric uid and gid. This function will not follow symbolic links. As of Python 3.3, this is equivalent to os.chown(path, uid, gid, follow_symlinks=False).	https://docs.python.org/3.4/library/os.html#os.lchown
os link	A							https://docs.python.org			<pre><code>
os.link(src, dst, *, src_dir_fd=None, dst_dir_fd=None, follow_symlinks=True)</code></pre><br>Create a hard link pointing to src named dst.	https://docs.python.org/3.4/library/os.html#os.link
os listdir	A							https://docs.python.org			<pre><code>
os.listdir(path='.')</code></pre><br>Return a list containing the names of the entries in the directory given by path. The list is in arbitrary order, and does not include the special entries '.' and '..' even if they are present in the directory.	https://docs.python.org/3.4/library/os.html#os.listdir
os lstat	A							https://docs.python.org			<pre><code>
os.lstat(path, *, dir_fd=None)</code></pre><br>Perform the equivalent of an lstat() system call on the given path. Similar to stat(), but does not follow symbolic links. Return a stat_result object.	https://docs.python.org/3.4/library/os.html#os.lstat
os mkdir	A							https://docs.python.org			<pre><code>
os.mkdir(path, mode=0o777, *, dir_fd=None)</code></pre><br>Create a directory named path with numeric mode mode.	https://docs.python.org/3.4/library/os.html#os.mkdir
os makedirs	A							https://docs.python.org			<pre><code>
os.makedirs(name, mode=0o777, exist_ok=False)</code></pre><br>Recursive directory creation function. Like mkdir(), but makes all intermediate-level directories needed to contain the leaf directory.	https://docs.python.org/3.4/library/os.html#os.makedirs
os mkfifo	A							https://docs.python.org			<pre><code>
os.mkfifo(path, mode=0o666, *, dir_fd=None)</code></pre><br>Create a FIFO (a named pipe) named path with numeric mode mode. The current umask value is first masked out from the mode.	https://docs.python.org/3.4/library/os.html#os.mkfifo
os mknod	A							https://docs.python.org			<pre><code>
os.mknod(path, mode=0o600, device=0, *, dir_fd=None)</code></pre><br>Create a filesystem node (file, device special file or named pipe) named path. mode specifies both the permissions to use and the type of node to be created, being combined (bitwise OR) with one of stat.S_IFREG, stat.S_IFCHR, stat.S_IFBLK, and stat.S_IFIFO (those constants are available in stat). For stat.S_IFCHR and stat.S_IFBLK, device defines the newly created device special file (probably using os.makedev()), otherwise it is ignored.	https://docs.python.org/3.4/library/os.html#os.mknod
os major	A							https://docs.python.org			<pre><code>
os.major(device)</code></pre><br>Extract the device major number from a raw device number (usually the st_dev or st_rdev field from stat).	https://docs.python.org/3.4/library/os.html#os.major
os minor	A							https://docs.python.org			<pre><code>
os.minor(device)</code></pre><br>Extract the device minor number from a raw device number (usually the st_dev or st_rdev field from stat).	https://docs.python.org/3.4/library/os.html#os.minor
os makedev	A							https://docs.python.org			<pre><code>
os.makedev(major, minor)</code></pre><br>Compose a raw device number from the major and minor device numbers.	https://docs.python.org/3.4/library/os.html#os.makedev
os pathconf	A							https://docs.python.org			<pre><code>
os.pathconf(path, name)</code></pre><br>Return system configuration information relevant to a named file. name specifies the configuration value to retrieve; it may be a string which is the name of a defined system value; these names are specified in a number of standards (POSIX.1, Unix 95, Unix 98, and others). Some platforms define additional names as well. The names known to the host operating system are given in the pathconf_names dictionary. For configuration variables not included in that mapping, passing an integer for name is also accepted.	https://docs.python.org/3.4/library/os.html#os.pathconf
os readlink	A							https://docs.python.org			<pre><code>
os.readlink(path, *, dir_fd=None)</code></pre><br>Return a string representing the path to which the symbolic link points. The result may be either an absolute or relative pathname; if it is relative, it may be converted to an absolute pathname using os.path.join(os.path.dirname(path), result).	https://docs.python.org/3.4/library/os.html#os.readlink
os remove	A							https://docs.python.org			<pre><code>
os.remove(path, *, dir_fd=None)</code></pre><br>Remove (delete) the file path. If path is a directory, OSError is raised. Use rmdir() to remove directories.	https://docs.python.org/3.4/library/os.html#os.remove
os removedirs	A							https://docs.python.org			<pre><code>
os.removedirs(name)</code></pre><br>Remove directories recursively. Works like rmdir() except that, if the leaf directory is successfully removed, removedirs() tries to successively remove every parent directory mentioned in path until an error is raised (which is ignored, because it generally means that a parent directory is not empty). For example, os.removedirs('foo/bar/baz') will first remove the directory 'foo/bar/baz', and then remove 'foo/bar' and 'foo' if they are empty. Raises OSError if the leaf directory could not be successfully removed.	https://docs.python.org/3.4/library/os.html#os.removedirs
os rename	A							https://docs.python.org			<pre><code>
os.rename(src, dst, *, src_dir_fd=None, dst_dir_fd=None)</code></pre><br>Rename the file or directory src to dst. If dst is a directory, OSError will be raised. On Unix, if dst exists and is a file, it will be replaced silently if the user has permission. The operation may fail on some Unix flavors if src and dst are on different filesystems. If successful, the renaming will be an atomic operation (this is a POSIX requirement). On Windows, if dst already exists, OSError will be raised even if it is a file.	https://docs.python.org/3.4/library/os.html#os.rename
os renames	A							https://docs.python.org			<pre><code>
os.renames(old, new)</code></pre><br>Recursive directory or file renaming function. Works like rename(), except creation of any intermediate directories needed to make the new pathname good is attempted first. After the rename, directories corresponding to rightmost path segments of the old name will be pruned away using removedirs().	https://docs.python.org/3.4/library/os.html#os.renames
os replace	A							https://docs.python.org			<pre><code>
os.replace(src, dst, *, src_dir_fd=None, dst_dir_fd=None)</code></pre><br>Rename the file or directory src to dst. If dst is a directory, OSError will be raised. If dst exists and is a file, it will be replaced silently if the user has permission. The operation may fail if src and dst are on different filesystems. If successful, the renaming will be an atomic operation (this is a POSIX requirement).	https://docs.python.org/3.4/library/os.html#os.replace
os rmdir	A							https://docs.python.org			<pre><code>
os.rmdir(path, *, dir_fd=None)</code></pre><br>Remove (delete) the directory path. Only works when the directory is empty, otherwise, OSError is raised. In order to remove whole directory trees, shutil.rmtree() can be used.	https://docs.python.org/3.4/library/os.html#os.rmdir
os stat	A							https://docs.python.org			<pre><code>
os.stat(path, *, dir_fd=None, follow_symlinks=True)</code></pre><br>Get the status of a file or a file descriptor. Perform the equivalent of a stat() system call on the given path. path may be specified as either a string or as an open file descriptor. Return a stat_result object.	https://docs.python.org/3.4/library/os.html#os.stat
os stat_float_times	A							https://docs.python.org			<pre><code>
os.stat_float_times([newvalue])</code></pre><br>Determine whether stat_result represents time stamps as float objects. If newvalue is True, future calls to stat() return floats, if it is False, future calls return ints. If newvalue is omitted, return the current setting.	https://docs.python.org/3.4/library/os.html#os.stat_float_times
os statvfs	A							https://docs.python.org			<pre><code>
os.statvfs(path)</code></pre><br>Perform a statvfs() system call on the given path. The return value is an object whose attributes describe the filesystem on the given path, and correspond to the members of the statvfs structure, namely: f_bsize, f_frsize, f_blocks, f_bfree, f_bavail, f_files, f_ffree, f_favail, f_flag, f_namemax.	https://docs.python.org/3.4/library/os.html#os.statvfs
os symlink	A							https://docs.python.org			<pre><code>
os.symlink(src, dst, target_is_directory=False, *, dir_fd=None)</code></pre><br>Create a symbolic link pointing to src named dst.	https://docs.python.org/3.4/library/os.html#os.symlink
os sync	A							https://docs.python.org			<pre><code>
os.sync()</code></pre><br>Force write of everything to disk.	https://docs.python.org/3.4/library/os.html#os.sync
os truncate	A							https://docs.python.org			<pre><code>
os.truncate(path, length)</code></pre><br>Truncate the file corresponding to path, so that it is at most length bytes in size.	https://docs.python.org/3.4/library/os.html#os.truncate
os unlink	A							https://docs.python.org			<pre><code>
os.unlink(path, *, dir_fd=None)</code></pre><br>Remove (delete) the file path. This function is identical to remove(); the unlink name is its traditional Unix name. Please see the documentation for remove() for further information.	https://docs.python.org/3.4/library/os.html#os.unlink
os utime	A							https://docs.python.org			<pre><code>
os.utime(path, times=None, *, [ns, ]dir_fd=None, follow_symlinks=True)</code></pre><br>Set the access and modified times of the file specified by path.	https://docs.python.org/3.4/library/os.html#os.utime
os walk	A							https://docs.python.org			<pre><code>
os.walk(top, topdown=True, onerror=None, followlinks=False)</code></pre><br>Generate the file names in a directory tree by walking the tree either top-down or bottom-up. For each directory in the tree rooted at directory top (including top itself), it yields a 3-tuple (dirpath, dirnames, filenames).	https://docs.python.org/3.4/library/os.html#os.walk
os fwalk	A							https://docs.python.org			<pre><code>
os.fwalk(top='.', topdown=True, onerror=None, *, follow_symlinks=False, dir_fd=None)</code></pre><br>This behaves exactly like walk(), except that it yields a 4-tuple (dirpath, dirnames, filenames, dirfd), and it supports dir_fd.	https://docs.python.org/3.4/library/os.html#os.fwalk
os getxattr	A							https://docs.python.org			<pre><code>
os.getxattr(path, attribute, *, follow_symlinks=True)</code></pre><br>Return the value of the extended filesystem attribute attribute for path. attribute can be bytes or str. If it is str, it is encoded with the filesystem encoding.	https://docs.python.org/3.4/library/os.html#os.getxattr
os listxattr	A							https://docs.python.org			<pre><code>
os.listxattr(path=None, *, follow_symlinks=True)</code></pre><br>Return a list of the extended filesystem attributes on path. The attributes in the list are represented as strings decoded with the filesystem encoding. If path is None, listxattr() will examine the current directory.	https://docs.python.org/3.4/library/os.html#os.listxattr
os removexattr	A							https://docs.python.org			<pre><code>
os.removexattr(path, attribute, *, follow_symlinks=True)</code></pre><br>Removes the extended filesystem attribute attribute from path. attribute should be bytes or str. If it is a string, it is encoded with the filesystem encoding.	https://docs.python.org/3.4/library/os.html#os.removexattr
os setxattr	A							https://docs.python.org			<pre><code>
os.setxattr(path, attribute, value, flags=0, *, follow_symlinks=True)</code></pre><br>Set the extended filesystem attribute attribute on path to value. attribute must be a bytes or str with no embedded NULs. If it is a str, it is encoded with the filesystem encoding. flags may be XATTR_REPLACE or XATTR_CREATE. If XATTR_REPLACE is given and the attribute does not exist, EEXISTS will be raised. If XATTR_CREATE is given and the attribute already exists, the attribute will not be created and ENODATA will be raised.	https://docs.python.org/3.4/library/os.html#os.setxattr
os abort	A							https://docs.python.org			<pre><code>
os.abort()</code></pre><br>Generate a SIGABRT signal to the current process. On Unix, the default behavior is to produce a core dump; on Windows, the process immediately returns an exit code of 3. Be aware that calling this function will not call the Python signal handler registered for SIGABRT with signal.signal().	https://docs.python.org/3.4/library/os.html#os.abort
os execl	A							https://docs.python.org			<pre><code>
os.execl(path, arg0, arg1, ...)</code></pre><br>These functions all execute a new program, replacing the current process; they do not return. On Unix, the new executable is loaded into the current process, and will have the same process id as the caller. Errors will be reported as OSError exceptions.	https://docs.python.org/3.4/library/os.html#os.execl
os _exit	A							https://docs.python.org			<pre><code>
os._exit(n)</code></pre><br>Exit the process with status n, without calling cleanup handlers, flushing stdio buffers, etc.	https://docs.python.org/3.4/library/os.html#os._exit
os fork	A							https://docs.python.org			<pre><code>
os.fork()</code></pre><br>Fork a child process. Return 0 in the child and the child’s process id in the parent. If an error occurs OSError is raised.	https://docs.python.org/3.4/library/os.html#os.fork
os forkpty	A							https://docs.python.org			<pre><code>
os.forkpty()</code></pre><br>Fork a child process, using a new pseudo-terminal as the child’s controlling terminal. Return a pair of (pid, fd), where pid is 0 in the child, the new child’s process id in the parent, and fd is the file descriptor of the master end of the pseudo-terminal. For a more portable approach, use the pty module. If an error occurs OSError is raised.	https://docs.python.org/3.4/library/os.html#os.forkpty
os kill	A							https://docs.python.org			<pre><code>
os.kill(pid, sig)</code></pre><br>Send signal sig to the process pid. Constants for the specific signals available on the host platform are defined in the signal module.	https://docs.python.org/3.4/library/os.html#os.kill
os killpg	A							https://docs.python.org			<pre><code>
os.killpg(pgid, sig)</code></pre><br>Send the signal sig to the process group pgid.	https://docs.python.org/3.4/library/os.html#os.killpg
os nice	A							https://docs.python.org			<pre><code>
os.nice(increment)</code></pre><br>Add increment to the process’s “niceness”. Return the new niceness.	https://docs.python.org/3.4/library/os.html#os.nice
os plock	A							https://docs.python.org			<pre><code>
os.plock(op)</code></pre><br>Lock program segments into memory. The value of op (defined in <sys/lock.h>) determines which segments are locked.	https://docs.python.org/3.4/library/os.html#os.plock
os popen	A							https://docs.python.org			<pre><code>
os.popen(cmd, mode='r', buffering=-1)</code></pre><br>Open a pipe to or from command cmd. The return value is an open file object connected to the pipe, which can be read or written depending on whether mode is 'r' (default) or 'w'. The buffering argument has the same meaning as the corresponding argument to the built-in open() function. The returned file object reads or writes text strings rather than bytes.	https://docs.python.org/3.4/library/os.html#os.popen
os spawnl	A							https://docs.python.org			<pre><code>
os.spawnl(mode, path, ...)</code></pre><br>Execute the program path in a new process.	https://docs.python.org/3.4/library/os.html#os.spawnl
os startfile	A							https://docs.python.org			<pre><code>
os.startfile(path[, operation])</code></pre><br>Start a file with its associated application.	https://docs.python.org/3.4/library/os.html#os.startfile
os system	A							https://docs.python.org			<pre><code>
os.system(command)</code></pre><br>Execute the command (a string) in a subshell. This is implemented by calling the Standard C function system(), and has the same limitations. Changes to sys.stdin, etc. are not reflected in the environment of the executed command. If command generates any output, it will be sent to the interpreter standard output stream.	https://docs.python.org/3.4/library/os.html#os.system
os times	A							https://docs.python.org			<pre><code>
os.times()</code></pre><br>Returns the current global process times. The return value is an object with five attributes:	https://docs.python.org/3.4/library/os.html#os.times
os wait	A							https://docs.python.org			<pre><code>
os.wait()</code></pre><br>Wait for completion of a child process, and return a tuple containing its pid and exit status indication: a 16-bit number, whose low byte is the signal number that killed the process, and whose high byte is the exit status (if the signal number is zero); the high bit of the low byte is set if a core file was produced.	https://docs.python.org/3.4/library/os.html#os.wait
os waitid	A							https://docs.python.org			<pre><code>
os.waitid(idtype, id, options)</code></pre><br>Wait for the completion of one or more child processes. idtype can be P_PID, P_PGID or P_ALL. id specifies the pid to wait on. options is constructed from the ORing of one or more of WEXITED, WSTOPPED or WCONTINUED and additionally may be ORed with WNOHANG or WNOWAIT. The return value is an object representing the data contained in the siginfo_t structure, namely: si_pid, si_uid, si_signo, si_status, si_code or None if WNOHANG is specified and there are no children in a waitable state.	https://docs.python.org/3.4/library/os.html#os.waitid
os waitpid	A							https://docs.python.org			<pre><code>
os.waitpid(pid, options)</code></pre><br>The details of this function differ on Unix and Windows.	https://docs.python.org/3.4/library/os.html#os.waitpid
os wait3	A							https://docs.python.org			<pre><code>
os.wait3(options)</code></pre><br>Similar to waitpid(), except no process id argument is given and a 3-element tuple containing the child’s process id, exit status indication, and resource usage information is returned. Refer to resource.getrusage() for details on resource usage information. The option argument is the same as that provided to waitpid() and wait4().	https://docs.python.org/3.4/library/os.html#os.wait3
os wait4	A							https://docs.python.org			<pre><code>
os.wait4(pid, options)</code></pre><br>Similar to waitpid(), except a 3-element tuple, containing the child’s process id, exit status indication, and resource usage information is returned. Refer to resource.getrusage() for details on resource usage information. The arguments to wait4() are the same as those provided to waitpid().	https://docs.python.org/3.4/library/os.html#os.wait4
os WCOREDUMP	A							https://docs.python.org			<pre><code>
os.WCOREDUMP(status)</code></pre><br>Return True if a core dump was generated for the process, otherwise return False.	https://docs.python.org/3.4/library/os.html#os.WCOREDUMP
os WIFCONTINUED	A							https://docs.python.org			<pre><code>
os.WIFCONTINUED(status)</code></pre><br>Return True if the process has been continued from a job control stop, otherwise return False.	https://docs.python.org/3.4/library/os.html#os.WIFCONTINUED
os WIFSTOPPED	A							https://docs.python.org			<pre><code>
os.WIFSTOPPED(status)</code></pre><br>Return True if the process has been stopped, otherwise return False.	https://docs.python.org/3.4/library/os.html#os.WIFSTOPPED
os WIFSIGNALED	A							https://docs.python.org			<pre><code>
os.WIFSIGNALED(status)</code></pre><br>Return True if the process exited due to a signal, otherwise return False.	https://docs.python.org/3.4/library/os.html#os.WIFSIGNALED
os WIFEXITED	A							https://docs.python.org			<pre><code>
os.WIFEXITED(status)</code></pre><br>Return True if the process exited using the exit(2) system call, otherwise return False.	https://docs.python.org/3.4/library/os.html#os.WIFEXITED
os WEXITSTATUS	A							https://docs.python.org			<pre><code>
os.WEXITSTATUS(status)</code></pre><br>If WIFEXITED(status) is true, return the integer parameter to the exit(2) system call. Otherwise, the return value is meaningless.	https://docs.python.org/3.4/library/os.html#os.WEXITSTATUS
os WSTOPSIG	A							https://docs.python.org			<pre><code>
os.WSTOPSIG(status)</code></pre><br>Return the signal which caused the process to stop.	https://docs.python.org/3.4/library/os.html#os.WSTOPSIG
os WTERMSIG	A							https://docs.python.org			<pre><code>
os.WTERMSIG(status)</code></pre><br>Return the signal which caused the process to exit.	https://docs.python.org/3.4/library/os.html#os.WTERMSIG
os sched_get_priority_min	A							https://docs.python.org			<pre><code>
os.sched_get_priority_min(policy)</code></pre><br>Get the minimum priority value for policy. policy is one of the scheduling policy constants above.	https://docs.python.org/3.4/library/os.html#os.sched_get_priority_min
os sched_get_priority_max	A							https://docs.python.org			<pre><code>
os.sched_get_priority_max(policy)</code></pre><br>Get the maximum priority value for policy. policy is one of the scheduling policy constants above.	https://docs.python.org/3.4/library/os.html#os.sched_get_priority_max
os sched_setscheduler	A							https://docs.python.org			<pre><code>
os.sched_setscheduler(pid, policy, param)</code></pre><br>Set the scheduling policy for the process with PID pid. A pid of 0 means the calling process. policy is one of the scheduling policy constants above. param is a sched_param instance.	https://docs.python.org/3.4/library/os.html#os.sched_setscheduler
os sched_getscheduler	A							https://docs.python.org			<pre><code>
os.sched_getscheduler(pid)</code></pre><br>Return the scheduling policy for the process with PID pid. A pid of 0 means the calling process. The result is one of the scheduling policy constants above.	https://docs.python.org/3.4/library/os.html#os.sched_getscheduler
os sched_setparam	A							https://docs.python.org			<pre><code>
os.sched_setparam(pid, param)</code></pre><br>Set a scheduling parameters for the process with PID pid. A pid of 0 means the calling process. param is a sched_param instance.	https://docs.python.org/3.4/library/os.html#os.sched_setparam
os sched_getparam	A							https://docs.python.org			<pre><code>
os.sched_getparam(pid)</code></pre><br>Return the scheduling parameters as a sched_param instance for the process with PID pid. A pid of 0 means the calling process.	https://docs.python.org/3.4/library/os.html#os.sched_getparam
os sched_rr_get_interval	A							https://docs.python.org			<pre><code>
os.sched_rr_get_interval(pid)</code></pre><br>Return the round-robin quantum in seconds for the process with PID pid. A pid of 0 means the calling process.	https://docs.python.org/3.4/library/os.html#os.sched_rr_get_interval
os sched_yield	A							https://docs.python.org			<pre><code>
os.sched_yield()</code></pre><br>Voluntarily relinquish the CPU.	https://docs.python.org/3.4/library/os.html#os.sched_yield
os sched_setaffinity	A							https://docs.python.org			<pre><code>
os.sched_setaffinity(pid, mask)</code></pre><br>Restrict the process with PID pid (or the current process if zero) to a set of CPUs. mask is an iterable of integers representing the set of CPUs to which the process should be restricted.	https://docs.python.org/3.4/library/os.html#os.sched_setaffinity
os sched_getaffinity	A							https://docs.python.org			<pre><code>
os.sched_getaffinity(pid)</code></pre><br>Return the set of CPUs the process with PID pid (or the current process if zero) is restricted to.	https://docs.python.org/3.4/library/os.html#os.sched_getaffinity
os confstr	A							https://docs.python.org			<pre><code>
os.confstr(name)</code></pre><br>Return string-valued system configuration values. name specifies the configuration value to retrieve; it may be a string which is the name of a defined system value; these names are specified in a number of standards (POSIX, Unix 95, Unix 98, and others). Some platforms define additional names as well. The names known to the host operating system are given as the keys of the confstr_names dictionary. For configuration variables not included in that mapping, passing an integer for name is also accepted.	https://docs.python.org/3.4/library/os.html#os.confstr
os cpu_count	A							https://docs.python.org			<pre><code>
os.cpu_count()</code></pre><br>Return the number of CPUs in the system. Returns None if undetermined.	https://docs.python.org/3.4/library/os.html#os.cpu_count
os getloadavg	A							https://docs.python.org			<pre><code>
os.getloadavg()</code></pre><br>Return the number of processes in the system run queue averaged over the last 1, 5, and 15 minutes or raises OSError if the load average was unobtainable.	https://docs.python.org/3.4/library/os.html#os.getloadavg
os sysconf	A							https://docs.python.org			<pre><code>
os.sysconf(name)</code></pre><br>Return integer-valued system configuration values. If the configuration value specified by name isn’t defined, -1 is returned. The comments regarding the name parameter for confstr() apply here as well; the dictionary that provides information on the known names is given by sysconf_names.	https://docs.python.org/3.4/library/os.html#os.sysconf
os urandom	A							https://docs.python.org			<pre><code>
os.urandom(n)</code></pre><br>Return a string of n random bytes suitable for cryptographic use.	https://docs.python.org/3.4/library/os.html#os.urandom
os ctermid	A							https://docs.python.org			<pre><code>
os.ctermid()</code></pre><br>Return the filename corresponding to the controlling terminal of the process.	https://docs.python.org/3.4/library/os.html#os.ctermid
os chdir	A							https://docs.python.org			<pre><code>
os.chdir(path)</code></pre><br>These functions are described in Files and Directories.	https://docs.python.org/3.4/library/os.html
os fsencode	A							https://docs.python.org			<pre><code>
os.fsencode(filename)</code></pre><br>Encode filename to the filesystem encoding with 'surrogateescape' error handler, or 'strict' on Windows; return bytes unchanged.	https://docs.python.org/3.4/library/os.html#os.fsencode
os fsdecode	A							https://docs.python.org			<pre><code>
os.fsdecode(filename)</code></pre><br>Decode filename from the filesystem encoding with 'surrogateescape' error handler, or 'strict' on Windows; return str unchanged.	https://docs.python.org/3.4/library/os.html#os.fsdecode
os getenv	A							https://docs.python.org			<pre><code>
os.getenv(key, default=None)</code></pre><br>Return the value of the environment variable key if it exists, or default if it doesn’t. key, default and the result are str.	https://docs.python.org/3.4/library/os.html#os.getenv
os getenvb	A							https://docs.python.org			<pre><code>
os.getenvb(key, default=None)</code></pre><br>Return the value of the environment variable key if it exists, or default if it doesn’t. key, default and the result are bytes.	https://docs.python.org/3.4/library/os.html#os.getenvb
os get_exec_path	A							https://docs.python.org			<pre><code>
os.get_exec_path(env=None)</code></pre><br>Returns the list of directories that will be searched for a named executable, similar to a shell, when launching a process. env, when specified, should be an environment variable dictionary to lookup the PATH in. By default, when env is None, environ is used.	https://docs.python.org/3.4/library/os.html#os.get_exec_path
os getegid	A							https://docs.python.org			<pre><code>
os.getegid()</code></pre><br>Return the effective group id of the current process. This corresponds to the “set id” bit on the file being executed in the current process.	https://docs.python.org/3.4/library/os.html#os.getegid
os geteuid	A							https://docs.python.org			<pre><code>
os.geteuid()</code></pre><br>Return the current process’s effective user id.	https://docs.python.org/3.4/library/os.html#os.geteuid
os getgid	A							https://docs.python.org			<pre><code>
os.getgid()</code></pre><br>Return the real group id of the current process.	https://docs.python.org/3.4/library/os.html#os.getgid
os getgrouplist	A							https://docs.python.org			<pre><code>
os.getgrouplist(user, group)</code></pre><br>Return list of group ids that user belongs to. If group is not in the list, it is included; typically, group is specified as the group ID field from the password record for user.	https://docs.python.org/3.4/library/os.html#os.getgrouplist
os getgroups	A							https://docs.python.org			<pre><code>
os.getgroups()</code></pre><br>Return list of supplemental group ids associated with the current process.	https://docs.python.org/3.4/library/os.html#os.getgroups
os getlogin	A							https://docs.python.org			<pre><code>
os.getlogin()</code></pre><br>Return the name of the user logged in on the controlling terminal of the process. For most purposes, it is more useful to use the environment variables LOGNAME or USERNAME to find out who the user is, or pwd.getpwuid(os.getuid())[0] to get the login name of the current real user id.	https://docs.python.org/3.4/library/os.html#os.getlogin
os getpgid	A							https://docs.python.org			<pre><code>
os.getpgid(pid)</code></pre><br>Return the process group id of the process with process id pid. If pid is 0, the process group id of the current process is returned.	https://docs.python.org/3.4/library/os.html#os.getpgid
os getpgrp	A							https://docs.python.org			<pre><code>
os.getpgrp()</code></pre><br>Return the id of the current process group.	https://docs.python.org/3.4/library/os.html#os.getpgrp
os getpid	A							https://docs.python.org			<pre><code>
os.getpid()</code></pre><br>Return the current process id.	https://docs.python.org/3.4/library/os.html#os.getpid
os getppid	A							https://docs.python.org			<pre><code>
os.getppid()</code></pre><br>Return the parent’s process id. When the parent process has exited, on Unix the id returned is the one of the init process (1), on Windows it is still the same id, which may be already reused by another process.	https://docs.python.org/3.4/library/os.html#os.getppid
os getpriority	A							https://docs.python.org			<pre><code>
os.getpriority(which, who)</code></pre><br>Get program scheduling priority. The value which is one of PRIO_PROCESS, PRIO_PGRP, or PRIO_USER, and who is interpreted relative to which (a process identifier for PRIO_PROCESS, process group identifier for PRIO_PGRP, and a user ID for PRIO_USER). A zero value for who denotes (respectively) the calling process, the process group of the calling process, or the real user ID of the calling process.	https://docs.python.org/3.4/library/os.html#os.getpriority
os getresuid	A							https://docs.python.org			<pre><code>
os.getresuid()</code></pre><br>Return a tuple (ruid, euid, suid) denoting the current process’s real, effective, and saved user ids.	https://docs.python.org/3.4/library/os.html#os.getresuid
os getresgid	A							https://docs.python.org			<pre><code>
os.getresgid()</code></pre><br>Return a tuple (rgid, egid, sgid) denoting the current process’s real, effective, and saved group ids.	https://docs.python.org/3.4/library/os.html#os.getresgid
os getuid	A							https://docs.python.org			<pre><code>
os.getuid()</code></pre><br>Return the current process’s real user id.	https://docs.python.org/3.4/library/os.html#os.getuid
os initgroups	A							https://docs.python.org			<pre><code>
os.initgroups(username, gid)</code></pre><br>Call the system initgroups() to initialize the group access list with all of the groups of which the specified username is a member, plus the specified group id.	https://docs.python.org/3.4/library/os.html#os.initgroups
os putenv	A							https://docs.python.org			<pre><code>
os.putenv(key, value)</code></pre><br>Set the environment variable named key to the string value. Such changes to the environment affect subprocesses started with os.system(), popen() or fork() and execv().	https://docs.python.org/3.4/library/os.html#os.putenv
os setegid	A							https://docs.python.org			<pre><code>
os.setegid(egid)</code></pre><br>Set the current process’s effective group id.	https://docs.python.org/3.4/library/os.html#os.setegid
os seteuid	A							https://docs.python.org			<pre><code>
os.seteuid(euid)</code></pre><br>Set the current process’s effective user id.	https://docs.python.org/3.4/library/os.html#os.seteuid
os setgid	A							https://docs.python.org			<pre><code>
os.setgid(gid)</code></pre><br>Set the current process’ group id.	https://docs.python.org/3.4/library/os.html#os.setgid
os setgroups	A							https://docs.python.org			<pre><code>
os.setgroups(groups)</code></pre><br>Set the list of supplemental group ids associated with the current process to groups. groups must be a sequence, and each element must be an integer identifying a group. This operation is typically available only to the superuser.	https://docs.python.org/3.4/library/os.html#os.setgroups
os setpgrp	A							https://docs.python.org			<pre><code>
os.setpgrp()</code></pre><br>Call the system call setpgrp() or setpgrp(0, 0) depending on which version is implemented (if any). See the Unix manual for the semantics.	https://docs.python.org/3.4/library/os.html#os.setpgrp
os setpgid	A							https://docs.python.org			<pre><code>
os.setpgid(pid, pgrp)</code></pre><br>Call the system call setpgid() to set the process group id of the process with id pid to the process group with id pgrp. See the Unix manual for the semantics.	https://docs.python.org/3.4/library/os.html#os.setpgid
os setpriority	A							https://docs.python.org			<pre><code>
os.setpriority(which, who, priority)</code></pre><br>Set program scheduling priority. The value which is one of PRIO_PROCESS, PRIO_PGRP, or PRIO_USER, and who is interpreted relative to which (a process identifier for PRIO_PROCESS, process group identifier for PRIO_PGRP, and a user ID for PRIO_USER). A zero value for who denotes (respectively) the calling process, the process group of the calling process, or the real user ID of the calling process. priority is a value in the range -20 to 19. The default priority is 0; lower priorities cause more favorable scheduling.	https://docs.python.org/3.4/library/os.html#os.setpriority
os setregid	A							https://docs.python.org			<pre><code>
os.setregid(rgid, egid)</code></pre><br>Set the current process’s real and effective group ids.	https://docs.python.org/3.4/library/os.html#os.setregid
os setresgid	A							https://docs.python.org			<pre><code>
os.setresgid(rgid, egid, sgid)</code></pre><br>Set the current process’s real, effective, and saved group ids.	https://docs.python.org/3.4/library/os.html#os.setresgid
os setresuid	A							https://docs.python.org			<pre><code>
os.setresuid(ruid, euid, suid)</code></pre><br>Set the current process’s real, effective, and saved user ids.	https://docs.python.org/3.4/library/os.html#os.setresuid
os setreuid	A							https://docs.python.org			<pre><code>
os.setreuid(ruid, euid)</code></pre><br>Set the current process’s real and effective user ids.	https://docs.python.org/3.4/library/os.html#os.setreuid
os getsid	A							https://docs.python.org			<pre><code>
os.getsid(pid)</code></pre><br>Call the system call getsid(). See the Unix manual for the semantics.	https://docs.python.org/3.4/library/os.html#os.getsid
os setsid	A							https://docs.python.org			<pre><code>
os.setsid()</code></pre><br>Call the system call setsid(). See the Unix manual for the semantics.	https://docs.python.org/3.4/library/os.html#os.setsid
os setuid	A							https://docs.python.org			<pre><code>
os.setuid(uid)</code></pre><br>Set the current process’s user id.	https://docs.python.org/3.4/library/os.html#os.setuid
os strerror	A							https://docs.python.org			<pre><code>
os.strerror(code)</code></pre><br>Return the error message corresponding to the error code in code. On platforms where strerror() returns NULL when given an unknown error number, ValueError is raised.	https://docs.python.org/3.4/library/os.html#os.strerror
os umask	A							https://docs.python.org			<pre><code>
os.umask(mask)</code></pre><br>Set the current numeric umask and return the previous umask.	https://docs.python.org/3.4/library/os.html#os.umask
os uname	A							https://docs.python.org			<pre><code>
os.uname()</code></pre><br>Returns information identifying the current operating system. The return value is an object with five attributes:	https://docs.python.org/3.4/library/os.html#os.uname
os unsetenv	A							https://docs.python.org			<pre><code>
os.unsetenv(key)</code></pre><br>Unset (delete) the environment variable named key. Such changes to the environment affect subprocesses started with os.system(), popen() or fork() and execv().	https://docs.python.org/3.4/library/os.html#os.unsetenv
os fdopen	A							https://docs.python.org			<pre><code>
os.fdopen(fd, *args, **kwargs)</code></pre><br>Return an open file object connected to the file descriptor fd. This is an alias of the open() built-in function and accepts the same arguments. The only difference is that the first argument of fdopen() must always be an integer.	https://docs.python.org/3.4/library/os.html#os.fdopen
os close	A							https://docs.python.org			<pre><code>
os.close(fd)</code></pre><br>Close file descriptor fd.	https://docs.python.org/3.4/library/os.html#os.close
os closerange	A							https://docs.python.org			<pre><code>
os.closerange(fd_low, fd_high)</code></pre><br>Close all file descriptors from fd_low (inclusive) to fd_high (exclusive), ignoring errors. Equivalent to (but much faster than):	https://docs.python.org/3.4/library/os.html#os.closerange
os device_encoding	A							https://docs.python.org			<pre><code>
os.device_encoding(fd)</code></pre><br>Return a string describing the encoding of the device associated with fd if it is connected to a terminal; else return None.	https://docs.python.org/3.4/library/os.html#os.device_encoding
os dup	A							https://docs.python.org			<pre><code>
os.dup(fd)</code></pre><br>Return a duplicate of file descriptor fd. The new file descriptor is non-inheritable.	https://docs.python.org/3.4/library/os.html#os.dup
os dup2	A							https://docs.python.org			<pre><code>
os.dup2(fd, fd2, inheritable=True)</code></pre><br>Duplicate file descriptor fd to fd2, closing the latter first if necessary. The file descriptor fd2 is inheritable by default, or non-inheritable if inheritable is False.	https://docs.python.org/3.4/library/os.html#os.dup2
os fchmod	A							https://docs.python.org			<pre><code>
os.fchmod(fd, mode)</code></pre><br>Change the mode of the file given by fd to the numeric mode. See the docs for chmod() for possible values of mode. As of Python 3.3, this is equivalent to os.chmod(fd, mode).	https://docs.python.org/3.4/library/os.html#os.fchmod
os fchown	A							https://docs.python.org			<pre><code>
os.fchown(fd, uid, gid)</code></pre><br>Change the owner and group id of the file given by fd to the numeric uid and gid. To leave one of the ids unchanged, set it to -1. See chown(). As of Python 3.3, this is equivalent to os.chown(fd, uid, gid).	https://docs.python.org/3.4/library/os.html#os.fchown
os fdatasync	A							https://docs.python.org			<pre><code>
os.fdatasync(fd)</code></pre><br>Force write of file with filedescriptor fd to disk. Does not force update of metadata.	https://docs.python.org/3.4/library/os.html#os.fdatasync
os fpathconf	A							https://docs.python.org			<pre><code>
os.fpathconf(fd, name)</code></pre><br>Return system configuration information relevant to an open file. name specifies the configuration value to retrieve; it may be a string which is the name of a defined system value; these names are specified in a number of standards (POSIX.1, Unix 95, Unix 98, and others). Some platforms define additional names as well. The names known to the host operating system are given in the pathconf_names dictionary. For configuration variables not included in that mapping, passing an integer for name is also accepted.	https://docs.python.org/3.4/library/os.html#os.fpathconf
os fstat	A							https://docs.python.org			<pre><code>
os.fstat(fd)</code></pre><br>Get the status of the file descriptor fd. Return a stat_result object.	https://docs.python.org/3.4/library/os.html#os.fstat
os fstatvfs	A							https://docs.python.org			<pre><code>
os.fstatvfs(fd)</code></pre><br>Return information about the filesystem containing the file associated with file descriptor fd, like statvfs(). As of Python 3.3, this is equivalent to os.statvfs(fd).	https://docs.python.org/3.4/library/os.html#os.fstatvfs
os fsync	A							https://docs.python.org			<pre><code>
os.fsync(fd)</code></pre><br>Force write of file with filedescriptor fd to disk. On Unix, this calls the native fsync() function; on Windows, the MS _commit() function.	https://docs.python.org/3.4/library/os.html#os.fsync
os ftruncate	A							https://docs.python.org			<pre><code>
os.ftruncate(fd, length)</code></pre><br>Truncate the file corresponding to file descriptor fd, so that it is at most length bytes in size. As of Python 3.3, this is equivalent to os.truncate(fd, length).	https://docs.python.org/3.4/library/os.html#os.ftruncate
os isatty	A							https://docs.python.org			<pre><code>
os.isatty(fd)</code></pre><br>Return True if the file descriptor fd is open and connected to a tty(-like) device, else False.	https://docs.python.org/3.4/library/os.html#os.isatty
os lockf	A							https://docs.python.org			<pre><code>
os.lockf(fd, cmd, len)</code></pre><br>Apply, test or remove a POSIX lock on an open file descriptor. fd is an open file descriptor. cmd specifies the command to use - one of F_LOCK, F_TLOCK, F_ULOCK or F_TEST. len specifies the section of the file to lock.	https://docs.python.org/3.4/library/os.html#os.lockf
os lseek	A							https://docs.python.org			<pre><code>
os.lseek(fd, pos, how)</code></pre><br>Set the current position of file descriptor fd to position pos, modified by how: SEEK_SET or 0 to set the position relative to the beginning of the file; SEEK_CUR or 1 to set it relative to the current position; SEEK_END or 2 to set it relative to the end of the file. Return the new cursor position in bytes, starting from the beginning.	https://docs.python.org/3.4/library/os.html#os.lseek
os open	A							https://docs.python.org			<pre><code>
os.open(path, flags, mode=0o777, *, dir_fd=None)</code></pre><br>Open the file path and set various flags according to flags and possibly its mode according to mode. When computing mode, the current umask value is first masked out. Return the file descriptor for the newly opened file. The new file descriptor is non-inheritable.	https://docs.python.org/3.4/library/os.html#os.open
os openpty	A							https://docs.python.org			<pre><code>
os.openpty()</code></pre><br>Open a new pseudo-terminal pair. Return a pair of file descriptors (master, slave) for the pty and the tty, respectively. The new file descriptors are non-inheritable. For a (slightly) more portable approach, use the pty module.	https://docs.python.org/3.4/library/os.html#os.openpty
os pipe	A							https://docs.python.org			<pre><code>
os.pipe()</code></pre><br>Create a pipe. Return a pair of file descriptors (r, w) usable for reading and writing, respectively. The new file descriptor is non-inheritable.	https://docs.python.org/3.4/library/os.html#os.pipe
os pipe2	A							https://docs.python.org			<pre><code>
os.pipe2(flags)</code></pre><br>Create a pipe with flags set atomically. flags can be constructed by ORing together one or more of these values: O_NONBLOCK, O_CLOEXEC. Return a pair of file descriptors (r, w) usable for reading and writing, respectively.	https://docs.python.org/3.4/library/os.html#os.pipe2
os posix_fallocate	A							https://docs.python.org			<pre><code>
os.posix_fallocate(fd, offset, len)</code></pre><br>Ensures that enough disk space is allocated for the file specified by fd starting from offset and continuing for len bytes.	https://docs.python.org/3.4/library/os.html#os.posix_fallocate
os posix_fadvise	A							https://docs.python.org			<pre><code>
os.posix_fadvise(fd, offset, len, advice)</code></pre><br>Announces an intention to access data in a specific pattern thus allowing the kernel to make optimizations. The advice applies to the region of the file specified by fd starting at offset and continuing for len bytes. advice is one of POSIX_FADV_NORMAL, POSIX_FADV_SEQUENTIAL, POSIX_FADV_RANDOM, POSIX_FADV_NOREUSE, POSIX_FADV_WILLNEED or POSIX_FADV_DONTNEED.	https://docs.python.org/3.4/library/os.html#os.posix_fadvise
os pread	A							https://docs.python.org			<pre><code>
os.pread(fd, buffersize, offset)</code></pre><br>Read from a file descriptor, fd, at a position of offset. It will read up to buffersize number of bytes. The file offset remains unchanged.	https://docs.python.org/3.4/library/os.html#os.pread
os pwrite	A							https://docs.python.org			<pre><code>
os.pwrite(fd, str, offset)</code></pre><br>Write bytestring to a file descriptor, fd, from offset, leaving the file offset unchanged.	https://docs.python.org/3.4/library/os.html#os.pwrite
os read	A							https://docs.python.org			<pre><code>
os.read(fd, n)</code></pre><br>Read at most n bytes from file descriptor fd. Return a bytestring containing the bytes read. If the end of the file referred to by fd has been reached, an empty bytes object is returned.	https://docs.python.org/3.4/library/os.html#os.read
os sendfile	A							https://docs.python.org			<pre><code>
os.sendfile(out, in, offset, count)</code></pre><br>Copy count bytes from file descriptor in to file descriptor out starting at offset. Return the number of bytes sent. When EOF is reached return 0.	https://docs.python.org/3.4/library/os.html#os.sendfile
os readv	A							https://docs.python.org			<pre><code>
os.readv(fd, buffers)</code></pre><br>Read from a file descriptor fd into a number of mutable bytes-like objects buffers. readv() will transfer data into each buffer until it is full and then move on to the next buffer in the sequence to hold the rest of the data. readv() returns the total number of bytes read (which may be less than the total capacity of all the objects).	https://docs.python.org/3.4/library/os.html#os.readv
os tcgetpgrp	A							https://docs.python.org			<pre><code>
os.tcgetpgrp(fd)</code></pre><br>Return the process group associated with the terminal given by fd (an open file descriptor as returned by os.open()).	https://docs.python.org/3.4/library/os.html#os.tcgetpgrp
os tcsetpgrp	A							https://docs.python.org			<pre><code>
os.tcsetpgrp(fd, pg)</code></pre><br>Set the process group associated with the terminal given by fd (an open file descriptor as returned by os.open()) to pg.	https://docs.python.org/3.4/library/os.html#os.tcsetpgrp
os ttyname	A							https://docs.python.org			<pre><code>
os.ttyname(fd)</code></pre><br>Return a string which specifies the terminal device associated with file descriptor fd. If fd is not associated with a terminal device, an exception is raised.	https://docs.python.org/3.4/library/os.html#os.ttyname
os write	A							https://docs.python.org			<pre><code>
os.write(fd, str)</code></pre><br>Write the bytestring in str to file descriptor fd. Return the number of bytes actually written.	https://docs.python.org/3.4/library/os.html#os.write
os writev	A							https://docs.python.org			<pre><code>
os.writev(fd, buffers)</code></pre><br>Write the contents of buffers to file descriptor fd. buffers must be a sequence of bytes-like objects. writev() writes the contents of each object to the file descriptor and returns the total number of bytes written.	https://docs.python.org/3.4/library/os.html#os.writev
os get_terminal_size	A							https://docs.python.org			<pre><code>
os.get_terminal_size(fd=STDOUT_FILENO)</code></pre><br>Return the size of the terminal window as (columns, lines), tuple of type terminal_size.	https://docs.python.org/3.4/library/os.html#os.get_terminal_size
os get_inheritable	A							https://docs.python.org			<pre><code>
os.get_inheritable(fd)</code></pre><br>Get the “inheritable” flag of the specified file descriptor (a boolean).	https://docs.python.org/3.4/library/os.html#os.get_inheritable
os set_inheritable	A							https://docs.python.org			<pre><code>
os.set_inheritable(fd, inheritable)</code></pre><br>Set the “inheritable” flag of the specified file descriptor.	https://docs.python.org/3.4/library/os.html#os.set_inheritable
os get_handle_inheritable	A							https://docs.python.org			<pre><code>
os.get_handle_inheritable(handle)</code></pre><br>Get the “inheritable” flag of the specified handle (a boolean).	https://docs.python.org/3.4/library/os.html#os.get_handle_inheritable
os set_handle_inheritable	A							https://docs.python.org			<pre><code>
os.set_handle_inheritable(handle, inheritable)</code></pre><br>Set the “inheritable” flag of the specified handle.	https://docs.python.org/3.4/library/os.html#os.set_handle_inheritable
os get_terminal_size	A							https://docs.python.org			<pre><code>
os.get_terminal_size(fd=STDOUT_FILENO)</code></pre><br>Return the size of the terminal window as (columns, lines), tuple of type terminal_size.	https://docs.python.org/3.4/library/os.html#os.get_terminal_size
os get_inheritable	A							https://docs.python.org			<pre><code>
os.get_inheritable(fd)</code></pre><br>Get the “inheritable” flag of the specified file descriptor (a boolean).	https://docs.python.org/3.4/library/os.html#os.get_inheritable
os set_inheritable	A							https://docs.python.org			<pre><code>
os.set_inheritable(fd, inheritable)</code></pre><br>Set the “inheritable” flag of the specified file descriptor.	https://docs.python.org/3.4/library/os.html#os.set_inheritable
os get_handle_inheritable	A							https://docs.python.org			<pre><code>
os.get_handle_inheritable(handle)</code></pre><br>Get the “inheritable” flag of the specified handle (a boolean).	https://docs.python.org/3.4/library/os.html#os.get_handle_inheritable
os set_handle_inheritable	A							https://docs.python.org			<pre><code>
os.set_handle_inheritable(handle, inheritable)</code></pre><br>Set the “inheritable” flag of the specified handle.	https://docs.python.org/3.4/library/os.html#os.set_handle_inheritable
os access	A							https://docs.python.org			<pre><code>
os.access(path, mode, *, dir_fd=None, effective_ids=False, follow_symlinks=True)</code></pre><br>Use the real uid/gid to test for access to path. Note that most operations will use the effective uid/gid, therefore this routine can be used in a suid/sgid environment to test if the invoking user has the specified access to path. mode should be F_OK to test the existence of path, or it can be the inclusive OR of one or more of R_OK, W_OK, and X_OK to test permissions. Return True if access is allowed, False if not. See the Unix man page access(2) for more information.	https://docs.python.org/3.4/library/os.html#os.access
os chdir	A							https://docs.python.org			<pre><code>
os.chdir(path)</code></pre><br>Change the current working directory to path.	https://docs.python.org/3.4/library/os.html#os.chdir
os chflags	A							https://docs.python.org			<pre><code>
os.chflags(path, flags, *, follow_symlinks=True)</code></pre><br>Set the flags of path to the numeric flags. flags may take a combination (bitwise OR) of the following values (as defined in the stat module):	https://docs.python.org/3.4/library/os.html#os.chflags
os chmod	A							https://docs.python.org			<pre><code>
os.chmod(path, mode, *, dir_fd=None, follow_symlinks=True)</code></pre><br>Change the mode of path to the numeric mode. mode may take one of the following values (as defined in the stat module) or bitwise ORed combinations of them:	https://docs.python.org/3.4/library/os.html#os.chmod
os chown	A							https://docs.python.org			<pre><code>
os.chown(path, uid, gid, *, dir_fd=None, follow_symlinks=True)</code></pre><br>Change the owner and group id of path to the numeric uid and gid. To leave one of the ids unchanged, set it to -1.	https://docs.python.org/3.4/library/os.html#os.chown
os chroot	A							https://docs.python.org			<pre><code>
os.chroot(path)</code></pre><br>Change the root directory of the current process to path.	https://docs.python.org/3.4/library/os.html#os.chroot
os fchdir	A							https://docs.python.org			<pre><code>
os.fchdir(fd)</code></pre><br>Change the current working directory to the directory represented by the file descriptor fd. The descriptor must refer to an opened directory, not an open file. As of Python 3.3, this is equivalent to os.chdir(fd).	https://docs.python.org/3.4/library/os.html#os.fchdir
os getcwd	A							https://docs.python.org			<pre><code>
os.getcwd()</code></pre><br>Return a string representing the current working directory.	https://docs.python.org/3.4/library/os.html#os.getcwd
os getcwdb	A							https://docs.python.org			<pre><code>
os.getcwdb()</code></pre><br>Return a bytestring representing the current working directory.	https://docs.python.org/3.4/library/os.html#os.getcwdb
os lchflags	A							https://docs.python.org			<pre><code>
os.lchflags(path, flags)</code></pre><br>Set the flags of path to the numeric flags, like chflags(), but do not follow symbolic links. As of Python 3.3, this is equivalent to os.chflags(path, flags, follow_symlinks=False).	https://docs.python.org/3.4/library/os.html#os.lchflags
os lchmod	A							https://docs.python.org			<pre><code>
os.lchmod(path, mode)</code></pre><br>Change the mode of path to the numeric mode. If path is a symlink, this affects the symlink rather than the target. See the docs for chmod() for possible values of mode. As of Python 3.3, this is equivalent to os.chmod(path, mode, follow_symlinks=False).	https://docs.python.org/3.4/library/os.html#os.lchmod
os lchown	A							https://docs.python.org			<pre><code>
os.lchown(path, uid, gid)</code></pre><br>Change the owner and group id of path to the numeric uid and gid. This function will not follow symbolic links. As of Python 3.3, this is equivalent to os.chown(path, uid, gid, follow_symlinks=False).	https://docs.python.org/3.4/library/os.html#os.lchown
os link	A							https://docs.python.org			<pre><code>
os.link(src, dst, *, src_dir_fd=None, dst_dir_fd=None, follow_symlinks=True)</code></pre><br>Create a hard link pointing to src named dst.	https://docs.python.org/3.4/library/os.html#os.link
os listdir	A							https://docs.python.org			<pre><code>
os.listdir(path='.')</code></pre><br>Return a list containing the names of the entries in the directory given by path. The list is in arbitrary order, and does not include the special entries '.' and '..' even if they are present in the directory.	https://docs.python.org/3.4/library/os.html#os.listdir
os lstat	A							https://docs.python.org			<pre><code>
os.lstat(path, *, dir_fd=None)</code></pre><br>Perform the equivalent of an lstat() system call on the given path. Similar to stat(), but does not follow symbolic links. Return a stat_result object.	https://docs.python.org/3.4/library/os.html#os.lstat
os mkdir	A							https://docs.python.org			<pre><code>
os.mkdir(path, mode=0o777, *, dir_fd=None)</code></pre><br>Create a directory named path with numeric mode mode.	https://docs.python.org/3.4/library/os.html#os.mkdir
os makedirs	A							https://docs.python.org			<pre><code>
os.makedirs(name, mode=0o777, exist_ok=False)</code></pre><br>Recursive directory creation function. Like mkdir(), but makes all intermediate-level directories needed to contain the leaf directory.	https://docs.python.org/3.4/library/os.html#os.makedirs
os mkfifo	A							https://docs.python.org			<pre><code>
os.mkfifo(path, mode=0o666, *, dir_fd=None)</code></pre><br>Create a FIFO (a named pipe) named path with numeric mode mode. The current umask value is first masked out from the mode.	https://docs.python.org/3.4/library/os.html#os.mkfifo
os mknod	A							https://docs.python.org			<pre><code>
os.mknod(path, mode=0o600, device=0, *, dir_fd=None)</code></pre><br>Create a filesystem node (file, device special file or named pipe) named path. mode specifies both the permissions to use and the type of node to be created, being combined (bitwise OR) with one of stat.S_IFREG, stat.S_IFCHR, stat.S_IFBLK, and stat.S_IFIFO (those constants are available in stat). For stat.S_IFCHR and stat.S_IFBLK, device defines the newly created device special file (probably using os.makedev()), otherwise it is ignored.	https://docs.python.org/3.4/library/os.html#os.mknod
os major	A							https://docs.python.org			<pre><code>
os.major(device)</code></pre><br>Extract the device major number from a raw device number (usually the st_dev or st_rdev field from stat).	https://docs.python.org/3.4/library/os.html#os.major
os minor	A							https://docs.python.org			<pre><code>
os.minor(device)</code></pre><br>Extract the device minor number from a raw device number (usually the st_dev or st_rdev field from stat).	https://docs.python.org/3.4/library/os.html#os.minor
os makedev	A							https://docs.python.org			<pre><code>
os.makedev(major, minor)</code></pre><br>Compose a raw device number from the major and minor device numbers.	https://docs.python.org/3.4/library/os.html#os.makedev
os pathconf	A							https://docs.python.org			<pre><code>
os.pathconf(path, name)</code></pre><br>Return system configuration information relevant to a named file. name specifies the configuration value to retrieve; it may be a string which is the name of a defined system value; these names are specified in a number of standards (POSIX.1, Unix 95, Unix 98, and others). Some platforms define additional names as well. The names known to the host operating system are given in the pathconf_names dictionary. For configuration variables not included in that mapping, passing an integer for name is also accepted.	https://docs.python.org/3.4/library/os.html#os.pathconf
os readlink	A							https://docs.python.org			<pre><code>
os.readlink(path, *, dir_fd=None)</code></pre><br>Return a string representing the path to which the symbolic link points. The result may be either an absolute or relative pathname; if it is relative, it may be converted to an absolute pathname using os.path.join(os.path.dirname(path), result).	https://docs.python.org/3.4/library/os.html#os.readlink
os remove	A							https://docs.python.org			<pre><code>
os.remove(path, *, dir_fd=None)</code></pre><br>Remove (delete) the file path. If path is a directory, OSError is raised. Use rmdir() to remove directories.	https://docs.python.org/3.4/library/os.html#os.remove
os removedirs	A							https://docs.python.org			<pre><code>
os.removedirs(name)</code></pre><br>Remove directories recursively. Works like rmdir() except that, if the leaf directory is successfully removed, removedirs() tries to successively remove every parent directory mentioned in path until an error is raised (which is ignored, because it generally means that a parent directory is not empty). For example, os.removedirs('foo/bar/baz') will first remove the directory 'foo/bar/baz', and then remove 'foo/bar' and 'foo' if they are empty. Raises OSError if the leaf directory could not be successfully removed.	https://docs.python.org/3.4/library/os.html#os.removedirs
os rename	A							https://docs.python.org			<pre><code>
os.rename(src, dst, *, src_dir_fd=None, dst_dir_fd=None)</code></pre><br>Rename the file or directory src to dst. If dst is a directory, OSError will be raised. On Unix, if dst exists and is a file, it will be replaced silently if the user has permission. The operation may fail on some Unix flavors if src and dst are on different filesystems. If successful, the renaming will be an atomic operation (this is a POSIX requirement). On Windows, if dst already exists, OSError will be raised even if it is a file.	https://docs.python.org/3.4/library/os.html#os.rename
os renames	A							https://docs.python.org			<pre><code>
os.renames(old, new)</code></pre><br>Recursive directory or file renaming function. Works like rename(), except creation of any intermediate directories needed to make the new pathname good is attempted first. After the rename, directories corresponding to rightmost path segments of the old name will be pruned away using removedirs().	https://docs.python.org/3.4/library/os.html#os.renames
os replace	A							https://docs.python.org			<pre><code>
os.replace(src, dst, *, src_dir_fd=None, dst_dir_fd=None)</code></pre><br>Rename the file or directory src to dst. If dst is a directory, OSError will be raised. If dst exists and is a file, it will be replaced silently if the user has permission. The operation may fail if src and dst are on different filesystems. If successful, the renaming will be an atomic operation (this is a POSIX requirement).	https://docs.python.org/3.4/library/os.html#os.replace
os rmdir	A							https://docs.python.org			<pre><code>
os.rmdir(path, *, dir_fd=None)</code></pre><br>Remove (delete) the directory path. Only works when the directory is empty, otherwise, OSError is raised. In order to remove whole directory trees, shutil.rmtree() can be used.	https://docs.python.org/3.4/library/os.html#os.rmdir
os stat	A							https://docs.python.org			<pre><code>
os.stat(path, *, dir_fd=None, follow_symlinks=True)</code></pre><br>Get the status of a file or a file descriptor. Perform the equivalent of a stat() system call on the given path. path may be specified as either a string or as an open file descriptor. Return a stat_result object.	https://docs.python.org/3.4/library/os.html#os.stat
os stat_float_times	A							https://docs.python.org			<pre><code>
os.stat_float_times([newvalue])</code></pre><br>Determine whether stat_result represents time stamps as float objects. If newvalue is True, future calls to stat() return floats, if it is False, future calls return ints. If newvalue is omitted, return the current setting.	https://docs.python.org/3.4/library/os.html#os.stat_float_times
os statvfs	A							https://docs.python.org			<pre><code>
os.statvfs(path)</code></pre><br>Perform a statvfs() system call on the given path. The return value is an object whose attributes describe the filesystem on the given path, and correspond to the members of the statvfs structure, namely: f_bsize, f_frsize, f_blocks, f_bfree, f_bavail, f_files, f_ffree, f_favail, f_flag, f_namemax.	https://docs.python.org/3.4/library/os.html#os.statvfs
os symlink	A							https://docs.python.org			<pre><code>
os.symlink(src, dst, target_is_directory=False, *, dir_fd=None)</code></pre><br>Create a symbolic link pointing to src named dst.	https://docs.python.org/3.4/library/os.html#os.symlink
os sync	A							https://docs.python.org			<pre><code>
os.sync()</code></pre><br>Force write of everything to disk.	https://docs.python.org/3.4/library/os.html#os.sync
os truncate	A							https://docs.python.org			<pre><code>
os.truncate(path, length)</code></pre><br>Truncate the file corresponding to path, so that it is at most length bytes in size.	https://docs.python.org/3.4/library/os.html#os.truncate
os unlink	A							https://docs.python.org			<pre><code>
os.unlink(path, *, dir_fd=None)</code></pre><br>Remove (delete) the file path. This function is identical to remove(); the unlink name is its traditional Unix name. Please see the documentation for remove() for further information.	https://docs.python.org/3.4/library/os.html#os.unlink
os utime	A							https://docs.python.org			<pre><code>
os.utime(path, times=None, *, [ns, ]dir_fd=None, follow_symlinks=True)</code></pre><br>Set the access and modified times of the file specified by path.	https://docs.python.org/3.4/library/os.html#os.utime
os walk	A							https://docs.python.org			<pre><code>
os.walk(top, topdown=True, onerror=None, followlinks=False)</code></pre><br>Generate the file names in a directory tree by walking the tree either top-down or bottom-up. For each directory in the tree rooted at directory top (including top itself), it yields a 3-tuple (dirpath, dirnames, filenames).	https://docs.python.org/3.4/library/os.html#os.walk
os fwalk	A							https://docs.python.org			<pre><code>
os.fwalk(top='.', topdown=True, onerror=None, *, follow_symlinks=False, dir_fd=None)</code></pre><br>This behaves exactly like walk(), except that it yields a 4-tuple (dirpath, dirnames, filenames, dirfd), and it supports dir_fd.	https://docs.python.org/3.4/library/os.html#os.fwalk
os getxattr	A							https://docs.python.org			<pre><code>
os.getxattr(path, attribute, *, follow_symlinks=True)</code></pre><br>Return the value of the extended filesystem attribute attribute for path. attribute can be bytes or str. If it is str, it is encoded with the filesystem encoding.	https://docs.python.org/3.4/library/os.html#os.getxattr
os listxattr	A							https://docs.python.org			<pre><code>
os.listxattr(path=None, *, follow_symlinks=True)</code></pre><br>Return a list of the extended filesystem attributes on path. The attributes in the list are represented as strings decoded with the filesystem encoding. If path is None, listxattr() will examine the current directory.	https://docs.python.org/3.4/library/os.html#os.listxattr
os removexattr	A							https://docs.python.org			<pre><code>
os.removexattr(path, attribute, *, follow_symlinks=True)</code></pre><br>Removes the extended filesystem attribute attribute from path. attribute should be bytes or str. If it is a string, it is encoded with the filesystem encoding.	https://docs.python.org/3.4/library/os.html#os.removexattr
os setxattr	A							https://docs.python.org			<pre><code>
os.setxattr(path, attribute, value, flags=0, *, follow_symlinks=True)</code></pre><br>Set the extended filesystem attribute attribute on path to value. attribute must be a bytes or str with no embedded NULs. If it is a str, it is encoded with the filesystem encoding. flags may be XATTR_REPLACE or XATTR_CREATE. If XATTR_REPLACE is given and the attribute does not exist, EEXISTS will be raised. If XATTR_CREATE is given and the attribute already exists, the attribute will not be created and ENODATA will be raised.	https://docs.python.org/3.4/library/os.html#os.setxattr
os getxattr	A							https://docs.python.org			<pre><code>
os.getxattr(path, attribute, *, follow_symlinks=True)</code></pre><br>Return the value of the extended filesystem attribute attribute for path. attribute can be bytes or str. If it is str, it is encoded with the filesystem encoding.	https://docs.python.org/3.4/library/os.html#os.getxattr
os listxattr	A							https://docs.python.org			<pre><code>
os.listxattr(path=None, *, follow_symlinks=True)</code></pre><br>Return a list of the extended filesystem attributes on path. The attributes in the list are represented as strings decoded with the filesystem encoding. If path is None, listxattr() will examine the current directory.	https://docs.python.org/3.4/library/os.html#os.listxattr
os removexattr	A							https://docs.python.org			<pre><code>
os.removexattr(path, attribute, *, follow_symlinks=True)</code></pre><br>Removes the extended filesystem attribute attribute from path. attribute should be bytes or str. If it is a string, it is encoded with the filesystem encoding.	https://docs.python.org/3.4/library/os.html#os.removexattr
os setxattr	A							https://docs.python.org			<pre><code>
os.setxattr(path, attribute, value, flags=0, *, follow_symlinks=True)</code></pre><br>Set the extended filesystem attribute attribute on path to value. attribute must be a bytes or str with no embedded NULs. If it is a str, it is encoded with the filesystem encoding. flags may be XATTR_REPLACE or XATTR_CREATE. If XATTR_REPLACE is given and the attribute does not exist, EEXISTS will be raised. If XATTR_CREATE is given and the attribute already exists, the attribute will not be created and ENODATA will be raised.	https://docs.python.org/3.4/library/os.html#os.setxattr
os abort	A							https://docs.python.org			<pre><code>
os.abort()</code></pre><br>Generate a SIGABRT signal to the current process. On Unix, the default behavior is to produce a core dump; on Windows, the process immediately returns an exit code of 3. Be aware that calling this function will not call the Python signal handler registered for SIGABRT with signal.signal().	https://docs.python.org/3.4/library/os.html#os.abort
os execl	A							https://docs.python.org			<pre><code>
os.execl(path, arg0, arg1, ...)</code></pre><br>These functions all execute a new program, replacing the current process; they do not return. On Unix, the new executable is loaded into the current process, and will have the same process id as the caller. Errors will be reported as OSError exceptions.	https://docs.python.org/3.4/library/os.html#os.execl
os _exit	A							https://docs.python.org			<pre><code>
os._exit(n)</code></pre><br>Exit the process with status n, without calling cleanup handlers, flushing stdio buffers, etc.	https://docs.python.org/3.4/library/os.html#os._exit
os fork	A							https://docs.python.org			<pre><code>
os.fork()</code></pre><br>Fork a child process. Return 0 in the child and the child’s process id in the parent. If an error occurs OSError is raised.	https://docs.python.org/3.4/library/os.html#os.fork
os forkpty	A							https://docs.python.org			<pre><code>
os.forkpty()</code></pre><br>Fork a child process, using a new pseudo-terminal as the child’s controlling terminal. Return a pair of (pid, fd), where pid is 0 in the child, the new child’s process id in the parent, and fd is the file descriptor of the master end of the pseudo-terminal. For a more portable approach, use the pty module. If an error occurs OSError is raised.	https://docs.python.org/3.4/library/os.html#os.forkpty
os kill	A							https://docs.python.org			<pre><code>
os.kill(pid, sig)</code></pre><br>Send signal sig to the process pid. Constants for the specific signals available on the host platform are defined in the signal module.	https://docs.python.org/3.4/library/os.html#os.kill
os killpg	A							https://docs.python.org			<pre><code>
os.killpg(pgid, sig)</code></pre><br>Send the signal sig to the process group pgid.	https://docs.python.org/3.4/library/os.html#os.killpg
os nice	A							https://docs.python.org			<pre><code>
os.nice(increment)</code></pre><br>Add increment to the process’s “niceness”. Return the new niceness.	https://docs.python.org/3.4/library/os.html#os.nice
os plock	A							https://docs.python.org			<pre><code>
os.plock(op)</code></pre><br>Lock program segments into memory. The value of op (defined in <sys/lock.h>) determines which segments are locked.	https://docs.python.org/3.4/library/os.html#os.plock
os popen	A							https://docs.python.org			<pre><code>
os.popen(cmd, mode='r', buffering=-1)</code></pre><br>Open a pipe to or from command cmd. The return value is an open file object connected to the pipe, which can be read or written depending on whether mode is 'r' (default) or 'w'. The buffering argument has the same meaning as the corresponding argument to the built-in open() function. The returned file object reads or writes text strings rather than bytes.	https://docs.python.org/3.4/library/os.html#os.popen
os spawnl	A							https://docs.python.org			<pre><code>
os.spawnl(mode, path, ...)</code></pre><br>Execute the program path in a new process.	https://docs.python.org/3.4/library/os.html#os.spawnl
os startfile	A							https://docs.python.org			<pre><code>
os.startfile(path[, operation])</code></pre><br>Start a file with its associated application.	https://docs.python.org/3.4/library/os.html#os.startfile
os system	A							https://docs.python.org			<pre><code>
os.system(command)</code></pre><br>Execute the command (a string) in a subshell. This is implemented by calling the Standard C function system(), and has the same limitations. Changes to sys.stdin, etc. are not reflected in the environment of the executed command. If command generates any output, it will be sent to the interpreter standard output stream.	https://docs.python.org/3.4/library/os.html#os.system
os times	A							https://docs.python.org			<pre><code>
os.times()</code></pre><br>Returns the current global process times. The return value is an object with five attributes:	https://docs.python.org/3.4/library/os.html#os.times
os wait	A							https://docs.python.org			<pre><code>
os.wait()</code></pre><br>Wait for completion of a child process, and return a tuple containing its pid and exit status indication: a 16-bit number, whose low byte is the signal number that killed the process, and whose high byte is the exit status (if the signal number is zero); the high bit of the low byte is set if a core file was produced.	https://docs.python.org/3.4/library/os.html#os.wait
os waitid	A							https://docs.python.org			<pre><code>
os.waitid(idtype, id, options)</code></pre><br>Wait for the completion of one or more child processes. idtype can be P_PID, P_PGID or P_ALL. id specifies the pid to wait on. options is constructed from the ORing of one or more of WEXITED, WSTOPPED or WCONTINUED and additionally may be ORed with WNOHANG or WNOWAIT. The return value is an object representing the data contained in the siginfo_t structure, namely: si_pid, si_uid, si_signo, si_status, si_code or None if WNOHANG is specified and there are no children in a waitable state.	https://docs.python.org/3.4/library/os.html#os.waitid
os waitpid	A							https://docs.python.org			<pre><code>
os.waitpid(pid, options)</code></pre><br>The details of this function differ on Unix and Windows.	https://docs.python.org/3.4/library/os.html#os.waitpid
os wait3	A							https://docs.python.org			<pre><code>
os.wait3(options)</code></pre><br>Similar to waitpid(), except no process id argument is given and a 3-element tuple containing the child’s process id, exit status indication, and resource usage information is returned. Refer to resource.getrusage() for details on resource usage information. The option argument is the same as that provided to waitpid() and wait4().	https://docs.python.org/3.4/library/os.html#os.wait3
os wait4	A							https://docs.python.org			<pre><code>
os.wait4(pid, options)</code></pre><br>Similar to waitpid(), except a 3-element tuple, containing the child’s process id, exit status indication, and resource usage information is returned. Refer to resource.getrusage() for details on resource usage information. The arguments to wait4() are the same as those provided to waitpid().	https://docs.python.org/3.4/library/os.html#os.wait4
os WCOREDUMP	A							https://docs.python.org			<pre><code>
os.WCOREDUMP(status)</code></pre><br>Return True if a core dump was generated for the process, otherwise return False.	https://docs.python.org/3.4/library/os.html#os.WCOREDUMP
os WIFCONTINUED	A							https://docs.python.org			<pre><code>
os.WIFCONTINUED(status)</code></pre><br>Return True if the process has been continued from a job control stop, otherwise return False.	https://docs.python.org/3.4/library/os.html#os.WIFCONTINUED
os WIFSTOPPED	A							https://docs.python.org			<pre><code>
os.WIFSTOPPED(status)</code></pre><br>Return True if the process has been stopped, otherwise return False.	https://docs.python.org/3.4/library/os.html#os.WIFSTOPPED
os WIFSIGNALED	A							https://docs.python.org			<pre><code>
os.WIFSIGNALED(status)</code></pre><br>Return True if the process exited due to a signal, otherwise return False.	https://docs.python.org/3.4/library/os.html#os.WIFSIGNALED
os WIFEXITED	A							https://docs.python.org			<pre><code>
os.WIFEXITED(status)</code></pre><br>Return True if the process exited using the exit(2) system call, otherwise return False.	https://docs.python.org/3.4/library/os.html#os.WIFEXITED
os WEXITSTATUS	A							https://docs.python.org			<pre><code>
os.WEXITSTATUS(status)</code></pre><br>If WIFEXITED(status) is true, return the integer parameter to the exit(2) system call. Otherwise, the return value is meaningless.	https://docs.python.org/3.4/library/os.html#os.WEXITSTATUS
os WSTOPSIG	A							https://docs.python.org			<pre><code>
os.WSTOPSIG(status)</code></pre><br>Return the signal which caused the process to stop.	https://docs.python.org/3.4/library/os.html#os.WSTOPSIG
os WTERMSIG	A							https://docs.python.org			<pre><code>
os.WTERMSIG(status)</code></pre><br>Return the signal which caused the process to exit.	https://docs.python.org/3.4/library/os.html#os.WTERMSIG
os sched_get_priority_min	A							https://docs.python.org			<pre><code>
os.sched_get_priority_min(policy)</code></pre><br>Get the minimum priority value for policy. policy is one of the scheduling policy constants above.	https://docs.python.org/3.4/library/os.html#os.sched_get_priority_min
os sched_get_priority_max	A							https://docs.python.org			<pre><code>
os.sched_get_priority_max(policy)</code></pre><br>Get the maximum priority value for policy. policy is one of the scheduling policy constants above.	https://docs.python.org/3.4/library/os.html#os.sched_get_priority_max
os sched_setscheduler	A							https://docs.python.org			<pre><code>
os.sched_setscheduler(pid, policy, param)</code></pre><br>Set the scheduling policy for the process with PID pid. A pid of 0 means the calling process. policy is one of the scheduling policy constants above. param is a sched_param instance.	https://docs.python.org/3.4/library/os.html#os.sched_setscheduler
os sched_getscheduler	A							https://docs.python.org			<pre><code>
os.sched_getscheduler(pid)</code></pre><br>Return the scheduling policy for the process with PID pid. A pid of 0 means the calling process. The result is one of the scheduling policy constants above.	https://docs.python.org/3.4/library/os.html#os.sched_getscheduler
os sched_setparam	A							https://docs.python.org			<pre><code>
os.sched_setparam(pid, param)</code></pre><br>Set a scheduling parameters for the process with PID pid. A pid of 0 means the calling process. param is a sched_param instance.	https://docs.python.org/3.4/library/os.html#os.sched_setparam
os sched_getparam	A							https://docs.python.org			<pre><code>
os.sched_getparam(pid)</code></pre><br>Return the scheduling parameters as a sched_param instance for the process with PID pid. A pid of 0 means the calling process.	https://docs.python.org/3.4/library/os.html#os.sched_getparam
os sched_rr_get_interval	A							https://docs.python.org			<pre><code>
os.sched_rr_get_interval(pid)</code></pre><br>Return the round-robin quantum in seconds for the process with PID pid. A pid of 0 means the calling process.	https://docs.python.org/3.4/library/os.html#os.sched_rr_get_interval
os sched_yield	A							https://docs.python.org			<pre><code>
os.sched_yield()</code></pre><br>Voluntarily relinquish the CPU.	https://docs.python.org/3.4/library/os.html#os.sched_yield
os sched_setaffinity	A							https://docs.python.org			<pre><code>
os.sched_setaffinity(pid, mask)</code></pre><br>Restrict the process with PID pid (or the current process if zero) to a set of CPUs. mask is an iterable of integers representing the set of CPUs to which the process should be restricted.	https://docs.python.org/3.4/library/os.html#os.sched_setaffinity
os sched_getaffinity	A							https://docs.python.org			<pre><code>
os.sched_getaffinity(pid)</code></pre><br>Return the set of CPUs the process with PID pid (or the current process if zero) is restricted to.	https://docs.python.org/3.4/library/os.html#os.sched_getaffinity
os confstr	A							https://docs.python.org			<pre><code>
os.confstr(name)</code></pre><br>Return string-valued system configuration values. name specifies the configuration value to retrieve; it may be a string which is the name of a defined system value; these names are specified in a number of standards (POSIX, Unix 95, Unix 98, and others). Some platforms define additional names as well. The names known to the host operating system are given as the keys of the confstr_names dictionary. For configuration variables not included in that mapping, passing an integer for name is also accepted.	https://docs.python.org/3.4/library/os.html#os.confstr
os cpu_count	A							https://docs.python.org			<pre><code>
os.cpu_count()</code></pre><br>Return the number of CPUs in the system. Returns None if undetermined.	https://docs.python.org/3.4/library/os.html#os.cpu_count
os getloadavg	A							https://docs.python.org			<pre><code>
os.getloadavg()</code></pre><br>Return the number of processes in the system run queue averaged over the last 1, 5, and 15 minutes or raises OSError if the load average was unobtainable.	https://docs.python.org/3.4/library/os.html#os.getloadavg
os sysconf	A							https://docs.python.org			<pre><code>
os.sysconf(name)</code></pre><br>Return integer-valued system configuration values. If the configuration value specified by name isn’t defined, -1 is returned. The comments regarding the name parameter for confstr() apply here as well; the dictionary that provides information on the known names is given by sysconf_names.	https://docs.python.org/3.4/library/os.html#os.sysconf
os urandom	A							https://docs.python.org			<pre><code>
os.urandom(n)</code></pre><br>Return a string of n random bytes suitable for cryptographic use.	https://docs.python.org/3.4/library/os.html#os.urandom
os.path abspath	A							https://docs.python.org			<pre><code>
os.path.abspath(path)</code></pre><br>Return a normalized absolutized version of the pathname path. On most platforms, this is equivalent to calling the function normpath() as follows: normpath(join(os.getcwd(), path)).	https://docs.python.org/3.4/library/os.path.html#os.path.abspath
os.path basename	A							https://docs.python.org			<pre><code>
os.path.basename(path)</code></pre><br>Return the base name of pathname path. This is the second element of the pair returned by passing path to the function split(). Note that the result of this function is different from the Unix basename program; where basename for '/foo/bar/' returns 'bar', the basename() function returns an empty string ('').	https://docs.python.org/3.4/library/os.path.html#os.path.basename
os.path commonprefix	A							https://docs.python.org			<pre><code>
os.path.commonprefix(list)</code></pre><br>Return the longest path prefix (taken character-by-character) that is a prefix of all paths in list. If list is empty, return the empty string (''). Note that this may return invalid paths because it works a character at a time.	https://docs.python.org/3.4/library/os.path.html#os.path.commonprefix
os.path dirname	A							https://docs.python.org			<pre><code>
os.path.dirname(path)</code></pre><br>Return the directory name of pathname path. This is the first element of the pair returned by passing path to the function split().	https://docs.python.org/3.4/library/os.path.html#os.path.dirname
os.path exists	A							https://docs.python.org			<pre><code>
os.path.exists(path)</code></pre><br>Return True if path refers to an existing path or an open file descriptor. Returns False for broken symbolic links. On some platforms, this function may return False if permission is not granted to execute os.stat() on the requested file, even if the path physically exists.	https://docs.python.org/3.4/library/os.path.html#os.path.exists
os.path lexists	A							https://docs.python.org			<pre><code>
os.path.lexists(path)</code></pre><br>Return True if path refers to an existing path. Returns True for broken symbolic links.  Equivalent to exists() on platforms lacking os.lstat().	https://docs.python.org/3.4/library/os.path.html#os.path.lexists
os.path expanduser	A							https://docs.python.org			<pre><code>
os.path.expanduser(path)</code></pre><br>On Unix and Windows, return the argument with an initial component of ~ or ~user replaced by that user‘s home directory.	https://docs.python.org/3.4/library/os.path.html#os.path.expanduser
os.path expandvars	A							https://docs.python.org			<pre><code>
os.path.expandvars(path)</code></pre><br>Return the argument with environment variables expanded. Substrings of the form $name or ${name} are replaced by the value of environment variable name. Malformed variable names and references to non-existing variables are left unchanged.	https://docs.python.org/3.4/library/os.path.html#os.path.expandvars
os.path getatime	A							https://docs.python.org			<pre><code>
os.path.getatime(path)</code></pre><br>Return the time of last access of path. The return value is a number giving the number of seconds since the epoch (see the time module). Raise OSError if the file does not exist or is inaccessible.	https://docs.python.org/3.4/library/os.path.html#os.path.getatime
os.path getmtime	A							https://docs.python.org			<pre><code>
os.path.getmtime(path)</code></pre><br>Return the time of last modification of path. The return value is a number giving the number of seconds since the epoch (see the time module). Raise OSError if the file does not exist or is inaccessible.	https://docs.python.org/3.4/library/os.path.html#os.path.getmtime
os.path getctime	A							https://docs.python.org			<pre><code>
os.path.getctime(path)</code></pre><br>Return the system’s ctime which, on some systems (like Unix) is the time of the last metadata change, and, on others (like Windows), is the creation time for path. The return value is a number giving the number of seconds since the epoch (see the time module). Raise OSError if the file does not exist or is inaccessible.	https://docs.python.org/3.4/library/os.path.html#os.path.getctime
os.path getsize	A							https://docs.python.org			<pre><code>
os.path.getsize(path)</code></pre><br>Return the size, in bytes, of path. Raise OSError if the file does not exist or is inaccessible.	https://docs.python.org/3.4/library/os.path.html#os.path.getsize
os.path isabs	A							https://docs.python.org			<pre><code>
os.path.isabs(path)</code></pre><br>Return True if path is an absolute pathname. On Unix, that means it begins with a slash, on Windows that it begins with a (back)slash after chopping off a potential drive letter.	https://docs.python.org/3.4/library/os.path.html#os.path.isabs
os.path isfile	A							https://docs.python.org			<pre><code>
os.path.isfile(path)</code></pre><br>Return True if path is an existing regular file. This follows symbolic links, so both islink() and isfile() can be true for the same path.	https://docs.python.org/3.4/library/os.path.html#os.path.isfile
os.path isdir	A							https://docs.python.org			<pre><code>
os.path.isdir(path)</code></pre><br>Return True if path is an existing directory. This follows symbolic links, so both islink() and isdir() can be true for the same path.	https://docs.python.org/3.4/library/os.path.html#os.path.isdir
os.path islink	A							https://docs.python.org			<pre><code>
os.path.islink(path)</code></pre><br>Return True if path refers to a directory entry that is a symbolic link. Always False if symbolic links are not supported by the python runtime.	https://docs.python.org/3.4/library/os.path.html#os.path.islink
os.path ismount	A							https://docs.python.org			<pre><code>
os.path.ismount(path)</code></pre><br>Return True if pathname path is a mount point: a point in a file system where a different file system has been mounted. On POSIX, the function checks whether path‘s parent, path/.., is on a different device than path, or whether path/.. and path point to the same i-node on the same device — this should detect mount points for all Unix and POSIX variants. On Windows, a drive letter root and a share UNC are always mount points, and for any other path GetVolumePathName is called to see if it is different from the input path.	https://docs.python.org/3.4/library/os.path.html#os.path.ismount
os.path join	A							https://docs.python.org			<pre><code>
os.path.join(path, *paths)</code></pre><br>Join one or more path components intelligently. The return value is the concatenation of path and any members of *paths with exactly one directory separator (os.sep) following each non-empty part except the last, meaning that the result will only end in a separator if the last part is empty. If a component is an absolute path, all previous components are thrown away and joining continues from the absolute path component.	https://docs.python.org/3.4/library/os.path.html#os.path.join
os.path normcase	A							https://docs.python.org			<pre><code>
os.path.normcase(path)</code></pre><br>Normalize the case of a pathname. On Unix and Mac OS X, this returns the path unchanged; on case-insensitive filesystems, it converts the path to lowercase. On Windows, it also converts forward slashes to backward slashes. Raise a TypeError if the type of path is not str or bytes.	https://docs.python.org/3.4/library/os.path.html#os.path.normcase
os.path normpath	A							https://docs.python.org			<pre><code>
os.path.normpath(path)</code></pre><br>Normalize a pathname by collapsing redundant separators and up-level references so that A//B, A/B/, A/./B and A/foo/../B all become A/B. This string manipulation may change the meaning of a path that contains symbolic links. On Windows, it converts forward slashes to backward slashes. To normalize case, use normcase().	https://docs.python.org/3.4/library/os.path.html#os.path.normpath
os.path realpath	A							https://docs.python.org			<pre><code>
os.path.realpath(path)</code></pre><br>Return the canonical path of the specified filename, eliminating any symbolic links encountered in the path (if they are supported by the operating system).	https://docs.python.org/3.4/library/os.path.html#os.path.realpath
os.path relpath	A							https://docs.python.org			<pre><code>
os.path.relpath(path, start=os.curdir)</code></pre><br>Return a relative filepath to path either from the current directory or from an optional start directory. This is a path computation: the filesystem is not accessed to confirm the existence or nature of path or start.	https://docs.python.org/3.4/library/os.path.html#os.path.relpath
os.path samefile	A							https://docs.python.org			<pre><code>
os.path.samefile(path1, path2)</code></pre><br>Return True if both pathname arguments refer to the same file or directory. This is determined by the device number and i-node number and raises an exception if an os.stat() call on either pathname fails.	https://docs.python.org/3.4/library/os.path.html#os.path.samefile
os.path sameopenfile	A							https://docs.python.org			<pre><code>
os.path.sameopenfile(fp1, fp2)</code></pre><br>Return True if the file descriptors fp1 and fp2 refer to the same file.	https://docs.python.org/3.4/library/os.path.html#os.path.sameopenfile
os.path samestat	A							https://docs.python.org			<pre><code>
os.path.samestat(stat1, stat2)</code></pre><br>Return True if the stat tuples stat1 and stat2 refer to the same file. These structures may have been returned by os.fstat(), os.lstat(), or os.stat(). This function implements the underlying comparison used by samefile() and sameopenfile().	https://docs.python.org/3.4/library/os.path.html#os.path.samestat
os.path split	A							https://docs.python.org			<pre><code>
os.path.split(path)</code></pre><br>Split the pathname path into a pair, (head, tail) where tail is the last pathname component and head is everything leading up to that. The tail part will never contain a slash; if path ends in a slash, tail will be empty. If there is no slash in path, head will be empty. If path is empty, both head and tail are empty. Trailing slashes are stripped from head unless it is the root (one or more slashes only). In all cases, join(head, tail) returns a path to the same location as path (but the strings may differ). Also see the functions dirname() and basename().	https://docs.python.org/3.4/library/os.path.html#os.path.split
os.path splitdrive	A							https://docs.python.org			<pre><code>
os.path.splitdrive(path)</code></pre><br>Split the pathname path into a pair (drive, tail) where drive is either a mount point or the empty string. On systems which do not use drive specifications, drive will always be the empty string. In all cases, drive + tail will be the same as path.	https://docs.python.org/3.4/library/os.path.html#os.path.splitdrive
os.path splitext	A							https://docs.python.org			<pre><code>
os.path.splitext(path)</code></pre><br>Split the pathname path into a pair (root, ext) such that root + ext == path, and ext is empty or begins with a period and contains at most one period. Leading periods on the basename are ignored; splitext('.cshrc') returns ('.cshrc', '').	https://docs.python.org/3.4/library/os.path.html#os.path.splitext
os.path splitunc	A							https://docs.python.org			<pre><code>
os.path.splitunc(path)</code></pre><br>Deprecated since version 3.1: Use splitdrive instead.	https://docs.python.org/3.4/library/os.path.html#os.path.splitunc
ossaudiodev open	A							https://docs.python.org			<pre><code>
ossaudiodev.open(mode)</code></pre><br>Open an audio device and return an OSS audio device object. This object supports many file-like methods, such as read(), write(), and fileno() (although there are subtle differences between conventional Unix read/write semantics and those of OSS audio devices). It also supports a number of audio-specific methods; see below for the complete list of methods.	https://docs.python.org/3.4/library/ossaudiodev.html#ossaudiodev.open
ossaudiodev openmixer	A							https://docs.python.org			<pre><code>
ossaudiodev.openmixer([device])</code></pre><br>Open a mixer device and return an OSS mixer device object.  device is the mixer device filename to use. If it is not specified, this module first looks in the environment variable MIXERDEV for a device to use. If not found, it falls back to /dev/mixer.	https://docs.python.org/3.4/library/ossaudiodev.html#ossaudiodev.openmixer
parser expr	A							https://docs.python.org			<pre><code>
parser.expr(source)</code></pre><br>The expr() function parses the parameter source as if it were an input to compile(source, 'file.py', 'eval'). If the parse succeeds, an ST object is created to hold the internal parse tree representation, otherwise an appropriate exception is raised.	https://docs.python.org/3.4/library/parser.html#parser.expr
parser suite	A							https://docs.python.org			<pre><code>
parser.suite(source)</code></pre><br>The suite() function parses the parameter source as if it were an input to compile(source, 'file.py', 'exec'). If the parse succeeds, an ST object is created to hold the internal parse tree representation, otherwise an appropriate exception is raised.	https://docs.python.org/3.4/library/parser.html#parser.suite
parser sequence2st	A							https://docs.python.org			<pre><code>
parser.sequence2st(sequence)</code></pre><br>This function accepts a parse tree represented as a sequence and builds an internal representation if possible. If it can validate that the tree conforms to the Python grammar and all nodes are valid node types in the host version of Python, an ST object is created from the internal representation and returned to the called. If there is a problem creating the internal representation, or if the tree cannot be validated, a ParserError exception is raised. An ST object created this way should not be assumed to compile correctly; normal exceptions raised by compilation may still be initiated when the ST object is passed to compilest(). This may indicate problems not related to syntax (such as a MemoryError exception), but may also be due to constructs such as the result of parsing del f(0), which escapes the Python parser but is checked by the bytecode compiler.	https://docs.python.org/3.4/library/parser.html#parser.sequence2st
parser tuple2st	A							https://docs.python.org			<pre><code>
parser.tuple2st(sequence)</code></pre><br>This is the same function as sequence2st(). This entry point is maintained for backward compatibility.	https://docs.python.org/3.4/library/parser.html#parser.tuple2st
parser st2list	A							https://docs.python.org			<pre><code>
parser.st2list(st, line_info=False, col_info=False)</code></pre><br>This function accepts an ST object from the caller in st and returns a Python list representing the equivalent parse tree. The resulting list representation can be used for inspection or the creation of a new parse tree in list form. This function does not fail so long as memory is available to build the list representation. If the parse tree will only be used for inspection, st2tuple() should be used instead to reduce memory consumption and fragmentation. When the list representation is required, this function is significantly faster than retrieving a tuple representation and converting that to nested lists.	https://docs.python.org/3.4/library/parser.html#parser.st2list
parser st2tuple	A							https://docs.python.org			<pre><code>
parser.st2tuple(st, line_info=False, col_info=False)</code></pre><br>This function accepts an ST object from the caller in st and returns a Python tuple representing the equivalent parse tree. Other than returning a tuple instead of a list, this function is identical to st2list().	https://docs.python.org/3.4/library/parser.html#parser.st2tuple
parser compilest	A							https://docs.python.org			<pre><code>
parser.compilest(st, filename='<syntax-tree>')</code></pre><br>The Python byte compiler can be invoked on an ST object to produce code objects which can be used as part of a call to the built-in exec() or eval() functions. This function provides the interface to the compiler, passing the internal parse tree from st to the parser, using the source file name specified by the filename parameter. The default value supplied for filename indicates that the source was an ST object.	https://docs.python.org/3.4/library/parser.html#parser.compilest
parser isexpr	A							https://docs.python.org			<pre><code>
parser.isexpr(st)</code></pre><br>When st represents an 'eval' form, this function returns true, otherwise it returns false. This is useful, since code objects normally cannot be queried for this information using existing built-in functions. Note that the code objects created by compilest() cannot be queried like this either, and are identical to those created by the built-in compile() function.	https://docs.python.org/3.4/library/parser.html#parser.isexpr
parser issuite	A							https://docs.python.org			<pre><code>
parser.issuite(st)</code></pre><br>This function mirrors isexpr() in that it reports whether an ST object represents an 'exec' form, commonly known as a “suite.” It is not safe to assume that this function is equivalent to not isexpr(st), as additional syntactic fragments may be supported in the future.	https://docs.python.org/3.4/library/parser.html#parser.issuite
parser expr	A							https://docs.python.org			<pre><code>
parser.expr(source)</code></pre><br>The expr() function parses the parameter source as if it were an input to compile(source, 'file.py', 'eval'). If the parse succeeds, an ST object is created to hold the internal parse tree representation, otherwise an appropriate exception is raised.	https://docs.python.org/3.4/library/parser.html#parser.expr
parser suite	A							https://docs.python.org			<pre><code>
parser.suite(source)</code></pre><br>The suite() function parses the parameter source as if it were an input to compile(source, 'file.py', 'exec'). If the parse succeeds, an ST object is created to hold the internal parse tree representation, otherwise an appropriate exception is raised.	https://docs.python.org/3.4/library/parser.html#parser.suite
parser sequence2st	A							https://docs.python.org			<pre><code>
parser.sequence2st(sequence)</code></pre><br>This function accepts a parse tree represented as a sequence and builds an internal representation if possible. If it can validate that the tree conforms to the Python grammar and all nodes are valid node types in the host version of Python, an ST object is created from the internal representation and returned to the called. If there is a problem creating the internal representation, or if the tree cannot be validated, a ParserError exception is raised. An ST object created this way should not be assumed to compile correctly; normal exceptions raised by compilation may still be initiated when the ST object is passed to compilest(). This may indicate problems not related to syntax (such as a MemoryError exception), but may also be due to constructs such as the result of parsing del f(0), which escapes the Python parser but is checked by the bytecode compiler.	https://docs.python.org/3.4/library/parser.html#parser.sequence2st
parser tuple2st	A							https://docs.python.org			<pre><code>
parser.tuple2st(sequence)</code></pre><br>This is the same function as sequence2st(). This entry point is maintained for backward compatibility.	https://docs.python.org/3.4/library/parser.html#parser.tuple2st
parser st2list	A							https://docs.python.org			<pre><code>
parser.st2list(st, line_info=False, col_info=False)</code></pre><br>This function accepts an ST object from the caller in st and returns a Python list representing the equivalent parse tree. The resulting list representation can be used for inspection or the creation of a new parse tree in list form. This function does not fail so long as memory is available to build the list representation. If the parse tree will only be used for inspection, st2tuple() should be used instead to reduce memory consumption and fragmentation. When the list representation is required, this function is significantly faster than retrieving a tuple representation and converting that to nested lists.	https://docs.python.org/3.4/library/parser.html#parser.st2list
parser st2tuple	A							https://docs.python.org			<pre><code>
parser.st2tuple(st, line_info=False, col_info=False)</code></pre><br>This function accepts an ST object from the caller in st and returns a Python tuple representing the equivalent parse tree. Other than returning a tuple instead of a list, this function is identical to st2list().	https://docs.python.org/3.4/library/parser.html#parser.st2tuple
parser compilest	A							https://docs.python.org			<pre><code>
parser.compilest(st, filename='<syntax-tree>')</code></pre><br>The Python byte compiler can be invoked on an ST object to produce code objects which can be used as part of a call to the built-in exec() or eval() functions. This function provides the interface to the compiler, passing the internal parse tree from st to the parser, using the source file name specified by the filename parameter. The default value supplied for filename indicates that the source was an ST object.	https://docs.python.org/3.4/library/parser.html#parser.compilest
parser isexpr	A							https://docs.python.org			<pre><code>
parser.isexpr(st)</code></pre><br>When st represents an 'eval' form, this function returns true, otherwise it returns false. This is useful, since code objects normally cannot be queried for this information using existing built-in functions. Note that the code objects created by compilest() cannot be queried like this either, and are identical to those created by the built-in compile() function.	https://docs.python.org/3.4/library/parser.html#parser.isexpr
parser issuite	A							https://docs.python.org			<pre><code>
parser.issuite(st)</code></pre><br>This function mirrors isexpr() in that it reports whether an ST object represents an 'exec' form, commonly known as a “suite.” It is not safe to assume that this function is equivalent to not isexpr(st), as additional syntactic fragments may be supported in the future.	https://docs.python.org/3.4/library/parser.html#parser.issuite
pdb run	A							https://docs.python.org			<pre><code>
pdb.run(statement, globals=None, locals=None)</code></pre><br>Execute the statement (given as a string or a code object) under debugger control. The debugger prompt appears before any code is executed; you can set breakpoints and type continue, or you can step through the statement using step or next (all these commands are explained below). The optional globals and locals arguments specify the environment in which the code is executed; by default the dictionary of the module __main__ is used. (See the explanation of the built-in exec() or eval() functions.)	https://docs.python.org/3.4/library/pdb.html#pdb.run
pdb runeval	A							https://docs.python.org			<pre><code>
pdb.runeval(expression, globals=None, locals=None)</code></pre><br>Evaluate the expression (given as a string or a code object) under debugger control. When runeval() returns, it returns the value of the expression. Otherwise this function is similar to run().	https://docs.python.org/3.4/library/pdb.html#pdb.runeval
pdb runcall	A							https://docs.python.org			<pre><code>
pdb.runcall(function, *args, **kwds)</code></pre><br>Call the function (a function or method object, not a string) with the given arguments. When runcall() returns, it returns whatever the function call returned. The debugger prompt appears as soon as the function is entered.	https://docs.python.org/3.4/library/pdb.html#pdb.runcall
pdb set_trace	A							https://docs.python.org			<pre><code>
pdb.set_trace()</code></pre><br>Enter the debugger at the calling stack frame. This is useful to hard-code a breakpoint at a given point in a program, even if the code is not otherwise being debugged (e.g. when an assertion fails).	https://docs.python.org/3.4/library/pdb.html#pdb.set_trace
pdb post_mortem	A							https://docs.python.org			<pre><code>
pdb.post_mortem(traceback=None)</code></pre><br>Enter post-mortem debugging of the given traceback object. If no traceback is given, it uses the one of the exception that is currently being handled (an exception must be being handled if the default is to be used).	https://docs.python.org/3.4/library/pdb.html#pdb.post_mortem
pdb pm	A							https://docs.python.org			<pre><code>
pdb.pm()</code></pre><br>Enter post-mortem debugging of the traceback found in sys.last_traceback.	https://docs.python.org/3.4/library/pdb.html#pdb.pm
pickle dump	A							https://docs.python.org			<pre><code>
pickle.dump(obj, file, protocol=None, *, fix_imports=True)</code></pre><br>Write a pickled representation of obj to the open file object file. This is equivalent to Pickler(file, protocol).dump(obj).	https://docs.python.org/3.4/library/pickle.html#pickle.dump
pickle dumps	A							https://docs.python.org			<pre><code>
pickle.dumps(obj, protocol=None, *, fix_imports=True)</code></pre><br>Return the pickled representation of the object as a bytes object, instead of writing it to a file.	https://docs.python.org/3.4/library/pickle.html#pickle.dumps
pickle load	A							https://docs.python.org			<pre><code>
pickle.load(file, *, fix_imports=True, encoding="ASCII", errors="strict")</code></pre><br>Read a pickled object representation from the open file object file and return the reconstituted object hierarchy specified therein. This is equivalent to Unpickler(file).load().	https://docs.python.org/3.4/library/pickle.html#pickle.load
pickle loads	A							https://docs.python.org			<pre><code>
pickle.loads(bytes_object, *, fix_imports=True, encoding="ASCII", errors="strict")</code></pre><br>Read a pickled object hierarchy from a bytes object and return the reconstituted object hierarchy specified therein.	https://docs.python.org/3.4/library/pickle.html#pickle.loads
pickle dump	A							https://docs.python.org			<pre><code>
pickle.dump(obj, file, protocol=None, *, fix_imports=True)</code></pre><br>Write a pickled representation of obj to the open file object file. This is equivalent to Pickler(file, protocol).dump(obj).	https://docs.python.org/3.4/library/pickle.html#pickle.dump
pickle dumps	A							https://docs.python.org			<pre><code>
pickle.dumps(obj, protocol=None, *, fix_imports=True)</code></pre><br>Return the pickled representation of the object as a bytes object, instead of writing it to a file.	https://docs.python.org/3.4/library/pickle.html#pickle.dumps
pickle load	A							https://docs.python.org			<pre><code>
pickle.load(file, *, fix_imports=True, encoding="ASCII", errors="strict")</code></pre><br>Read a pickled object representation from the open file object file and return the reconstituted object hierarchy specified therein. This is equivalent to Unpickler(file).load().	https://docs.python.org/3.4/library/pickle.html#pickle.load
pickle loads	A							https://docs.python.org			<pre><code>
pickle.loads(bytes_object, *, fix_imports=True, encoding="ASCII", errors="strict")</code></pre><br>Read a pickled object hierarchy from a bytes object and return the reconstituted object hierarchy specified therein.	https://docs.python.org/3.4/library/pickle.html#pickle.loads
pickletools dis	A							https://docs.python.org			<pre><code>
pickletools.dis(pickle, out=None, memo=None, indentlevel=4, annotate=0)</code></pre><br>New in version 3.2: The annotate argument.	https://docs.python.org/3.4/library/pickletools.html#pickletools.dis
pickletools genops	A							https://docs.python.org			<pre><code>
pickletools.genops(pickle)</code></pre><br>Provides an iterator over all of the opcodes in a pickle, returning a sequence of (opcode, arg, pos) triples. opcode is an instance of an OpcodeInfo class; arg is the decoded value, as a Python object, of the opcode’s argument; pos is the position at which this opcode is located. pickle can be a string or a file-like object.	https://docs.python.org/3.4/library/pickletools.html#pickletools.genops
pickletools optimize	A							https://docs.python.org			<pre><code>
pickletools.optimize(picklestring)</code></pre><br>Returns a new equivalent pickle string after eliminating unused PUT opcodes. The optimized pickle is shorter, takes less transmission time, requires less storage space, and unpickles more efficiently.	https://docs.python.org/3.4/library/pickletools.html#pickletools.optimize
pickletools dis	A							https://docs.python.org			<pre><code>
pickletools.dis(pickle, out=None, memo=None, indentlevel=4, annotate=0)</code></pre><br>New in version 3.2: The annotate argument.	https://docs.python.org/3.4/library/pickletools.html#pickletools.dis
pickletools genops	A							https://docs.python.org			<pre><code>
pickletools.genops(pickle)</code></pre><br>Provides an iterator over all of the opcodes in a pickle, returning a sequence of (opcode, arg, pos) triples. opcode is an instance of an OpcodeInfo class; arg is the decoded value, as a Python object, of the opcode’s argument; pos is the position at which this opcode is located. pickle can be a string or a file-like object.	https://docs.python.org/3.4/library/pickletools.html#pickletools.genops
pickletools optimize	A							https://docs.python.org			<pre><code>
pickletools.optimize(picklestring)</code></pre><br>Returns a new equivalent pickle string after eliminating unused PUT opcodes. The optimized pickle is shorter, takes less transmission time, requires less storage space, and unpickles more efficiently.	https://docs.python.org/3.4/library/pickletools.html#pickletools.optimize
pkgutil extend_path	A							https://docs.python.org			<pre><code>
pkgutil.extend_path(path, name)</code></pre><br>Extend the search path for the modules which comprise a package. Intended use is to place the following code in a package’s __init__.py:	https://docs.python.org/3.4/library/pkgutil.html#pkgutil.extend_path
pkgutil find_loader	A							https://docs.python.org			<pre><code>
pkgutil.find_loader(fullname)</code></pre><br>Retrieve a PEP 302 module loader for the given fullname.	https://docs.python.org/3.4/library/pkgutil.html#pkgutil.find_loader
pkgutil get_importer	A							https://docs.python.org			<pre><code>
pkgutil.get_importer(path_item)</code></pre><br>Retrieve a PEP 302 importer for the given path_item.	https://docs.python.org/3.4/library/pkgutil.html#pkgutil.get_importer
pkgutil get_loader	A							https://docs.python.org			<pre><code>
pkgutil.get_loader(module_or_name)</code></pre><br>Get a PEP 302 “loader” object for module_or_name.	https://docs.python.org/3.4/library/pkgutil.html#pkgutil.get_loader
pkgutil iter_importers	A							https://docs.python.org			<pre><code>
pkgutil.iter_importers(fullname='')</code></pre><br>Yield PEP 302 importers for the given module name.	https://docs.python.org/3.4/library/pkgutil.html#pkgutil.iter_importers
pkgutil iter_modules	A							https://docs.python.org			<pre><code>
pkgutil.iter_modules(path=None, prefix='')</code></pre><br>Yields (module_finder, name, ispkg) for all submodules on path, or, if path is None, all top-level modules on sys.path.	https://docs.python.org/3.4/library/pkgutil.html#pkgutil.iter_modules
pkgutil walk_packages	A							https://docs.python.org			<pre><code>
pkgutil.walk_packages(path=None, prefix='', onerror=None)</code></pre><br>Yields (module_finder, name, ispkg) for all modules recursively on path, or, if path is None, all accessible modules.	https://docs.python.org/3.4/library/pkgutil.html#pkgutil.walk_packages
pkgutil get_data	A							https://docs.python.org			<pre><code>
pkgutil.get_data(package, resource)</code></pre><br>Get a resource from a package.	https://docs.python.org/3.4/library/pkgutil.html#pkgutil.get_data
platform architecture	A							https://docs.python.org			<pre><code>
platform.architecture(executable=sys.executable, bits='', linkage='')</code></pre><br>Queries the given executable (defaults to the Python interpreter binary) for various architecture information.	https://docs.python.org/3.4/library/platform.html#platform.architecture
platform machine	A							https://docs.python.org			<pre><code>
platform.machine()</code></pre><br>Returns the machine type, e.g. 'i386'. An empty string is returned if the value cannot be determined.	https://docs.python.org/3.4/library/platform.html#platform.machine
platform node	A							https://docs.python.org			<pre><code>
platform.node()</code></pre><br>Returns the computer’s network name (may not be fully qualified!). An empty string is returned if the value cannot be determined.	https://docs.python.org/3.4/library/platform.html#platform.node
platform platform	A							https://docs.python.org			<pre><code>
platform.platform(aliased=0, terse=0)</code></pre><br>Returns a single string identifying the underlying platform with as much useful information as possible.	https://docs.python.org/3.4/library/platform.html#platform.platform
platform processor	A							https://docs.python.org			<pre><code>
platform.processor()</code></pre><br>Returns the (real) processor name, e.g. 'amdk6'.	https://docs.python.org/3.4/library/platform.html#platform.processor
platform python_build	A							https://docs.python.org			<pre><code>
platform.python_build()</code></pre><br>Returns a tuple (buildno, builddate) stating the Python build number and date as strings.	https://docs.python.org/3.4/library/platform.html#platform.python_build
platform python_compiler	A							https://docs.python.org			<pre><code>
platform.python_compiler()</code></pre><br>Returns a string identifying the compiler used for compiling Python.	https://docs.python.org/3.4/library/platform.html#platform.python_compiler
platform python_branch	A							https://docs.python.org			<pre><code>
platform.python_branch()</code></pre><br>Returns a string identifying the Python implementation SCM branch.	https://docs.python.org/3.4/library/platform.html#platform.python_branch
platform python_implementation	A							https://docs.python.org			<pre><code>
platform.python_implementation()</code></pre><br>Returns a string identifying the Python implementation. Possible return values are: ‘CPython’, ‘IronPython’, ‘Jython’, ‘PyPy’.	https://docs.python.org/3.4/library/platform.html#platform.python_implementation
platform python_revision	A							https://docs.python.org			<pre><code>
platform.python_revision()</code></pre><br>Returns a string identifying the Python implementation SCM revision.	https://docs.python.org/3.4/library/platform.html#platform.python_revision
platform python_version	A							https://docs.python.org			<pre><code>
platform.python_version()</code></pre><br>Returns the Python version as string 'major.minor.patchlevel'.	https://docs.python.org/3.4/library/platform.html#platform.python_version
platform python_version_tuple	A							https://docs.python.org			<pre><code>
platform.python_version_tuple()</code></pre><br>Returns the Python version as tuple (major, minor, patchlevel) of strings.	https://docs.python.org/3.4/library/platform.html#platform.python_version_tuple
platform release	A							https://docs.python.org			<pre><code>
platform.release()</code></pre><br>Returns the system’s release, e.g. '2.2.0' or 'NT' An empty string is returned if the value cannot be determined.	https://docs.python.org/3.4/library/platform.html#platform.release
platform system	A							https://docs.python.org			<pre><code>
platform.system()</code></pre><br>Returns the system/OS name, e.g. 'Linux', 'Windows', or 'Java'. An empty string is returned if the value cannot be determined.	https://docs.python.org/3.4/library/platform.html#platform.system
platform system_alias	A							https://docs.python.org			<pre><code>
platform.system_alias(system, release, version)</code></pre><br>Returns (system, release, version) aliased to common marketing names used for some systems. It also does some reordering of the information in some cases where it would otherwise cause confusion.	https://docs.python.org/3.4/library/platform.html#platform.system_alias
platform version	A							https://docs.python.org			<pre><code>
platform.version()</code></pre><br>Returns the system’s release version, e.g. '#3 on degas'. An empty string is returned if the value cannot be determined.	https://docs.python.org/3.4/library/platform.html#platform.version
platform uname	A							https://docs.python.org			<pre><code>
platform.uname()</code></pre><br>Fairly portable uname interface. Returns a namedtuple() containing six attributes: system, node, release, version, machine, and processor.	https://docs.python.org/3.4/library/platform.html#platform.uname
platform java_ver	A							https://docs.python.org			<pre><code>
platform.java_ver(release='', vendor='', vminfo=('', '', ''), osinfo=('', '', ''))</code></pre><br>Version interface for Jython.	https://docs.python.org/3.4/library/platform.html#platform.java_ver
platform win32_ver	A							https://docs.python.org			<pre><code>
platform.win32_ver(release='', version='', csd='', ptype='')</code></pre><br>Get additional version information from the Windows Registry and return a tuple (release, version, csd, ptype) referring to OS release, version number, CSD level (service pack) and OS type (multi/single processor).	https://docs.python.org/3.4/library/platform.html#platform.win32_ver
platform popen	A							https://docs.python.org			<pre><code>
platform.popen(cmd, mode='r', bufsize=-1)</code></pre><br>Portable popen() interface. Find a working popen implementation preferring win32pipe.popen(). On Windows NT, win32pipe.popen() should work; on Windows 9x it hangs due to bugs in the MS C library.	https://docs.python.org/3.4/library/platform.html#platform.popen
platform mac_ver	A							https://docs.python.org			<pre><code>
platform.mac_ver(release='', versioninfo=('', '', ''), machine='')</code></pre><br>Get Mac OS version information and return it as tuple (release, versioninfo, machine) with versioninfo being a tuple (version, dev_stage, non_release_version).	https://docs.python.org/3.4/library/platform.html#platform.mac_ver
platform dist	A							https://docs.python.org			<pre><code>
platform.dist(distname='', version='', id='', supported_dists=('SuSE', 'debian', 'redhat', 'mandrake', ...))</code></pre><br>This is another name for linux_distribution().	https://docs.python.org/3.4/library/platform.html#platform.dist
platform linux_distribution	A							https://docs.python.org			<pre><code>
platform.linux_distribution(distname='', version='', id='', supported_dists=('SuSE', 'debian', 'redhat', 'mandrake', ...), full_distribution_name=1)</code></pre><br>Tries to determine the name of the Linux OS distribution name.	https://docs.python.org/3.4/library/platform.html#platform.linux_distribution
platform libc_ver	A							https://docs.python.org			<pre><code>
platform.libc_ver(executable=sys.executable, lib='', version='', chunksize=2048)</code></pre><br>Tries to determine the libc version against which the file executable (defaults to the Python interpreter) is linked. Returns a tuple of strings (lib, version) which default to the given parameters in case the lookup fails.	https://docs.python.org/3.4/library/platform.html#platform.libc_ver
platform architecture	A							https://docs.python.org			<pre><code>
platform.architecture(executable=sys.executable, bits='', linkage='')</code></pre><br>Queries the given executable (defaults to the Python interpreter binary) for various architecture information.	https://docs.python.org/3.4/library/platform.html#platform.architecture
platform machine	A							https://docs.python.org			<pre><code>
platform.machine()</code></pre><br>Returns the machine type, e.g. 'i386'. An empty string is returned if the value cannot be determined.	https://docs.python.org/3.4/library/platform.html#platform.machine
platform node	A							https://docs.python.org			<pre><code>
platform.node()</code></pre><br>Returns the computer’s network name (may not be fully qualified!). An empty string is returned if the value cannot be determined.	https://docs.python.org/3.4/library/platform.html#platform.node
platform platform	A							https://docs.python.org			<pre><code>
platform.platform(aliased=0, terse=0)</code></pre><br>Returns a single string identifying the underlying platform with as much useful information as possible.	https://docs.python.org/3.4/library/platform.html#platform.platform
platform processor	A							https://docs.python.org			<pre><code>
platform.processor()</code></pre><br>Returns the (real) processor name, e.g. 'amdk6'.	https://docs.python.org/3.4/library/platform.html#platform.processor
platform python_build	A							https://docs.python.org			<pre><code>
platform.python_build()</code></pre><br>Returns a tuple (buildno, builddate) stating the Python build number and date as strings.	https://docs.python.org/3.4/library/platform.html#platform.python_build
platform python_compiler	A							https://docs.python.org			<pre><code>
platform.python_compiler()</code></pre><br>Returns a string identifying the compiler used for compiling Python.	https://docs.python.org/3.4/library/platform.html#platform.python_compiler
platform python_branch	A							https://docs.python.org			<pre><code>
platform.python_branch()</code></pre><br>Returns a string identifying the Python implementation SCM branch.	https://docs.python.org/3.4/library/platform.html#platform.python_branch
platform python_implementation	A							https://docs.python.org			<pre><code>
platform.python_implementation()</code></pre><br>Returns a string identifying the Python implementation. Possible return values are: ‘CPython’, ‘IronPython’, ‘Jython’, ‘PyPy’.	https://docs.python.org/3.4/library/platform.html#platform.python_implementation
platform python_revision	A							https://docs.python.org			<pre><code>
platform.python_revision()</code></pre><br>Returns a string identifying the Python implementation SCM revision.	https://docs.python.org/3.4/library/platform.html#platform.python_revision
platform python_version	A							https://docs.python.org			<pre><code>
platform.python_version()</code></pre><br>Returns the Python version as string 'major.minor.patchlevel'.	https://docs.python.org/3.4/library/platform.html#platform.python_version
platform python_version_tuple	A							https://docs.python.org			<pre><code>
platform.python_version_tuple()</code></pre><br>Returns the Python version as tuple (major, minor, patchlevel) of strings.	https://docs.python.org/3.4/library/platform.html#platform.python_version_tuple
platform release	A							https://docs.python.org			<pre><code>
platform.release()</code></pre><br>Returns the system’s release, e.g. '2.2.0' or 'NT' An empty string is returned if the value cannot be determined.	https://docs.python.org/3.4/library/platform.html#platform.release
platform system	A							https://docs.python.org			<pre><code>
platform.system()</code></pre><br>Returns the system/OS name, e.g. 'Linux', 'Windows', or 'Java'. An empty string is returned if the value cannot be determined.	https://docs.python.org/3.4/library/platform.html#platform.system
platform system_alias	A							https://docs.python.org			<pre><code>
platform.system_alias(system, release, version)</code></pre><br>Returns (system, release, version) aliased to common marketing names used for some systems. It also does some reordering of the information in some cases where it would otherwise cause confusion.	https://docs.python.org/3.4/library/platform.html#platform.system_alias
platform version	A							https://docs.python.org			<pre><code>
platform.version()</code></pre><br>Returns the system’s release version, e.g. '#3 on degas'. An empty string is returned if the value cannot be determined.	https://docs.python.org/3.4/library/platform.html#platform.version
platform uname	A							https://docs.python.org			<pre><code>
platform.uname()</code></pre><br>Fairly portable uname interface. Returns a namedtuple() containing six attributes: system, node, release, version, machine, and processor.	https://docs.python.org/3.4/library/platform.html#platform.uname
platform java_ver	A							https://docs.python.org			<pre><code>
platform.java_ver(release='', vendor='', vminfo=('', '', ''), osinfo=('', '', ''))</code></pre><br>Version interface for Jython.	https://docs.python.org/3.4/library/platform.html#platform.java_ver
platform win32_ver	A							https://docs.python.org			<pre><code>
platform.win32_ver(release='', version='', csd='', ptype='')</code></pre><br>Get additional version information from the Windows Registry and return a tuple (release, version, csd, ptype) referring to OS release, version number, CSD level (service pack) and OS type (multi/single processor).	https://docs.python.org/3.4/library/platform.html#platform.win32_ver
platform popen	A							https://docs.python.org			<pre><code>
platform.popen(cmd, mode='r', bufsize=-1)</code></pre><br>Portable popen() interface. Find a working popen implementation preferring win32pipe.popen(). On Windows NT, win32pipe.popen() should work; on Windows 9x it hangs due to bugs in the MS C library.	https://docs.python.org/3.4/library/platform.html#platform.popen
platform popen	A							https://docs.python.org			<pre><code>
platform.popen(cmd, mode='r', bufsize=-1)</code></pre><br>Portable popen() interface. Find a working popen implementation preferring win32pipe.popen(). On Windows NT, win32pipe.popen() should work; on Windows 9x it hangs due to bugs in the MS C library.	https://docs.python.org/3.4/library/platform.html#platform.popen
platform mac_ver	A							https://docs.python.org			<pre><code>
platform.mac_ver(release='', versioninfo=('', '', ''), machine='')</code></pre><br>Get Mac OS version information and return it as tuple (release, versioninfo, machine) with versioninfo being a tuple (version, dev_stage, non_release_version).	https://docs.python.org/3.4/library/platform.html#platform.mac_ver
platform dist	A							https://docs.python.org			<pre><code>
platform.dist(distname='', version='', id='', supported_dists=('SuSE', 'debian', 'redhat', 'mandrake', ...))</code></pre><br>This is another name for linux_distribution().	https://docs.python.org/3.4/library/platform.html#platform.dist
platform linux_distribution	A							https://docs.python.org			<pre><code>
platform.linux_distribution(distname='', version='', id='', supported_dists=('SuSE', 'debian', 'redhat', 'mandrake', ...), full_distribution_name=1)</code></pre><br>Tries to determine the name of the Linux OS distribution name.	https://docs.python.org/3.4/library/platform.html#platform.linux_distribution
platform libc_ver	A							https://docs.python.org			<pre><code>
platform.libc_ver(executable=sys.executable, lib='', version='', chunksize=2048)</code></pre><br>Tries to determine the libc version against which the file executable (defaults to the Python interpreter) is linked. Returns a tuple of strings (lib, version) which default to the given parameters in case the lookup fails.	https://docs.python.org/3.4/library/platform.html#platform.libc_ver
plistlib load	A							https://docs.python.org			<pre><code>
plistlib.load(fp, *, fmt=None, use_builtin_types=True, dict_type=dict)</code></pre><br>Read a plist file. fp should be a readable and binary file object. Return the unpacked root object (which usually is a dictionary).	https://docs.python.org/3.4/library/plistlib.html#plistlib.load
plistlib loads	A							https://docs.python.org			<pre><code>
plistlib.loads(data, *, fmt=None, use_builtin_types=True, dict_type=dict)</code></pre><br>Load a plist from a bytes object. See load() for an explanation of the keyword arguments.	https://docs.python.org/3.4/library/plistlib.html#plistlib.loads
plistlib dump	A							https://docs.python.org			<pre><code>
plistlib.dump(value, fp, *, fmt=FMT_XML, sort_keys=True, skipkeys=False)</code></pre><br>Write value to a plist file. Fp should be a writable, binary file object.	https://docs.python.org/3.4/library/plistlib.html#plistlib.dump
plistlib dumps	A							https://docs.python.org			<pre><code>
plistlib.dumps(value, *, fmt=FMT_XML, sort_keys=True, skipkeys=False)</code></pre><br>Return value as a plist-formatted bytes object. See the documentation for dump() for an explanation of the keyword arguments of this function.	https://docs.python.org/3.4/library/plistlib.html#plistlib.dumps
plistlib readPlist	A							https://docs.python.org			<pre><code>
plistlib.readPlist(pathOrFile)</code></pre><br>Read a plist file. pathOrFile may be either a file name or a (readable and binary) file object. Returns the unpacked root object (which usually is a dictionary).	https://docs.python.org/3.4/library/plistlib.html#plistlib.readPlist
plistlib writePlist	A							https://docs.python.org			<pre><code>
plistlib.writePlist(rootObject, pathOrFile)</code></pre><br>Write rootObject to an XML plist file. pathOrFile may be either a file name or a (writable and binary) file object	https://docs.python.org/3.4/library/plistlib.html#plistlib.writePlist
plistlib readPlistFromBytes	A							https://docs.python.org			<pre><code>
plistlib.readPlistFromBytes(data)</code></pre><br>Read a plist data from a bytes object. Return the root object.	https://docs.python.org/3.4/library/plistlib.html#plistlib.readPlistFromBytes
plistlib writePlistToBytes	A							https://docs.python.org			<pre><code>
plistlib.writePlistToBytes(rootObject)</code></pre><br>Return rootObject as an XML plist-formatted bytes object.	https://docs.python.org/3.4/library/plistlib.html#plistlib.writePlistToBytes
pprint pformat	A							https://docs.python.org			<pre><code>
pprint.pformat(object, indent=1, width=80, depth=None, *, compact=False)</code></pre><br>Return the formatted representation of object as a string. indent, width, depth and compact will be passed to the PrettyPrinter constructor as formatting parameters.	https://docs.python.org/3.4/library/pprint.html#pprint.pformat
pprint pprint	A							https://docs.python.org			<pre><code>
pprint.pprint(object, stream=None, indent=1, width=80, depth=None, *, compact=False)</code></pre><br>Prints the formatted representation of object on stream, followed by a newline. If stream is None, sys.stdout is used. This may be used in the interactive interpreter instead of the print() function for inspecting values (you can even reassign print = pprint.pprint for use within a scope). indent, width, depth and compact will be passed to the PrettyPrinter constructor as formatting parameters.	https://docs.python.org/3.4/library/pprint.html#pprint.pprint
pprint isreadable	A							https://docs.python.org			<pre><code>
pprint.isreadable(object)</code></pre><br>Determine if the formatted representation of object is “readable,” or can be used to reconstruct the value using eval(). This always returns False for recursive objects.	https://docs.python.org/3.4/library/pprint.html#pprint.isreadable
pprint isrecursive	A							https://docs.python.org			<pre><code>
pprint.isrecursive(object)</code></pre><br>Determine if object requires a recursive representation.	https://docs.python.org/3.4/library/pprint.html#pprint.isrecursive
pprint saferepr	A							https://docs.python.org			<pre><code>
pprint.saferepr(object)</code></pre><br>Return a string representation of object, protected against recursive data structures. If the representation of object exposes a recursive entry, the recursive reference will be represented as <Recursion on typename with id=number>. The representation is not otherwise formatted.	https://docs.python.org/3.4/library/pprint.html#pprint.saferepr
profile run	A							https://docs.python.org			<pre><code>
profile.run(command, filename=None, sort=-1)</code></pre><br>This function takes a single argument that can be passed to the exec() function, and an optional file name. In all cases this routine executes:	https://docs.python.org/3.4/library/profile.html#profile.run
profile runctx	A							https://docs.python.org			<pre><code>
profile.runctx(command, globals, locals, filename=None)</code></pre><br>This function is similar to run(), with added arguments to supply the globals and locals dictionaries for the command string. This routine executes:	https://docs.python.org/3.4/library/profile.html#profile.runctx
profile run	A							https://docs.python.org			<pre><code>
profile.run(command, filename=None, sort=-1)</code></pre><br>This function takes a single argument that can be passed to the exec() function, and an optional file name. In all cases this routine executes:	https://docs.python.org/3.4/library/profile.html#profile.run
profile runctx	A							https://docs.python.org			<pre><code>
profile.runctx(command, globals, locals, filename=None)</code></pre><br>This function is similar to run(), with added arguments to supply the globals and locals dictionaries for the command string. This routine executes:	https://docs.python.org/3.4/library/profile.html#profile.runctx
pty fork	A							https://docs.python.org			<pre><code>
pty.fork()</code></pre><br>Fork. Connect the child’s controlling terminal to a pseudo-terminal. Return value is (pid, fd). Note that the child gets pid 0, and the fd is invalid. The parent’s return value is the pid of the child, and fd is a file descriptor connected to the child’s controlling terminal (and also to the child’s standard input and output).	https://docs.python.org/3.4/library/pty.html#pty.fork
pty openpty	A							https://docs.python.org			<pre><code>
pty.openpty()</code></pre><br>Open a new pseudo-terminal pair, using os.openpty() if possible, or emulation code for generic Unix systems. Return a pair of file descriptors (master, slave), for the master and the slave end, respectively.	https://docs.python.org/3.4/library/pty.html#pty.openpty
pty spawn	A							https://docs.python.org			<pre><code>
pty.spawn(argv[, master_read[, stdin_read]])</code></pre><br>Spawn a process, and connect its controlling terminal with the current process’s standard io. This is often used to baffle programs which insist on reading from the controlling terminal.	https://docs.python.org/3.4/library/pty.html#pty.spawn
pwd getpwuid	A							https://docs.python.org			<pre><code>
pwd.getpwuid(uid)</code></pre><br>Return the password database entry for the given numeric user ID.	https://docs.python.org/3.4/library/pwd.html#pwd.getpwuid
pwd getpwnam	A							https://docs.python.org			<pre><code>
pwd.getpwnam(name)</code></pre><br>Return the password database entry for the given user name.	https://docs.python.org/3.4/library/pwd.html#pwd.getpwnam
pwd getpwall	A							https://docs.python.org			<pre><code>
pwd.getpwall()</code></pre><br>Return a list of all available password database entries, in arbitrary order.	https://docs.python.org/3.4/library/pwd.html#pwd.getpwall
py_compile compile	A							https://docs.python.org			<pre><code>
py_compile.compile(file, cfile=None, dfile=None, doraise=False, optimize=-1)</code></pre><br>Compile a source file to byte-code and write out the byte-code cache file. The source code is loaded from the file name file. The byte-code is written to cfile, which defaults to the PEP 3147 path, ending in .pyc (.pyo if optimization is enabled in the current interpreter). For example, if file is /foo/bar/baz.py cfile will default to /foo/bar/__pycache__/baz.cpython-32.pyc for Python 3.2. If dfile is specified, it is used as the name of the source file in error messages when instead of file. If doraise is true, a PyCompileError is raised when an error is encountered while compiling file. If doraise is false (the default), an error string is written to sys.stderr, but no exception is raised. This function returns the path to byte-compiled file, i.e. whatever cfile value was used.	https://docs.python.org/3.4/library/py_compile.html#py_compile.compile
py_compile main	A							https://docs.python.org			<pre><code>
py_compile.main(args=None)</code></pre><br>Compile several source files. The files named in args (or on the command line, if args is None) are compiled and the resulting bytecode is cached in the normal manner. This function does not search a directory structure to locate source files; it only compiles files named explicitly. If '-' is the only parameter in args, the list of files is taken from standard input.	https://docs.python.org/3.4/library/py_compile.html#py_compile.main
pyclbr readmodule	A							https://docs.python.org			<pre><code>
pyclbr.readmodule(module, path=None)</code></pre><br>Read a module and return a dictionary mapping class names to class descriptor objects. The parameter module should be the name of a module as a string; it may be the name of a module within a package. The path parameter should be a sequence, and is used to augment the value of sys.path, which is used to locate module source code.	https://docs.python.org/3.4/library/pyclbr.html#pyclbr.readmodule
pyclbr readmodule_ex	A							https://docs.python.org			<pre><code>
pyclbr.readmodule_ex(module, path=None)</code></pre><br>Like readmodule(), but the returned dictionary, in addition to mapping class names to class descriptor objects, also maps top-level function names to function descriptor objects. Moreover, if the module being read is a package, the key '__path__' in the returned dictionary has as its value a list which contains the package search path.	https://docs.python.org/3.4/library/pyclbr.html#pyclbr.readmodule_ex
xml.parsers.expat ErrorString	A							https://docs.python.org			<pre><code>
xml.parsers.expat.ErrorString(errno)</code></pre><br>Returns an explanatory string for a given error number errno.	https://docs.python.org/3.4/library/pyexpat.html#xml.parsers.expat.ErrorString
xml.parsers.expat ParserCreate	A							https://docs.python.org			<pre><code>
xml.parsers.expat.ParserCreate(encoding=None, namespace_separator=None)</code></pre><br>Creates and returns a new xmlparser object.  encoding, if specified, must be a string naming the encoding used by the XML data. Expat doesn’t support as many encodings as Python does, and its repertoire of encodings can’t be extended; it supports UTF-8, UTF-16, ISO-8859-1 (Latin1), and ASCII. If encoding [1] is given it will override the implicit or explicit encoding of the document.	https://docs.python.org/3.4/library/pyexpat.html#xml.parsers.expat.ParserCreate
quopri decode	A							https://docs.python.org			<pre><code>
quopri.decode(input, output, header=False)</code></pre><br>Decode the contents of the input file and write the resulting decoded binary data to the output file. input and output must be binary file objects. If the optional argument header is present and true, underscore will be decoded as space. This is used to decode “Q”-encoded headers as described in RFC 1522: “MIME (Multipurpose Internet Mail Extensions) Part Two: Message Header Extensions for Non-ASCII Text”.	https://docs.python.org/3.4/library/quopri.html#quopri.decode
quopri encode	A							https://docs.python.org			<pre><code>
quopri.encode(input, output, quotetabs, header=False)</code></pre><br>Encode the contents of the input file and write the resulting quoted- printable data to the output file. input and output must be binary file objects. quotetabs, a flag which controls whether to encode embedded spaces and tabs must be provideda and when true it encodes such embedded whitespace, and when false it leaves them unencoded. Note that spaces and tabs appearing at the end of lines are always encoded, as per RFC 1521. header is a flag which controls if spaces are encoded as underscores as per RFC 1522.	https://docs.python.org/3.4/library/quopri.html#quopri.encode
quopri decodestring	A							https://docs.python.org			<pre><code>
quopri.decodestring(s, header=False)</code></pre><br>Like decode(), except that it accepts a source bytes and returns the corresponding decoded bytes.	https://docs.python.org/3.4/library/quopri.html#quopri.decodestring
quopri encodestring	A							https://docs.python.org			<pre><code>
quopri.encodestring(s, quotetabs=False, header=False)</code></pre><br>Like encode(), except that it accepts a source bytes and returns the corresponding encoded bytes. By default, it sends a False value to quotetabs parameter of the encode() function.	https://docs.python.org/3.4/library/quopri.html#quopri.encodestring
random seed	A							https://docs.python.org			<pre><code>
random.seed(a=None, version=2)</code></pre><br>Initialize the random number generator.	https://docs.python.org/3.4/library/random.html#random.seed
random getstate	A							https://docs.python.org			<pre><code>
random.getstate()</code></pre><br>Return an object capturing the current internal state of the generator. This object can be passed to setstate() to restore the state.	https://docs.python.org/3.4/library/random.html#random.getstate
random setstate	A							https://docs.python.org			<pre><code>
random.setstate(state)</code></pre><br>state should have been obtained from a previous call to getstate(), and setstate() restores the internal state of the generator to what it was at the time getstate() was called.	https://docs.python.org/3.4/library/random.html#random.setstate
random getrandbits	A							https://docs.python.org			<pre><code>
random.getrandbits(k)</code></pre><br>Returns a Python integer with k random bits. This method is supplied with the MersenneTwister generator and some other generators may also provide it as an optional part of the API. When available, getrandbits() enables randrange() to handle arbitrarily large ranges.	https://docs.python.org/3.4/library/random.html#random.getrandbits
random randrange	A							https://docs.python.org			<pre><code>
random.randrange(stop)</code></pre><br>Return a randomly selected element from range(start, stop, step). This is equivalent to choice(range(start, stop, step)), but doesn’t actually build a range object.	https://docs.python.org/3.4/library/random.html#random.randrange
random randint	A							https://docs.python.org			<pre><code>
random.randint(a, b)</code></pre><br>Return a random integer N such that a <= N <= b. Alias for randrange(a, b+1).	https://docs.python.org/3.4/library/random.html#random.randint
random choice	A							https://docs.python.org			<pre><code>
random.choice(seq)</code></pre><br>Return a random element from the non-empty sequence seq. If seq is empty, raises IndexError.	https://docs.python.org/3.4/library/random.html#random.choice
random shuffle	A							https://docs.python.org			<pre><code>
random.shuffle(x[, random])</code></pre><br>Shuffle the sequence x in place. The optional argument random is a 0-argument function returning a random float in [0.0, 1.0); by default, this is the function random().	https://docs.python.org/3.4/library/random.html#random.shuffle
random sample	A							https://docs.python.org			<pre><code>
random.sample(population, k)</code></pre><br>Return a k length list of unique elements chosen from the population sequence or set. Used for random sampling without replacement.	https://docs.python.org/3.4/library/random.html#random.sample
random random	A							https://docs.python.org			<pre><code>
random.random()</code></pre><br>Return the next random floating point number in the range [0.0, 1.0).	https://docs.python.org/3.4/library/random.html#random.random
random uniform	A							https://docs.python.org			<pre><code>
random.uniform(a, b)</code></pre><br>Return a random floating point number N such that a <= N <= b for a <= b and b <= N <= a for b < a.	https://docs.python.org/3.4/library/random.html#random.uniform
random triangular	A							https://docs.python.org			<pre><code>
random.triangular(low, high, mode)</code></pre><br>Return a random floating point number N such that low <= N <= high and with the specified mode between those bounds. The low and high bounds default to zero and one. The mode argument defaults to the midpoint between the bounds, giving a symmetric distribution.	https://docs.python.org/3.4/library/random.html#random.triangular
random betavariate	A							https://docs.python.org			<pre><code>
random.betavariate(alpha, beta)</code></pre><br>Beta distribution. Conditions on the parameters are alpha > 0 and beta > 0. Returned values range between 0 and 1.	https://docs.python.org/3.4/library/random.html#random.betavariate
random expovariate	A							https://docs.python.org			<pre><code>
random.expovariate(lambd)</code></pre><br>Exponential distribution. lambd is 1.0 divided by the desired mean. It should be nonzero. (The parameter would be called “lambda”, but that is a reserved word in Python.) Returned values range from 0 to positive infinity if lambd is positive, and from negative infinity to 0 if lambd is negative.	https://docs.python.org/3.4/library/random.html#random.expovariate
random gammavariate	A							https://docs.python.org			<pre><code>
random.gammavariate(alpha, beta)</code></pre><br>Gamma distribution. (Not the gamma function!) Conditions on the parameters are alpha > 0 and beta > 0.	https://docs.python.org/3.4/library/random.html#random.gammavariate
random gauss	A							https://docs.python.org			<pre><code>
random.gauss(mu, sigma)</code></pre><br>Gaussian distribution. mu is the mean, and sigma is the standard deviation. This is slightly faster than the normalvariate() function defined below.	https://docs.python.org/3.4/library/random.html#random.gauss
random lognormvariate	A							https://docs.python.org			<pre><code>
random.lognormvariate(mu, sigma)</code></pre><br>Log normal distribution. If you take the natural logarithm of this distribution, you’ll get a normal distribution with mean mu and standard deviation sigma. mu can have any value, and sigma must be greater than zero.	https://docs.python.org/3.4/library/random.html#random.lognormvariate
random normalvariate	A							https://docs.python.org			<pre><code>
random.normalvariate(mu, sigma)</code></pre><br>Normal distribution. mu is the mean, and sigma is the standard deviation.	https://docs.python.org/3.4/library/random.html#random.normalvariate
random vonmisesvariate	A							https://docs.python.org			<pre><code>
random.vonmisesvariate(mu, kappa)</code></pre><br>mu is the mean angle, expressed in radians between 0 and 2*pi, and kappa is the concentration parameter, which must be greater than or equal to zero. If kappa is equal to zero, this distribution reduces to a uniform random angle over the range 0 to 2*pi.	https://docs.python.org/3.4/library/random.html#random.vonmisesvariate
random paretovariate	A							https://docs.python.org			<pre><code>
random.paretovariate(alpha)</code></pre><br>Pareto distribution. alpha is the shape parameter.	https://docs.python.org/3.4/library/random.html#random.paretovariate
random weibullvariate	A							https://docs.python.org			<pre><code>
random.weibullvariate(alpha, beta)</code></pre><br>Weibull distribution. alpha is the scale parameter and beta is the shape parameter.	https://docs.python.org/3.4/library/random.html#random.weibullvariate
re compile	A							https://docs.python.org			<pre><code>
re.compile(pattern, flags=0)</code></pre><br>Compile a regular expression pattern into a regular expression object, which can be used for matching using its match() and search() methods, described below.	https://docs.python.org/3.4/library/re.html#re.compile
re search	A							https://docs.python.org			<pre><code>
re.search(pattern, string, flags=0)</code></pre><br>Scan through string looking for the first location where the regular expression pattern produces a match, and return a corresponding match object. Return None if no position in the string matches the pattern; note that this is different from finding a zero-length match at some point in the string.	https://docs.python.org/3.4/library/re.html#re.search
re match	A							https://docs.python.org			<pre><code>
re.match(pattern, string, flags=0)</code></pre><br>If zero or more characters at the beginning of string match the regular expression pattern, return a corresponding match object. Return None if the string does not match the pattern; note that this is different from a zero-length match.	https://docs.python.org/3.4/library/re.html#re.match
re fullmatch	A							https://docs.python.org			<pre><code>
re.fullmatch(pattern, string, flags=0)</code></pre><br>If the whole string matches the regular expression pattern, return a corresponding match object. Return None if the string does not match the pattern; note that this is different from a zero-length match.	https://docs.python.org/3.4/library/re.html#re.fullmatch
re split	A							https://docs.python.org			<pre><code>
re.split(pattern, string, maxsplit=0, flags=0)</code></pre><br>Split string by the occurrences of pattern. If capturing parentheses are used in pattern, then the text of all groups in the pattern are also returned as part of the resulting list. If maxsplit is nonzero, at most maxsplit splits occur, and the remainder of the string is returned as the final element of the list.	https://docs.python.org/3.4/library/re.html#re.split
re findall	A							https://docs.python.org			<pre><code>
re.findall(pattern, string, flags=0)</code></pre><br>Return all non-overlapping matches of pattern in string, as a list of strings. The string is scanned left-to-right, and matches are returned in the order found. If one or more groups are present in the pattern, return a list of groups; this will be a list of tuples if the pattern has more than one group. Empty matches are included in the result unless they touch the beginning of another match.	https://docs.python.org/3.4/library/re.html#re.findall
re finditer	A							https://docs.python.org			<pre><code>
re.finditer(pattern, string, flags=0)</code></pre><br>Return an iterator yielding match objects over all non-overlapping matches for the RE pattern in string. The string is scanned left-to-right, and matches are returned in the order found. Empty matches are included in the result unless they touch the beginning of another match.	https://docs.python.org/3.4/library/re.html#re.finditer
re sub	A							https://docs.python.org			<pre><code>
re.sub(pattern, repl, string, count=0, flags=0)</code></pre><br>Return the string obtained by replacing the leftmost non-overlapping occurrences of pattern in string by the replacement repl. If the pattern isn’t found, string is returned unchanged. repl can be a string or a function; if it is a string, any backslash escapes in it are processed. That is, \n is converted to a single newline character, \r is converted to a carriage return, and so forth. Unknown escapes such as \j are left alone. Backreferences, such as \6, are replaced with the substring matched by group 6 in the pattern. For example:	https://docs.python.org/3.4/library/re.html#re.sub
re subn	A							https://docs.python.org			<pre><code>
re.subn(pattern, repl, string, count=0, flags=0)</code></pre><br>Perform the same operation as sub(), but return a tuple (new_string, number_of_subs_made).	https://docs.python.org/3.4/library/re.html#re.subn
re escape	A							https://docs.python.org			<pre><code>
re.escape(string)</code></pre><br>Escape all the characters in pattern except ASCII letters, numbers and '_'. This is useful if you want to match an arbitrary literal string that may have regular expression metacharacters in it.	https://docs.python.org/3.4/library/re.html#re.escape
re purge	A							https://docs.python.org			<pre><code>
re.purge()</code></pre><br>Clear the regular expression cache.	https://docs.python.org/3.4/library/re.html#re.purge
re compile	A							https://docs.python.org			<pre><code>
re.compile(pattern, flags=0)</code></pre><br>Compile a regular expression pattern into a regular expression object, which can be used for matching using its match() and search() methods, described below.	https://docs.python.org/3.4/library/re.html#re.compile
re search	A							https://docs.python.org			<pre><code>
re.search(pattern, string, flags=0)</code></pre><br>Scan through string looking for the first location where the regular expression pattern produces a match, and return a corresponding match object. Return None if no position in the string matches the pattern; note that this is different from finding a zero-length match at some point in the string.	https://docs.python.org/3.4/library/re.html#re.search
re match	A							https://docs.python.org			<pre><code>
re.match(pattern, string, flags=0)</code></pre><br>If zero or more characters at the beginning of string match the regular expression pattern, return a corresponding match object. Return None if the string does not match the pattern; note that this is different from a zero-length match.	https://docs.python.org/3.4/library/re.html#re.match
re fullmatch	A							https://docs.python.org			<pre><code>
re.fullmatch(pattern, string, flags=0)</code></pre><br>If the whole string matches the regular expression pattern, return a corresponding match object. Return None if the string does not match the pattern; note that this is different from a zero-length match.	https://docs.python.org/3.4/library/re.html#re.fullmatch
re split	A							https://docs.python.org			<pre><code>
re.split(pattern, string, maxsplit=0, flags=0)</code></pre><br>Split string by the occurrences of pattern. If capturing parentheses are used in pattern, then the text of all groups in the pattern are also returned as part of the resulting list. If maxsplit is nonzero, at most maxsplit splits occur, and the remainder of the string is returned as the final element of the list.	https://docs.python.org/3.4/library/re.html#re.split
re findall	A							https://docs.python.org			<pre><code>
re.findall(pattern, string, flags=0)</code></pre><br>Return all non-overlapping matches of pattern in string, as a list of strings. The string is scanned left-to-right, and matches are returned in the order found. If one or more groups are present in the pattern, return a list of groups; this will be a list of tuples if the pattern has more than one group. Empty matches are included in the result unless they touch the beginning of another match.	https://docs.python.org/3.4/library/re.html#re.findall
re finditer	A							https://docs.python.org			<pre><code>
re.finditer(pattern, string, flags=0)</code></pre><br>Return an iterator yielding match objects over all non-overlapping matches for the RE pattern in string. The string is scanned left-to-right, and matches are returned in the order found. Empty matches are included in the result unless they touch the beginning of another match.	https://docs.python.org/3.4/library/re.html#re.finditer
re sub	A							https://docs.python.org			<pre><code>
re.sub(pattern, repl, string, count=0, flags=0)</code></pre><br>Return the string obtained by replacing the leftmost non-overlapping occurrences of pattern in string by the replacement repl. If the pattern isn’t found, string is returned unchanged. repl can be a string or a function; if it is a string, any backslash escapes in it are processed. That is, \n is converted to a single newline character, \r is converted to a carriage return, and so forth. Unknown escapes such as \j are left alone. Backreferences, such as \6, are replaced with the substring matched by group 6 in the pattern. For example:	https://docs.python.org/3.4/library/re.html#re.sub
re subn	A							https://docs.python.org			<pre><code>
re.subn(pattern, repl, string, count=0, flags=0)</code></pre><br>Perform the same operation as sub(), but return a tuple (new_string, number_of_subs_made).	https://docs.python.org/3.4/library/re.html#re.subn
re escape	A							https://docs.python.org			<pre><code>
re.escape(string)</code></pre><br>Escape all the characters in pattern except ASCII letters, numbers and '_'. This is useful if you want to match an arbitrary literal string that may have regular expression metacharacters in it.	https://docs.python.org/3.4/library/re.html#re.escape
re purge	A							https://docs.python.org			<pre><code>
re.purge()</code></pre><br>Clear the regular expression cache.	https://docs.python.org/3.4/library/re.html#re.purge
readline parse_and_bind	A							https://docs.python.org			<pre><code>
readline.parse_and_bind(string)</code></pre><br>Parse and execute single line of a readline init file.	https://docs.python.org/3.4/library/readline.html#readline.parse_and_bind
readline get_line_buffer	A							https://docs.python.org			<pre><code>
readline.get_line_buffer()</code></pre><br>Return the current contents of the line buffer.	https://docs.python.org/3.4/library/readline.html#readline.get_line_buffer
readline insert_text	A							https://docs.python.org			<pre><code>
readline.insert_text(string)</code></pre><br>Insert text into the command line.	https://docs.python.org/3.4/library/readline.html#readline.insert_text
readline read_init_file	A							https://docs.python.org			<pre><code>
readline.read_init_file([filename])</code></pre><br>Parse a readline initialization file. The default filename is the last filename used.	https://docs.python.org/3.4/library/readline.html#readline.read_init_file
readline read_history_file	A							https://docs.python.org			<pre><code>
readline.read_history_file([filename])</code></pre><br>Load a readline history file. The default filename is ~/.history.	https://docs.python.org/3.4/library/readline.html#readline.read_history_file
readline write_history_file	A							https://docs.python.org			<pre><code>
readline.write_history_file([filename])</code></pre><br>Save a readline history file. The default filename is ~/.history.	https://docs.python.org/3.4/library/readline.html#readline.write_history_file
readline clear_history	A							https://docs.python.org			<pre><code>
readline.clear_history()</code></pre><br>Clear the current history. (Note: this function is not available if the installed version of GNU readline doesn’t support it.)	https://docs.python.org/3.4/library/readline.html#readline.clear_history
readline get_history_length	A							https://docs.python.org			<pre><code>
readline.get_history_length()</code></pre><br>Return the desired length of the history file. Negative values imply unlimited history file size.	https://docs.python.org/3.4/library/readline.html#readline.get_history_length
readline set_history_length	A							https://docs.python.org			<pre><code>
readline.set_history_length(length)</code></pre><br>Set the number of lines to save in the history file. write_history_file() uses this value to truncate the history file when saving. Negative values imply unlimited history file size.	https://docs.python.org/3.4/library/readline.html#readline.set_history_length
readline get_current_history_length	A							https://docs.python.org			<pre><code>
readline.get_current_history_length()</code></pre><br>Return the number of lines currently in the history. (This is different from get_history_length(), which returns the maximum number of lines that will be written to a history file.)	https://docs.python.org/3.4/library/readline.html#readline.get_current_history_length
readline get_history_item	A							https://docs.python.org			<pre><code>
readline.get_history_item(index)</code></pre><br>Return the current contents of history item at index.	https://docs.python.org/3.4/library/readline.html#readline.get_history_item
readline remove_history_item	A							https://docs.python.org			<pre><code>
readline.remove_history_item(pos)</code></pre><br>Remove history item specified by its position from the history.	https://docs.python.org/3.4/library/readline.html#readline.remove_history_item
readline replace_history_item	A							https://docs.python.org			<pre><code>
readline.replace_history_item(pos, line)</code></pre><br>Replace history item specified by its position with the given line.	https://docs.python.org/3.4/library/readline.html#readline.replace_history_item
readline redisplay	A							https://docs.python.org			<pre><code>
readline.redisplay()</code></pre><br>Change what’s displayed on the screen to reflect the current contents of the line buffer.	https://docs.python.org/3.4/library/readline.html#readline.redisplay
readline set_startup_hook	A							https://docs.python.org			<pre><code>
readline.set_startup_hook([function])</code></pre><br>Set or remove the startup_hook function. If function is specified, it will be used as the new startup_hook function; if omitted or None, any hook function already installed is removed. The startup_hook function is called with no arguments just before readline prints the first prompt.	https://docs.python.org/3.4/library/readline.html#readline.set_startup_hook
readline set_pre_input_hook	A							https://docs.python.org			<pre><code>
readline.set_pre_input_hook([function])</code></pre><br>Set or remove the pre_input_hook function. If function is specified, it will be used as the new pre_input_hook function; if omitted or None, any hook function already installed is removed. The pre_input_hook function is called with no arguments after the first prompt has been printed and just before readline starts reading input characters.	https://docs.python.org/3.4/library/readline.html#readline.set_pre_input_hook
readline set_completer	A							https://docs.python.org			<pre><code>
readline.set_completer([function])</code></pre><br>Set or remove the completer function. If function is specified, it will be used as the new completer function; if omitted or None, any completer function already installed is removed. The completer function is called as function(text, state), for state in 0, 1, 2, ..., until it returns a non-string value. It should return the next possible completion starting with text.	https://docs.python.org/3.4/library/readline.html#readline.set_completer
readline get_completer	A							https://docs.python.org			<pre><code>
readline.get_completer()</code></pre><br>Get the completer function, or None if no completer function has been set.	https://docs.python.org/3.4/library/readline.html#readline.get_completer
readline get_completion_type	A							https://docs.python.org			<pre><code>
readline.get_completion_type()</code></pre><br>Get the type of completion being attempted.	https://docs.python.org/3.4/library/readline.html#readline.get_completion_type
readline get_begidx	A							https://docs.python.org			<pre><code>
readline.get_begidx()</code></pre><br>Get the beginning index of the readline tab-completion scope.	https://docs.python.org/3.4/library/readline.html#readline.get_begidx
readline get_endidx	A							https://docs.python.org			<pre><code>
readline.get_endidx()</code></pre><br>Get the ending index of the readline tab-completion scope.	https://docs.python.org/3.4/library/readline.html#readline.get_endidx
readline set_completer_delims	A							https://docs.python.org			<pre><code>
readline.set_completer_delims(string)</code></pre><br>Set the readline word delimiters for tab-completion.	https://docs.python.org/3.4/library/readline.html#readline.set_completer_delims
readline get_completer_delims	A							https://docs.python.org			<pre><code>
readline.get_completer_delims()</code></pre><br>Get the readline word delimiters for tab-completion.	https://docs.python.org/3.4/library/readline.html#readline.get_completer_delims
readline set_completion_display_matches_hook	A							https://docs.python.org			<pre><code>
readline.set_completion_display_matches_hook([function])</code></pre><br>Set or remove the completion display function. If function is specified, it will be used as the new completion display function; if omitted or None, any completion display function already installed is removed. The completion display function is called as function(substitution, [matches], longest_match_length) once each time matches need to be displayed.	https://docs.python.org/3.4/library/readline.html#readline.set_completion_display_matches_hook
readline add_history	A							https://docs.python.org			<pre><code>
readline.add_history(line)</code></pre><br>Append a line to the history buffer, as if it was the last line typed.	https://docs.python.org/3.4/library/readline.html#readline.add_history
reprlib repr	A							https://docs.python.org			<pre><code>
reprlib.repr(obj)</code></pre><br>This is the repr() method of aRepr. It returns a string similar to that returned by the built-in function of the same name, but with limits on most sizes.	https://docs.python.org/3.4/library/reprlib.html#reprlib.repr
@ recursive_repr	A							https://docs.python.org			<pre><code>
@reprlib.recursive_repr(fillvalue="...")</code></pre><br>Decorator for __repr__() methods to detect recursive calls within the same thread. If a recursive call is made, the fillvalue is returned, otherwise, the usual __repr__() call is made. For example:	https://docs.python.org/3.4/library/reprlib.html#reprlib.recursive_repr
resource getrlimit	A							https://docs.python.org			<pre><code>
resource.getrlimit(resource)</code></pre><br>Returns a tuple (soft, hard) with the current soft and hard limits of resource. Raises ValueError if an invalid resource is specified, or error if the underlying system call fails unexpectedly.	https://docs.python.org/3.4/library/resource.html#resource.getrlimit
resource setrlimit	A							https://docs.python.org			<pre><code>
resource.setrlimit(resource, limits)</code></pre><br>Sets new limits of consumption of resource. The limits argument must be a tuple (soft, hard) of two integers describing the new limits. A value of RLIM_INFINITY can be used to request a limit that is unlimited.	https://docs.python.org/3.4/library/resource.html#resource.setrlimit
resource prlimit	A							https://docs.python.org			<pre><code>
resource.prlimit(pid, resource[, limits])</code></pre><br>Combines setrlimit() and getrlimit() in one function and supports to get and set the resources limits of an arbitrary process. If pid is 0, then the call applies to the current process. resource and limits have the same meaning as in setrlimit(), except that limits is optional.	https://docs.python.org/3.4/library/resource.html#resource.prlimit
resource getrusage	A							https://docs.python.org			<pre><code>
resource.getrusage(who)</code></pre><br>This function returns an object that describes the resources consumed by either the current process or its children, as specified by the who parameter. The who parameter should be specified using one of the RUSAGE_* constants described below.	https://docs.python.org/3.4/library/resource.html#resource.getrusage
resource getpagesize	A							https://docs.python.org			<pre><code>
resource.getpagesize()</code></pre><br>Returns the number of bytes in a system page. (This need not be the same as the hardware page size.)	https://docs.python.org/3.4/library/resource.html#resource.getpagesize
resource getrlimit	A							https://docs.python.org			<pre><code>
resource.getrlimit(resource)</code></pre><br>Returns a tuple (soft, hard) with the current soft and hard limits of resource. Raises ValueError if an invalid resource is specified, or error if the underlying system call fails unexpectedly.	https://docs.python.org/3.4/library/resource.html#resource.getrlimit
resource setrlimit	A							https://docs.python.org			<pre><code>
resource.setrlimit(resource, limits)</code></pre><br>Sets new limits of consumption of resource. The limits argument must be a tuple (soft, hard) of two integers describing the new limits. A value of RLIM_INFINITY can be used to request a limit that is unlimited.	https://docs.python.org/3.4/library/resource.html#resource.setrlimit
resource prlimit	A							https://docs.python.org			<pre><code>
resource.prlimit(pid, resource[, limits])</code></pre><br>Combines setrlimit() and getrlimit() in one function and supports to get and set the resources limits of an arbitrary process. If pid is 0, then the call applies to the current process. resource and limits have the same meaning as in setrlimit(), except that limits is optional.	https://docs.python.org/3.4/library/resource.html#resource.prlimit
resource getrusage	A							https://docs.python.org			<pre><code>
resource.getrusage(who)</code></pre><br>This function returns an object that describes the resources consumed by either the current process or its children, as specified by the who parameter. The who parameter should be specified using one of the RUSAGE_* constants described below.	https://docs.python.org/3.4/library/resource.html#resource.getrusage
resource getpagesize	A							https://docs.python.org			<pre><code>
resource.getpagesize()</code></pre><br>Returns the number of bytes in a system page. (This need not be the same as the hardware page size.)	https://docs.python.org/3.4/library/resource.html#resource.getpagesize
runpy run_module	A							https://docs.python.org			<pre><code>
runpy.run_module(mod_name, init_globals=None, run_name=None, alter_sys=False)</code></pre><br>Execute the code of the specified module and return the resulting module globals dictionary. The module’s code is first located using the standard import mechanism (refer to PEP 302 for details) and then executed in a fresh module namespace.	https://docs.python.org/3.4/library/runpy.html#runpy.run_module
runpy run_path	A							https://docs.python.org			<pre><code>
runpy.run_path(file_path, init_globals=None, run_name=None)</code></pre><br>Execute the code at the named filesystem location and return the resulting module globals dictionary. As with a script name supplied to the CPython command line, the supplied path may refer to a Python source file, a compiled bytecode file or a valid sys.path entry containing a __main__ module (e.g. a zipfile containing a top-level __main__.py file).	https://docs.python.org/3.4/library/runpy.html#runpy.run_path
select devpoll	A							https://docs.python.org			<pre><code>
select.devpoll()</code></pre><br>(Only supported on Solaris and derivatives.) Returns a /dev/poll polling object; see section /dev/poll Polling Objects below for the methods supported by devpoll objects.	https://docs.python.org/3.4/library/select.html#select.devpoll
select epoll	A							https://docs.python.org			<pre><code>
select.epoll(sizehint=-1, flags=0)</code></pre><br>(Only supported on Linux 2.5.44 and newer.) Return an edge polling object, which can be used as Edge or Level Triggered interface for I/O events. sizehint is deprecated and completely ignored. flags can be set to EPOLL_CLOEXEC, which causes the epoll descriptor to be closed automatically when os.execve() is called.	https://docs.python.org/3.4/library/select.html#select.epoll
select poll	A							https://docs.python.org			<pre><code>
select.poll()</code></pre><br>(Not supported by all operating systems.) Returns a polling object, which supports registering and unregistering file descriptors, and then polling them for I/O events; see section Polling Objects below for the methods supported by polling objects.	https://docs.python.org/3.4/library/select.html#select.poll
select kqueue	A							https://docs.python.org			<pre><code>
select.kqueue()</code></pre><br>(Only supported on BSD.) Returns a kernel queue object; see section Kqueue Objects below for the methods supported by kqueue objects.	https://docs.python.org/3.4/library/select.html#select.kqueue
select kevent	A							https://docs.python.org			<pre><code>
select.kevent(ident, filter=KQ_FILTER_READ, flags=KQ_EV_ADD, fflags=0, data=0, udata=0)</code></pre><br>(Only supported on BSD.) Returns a kernel event object; see section Kevent Objects below for the methods supported by kevent objects.	https://docs.python.org/3.4/library/select.html#select.kevent
select select	A							https://docs.python.org			<pre><code>
select.select(rlist, wlist, xlist[, timeout])</code></pre><br>This is a straightforward interface to the Unix select() system call. The first three arguments are sequences of ‘waitable objects’: either integers representing file descriptors or objects with a parameterless method named fileno() returning such an integer:	https://docs.python.org/3.4/library/select.html#select.select
shelve open	A							https://docs.python.org			<pre><code>
shelve.open(filename, flag='c', protocol=None, writeback=False)</code></pre><br>Open a persistent dictionary. The filename specified is the base filename for the underlying database. As a side-effect, an extension may be added to the filename and more than one file may be created. By default, the underlying database file is opened for reading and writing. The optional flag parameter has the same interpretation as the flag parameter of dbm.open().	https://docs.python.org/3.4/library/shelve.html#shelve.open
shlex split	A							https://docs.python.org			<pre><code>
shlex.split(s, comments=False, posix=True)</code></pre><br>Split the string s using shell-like syntax. If comments is False (the default), the parsing of comments in the given string will be disabled (setting the commenters attribute of the shlex instance to the empty string). This function operates in POSIX mode by default, but uses non-POSIX mode if the posix argument is false.	https://docs.python.org/3.4/library/shlex.html#shlex.split
shlex quote	A							https://docs.python.org			<pre><code>
shlex.quote(s)</code></pre><br>Return a shell-escaped version of the string s. The returned value is a string that can safely be used as one token in a shell command line, for cases where you cannot use a list.	https://docs.python.org/3.4/library/shlex.html#shlex.quote
shutil copyfileobj	A							https://docs.python.org			<pre><code>
shutil.copyfileobj(fsrc, fdst[, length])</code></pre><br>Copy the contents of the file-like object fsrc to the file-like object fdst. The integer length, if given, is the buffer size. In particular, a negative length value means to copy the data without looping over the source data in chunks; by default the data is read in chunks to avoid uncontrolled memory consumption. Note that if the current file position of the fsrc object is not 0, only the contents from the current file position to the end of the file will be copied.	https://docs.python.org/3.4/library/shutil.html#shutil.copyfileobj
shutil copyfile	A							https://docs.python.org			<pre><code>
shutil.copyfile(src, dst, *, follow_symlinks=True)</code></pre><br>Copy the contents (no metadata) of the file named src to a file named dst and return dst. src and dst are path names given as strings. dst must be the complete target file name; look at shutil.copy() for a copy that accepts a target directory path. If src and dst specify the same file, SameFileError is raised.	https://docs.python.org/3.4/library/shutil.html#shutil.copyfile
shutil copymode	A							https://docs.python.org			<pre><code>
shutil.copymode(src, dst, *, follow_symlinks=True)</code></pre><br>Copy the permission bits from src to dst. The file contents, owner, and group are unaffected. src and dst are path names given as strings. If follow_symlinks is false, and both src and dst are symbolic links, copymode() will attempt to modify the mode of dst itself (rather than the file it points to). This functionality is not available on every platform; please see copystat() for more information. If copymode() cannot modify symbolic links on the local platform, and it is asked to do so, it will do nothing and return.	https://docs.python.org/3.4/library/shutil.html#shutil.copymode
shutil copystat	A							https://docs.python.org			<pre><code>
shutil.copystat(src, dst, *, follow_symlinks=True)</code></pre><br>Copy the permission bits, last access time, last modification time, and flags from src to dst. On Linux, copystat() also copies the “extended attributes” where possible. The file contents, owner, and group are unaffected. src and dst are path names given as strings.	https://docs.python.org/3.4/library/shutil.html#shutil.copystat
shutil copy	A							https://docs.python.org			<pre><code>
shutil.copy(src, dst, *, follow_symlinks=True)</code></pre><br>Copies the file src to the file or directory dst. src and dst should be strings. If dst specifies a directory, the file will be copied into dst using the base filename from src. Returns the path to the newly created file.	https://docs.python.org/3.4/library/shutil.html#shutil.copy
shutil copy2	A							https://docs.python.org			<pre><code>
shutil.copy2(src, dst, *, follow_symlinks=True)</code></pre><br>Identical to copy() except that copy2() also attempts to preserve all file metadata.	https://docs.python.org/3.4/library/shutil.html#shutil.copy2
shutil ignore_patterns	A							https://docs.python.org			<pre><code>
shutil.ignore_patterns(*patterns)</code></pre><br>This factory function creates a function that can be used as a callable for copytree()‘s ignore argument, ignoring files and directories that match one of the glob-style patterns provided. See the example below.	https://docs.python.org/3.4/library/shutil.html#shutil.ignore_patterns
shutil copytree	A							https://docs.python.org			<pre><code>
shutil.copytree(src, dst, symlinks=False, ignore=None, copy_function=copy2, ignore_dangling_symlinks=False)</code></pre><br>Recursively copy an entire directory tree rooted at src, returning the destination directory. The destination directory, named by dst, must not already exist; it will be created as well as missing parent directories. Permissions and times of directories are copied with copystat(), individual files are copied using shutil.copy2().	https://docs.python.org/3.4/library/shutil.html#shutil.copytree
shutil rmtree	A							https://docs.python.org			<pre><code>
shutil.rmtree(path, ignore_errors=False, onerror=None)</code></pre><br>Delete an entire directory tree; path must point to a directory (but not a symbolic link to a directory). If ignore_errors is true, errors resulting from failed removals will be ignored; if false or omitted, such errors are handled by calling a handler specified by onerror or, if that is omitted, they raise an exception.	https://docs.python.org/3.4/library/shutil.html#shutil.rmtree
shutil move	A							https://docs.python.org			<pre><code>
shutil.move(src, dst)</code></pre><br>Recursively move a file or directory (src) to another location (dst) and return the destination.	https://docs.python.org/3.4/library/shutil.html#shutil.move
shutil disk_usage	A							https://docs.python.org			<pre><code>
shutil.disk_usage(path)</code></pre><br>Return disk usage statistics about the given path as a named tuple with the attributes total, used and free, which are the amount of total, used and free space, in bytes.	https://docs.python.org/3.4/library/shutil.html#shutil.disk_usage
shutil chown	A							https://docs.python.org			<pre><code>
shutil.chown(path, user=None, group=None)</code></pre><br>Change owner user and/or group of the given path.	https://docs.python.org/3.4/library/shutil.html#shutil.chown
shutil which	A							https://docs.python.org			<pre><code>
shutil.which(cmd, mode=os.F_OK | os.X_OK, path=None)</code></pre><br>Return the path to an executable which would be run if the given cmd was called. If no cmd would be called, return None.	https://docs.python.org/3.4/library/shutil.html#shutil.which
shutil make_archive	A							https://docs.python.org			<pre><code>
shutil.make_archive(base_name, format[, root_dir[, base_dir[, verbose[, dry_run[, owner[, group[, logger]]]]]]])</code></pre><br>Create an archive file (such as zip or tar) and return its name.	https://docs.python.org/3.4/library/shutil.html#shutil.make_archive
shutil get_archive_formats	A							https://docs.python.org			<pre><code>
shutil.get_archive_formats()</code></pre><br>Return a list of supported formats for archiving. Each element of the returned sequence is a tuple (name, description).	https://docs.python.org/3.4/library/shutil.html#shutil.get_archive_formats
shutil register_archive_format	A							https://docs.python.org			<pre><code>
shutil.register_archive_format(name, function[, extra_args[, description]])</code></pre><br>Register an archiver for the format name.	https://docs.python.org/3.4/library/shutil.html#shutil.register_archive_format
shutil unregister_archive_format	A							https://docs.python.org			<pre><code>
shutil.unregister_archive_format(name)</code></pre><br>Remove the archive format name from the list of supported formats.	https://docs.python.org/3.4/library/shutil.html#shutil.unregister_archive_format
shutil unpack_archive	A							https://docs.python.org			<pre><code>
shutil.unpack_archive(filename[, extract_dir[, format]])</code></pre><br>Unpack an archive. filename is the full path of the archive.	https://docs.python.org/3.4/library/shutil.html#shutil.unpack_archive
shutil register_unpack_format	A							https://docs.python.org			<pre><code>
shutil.register_unpack_format(name, extensions, function[, extra_args[, description]])</code></pre><br>Registers an unpack format. name is the name of the format and extensions is a list of extensions corresponding to the format, like .zip for Zip files.	https://docs.python.org/3.4/library/shutil.html#shutil.register_unpack_format
shutil unregister_unpack_format	A							https://docs.python.org			<pre><code>
shutil.unregister_unpack_format(name)</code></pre><br>Unregister an unpack format. name is the name of the format.	https://docs.python.org/3.4/library/shutil.html#shutil.unregister_unpack_format
shutil get_unpack_formats	A							https://docs.python.org			<pre><code>
shutil.get_unpack_formats()</code></pre><br>Return a list of all registered formats for unpacking. Each element of the returned sequence is a tuple (name, extensions, description).	https://docs.python.org/3.4/library/shutil.html#shutil.get_unpack_formats
shutil get_terminal_size	A							https://docs.python.org			<pre><code>
shutil.get_terminal_size(fallback=(columns, lines))</code></pre><br>Get the size of the terminal window.	https://docs.python.org/3.4/library/shutil.html#shutil.get_terminal_size
shutil copyfileobj	A							https://docs.python.org			<pre><code>
shutil.copyfileobj(fsrc, fdst[, length])</code></pre><br>Copy the contents of the file-like object fsrc to the file-like object fdst. The integer length, if given, is the buffer size. In particular, a negative length value means to copy the data without looping over the source data in chunks; by default the data is read in chunks to avoid uncontrolled memory consumption. Note that if the current file position of the fsrc object is not 0, only the contents from the current file position to the end of the file will be copied.	https://docs.python.org/3.4/library/shutil.html#shutil.copyfileobj
shutil copyfile	A							https://docs.python.org			<pre><code>
shutil.copyfile(src, dst, *, follow_symlinks=True)</code></pre><br>Copy the contents (no metadata) of the file named src to a file named dst and return dst. src and dst are path names given as strings. dst must be the complete target file name; look at shutil.copy() for a copy that accepts a target directory path. If src and dst specify the same file, SameFileError is raised.	https://docs.python.org/3.4/library/shutil.html#shutil.copyfile
shutil copymode	A							https://docs.python.org			<pre><code>
shutil.copymode(src, dst, *, follow_symlinks=True)</code></pre><br>Copy the permission bits from src to dst. The file contents, owner, and group are unaffected. src and dst are path names given as strings. If follow_symlinks is false, and both src and dst are symbolic links, copymode() will attempt to modify the mode of dst itself (rather than the file it points to). This functionality is not available on every platform; please see copystat() for more information. If copymode() cannot modify symbolic links on the local platform, and it is asked to do so, it will do nothing and return.	https://docs.python.org/3.4/library/shutil.html#shutil.copymode
shutil copystat	A							https://docs.python.org			<pre><code>
shutil.copystat(src, dst, *, follow_symlinks=True)</code></pre><br>Copy the permission bits, last access time, last modification time, and flags from src to dst. On Linux, copystat() also copies the “extended attributes” where possible. The file contents, owner, and group are unaffected. src and dst are path names given as strings.	https://docs.python.org/3.4/library/shutil.html#shutil.copystat
shutil copy	A							https://docs.python.org			<pre><code>
shutil.copy(src, dst, *, follow_symlinks=True)</code></pre><br>Copies the file src to the file or directory dst. src and dst should be strings. If dst specifies a directory, the file will be copied into dst using the base filename from src. Returns the path to the newly created file.	https://docs.python.org/3.4/library/shutil.html#shutil.copy
shutil copy2	A							https://docs.python.org			<pre><code>
shutil.copy2(src, dst, *, follow_symlinks=True)</code></pre><br>Identical to copy() except that copy2() also attempts to preserve all file metadata.	https://docs.python.org/3.4/library/shutil.html#shutil.copy2
shutil ignore_patterns	A							https://docs.python.org			<pre><code>
shutil.ignore_patterns(*patterns)</code></pre><br>This factory function creates a function that can be used as a callable for copytree()‘s ignore argument, ignoring files and directories that match one of the glob-style patterns provided. See the example below.	https://docs.python.org/3.4/library/shutil.html#shutil.ignore_patterns
shutil copytree	A							https://docs.python.org			<pre><code>
shutil.copytree(src, dst, symlinks=False, ignore=None, copy_function=copy2, ignore_dangling_symlinks=False)</code></pre><br>Recursively copy an entire directory tree rooted at src, returning the destination directory. The destination directory, named by dst, must not already exist; it will be created as well as missing parent directories. Permissions and times of directories are copied with copystat(), individual files are copied using shutil.copy2().	https://docs.python.org/3.4/library/shutil.html#shutil.copytree
shutil rmtree	A							https://docs.python.org			<pre><code>
shutil.rmtree(path, ignore_errors=False, onerror=None)</code></pre><br>Delete an entire directory tree; path must point to a directory (but not a symbolic link to a directory). If ignore_errors is true, errors resulting from failed removals will be ignored; if false or omitted, such errors are handled by calling a handler specified by onerror or, if that is omitted, they raise an exception.	https://docs.python.org/3.4/library/shutil.html#shutil.rmtree
shutil move	A							https://docs.python.org			<pre><code>
shutil.move(src, dst)</code></pre><br>Recursively move a file or directory (src) to another location (dst) and return the destination.	https://docs.python.org/3.4/library/shutil.html#shutil.move
shutil disk_usage	A							https://docs.python.org			<pre><code>
shutil.disk_usage(path)</code></pre><br>Return disk usage statistics about the given path as a named tuple with the attributes total, used and free, which are the amount of total, used and free space, in bytes.	https://docs.python.org/3.4/library/shutil.html#shutil.disk_usage
shutil chown	A							https://docs.python.org			<pre><code>
shutil.chown(path, user=None, group=None)</code></pre><br>Change owner user and/or group of the given path.	https://docs.python.org/3.4/library/shutil.html#shutil.chown
shutil which	A							https://docs.python.org			<pre><code>
shutil.which(cmd, mode=os.F_OK | os.X_OK, path=None)</code></pre><br>Return the path to an executable which would be run if the given cmd was called. If no cmd would be called, return None.	https://docs.python.org/3.4/library/shutil.html#shutil.which
shutil make_archive	A							https://docs.python.org			<pre><code>
shutil.make_archive(base_name, format[, root_dir[, base_dir[, verbose[, dry_run[, owner[, group[, logger]]]]]]])</code></pre><br>Create an archive file (such as zip or tar) and return its name.	https://docs.python.org/3.4/library/shutil.html#shutil.make_archive
shutil get_archive_formats	A							https://docs.python.org			<pre><code>
shutil.get_archive_formats()</code></pre><br>Return a list of supported formats for archiving. Each element of the returned sequence is a tuple (name, description).	https://docs.python.org/3.4/library/shutil.html#shutil.get_archive_formats
shutil register_archive_format	A							https://docs.python.org			<pre><code>
shutil.register_archive_format(name, function[, extra_args[, description]])</code></pre><br>Register an archiver for the format name.	https://docs.python.org/3.4/library/shutil.html#shutil.register_archive_format
shutil unregister_archive_format	A							https://docs.python.org			<pre><code>
shutil.unregister_archive_format(name)</code></pre><br>Remove the archive format name from the list of supported formats.	https://docs.python.org/3.4/library/shutil.html#shutil.unregister_archive_format
shutil unpack_archive	A							https://docs.python.org			<pre><code>
shutil.unpack_archive(filename[, extract_dir[, format]])</code></pre><br>Unpack an archive. filename is the full path of the archive.	https://docs.python.org/3.4/library/shutil.html#shutil.unpack_archive
shutil register_unpack_format	A							https://docs.python.org			<pre><code>
shutil.register_unpack_format(name, extensions, function[, extra_args[, description]])</code></pre><br>Registers an unpack format. name is the name of the format and extensions is a list of extensions corresponding to the format, like .zip for Zip files.	https://docs.python.org/3.4/library/shutil.html#shutil.register_unpack_format
shutil unregister_unpack_format	A							https://docs.python.org			<pre><code>
shutil.unregister_unpack_format(name)</code></pre><br>Unregister an unpack format. name is the name of the format.	https://docs.python.org/3.4/library/shutil.html#shutil.unregister_unpack_format
shutil get_unpack_formats	A							https://docs.python.org			<pre><code>
shutil.get_unpack_formats()</code></pre><br>Return a list of all registered formats for unpacking. Each element of the returned sequence is a tuple (name, extensions, description).	https://docs.python.org/3.4/library/shutil.html#shutil.get_unpack_formats
shutil get_terminal_size	A							https://docs.python.org			<pre><code>
shutil.get_terminal_size(fallback=(columns, lines))</code></pre><br>Get the size of the terminal window.	https://docs.python.org/3.4/library/shutil.html#shutil.get_terminal_size
signal alarm	A							https://docs.python.org			<pre><code>
signal.alarm(time)</code></pre><br>If time is non-zero, this function requests that a SIGALRM signal be sent to the process in time seconds. Any previously scheduled alarm is canceled (only one alarm can be scheduled at any time). The returned value is then the number of seconds before any previously set alarm was to have been delivered. If time is zero, no alarm is scheduled, and any scheduled alarm is canceled. If the return value is zero, no alarm is currently scheduled. (See the Unix man page alarm(2).) Availability: Unix.	https://docs.python.org/3.4/library/signal.html#signal.alarm
signal getsignal	A							https://docs.python.org			<pre><code>
signal.getsignal(signalnum)</code></pre><br>Return the current signal handler for the signal signalnum. The returned value may be a callable Python object, or one of the special values signal.SIG_IGN, signal.SIG_DFL or None. Here, signal.SIG_IGN means that the signal was previously ignored, signal.SIG_DFL means that the default way of handling the signal was previously in use, and None means that the previous signal handler was not installed from Python.	https://docs.python.org/3.4/library/signal.html#signal.getsignal
signal pause	A							https://docs.python.org			<pre><code>
signal.pause()</code></pre><br>Cause the process to sleep until a signal is received; the appropriate handler will then be called. Returns nothing. Not on Windows. (See the Unix man page signal(2).)	https://docs.python.org/3.4/library/signal.html#signal.pause
signal pthread_kill	A							https://docs.python.org			<pre><code>
signal.pthread_kill(thread_id, signum)</code></pre><br>Send the signal signum to the thread thread_id, another thread in the same process as the caller. The target thread can be executing any code (Python or not). However, if the target thread is executing the Python interpreter, the Python signal handlers will be executed by the main thread. Therefore, the only point of sending a signal to a particular Python thread would be to force a running system call to fail with InterruptedError.	https://docs.python.org/3.4/library/signal.html#signal.pthread_kill
signal pthread_sigmask	A							https://docs.python.org			<pre><code>
signal.pthread_sigmask(how, mask)</code></pre><br>Fetch and/or change the signal mask of the calling thread. The signal mask is the set of signals whose delivery is currently blocked for the caller. Return the old signal mask as a set of signals.	https://docs.python.org/3.4/library/signal.html#signal.pthread_sigmask
signal setitimer	A							https://docs.python.org			<pre><code>
signal.setitimer(which, seconds[, interval])</code></pre><br>Sets given interval timer (one of signal.ITIMER_REAL, signal.ITIMER_VIRTUAL or signal.ITIMER_PROF) specified by which to fire after seconds (float is accepted, different from alarm()) and after that every interval seconds. The interval timer specified by which can be cleared by setting seconds to zero.	https://docs.python.org/3.4/library/signal.html#signal.setitimer
signal getitimer	A							https://docs.python.org			<pre><code>
signal.getitimer(which)</code></pre><br>Returns current value of a given interval timer specified by which. Availability: Unix.	https://docs.python.org/3.4/library/signal.html#signal.getitimer
signal set_wakeup_fd	A							https://docs.python.org			<pre><code>
signal.set_wakeup_fd(fd)</code></pre><br>Set the wakeup file descriptor to fd. When a signal is received, the signal number is written as a single byte into the fd. This can be used by a library to wakeup a poll or select call, allowing the signal to be fully processed.	https://docs.python.org/3.4/library/signal.html#signal.set_wakeup_fd
signal siginterrupt	A							https://docs.python.org			<pre><code>
signal.siginterrupt(signalnum, flag)</code></pre><br>Change system call restart behaviour: if flag is False, system calls will be restarted when interrupted by signal signalnum, otherwise system calls will be interrupted. Returns nothing. Availability: Unix (see the man page siginterrupt(3) for further information).	https://docs.python.org/3.4/library/signal.html#signal.siginterrupt
signal signal	A							https://docs.python.org			<pre><code>
signal.signal(signalnum, handler)</code></pre><br>Set the handler for signal signalnum to the function handler. handler can be a callable Python object taking two arguments (see below), or one of the special values signal.SIG_IGN or signal.SIG_DFL. The previous signal handler will be returned (see the description of getsignal() above). (See the Unix man page signal(2).)	https://docs.python.org/3.4/library/signal.html#signal.signal
signal sigpending	A							https://docs.python.org			<pre><code>
signal.sigpending()</code></pre><br>Examine the set of signals that are pending for delivery to the calling thread (i.e., the signals which have been raised while blocked). Return the set of the pending signals.	https://docs.python.org/3.4/library/signal.html#signal.sigpending
signal sigwait	A							https://docs.python.org			<pre><code>
signal.sigwait(sigset)</code></pre><br>Suspend execution of the calling thread until the delivery of one of the signals specified in the signal set sigset. The function accepts the signal (removes it from the pending list of signals), and returns the signal number.	https://docs.python.org/3.4/library/signal.html#signal.sigwait
signal sigwaitinfo	A							https://docs.python.org			<pre><code>
signal.sigwaitinfo(sigset)</code></pre><br>Suspend execution of the calling thread until the delivery of one of the signals specified in the signal set sigset. The function accepts the signal and removes it from the pending list of signals. If one of the signals in sigset is already pending for the calling thread, the function will return immediately with information about that signal. The signal handler is not called for the delivered signal. The function raises an InterruptedError if it is interrupted by a signal that is not in sigset.	https://docs.python.org/3.4/library/signal.html#signal.sigwaitinfo
signal sigtimedwait	A							https://docs.python.org			<pre><code>
signal.sigtimedwait(sigset, timeout)</code></pre><br>Like sigwaitinfo(), but takes an additional timeout argument specifying a timeout. If timeout is specified as 0, a poll is performed. Returns None if a timeout occurs.	https://docs.python.org/3.4/library/signal.html#signal.sigtimedwait
signal alarm	A							https://docs.python.org			<pre><code>
signal.alarm(time)</code></pre><br>If time is non-zero, this function requests that a SIGALRM signal be sent to the process in time seconds. Any previously scheduled alarm is canceled (only one alarm can be scheduled at any time). The returned value is then the number of seconds before any previously set alarm was to have been delivered. If time is zero, no alarm is scheduled, and any scheduled alarm is canceled. If the return value is zero, no alarm is currently scheduled. (See the Unix man page alarm(2).) Availability: Unix.	https://docs.python.org/3.4/library/signal.html#signal.alarm
signal getsignal	A							https://docs.python.org			<pre><code>
signal.getsignal(signalnum)</code></pre><br>Return the current signal handler for the signal signalnum. The returned value may be a callable Python object, or one of the special values signal.SIG_IGN, signal.SIG_DFL or None. Here, signal.SIG_IGN means that the signal was previously ignored, signal.SIG_DFL means that the default way of handling the signal was previously in use, and None means that the previous signal handler was not installed from Python.	https://docs.python.org/3.4/library/signal.html#signal.getsignal
signal pause	A							https://docs.python.org			<pre><code>
signal.pause()</code></pre><br>Cause the process to sleep until a signal is received; the appropriate handler will then be called. Returns nothing. Not on Windows. (See the Unix man page signal(2).)	https://docs.python.org/3.4/library/signal.html#signal.pause
signal pthread_kill	A							https://docs.python.org			<pre><code>
signal.pthread_kill(thread_id, signum)</code></pre><br>Send the signal signum to the thread thread_id, another thread in the same process as the caller. The target thread can be executing any code (Python or not). However, if the target thread is executing the Python interpreter, the Python signal handlers will be executed by the main thread. Therefore, the only point of sending a signal to a particular Python thread would be to force a running system call to fail with InterruptedError.	https://docs.python.org/3.4/library/signal.html#signal.pthread_kill
signal pthread_sigmask	A							https://docs.python.org			<pre><code>
signal.pthread_sigmask(how, mask)</code></pre><br>Fetch and/or change the signal mask of the calling thread. The signal mask is the set of signals whose delivery is currently blocked for the caller. Return the old signal mask as a set of signals.	https://docs.python.org/3.4/library/signal.html#signal.pthread_sigmask
signal setitimer	A							https://docs.python.org			<pre><code>
signal.setitimer(which, seconds[, interval])</code></pre><br>Sets given interval timer (one of signal.ITIMER_REAL, signal.ITIMER_VIRTUAL or signal.ITIMER_PROF) specified by which to fire after seconds (float is accepted, different from alarm()) and after that every interval seconds. The interval timer specified by which can be cleared by setting seconds to zero.	https://docs.python.org/3.4/library/signal.html#signal.setitimer
signal getitimer	A							https://docs.python.org			<pre><code>
signal.getitimer(which)</code></pre><br>Returns current value of a given interval timer specified by which. Availability: Unix.	https://docs.python.org/3.4/library/signal.html#signal.getitimer
signal set_wakeup_fd	A							https://docs.python.org			<pre><code>
signal.set_wakeup_fd(fd)</code></pre><br>Set the wakeup file descriptor to fd. When a signal is received, the signal number is written as a single byte into the fd. This can be used by a library to wakeup a poll or select call, allowing the signal to be fully processed.	https://docs.python.org/3.4/library/signal.html#signal.set_wakeup_fd
signal siginterrupt	A							https://docs.python.org			<pre><code>
signal.siginterrupt(signalnum, flag)</code></pre><br>Change system call restart behaviour: if flag is False, system calls will be restarted when interrupted by signal signalnum, otherwise system calls will be interrupted. Returns nothing. Availability: Unix (see the man page siginterrupt(3) for further information).	https://docs.python.org/3.4/library/signal.html#signal.siginterrupt
signal signal	A							https://docs.python.org			<pre><code>
signal.signal(signalnum, handler)</code></pre><br>Set the handler for signal signalnum to the function handler. handler can be a callable Python object taking two arguments (see below), or one of the special values signal.SIG_IGN or signal.SIG_DFL. The previous signal handler will be returned (see the description of getsignal() above). (See the Unix man page signal(2).)	https://docs.python.org/3.4/library/signal.html#signal.signal
signal sigpending	A							https://docs.python.org			<pre><code>
signal.sigpending()</code></pre><br>Examine the set of signals that are pending for delivery to the calling thread (i.e., the signals which have been raised while blocked). Return the set of the pending signals.	https://docs.python.org/3.4/library/signal.html#signal.sigpending
signal sigwait	A							https://docs.python.org			<pre><code>
signal.sigwait(sigset)</code></pre><br>Suspend execution of the calling thread until the delivery of one of the signals specified in the signal set sigset. The function accepts the signal (removes it from the pending list of signals), and returns the signal number.	https://docs.python.org/3.4/library/signal.html#signal.sigwait
signal sigwaitinfo	A							https://docs.python.org			<pre><code>
signal.sigwaitinfo(sigset)</code></pre><br>Suspend execution of the calling thread until the delivery of one of the signals specified in the signal set sigset. The function accepts the signal and removes it from the pending list of signals. If one of the signals in sigset is already pending for the calling thread, the function will return immediately with information about that signal. The signal handler is not called for the delivered signal. The function raises an InterruptedError if it is interrupted by a signal that is not in sigset.	https://docs.python.org/3.4/library/signal.html#signal.sigwaitinfo
signal sigtimedwait	A							https://docs.python.org			<pre><code>
signal.sigtimedwait(sigset, timeout)</code></pre><br>Like sigwaitinfo(), but takes an additional timeout argument specifying a timeout. If timeout is specified as 0, a poll is performed. Returns None if a timeout occurs.	https://docs.python.org/3.4/library/signal.html#signal.sigtimedwait
site main	A							https://docs.python.org			<pre><code>
site.main()</code></pre><br>Adds all the standard site-specific directories to the module search path. This function is called automatically when this module is imported, unless the Python interpreter was started with the -S flag.	https://docs.python.org/3.4/library/site.html#site.main
site addsitedir	A							https://docs.python.org			<pre><code>
site.addsitedir(sitedir, known_paths=None)</code></pre><br>Add a directory to sys.path and process its .pth files. Typically used in sitecustomize or usercustomize (see above).	https://docs.python.org/3.4/library/site.html#site.addsitedir
site getsitepackages	A							https://docs.python.org			<pre><code>
site.getsitepackages()</code></pre><br>Return a list containing all global site-packages directories (and possibly site-python).	https://docs.python.org/3.4/library/site.html#site.getsitepackages
site getuserbase	A							https://docs.python.org			<pre><code>
site.getuserbase()</code></pre><br>Return the path of the user base directory, USER_BASE. If it is not initialized yet, this function will also set it, respecting PYTHONUSERBASE.	https://docs.python.org/3.4/library/site.html#site.getuserbase
site getusersitepackages	A							https://docs.python.org			<pre><code>
site.getusersitepackages()</code></pre><br>Return the path of the user-specific site-packages directory, USER_SITE. If it is not initialized yet, this function will also set it, respecting PYTHONNOUSERSITE and USER_BASE.	https://docs.python.org/3.4/library/site.html#site.getusersitepackages
site main	A							https://docs.python.org			<pre><code>
site.main()</code></pre><br>Adds all the standard site-specific directories to the module search path. This function is called automatically when this module is imported, unless the Python interpreter was started with the -S flag.	https://docs.python.org/3.4/library/site.html#site.main
site addsitedir	A							https://docs.python.org			<pre><code>
site.addsitedir(sitedir, known_paths=None)</code></pre><br>Add a directory to sys.path and process its .pth files. Typically used in sitecustomize or usercustomize (see above).	https://docs.python.org/3.4/library/site.html#site.addsitedir
site getsitepackages	A							https://docs.python.org			<pre><code>
site.getsitepackages()</code></pre><br>Return a list containing all global site-packages directories (and possibly site-python).	https://docs.python.org/3.4/library/site.html#site.getsitepackages
site getuserbase	A							https://docs.python.org			<pre><code>
site.getuserbase()</code></pre><br>Return the path of the user base directory, USER_BASE. If it is not initialized yet, this function will also set it, respecting PYTHONUSERBASE.	https://docs.python.org/3.4/library/site.html#site.getuserbase
site getusersitepackages	A							https://docs.python.org			<pre><code>
site.getusersitepackages()</code></pre><br>Return the path of the user-specific site-packages directory, USER_SITE. If it is not initialized yet, this function will also set it, respecting PYTHONNOUSERSITE and USER_BASE.	https://docs.python.org/3.4/library/site.html#site.getusersitepackages
sndhdr what	A							https://docs.python.org			<pre><code>
sndhdr.what(filename)</code></pre><br>Determines the type of sound data stored in the file filename using whathdr(). If it succeeds, returns a tuple as described above, otherwise None is returned.	https://docs.python.org/3.4/library/sndhdr.html#sndhdr.what
sndhdr whathdr	A							https://docs.python.org			<pre><code>
sndhdr.whathdr(filename)</code></pre><br>Determines the type of sound data stored in a file based on the file header. The name of the file is given by filename. This function returns a tuple as described above on success, or None.	https://docs.python.org/3.4/library/sndhdr.html#sndhdr.whathdr
socket socket	A							https://docs.python.org			<pre><code>
socket.socket(family=AF_INET, type=SOCK_STREAM, proto=0, fileno=None)</code></pre><br>Create a new socket using the given address family, socket type and protocol number. The address family should be AF_INET (the default), AF_INET6, AF_UNIX, AF_CAN or AF_RDS. The socket type should be SOCK_STREAM (the default), SOCK_DGRAM, SOCK_RAW or perhaps one of the other SOCK_ constants. The protocol number is usually zero and may be omitted or in the case where the address family is AF_CAN the protocol should be one of CAN_RAW or CAN_BCM. If fileno is specified, the other arguments are ignored, causing the socket with the specified file descriptor to return. Unlike socket.fromfd(), fileno will return the same socket and not a duplicate. This may help close a detached socket using socket.close().	https://docs.python.org/3.4/library/socket.html#socket.socket
socket socketpair	A							https://docs.python.org			<pre><code>
socket.socketpair([family[, type[, proto]]])</code></pre><br>Build a pair of connected socket objects using the given address family, socket type, and protocol number. Address family, socket type, and protocol number are as for the socket() function above. The default family is AF_UNIX if defined on the platform; otherwise, the default is AF_INET. Availability: Unix.	https://docs.python.org/3.4/library/socket.html#socket.socketpair
socket create_connection	A							https://docs.python.org			<pre><code>
socket.create_connection(address[, timeout[, source_address]])</code></pre><br>Connect to a TCP service listening on the Internet address (a 2-tuple (host, port)), and return the socket object. This is a higher-level function than socket.connect(): if host is a non-numeric hostname, it will try to resolve it for both AF_INET and AF_INET6, and then try to connect to all possible addresses in turn until a connection succeeds. This makes it easy to write clients that are compatible to both IPv4 and IPv6.	https://docs.python.org/3.4/library/socket.html#socket.create_connection
socket fromfd	A							https://docs.python.org			<pre><code>
socket.fromfd(fd, family, type, proto=0)</code></pre><br>Duplicate the file descriptor fd (an integer as returned by a file object’s fileno() method) and build a socket object from the result. Address family, socket type and protocol number are as for the socket() function above. The file descriptor should refer to a socket, but this is not checked — subsequent operations on the object may fail if the file descriptor is invalid. This function is rarely needed, but can be used to get or set socket options on a socket passed to a program as standard input or output (such as a server started by the Unix inet daemon). The socket is assumed to be in blocking mode.	https://docs.python.org/3.4/library/socket.html#socket.fromfd
socket fromshare	A							https://docs.python.org			<pre><code>
socket.fromshare(data)</code></pre><br>Instantiate a socket from data obtained from the socket.share() method. The socket is assumed to be in blocking mode.	https://docs.python.org/3.4/library/socket.html#socket.fromshare
socket getaddrinfo	A							https://docs.python.org			<pre><code>
socket.getaddrinfo(host, port, family=0, type=0, proto=0, flags=0)</code></pre><br>Translate the host/port argument into a sequence of 5-tuples that contain all the necessary arguments for creating a socket connected to that service. host is a domain name, a string representation of an IPv4/v6 address or None. port is a string service name such as 'http', a numeric port number or None. By passing None as the value of host and port, you can pass NULL to the underlying C API.	https://docs.python.org/3.4/library/socket.html#socket.getaddrinfo
socket getfqdn	A							https://docs.python.org			<pre><code>
socket.getfqdn([name])</code></pre><br>Return a fully qualified domain name for name. If name is omitted or empty, it is interpreted as the local host. To find the fully qualified name, the hostname returned by gethostbyaddr() is checked, followed by aliases for the host, if available. The first name which includes a period is selected. In case no fully qualified domain name is available, the hostname as returned by gethostname() is returned.	https://docs.python.org/3.4/library/socket.html#socket.getfqdn
socket gethostbyname	A							https://docs.python.org			<pre><code>
socket.gethostbyname(hostname)</code></pre><br>Translate a host name to IPv4 address format. The IPv4 address is returned as a string, such as '100.50.200.5'. If the host name is an IPv4 address itself it is returned unchanged. See gethostbyname_ex() for a more complete interface. gethostbyname() does not support IPv6 name resolution, and getaddrinfo() should be used instead for IPv4/v6 dual stack support.	https://docs.python.org/3.4/library/socket.html#socket.gethostbyname
socket gethostbyname_ex	A							https://docs.python.org			<pre><code>
socket.gethostbyname_ex(hostname)</code></pre><br>Translate a host name to IPv4 address format, extended interface. Return a triple (hostname, aliaslist, ipaddrlist) where hostname is the primary host name responding to the given ip_address, aliaslist is a (possibly empty) list of alternative host names for the same address, and ipaddrlist is a list of IPv4 addresses for the same interface on the same host (often but not always a single address). gethostbyname_ex() does not support IPv6 name resolution, and getaddrinfo() should be used instead for IPv4/v6 dual stack support.	https://docs.python.org/3.4/library/socket.html#socket.gethostbyname_ex
socket gethostname	A							https://docs.python.org			<pre><code>
socket.gethostname()</code></pre><br>Return a string containing the hostname of the machine where the Python interpreter is currently executing.	https://docs.python.org/3.4/library/socket.html#socket.gethostname
socket gethostbyaddr	A							https://docs.python.org			<pre><code>
socket.gethostbyaddr(ip_address)</code></pre><br>Return a triple (hostname, aliaslist, ipaddrlist) where hostname is the primary host name responding to the given ip_address, aliaslist is a (possibly empty) list of alternative host names for the same address, and ipaddrlist is a list of IPv4/v6 addresses for the same interface on the same host (most likely containing only a single address). To find the fully qualified domain name, use the function getfqdn(). gethostbyaddr() supports both IPv4 and IPv6.	https://docs.python.org/3.4/library/socket.html#socket.gethostbyaddr
socket getnameinfo	A							https://docs.python.org			<pre><code>
socket.getnameinfo(sockaddr, flags)</code></pre><br>Translate a socket address sockaddr into a 2-tuple (host, port). Depending on the settings of flags, the result can contain a fully-qualified domain name or numeric address representation in host. Similarly, port can contain a string port name or a numeric port number.	https://docs.python.org/3.4/library/socket.html#socket.getnameinfo
socket getprotobyname	A							https://docs.python.org			<pre><code>
socket.getprotobyname(protocolname)</code></pre><br>Translate an Internet protocol name (for example, 'icmp') to a constant suitable for passing as the (optional) third argument to the socket() function. This is usually only needed for sockets opened in “raw” mode (SOCK_RAW); for the normal socket modes, the correct protocol is chosen automatically if the protocol is omitted or zero.	https://docs.python.org/3.4/library/socket.html#socket.getprotobyname
socket getservbyname	A							https://docs.python.org			<pre><code>
socket.getservbyname(servicename[, protocolname])</code></pre><br>Translate an Internet service name and protocol name to a port number for that service. The optional protocol name, if given, should be 'tcp' or 'udp', otherwise any protocol will match.	https://docs.python.org/3.4/library/socket.html#socket.getservbyname
socket getservbyport	A							https://docs.python.org			<pre><code>
socket.getservbyport(port[, protocolname])</code></pre><br>Translate an Internet port number and protocol name to a service name for that service. The optional protocol name, if given, should be 'tcp' or 'udp', otherwise any protocol will match.	https://docs.python.org/3.4/library/socket.html#socket.getservbyport
socket ntohl	A							https://docs.python.org			<pre><code>
socket.ntohl(x)</code></pre><br>Convert 32-bit positive integers from network to host byte order. On machines where the host byte order is the same as network byte order, this is a no-op; otherwise, it performs a 4-byte swap operation.	https://docs.python.org/3.4/library/socket.html#socket.ntohl
socket ntohs	A							https://docs.python.org			<pre><code>
socket.ntohs(x)</code></pre><br>Convert 16-bit positive integers from network to host byte order. On machines where the host byte order is the same as network byte order, this is a no-op; otherwise, it performs a 2-byte swap operation.	https://docs.python.org/3.4/library/socket.html#socket.ntohs
socket htonl	A							https://docs.python.org			<pre><code>
socket.htonl(x)</code></pre><br>Convert 32-bit positive integers from host to network byte order. On machines where the host byte order is the same as network byte order, this is a no-op; otherwise, it performs a 4-byte swap operation.	https://docs.python.org/3.4/library/socket.html#socket.htonl
socket htons	A							https://docs.python.org			<pre><code>
socket.htons(x)</code></pre><br>Convert 16-bit positive integers from host to network byte order. On machines where the host byte order is the same as network byte order, this is a no-op; otherwise, it performs a 2-byte swap operation.	https://docs.python.org/3.4/library/socket.html#socket.htons
socket inet_aton	A							https://docs.python.org			<pre><code>
socket.inet_aton(ip_string)</code></pre><br>Convert an IPv4 address from dotted-quad string format (for example, ‘123.45.67.89’) to 32-bit packed binary format, as a bytes object four characters in length. This is useful when conversing with a program that uses the standard C library and needs objects of type struct in_addr, which is the C type for the 32-bit packed binary this function returns.	https://docs.python.org/3.4/library/socket.html#socket.inet_aton
socket inet_ntoa	A							https://docs.python.org			<pre><code>
socket.inet_ntoa(packed_ip)</code></pre><br>Convert a 32-bit packed IPv4 address (a bytes object four characters in length) to its standard dotted-quad string representation (for example, ‘123.45.67.89’). This is useful when conversing with a program that uses the standard C library and needs objects of type struct in_addr, which is the C type for the 32-bit packed binary data this function takes as an argument.	https://docs.python.org/3.4/library/socket.html#socket.inet_ntoa
socket inet_pton	A							https://docs.python.org			<pre><code>
socket.inet_pton(address_family, ip_string)</code></pre><br>Convert an IP address from its family-specific string format to a packed, binary format. inet_pton() is useful when a library or network protocol calls for an object of type struct in_addr (similar to inet_aton()) or struct in6_addr.	https://docs.python.org/3.4/library/socket.html#socket.inet_pton
socket inet_ntop	A							https://docs.python.org			<pre><code>
socket.inet_ntop(address_family, packed_ip)</code></pre><br>Convert a packed IP address (a bytes object of some number of characters) to its standard, family-specific string representation (for example, '7.10.0.5' or '5aef:2b::8'). inet_ntop() is useful when a library or network protocol returns an object of type struct in_addr (similar to inet_ntoa()) or struct in6_addr.	https://docs.python.org/3.4/library/socket.html#socket.inet_ntop
socket CMSG_LEN	A							https://docs.python.org			<pre><code>
socket.CMSG_LEN(length)</code></pre><br>Return the total length, without trailing padding, of an ancillary data item with associated data of the given length. This value can often be used as the buffer size for recvmsg() to receive a single item of ancillary data, but RFC 3542 requires portable applications to use CMSG_SPACE() and thus include space for padding, even when the item will be the last in the buffer. Raises OverflowError if length is outside the permissible range of values.	https://docs.python.org/3.4/library/socket.html#socket.CMSG_LEN
socket CMSG_SPACE	A							https://docs.python.org			<pre><code>
socket.CMSG_SPACE(length)</code></pre><br>Return the buffer size needed for recvmsg() to receive an ancillary data item with associated data of the given length, along with any trailing padding. The buffer space needed to receive multiple items is the sum of the CMSG_SPACE() values for their associated data lengths. Raises OverflowError if length is outside the permissible range of values.	https://docs.python.org/3.4/library/socket.html#socket.CMSG_SPACE
socket getdefaulttimeout	A							https://docs.python.org			<pre><code>
socket.getdefaulttimeout()</code></pre><br>Return the default timeout in seconds (float) for new socket objects. A value of None indicates that new socket objects have no timeout. When the socket module is first imported, the default is None.	https://docs.python.org/3.4/library/socket.html#socket.getdefaulttimeout
socket setdefaulttimeout	A							https://docs.python.org			<pre><code>
socket.setdefaulttimeout(timeout)</code></pre><br>Set the default timeout in seconds (float) for new socket objects. When the socket module is first imported, the default is None. See settimeout() for possible values and their respective meanings.	https://docs.python.org/3.4/library/socket.html#socket.setdefaulttimeout
socket sethostname	A							https://docs.python.org			<pre><code>
socket.sethostname(name)</code></pre><br>Set the machine’s hostname to name. This will raise an OSError if you don’t have enough rights.	https://docs.python.org/3.4/library/socket.html#socket.sethostname
socket if_nameindex	A							https://docs.python.org			<pre><code>
socket.if_nameindex()</code></pre><br>Return a list of network interface information (index int, name string) tuples. OSError if the system call fails.	https://docs.python.org/3.4/library/socket.html#socket.if_nameindex
socket if_nametoindex	A							https://docs.python.org			<pre><code>
socket.if_nametoindex(if_name)</code></pre><br>Return a network interface index number corresponding to an interface name. OSError if no interface with the given name exists.	https://docs.python.org/3.4/library/socket.html#socket.if_nametoindex
socket if_indextoname	A							https://docs.python.org			<pre><code>
socket.if_indextoname(if_index)</code></pre><br>Return a network interface name corresponding to an interface index number. OSError if no interface with the given index exists.	https://docs.python.org/3.4/library/socket.html#socket.if_indextoname
socket socket	A							https://docs.python.org			<pre><code>
socket.socket(family=AF_INET, type=SOCK_STREAM, proto=0, fileno=None)</code></pre><br>Create a new socket using the given address family, socket type and protocol number. The address family should be AF_INET (the default), AF_INET6, AF_UNIX, AF_CAN or AF_RDS. The socket type should be SOCK_STREAM (the default), SOCK_DGRAM, SOCK_RAW or perhaps one of the other SOCK_ constants. The protocol number is usually zero and may be omitted or in the case where the address family is AF_CAN the protocol should be one of CAN_RAW or CAN_BCM. If fileno is specified, the other arguments are ignored, causing the socket with the specified file descriptor to return. Unlike socket.fromfd(), fileno will return the same socket and not a duplicate. This may help close a detached socket using socket.close().	https://docs.python.org/3.4/library/socket.html#socket.socket
socket socketpair	A							https://docs.python.org			<pre><code>
socket.socketpair([family[, type[, proto]]])</code></pre><br>Build a pair of connected socket objects using the given address family, socket type, and protocol number. Address family, socket type, and protocol number are as for the socket() function above. The default family is AF_UNIX if defined on the platform; otherwise, the default is AF_INET. Availability: Unix.	https://docs.python.org/3.4/library/socket.html#socket.socketpair
socket create_connection	A							https://docs.python.org			<pre><code>
socket.create_connection(address[, timeout[, source_address]])</code></pre><br>Connect to a TCP service listening on the Internet address (a 2-tuple (host, port)), and return the socket object. This is a higher-level function than socket.connect(): if host is a non-numeric hostname, it will try to resolve it for both AF_INET and AF_INET6, and then try to connect to all possible addresses in turn until a connection succeeds. This makes it easy to write clients that are compatible to both IPv4 and IPv6.	https://docs.python.org/3.4/library/socket.html#socket.create_connection
socket fromfd	A							https://docs.python.org			<pre><code>
socket.fromfd(fd, family, type, proto=0)</code></pre><br>Duplicate the file descriptor fd (an integer as returned by a file object’s fileno() method) and build a socket object from the result. Address family, socket type and protocol number are as for the socket() function above. The file descriptor should refer to a socket, but this is not checked — subsequent operations on the object may fail if the file descriptor is invalid. This function is rarely needed, but can be used to get or set socket options on a socket passed to a program as standard input or output (such as a server started by the Unix inet daemon). The socket is assumed to be in blocking mode.	https://docs.python.org/3.4/library/socket.html#socket.fromfd
socket fromshare	A							https://docs.python.org			<pre><code>
socket.fromshare(data)</code></pre><br>Instantiate a socket from data obtained from the socket.share() method. The socket is assumed to be in blocking mode.	https://docs.python.org/3.4/library/socket.html#socket.fromshare
socket getaddrinfo	A							https://docs.python.org			<pre><code>
socket.getaddrinfo(host, port, family=0, type=0, proto=0, flags=0)</code></pre><br>Translate the host/port argument into a sequence of 5-tuples that contain all the necessary arguments for creating a socket connected to that service. host is a domain name, a string representation of an IPv4/v6 address or None. port is a string service name such as 'http', a numeric port number or None. By passing None as the value of host and port, you can pass NULL to the underlying C API.	https://docs.python.org/3.4/library/socket.html#socket.getaddrinfo
socket getfqdn	A							https://docs.python.org			<pre><code>
socket.getfqdn([name])</code></pre><br>Return a fully qualified domain name for name. If name is omitted or empty, it is interpreted as the local host. To find the fully qualified name, the hostname returned by gethostbyaddr() is checked, followed by aliases for the host, if available. The first name which includes a period is selected. In case no fully qualified domain name is available, the hostname as returned by gethostname() is returned.	https://docs.python.org/3.4/library/socket.html#socket.getfqdn
socket gethostbyname	A							https://docs.python.org			<pre><code>
socket.gethostbyname(hostname)</code></pre><br>Translate a host name to IPv4 address format. The IPv4 address is returned as a string, such as '100.50.200.5'. If the host name is an IPv4 address itself it is returned unchanged. See gethostbyname_ex() for a more complete interface. gethostbyname() does not support IPv6 name resolution, and getaddrinfo() should be used instead for IPv4/v6 dual stack support.	https://docs.python.org/3.4/library/socket.html#socket.gethostbyname
socket gethostbyname_ex	A							https://docs.python.org			<pre><code>
socket.gethostbyname_ex(hostname)</code></pre><br>Translate a host name to IPv4 address format, extended interface. Return a triple (hostname, aliaslist, ipaddrlist) where hostname is the primary host name responding to the given ip_address, aliaslist is a (possibly empty) list of alternative host names for the same address, and ipaddrlist is a list of IPv4 addresses for the same interface on the same host (often but not always a single address). gethostbyname_ex() does not support IPv6 name resolution, and getaddrinfo() should be used instead for IPv4/v6 dual stack support.	https://docs.python.org/3.4/library/socket.html#socket.gethostbyname_ex
socket gethostname	A							https://docs.python.org			<pre><code>
socket.gethostname()</code></pre><br>Return a string containing the hostname of the machine where the Python interpreter is currently executing.	https://docs.python.org/3.4/library/socket.html#socket.gethostname
socket gethostbyaddr	A							https://docs.python.org			<pre><code>
socket.gethostbyaddr(ip_address)</code></pre><br>Return a triple (hostname, aliaslist, ipaddrlist) where hostname is the primary host name responding to the given ip_address, aliaslist is a (possibly empty) list of alternative host names for the same address, and ipaddrlist is a list of IPv4/v6 addresses for the same interface on the same host (most likely containing only a single address). To find the fully qualified domain name, use the function getfqdn(). gethostbyaddr() supports both IPv4 and IPv6.	https://docs.python.org/3.4/library/socket.html#socket.gethostbyaddr
socket getnameinfo	A							https://docs.python.org			<pre><code>
socket.getnameinfo(sockaddr, flags)</code></pre><br>Translate a socket address sockaddr into a 2-tuple (host, port). Depending on the settings of flags, the result can contain a fully-qualified domain name or numeric address representation in host. Similarly, port can contain a string port name or a numeric port number.	https://docs.python.org/3.4/library/socket.html#socket.getnameinfo
socket getprotobyname	A							https://docs.python.org			<pre><code>
socket.getprotobyname(protocolname)</code></pre><br>Translate an Internet protocol name (for example, 'icmp') to a constant suitable for passing as the (optional) third argument to the socket() function. This is usually only needed for sockets opened in “raw” mode (SOCK_RAW); for the normal socket modes, the correct protocol is chosen automatically if the protocol is omitted or zero.	https://docs.python.org/3.4/library/socket.html#socket.getprotobyname
socket getservbyname	A							https://docs.python.org			<pre><code>
socket.getservbyname(servicename[, protocolname])</code></pre><br>Translate an Internet service name and protocol name to a port number for that service. The optional protocol name, if given, should be 'tcp' or 'udp', otherwise any protocol will match.	https://docs.python.org/3.4/library/socket.html#socket.getservbyname
socket getservbyport	A							https://docs.python.org			<pre><code>
socket.getservbyport(port[, protocolname])</code></pre><br>Translate an Internet port number and protocol name to a service name for that service. The optional protocol name, if given, should be 'tcp' or 'udp', otherwise any protocol will match.	https://docs.python.org/3.4/library/socket.html#socket.getservbyport
socket ntohl	A							https://docs.python.org			<pre><code>
socket.ntohl(x)</code></pre><br>Convert 32-bit positive integers from network to host byte order. On machines where the host byte order is the same as network byte order, this is a no-op; otherwise, it performs a 4-byte swap operation.	https://docs.python.org/3.4/library/socket.html#socket.ntohl
socket ntohs	A							https://docs.python.org			<pre><code>
socket.ntohs(x)</code></pre><br>Convert 16-bit positive integers from network to host byte order. On machines where the host byte order is the same as network byte order, this is a no-op; otherwise, it performs a 2-byte swap operation.	https://docs.python.org/3.4/library/socket.html#socket.ntohs
socket htonl	A							https://docs.python.org			<pre><code>
socket.htonl(x)</code></pre><br>Convert 32-bit positive integers from host to network byte order. On machines where the host byte order is the same as network byte order, this is a no-op; otherwise, it performs a 4-byte swap operation.	https://docs.python.org/3.4/library/socket.html#socket.htonl
socket htons	A							https://docs.python.org			<pre><code>
socket.htons(x)</code></pre><br>Convert 16-bit positive integers from host to network byte order. On machines where the host byte order is the same as network byte order, this is a no-op; otherwise, it performs a 2-byte swap operation.	https://docs.python.org/3.4/library/socket.html#socket.htons
socket inet_aton	A							https://docs.python.org			<pre><code>
socket.inet_aton(ip_string)</code></pre><br>Convert an IPv4 address from dotted-quad string format (for example, ‘123.45.67.89’) to 32-bit packed binary format, as a bytes object four characters in length. This is useful when conversing with a program that uses the standard C library and needs objects of type struct in_addr, which is the C type for the 32-bit packed binary this function returns.	https://docs.python.org/3.4/library/socket.html#socket.inet_aton
socket inet_ntoa	A							https://docs.python.org			<pre><code>
socket.inet_ntoa(packed_ip)</code></pre><br>Convert a 32-bit packed IPv4 address (a bytes object four characters in length) to its standard dotted-quad string representation (for example, ‘123.45.67.89’). This is useful when conversing with a program that uses the standard C library and needs objects of type struct in_addr, which is the C type for the 32-bit packed binary data this function takes as an argument.	https://docs.python.org/3.4/library/socket.html#socket.inet_ntoa
socket inet_pton	A							https://docs.python.org			<pre><code>
socket.inet_pton(address_family, ip_string)</code></pre><br>Convert an IP address from its family-specific string format to a packed, binary format. inet_pton() is useful when a library or network protocol calls for an object of type struct in_addr (similar to inet_aton()) or struct in6_addr.	https://docs.python.org/3.4/library/socket.html#socket.inet_pton
socket inet_ntop	A							https://docs.python.org			<pre><code>
socket.inet_ntop(address_family, packed_ip)</code></pre><br>Convert a packed IP address (a bytes object of some number of characters) to its standard, family-specific string representation (for example, '7.10.0.5' or '5aef:2b::8'). inet_ntop() is useful when a library or network protocol returns an object of type struct in_addr (similar to inet_ntoa()) or struct in6_addr.	https://docs.python.org/3.4/library/socket.html#socket.inet_ntop
socket CMSG_LEN	A							https://docs.python.org			<pre><code>
socket.CMSG_LEN(length)</code></pre><br>Return the total length, without trailing padding, of an ancillary data item with associated data of the given length. This value can often be used as the buffer size for recvmsg() to receive a single item of ancillary data, but RFC 3542 requires portable applications to use CMSG_SPACE() and thus include space for padding, even when the item will be the last in the buffer. Raises OverflowError if length is outside the permissible range of values.	https://docs.python.org/3.4/library/socket.html#socket.CMSG_LEN
socket CMSG_SPACE	A							https://docs.python.org			<pre><code>
socket.CMSG_SPACE(length)</code></pre><br>Return the buffer size needed for recvmsg() to receive an ancillary data item with associated data of the given length, along with any trailing padding. The buffer space needed to receive multiple items is the sum of the CMSG_SPACE() values for their associated data lengths. Raises OverflowError if length is outside the permissible range of values.	https://docs.python.org/3.4/library/socket.html#socket.CMSG_SPACE
socket getdefaulttimeout	A							https://docs.python.org			<pre><code>
socket.getdefaulttimeout()</code></pre><br>Return the default timeout in seconds (float) for new socket objects. A value of None indicates that new socket objects have no timeout. When the socket module is first imported, the default is None.	https://docs.python.org/3.4/library/socket.html#socket.getdefaulttimeout
socket setdefaulttimeout	A							https://docs.python.org			<pre><code>
socket.setdefaulttimeout(timeout)</code></pre><br>Set the default timeout in seconds (float) for new socket objects. When the socket module is first imported, the default is None. See settimeout() for possible values and their respective meanings.	https://docs.python.org/3.4/library/socket.html#socket.setdefaulttimeout
socket sethostname	A							https://docs.python.org			<pre><code>
socket.sethostname(name)</code></pre><br>Set the machine’s hostname to name. This will raise an OSError if you don’t have enough rights.	https://docs.python.org/3.4/library/socket.html#socket.sethostname
socket if_nameindex	A							https://docs.python.org			<pre><code>
socket.if_nameindex()</code></pre><br>Return a list of network interface information (index int, name string) tuples. OSError if the system call fails.	https://docs.python.org/3.4/library/socket.html#socket.if_nameindex
socket if_nametoindex	A							https://docs.python.org			<pre><code>
socket.if_nametoindex(if_name)</code></pre><br>Return a network interface index number corresponding to an interface name. OSError if no interface with the given name exists.	https://docs.python.org/3.4/library/socket.html#socket.if_nametoindex
socket if_indextoname	A							https://docs.python.org			<pre><code>
socket.if_indextoname(if_index)</code></pre><br>Return a network interface name corresponding to an interface index number. OSError if no interface with the given index exists.	https://docs.python.org/3.4/library/socket.html#socket.if_indextoname
socket socket	A							https://docs.python.org			<pre><code>
socket.socket(family=AF_INET, type=SOCK_STREAM, proto=0, fileno=None)</code></pre><br>Create a new socket using the given address family, socket type and protocol number. The address family should be AF_INET (the default), AF_INET6, AF_UNIX, AF_CAN or AF_RDS. The socket type should be SOCK_STREAM (the default), SOCK_DGRAM, SOCK_RAW or perhaps one of the other SOCK_ constants. The protocol number is usually zero and may be omitted or in the case where the address family is AF_CAN the protocol should be one of CAN_RAW or CAN_BCM. If fileno is specified, the other arguments are ignored, causing the socket with the specified file descriptor to return. Unlike socket.fromfd(), fileno will return the same socket and not a duplicate. This may help close a detached socket using socket.close().	https://docs.python.org/3.4/library/socket.html#socket.socket
socket socketpair	A							https://docs.python.org			<pre><code>
socket.socketpair([family[, type[, proto]]])</code></pre><br>Build a pair of connected socket objects using the given address family, socket type, and protocol number. Address family, socket type, and protocol number are as for the socket() function above. The default family is AF_UNIX if defined on the platform; otherwise, the default is AF_INET. Availability: Unix.	https://docs.python.org/3.4/library/socket.html#socket.socketpair
socket create_connection	A							https://docs.python.org			<pre><code>
socket.create_connection(address[, timeout[, source_address]])</code></pre><br>Connect to a TCP service listening on the Internet address (a 2-tuple (host, port)), and return the socket object. This is a higher-level function than socket.connect(): if host is a non-numeric hostname, it will try to resolve it for both AF_INET and AF_INET6, and then try to connect to all possible addresses in turn until a connection succeeds. This makes it easy to write clients that are compatible to both IPv4 and IPv6.	https://docs.python.org/3.4/library/socket.html#socket.create_connection
socket fromfd	A							https://docs.python.org			<pre><code>
socket.fromfd(fd, family, type, proto=0)</code></pre><br>Duplicate the file descriptor fd (an integer as returned by a file object’s fileno() method) and build a socket object from the result. Address family, socket type and protocol number are as for the socket() function above. The file descriptor should refer to a socket, but this is not checked — subsequent operations on the object may fail if the file descriptor is invalid. This function is rarely needed, but can be used to get or set socket options on a socket passed to a program as standard input or output (such as a server started by the Unix inet daemon). The socket is assumed to be in blocking mode.	https://docs.python.org/3.4/library/socket.html#socket.fromfd
socket fromshare	A							https://docs.python.org			<pre><code>
socket.fromshare(data)</code></pre><br>Instantiate a socket from data obtained from the socket.share() method. The socket is assumed to be in blocking mode.	https://docs.python.org/3.4/library/socket.html#socket.fromshare
socket getaddrinfo	A							https://docs.python.org			<pre><code>
socket.getaddrinfo(host, port, family=0, type=0, proto=0, flags=0)</code></pre><br>Translate the host/port argument into a sequence of 5-tuples that contain all the necessary arguments for creating a socket connected to that service. host is a domain name, a string representation of an IPv4/v6 address or None. port is a string service name such as 'http', a numeric port number or None. By passing None as the value of host and port, you can pass NULL to the underlying C API.	https://docs.python.org/3.4/library/socket.html#socket.getaddrinfo
socket getfqdn	A							https://docs.python.org			<pre><code>
socket.getfqdn([name])</code></pre><br>Return a fully qualified domain name for name. If name is omitted or empty, it is interpreted as the local host. To find the fully qualified name, the hostname returned by gethostbyaddr() is checked, followed by aliases for the host, if available. The first name which includes a period is selected. In case no fully qualified domain name is available, the hostname as returned by gethostname() is returned.	https://docs.python.org/3.4/library/socket.html#socket.getfqdn
socket gethostbyname	A							https://docs.python.org			<pre><code>
socket.gethostbyname(hostname)</code></pre><br>Translate a host name to IPv4 address format. The IPv4 address is returned as a string, such as '100.50.200.5'. If the host name is an IPv4 address itself it is returned unchanged. See gethostbyname_ex() for a more complete interface. gethostbyname() does not support IPv6 name resolution, and getaddrinfo() should be used instead for IPv4/v6 dual stack support.	https://docs.python.org/3.4/library/socket.html#socket.gethostbyname
socket gethostbyname_ex	A							https://docs.python.org			<pre><code>
socket.gethostbyname_ex(hostname)</code></pre><br>Translate a host name to IPv4 address format, extended interface. Return a triple (hostname, aliaslist, ipaddrlist) where hostname is the primary host name responding to the given ip_address, aliaslist is a (possibly empty) list of alternative host names for the same address, and ipaddrlist is a list of IPv4 addresses for the same interface on the same host (often but not always a single address). gethostbyname_ex() does not support IPv6 name resolution, and getaddrinfo() should be used instead for IPv4/v6 dual stack support.	https://docs.python.org/3.4/library/socket.html#socket.gethostbyname_ex
socket gethostname	A							https://docs.python.org			<pre><code>
socket.gethostname()</code></pre><br>Return a string containing the hostname of the machine where the Python interpreter is currently executing.	https://docs.python.org/3.4/library/socket.html#socket.gethostname
socket gethostbyaddr	A							https://docs.python.org			<pre><code>
socket.gethostbyaddr(ip_address)</code></pre><br>Return a triple (hostname, aliaslist, ipaddrlist) where hostname is the primary host name responding to the given ip_address, aliaslist is a (possibly empty) list of alternative host names for the same address, and ipaddrlist is a list of IPv4/v6 addresses for the same interface on the same host (most likely containing only a single address). To find the fully qualified domain name, use the function getfqdn(). gethostbyaddr() supports both IPv4 and IPv6.	https://docs.python.org/3.4/library/socket.html#socket.gethostbyaddr
socket getnameinfo	A							https://docs.python.org			<pre><code>
socket.getnameinfo(sockaddr, flags)</code></pre><br>Translate a socket address sockaddr into a 2-tuple (host, port). Depending on the settings of flags, the result can contain a fully-qualified domain name or numeric address representation in host. Similarly, port can contain a string port name or a numeric port number.	https://docs.python.org/3.4/library/socket.html#socket.getnameinfo
socket getprotobyname	A							https://docs.python.org			<pre><code>
socket.getprotobyname(protocolname)</code></pre><br>Translate an Internet protocol name (for example, 'icmp') to a constant suitable for passing as the (optional) third argument to the socket() function. This is usually only needed for sockets opened in “raw” mode (SOCK_RAW); for the normal socket modes, the correct protocol is chosen automatically if the protocol is omitted or zero.	https://docs.python.org/3.4/library/socket.html#socket.getprotobyname
socket getservbyname	A							https://docs.python.org			<pre><code>
socket.getservbyname(servicename[, protocolname])</code></pre><br>Translate an Internet service name and protocol name to a port number for that service. The optional protocol name, if given, should be 'tcp' or 'udp', otherwise any protocol will match.	https://docs.python.org/3.4/library/socket.html#socket.getservbyname
socket getservbyport	A							https://docs.python.org			<pre><code>
socket.getservbyport(port[, protocolname])</code></pre><br>Translate an Internet port number and protocol name to a service name for that service. The optional protocol name, if given, should be 'tcp' or 'udp', otherwise any protocol will match.	https://docs.python.org/3.4/library/socket.html#socket.getservbyport
socket ntohl	A							https://docs.python.org			<pre><code>
socket.ntohl(x)</code></pre><br>Convert 32-bit positive integers from network to host byte order. On machines where the host byte order is the same as network byte order, this is a no-op; otherwise, it performs a 4-byte swap operation.	https://docs.python.org/3.4/library/socket.html#socket.ntohl
socket ntohs	A							https://docs.python.org			<pre><code>
socket.ntohs(x)</code></pre><br>Convert 16-bit positive integers from network to host byte order. On machines where the host byte order is the same as network byte order, this is a no-op; otherwise, it performs a 2-byte swap operation.	https://docs.python.org/3.4/library/socket.html#socket.ntohs
socket htonl	A							https://docs.python.org			<pre><code>
socket.htonl(x)</code></pre><br>Convert 32-bit positive integers from host to network byte order. On machines where the host byte order is the same as network byte order, this is a no-op; otherwise, it performs a 4-byte swap operation.	https://docs.python.org/3.4/library/socket.html#socket.htonl
socket htons	A							https://docs.python.org			<pre><code>
socket.htons(x)</code></pre><br>Convert 16-bit positive integers from host to network byte order. On machines where the host byte order is the same as network byte order, this is a no-op; otherwise, it performs a 2-byte swap operation.	https://docs.python.org/3.4/library/socket.html#socket.htons
socket inet_aton	A							https://docs.python.org			<pre><code>
socket.inet_aton(ip_string)</code></pre><br>Convert an IPv4 address from dotted-quad string format (for example, ‘123.45.67.89’) to 32-bit packed binary format, as a bytes object four characters in length. This is useful when conversing with a program that uses the standard C library and needs objects of type struct in_addr, which is the C type for the 32-bit packed binary this function returns.	https://docs.python.org/3.4/library/socket.html#socket.inet_aton
socket inet_ntoa	A							https://docs.python.org			<pre><code>
socket.inet_ntoa(packed_ip)</code></pre><br>Convert a 32-bit packed IPv4 address (a bytes object four characters in length) to its standard dotted-quad string representation (for example, ‘123.45.67.89’). This is useful when conversing with a program that uses the standard C library and needs objects of type struct in_addr, which is the C type for the 32-bit packed binary data this function takes as an argument.	https://docs.python.org/3.4/library/socket.html#socket.inet_ntoa
socket inet_pton	A							https://docs.python.org			<pre><code>
socket.inet_pton(address_family, ip_string)</code></pre><br>Convert an IP address from its family-specific string format to a packed, binary format. inet_pton() is useful when a library or network protocol calls for an object of type struct in_addr (similar to inet_aton()) or struct in6_addr.	https://docs.python.org/3.4/library/socket.html#socket.inet_pton
socket inet_ntop	A							https://docs.python.org			<pre><code>
socket.inet_ntop(address_family, packed_ip)</code></pre><br>Convert a packed IP address (a bytes object of some number of characters) to its standard, family-specific string representation (for example, '7.10.0.5' or '5aef:2b::8'). inet_ntop() is useful when a library or network protocol returns an object of type struct in_addr (similar to inet_ntoa()) or struct in6_addr.	https://docs.python.org/3.4/library/socket.html#socket.inet_ntop
socket CMSG_LEN	A							https://docs.python.org			<pre><code>
socket.CMSG_LEN(length)</code></pre><br>Return the total length, without trailing padding, of an ancillary data item with associated data of the given length. This value can often be used as the buffer size for recvmsg() to receive a single item of ancillary data, but RFC 3542 requires portable applications to use CMSG_SPACE() and thus include space for padding, even when the item will be the last in the buffer. Raises OverflowError if length is outside the permissible range of values.	https://docs.python.org/3.4/library/socket.html#socket.CMSG_LEN
socket CMSG_SPACE	A							https://docs.python.org			<pre><code>
socket.CMSG_SPACE(length)</code></pre><br>Return the buffer size needed for recvmsg() to receive an ancillary data item with associated data of the given length, along with any trailing padding. The buffer space needed to receive multiple items is the sum of the CMSG_SPACE() values for their associated data lengths. Raises OverflowError if length is outside the permissible range of values.	https://docs.python.org/3.4/library/socket.html#socket.CMSG_SPACE
socket getdefaulttimeout	A							https://docs.python.org			<pre><code>
socket.getdefaulttimeout()</code></pre><br>Return the default timeout in seconds (float) for new socket objects. A value of None indicates that new socket objects have no timeout. When the socket module is first imported, the default is None.	https://docs.python.org/3.4/library/socket.html#socket.getdefaulttimeout
socket setdefaulttimeout	A							https://docs.python.org			<pre><code>
socket.setdefaulttimeout(timeout)</code></pre><br>Set the default timeout in seconds (float) for new socket objects. When the socket module is first imported, the default is None. See settimeout() for possible values and their respective meanings.	https://docs.python.org/3.4/library/socket.html#socket.setdefaulttimeout
socket sethostname	A							https://docs.python.org			<pre><code>
socket.sethostname(name)</code></pre><br>Set the machine’s hostname to name. This will raise an OSError if you don’t have enough rights.	https://docs.python.org/3.4/library/socket.html#socket.sethostname
socket if_nameindex	A							https://docs.python.org			<pre><code>
socket.if_nameindex()</code></pre><br>Return a list of network interface information (index int, name string) tuples. OSError if the system call fails.	https://docs.python.org/3.4/library/socket.html#socket.if_nameindex
socket if_nametoindex	A							https://docs.python.org			<pre><code>
socket.if_nametoindex(if_name)</code></pre><br>Return a network interface index number corresponding to an interface name. OSError if no interface with the given name exists.	https://docs.python.org/3.4/library/socket.html#socket.if_nametoindex
socket if_indextoname	A							https://docs.python.org			<pre><code>
socket.if_indextoname(if_index)</code></pre><br>Return a network interface name corresponding to an interface index number. OSError if no interface with the given index exists.	https://docs.python.org/3.4/library/socket.html#socket.if_indextoname
socket socket	A							https://docs.python.org			<pre><code>
socket.socket(family=AF_INET, type=SOCK_STREAM, proto=0, fileno=None)</code></pre><br>Create a new socket using the given address family, socket type and protocol number. The address family should be AF_INET (the default), AF_INET6, AF_UNIX, AF_CAN or AF_RDS. The socket type should be SOCK_STREAM (the default), SOCK_DGRAM, SOCK_RAW or perhaps one of the other SOCK_ constants. The protocol number is usually zero and may be omitted or in the case where the address family is AF_CAN the protocol should be one of CAN_RAW or CAN_BCM. If fileno is specified, the other arguments are ignored, causing the socket with the specified file descriptor to return. Unlike socket.fromfd(), fileno will return the same socket and not a duplicate. This may help close a detached socket using socket.close().	https://docs.python.org/3.4/library/socket.html#socket.socket
socket socketpair	A							https://docs.python.org			<pre><code>
socket.socketpair([family[, type[, proto]]])</code></pre><br>Build a pair of connected socket objects using the given address family, socket type, and protocol number. Address family, socket type, and protocol number are as for the socket() function above. The default family is AF_UNIX if defined on the platform; otherwise, the default is AF_INET. Availability: Unix.	https://docs.python.org/3.4/library/socket.html#socket.socketpair
socket create_connection	A							https://docs.python.org			<pre><code>
socket.create_connection(address[, timeout[, source_address]])</code></pre><br>Connect to a TCP service listening on the Internet address (a 2-tuple (host, port)), and return the socket object. This is a higher-level function than socket.connect(): if host is a non-numeric hostname, it will try to resolve it for both AF_INET and AF_INET6, and then try to connect to all possible addresses in turn until a connection succeeds. This makes it easy to write clients that are compatible to both IPv4 and IPv6.	https://docs.python.org/3.4/library/socket.html#socket.create_connection
socket fromfd	A							https://docs.python.org			<pre><code>
socket.fromfd(fd, family, type, proto=0)</code></pre><br>Duplicate the file descriptor fd (an integer as returned by a file object’s fileno() method) and build a socket object from the result. Address family, socket type and protocol number are as for the socket() function above. The file descriptor should refer to a socket, but this is not checked — subsequent operations on the object may fail if the file descriptor is invalid. This function is rarely needed, but can be used to get or set socket options on a socket passed to a program as standard input or output (such as a server started by the Unix inet daemon). The socket is assumed to be in blocking mode.	https://docs.python.org/3.4/library/socket.html#socket.fromfd
socket fromshare	A							https://docs.python.org			<pre><code>
socket.fromshare(data)</code></pre><br>Instantiate a socket from data obtained from the socket.share() method. The socket is assumed to be in blocking mode.	https://docs.python.org/3.4/library/socket.html#socket.fromshare
socket getaddrinfo	A							https://docs.python.org			<pre><code>
socket.getaddrinfo(host, port, family=0, type=0, proto=0, flags=0)</code></pre><br>Translate the host/port argument into a sequence of 5-tuples that contain all the necessary arguments for creating a socket connected to that service. host is a domain name, a string representation of an IPv4/v6 address or None. port is a string service name such as 'http', a numeric port number or None. By passing None as the value of host and port, you can pass NULL to the underlying C API.	https://docs.python.org/3.4/library/socket.html#socket.getaddrinfo
socket getfqdn	A							https://docs.python.org			<pre><code>
socket.getfqdn([name])</code></pre><br>Return a fully qualified domain name for name. If name is omitted or empty, it is interpreted as the local host. To find the fully qualified name, the hostname returned by gethostbyaddr() is checked, followed by aliases for the host, if available. The first name which includes a period is selected. In case no fully qualified domain name is available, the hostname as returned by gethostname() is returned.	https://docs.python.org/3.4/library/socket.html#socket.getfqdn
socket gethostbyname	A							https://docs.python.org			<pre><code>
socket.gethostbyname(hostname)</code></pre><br>Translate a host name to IPv4 address format. The IPv4 address is returned as a string, such as '100.50.200.5'. If the host name is an IPv4 address itself it is returned unchanged. See gethostbyname_ex() for a more complete interface. gethostbyname() does not support IPv6 name resolution, and getaddrinfo() should be used instead for IPv4/v6 dual stack support.	https://docs.python.org/3.4/library/socket.html#socket.gethostbyname
socket gethostbyname_ex	A							https://docs.python.org			<pre><code>
socket.gethostbyname_ex(hostname)</code></pre><br>Translate a host name to IPv4 address format, extended interface. Return a triple (hostname, aliaslist, ipaddrlist) where hostname is the primary host name responding to the given ip_address, aliaslist is a (possibly empty) list of alternative host names for the same address, and ipaddrlist is a list of IPv4 addresses for the same interface on the same host (often but not always a single address). gethostbyname_ex() does not support IPv6 name resolution, and getaddrinfo() should be used instead for IPv4/v6 dual stack support.	https://docs.python.org/3.4/library/socket.html#socket.gethostbyname_ex
socket gethostname	A							https://docs.python.org			<pre><code>
socket.gethostname()</code></pre><br>Return a string containing the hostname of the machine where the Python interpreter is currently executing.	https://docs.python.org/3.4/library/socket.html#socket.gethostname
socket gethostbyaddr	A							https://docs.python.org			<pre><code>
socket.gethostbyaddr(ip_address)</code></pre><br>Return a triple (hostname, aliaslist, ipaddrlist) where hostname is the primary host name responding to the given ip_address, aliaslist is a (possibly empty) list of alternative host names for the same address, and ipaddrlist is a list of IPv4/v6 addresses for the same interface on the same host (most likely containing only a single address). To find the fully qualified domain name, use the function getfqdn(). gethostbyaddr() supports both IPv4 and IPv6.	https://docs.python.org/3.4/library/socket.html#socket.gethostbyaddr
socket getnameinfo	A							https://docs.python.org			<pre><code>
socket.getnameinfo(sockaddr, flags)</code></pre><br>Translate a socket address sockaddr into a 2-tuple (host, port). Depending on the settings of flags, the result can contain a fully-qualified domain name or numeric address representation in host. Similarly, port can contain a string port name or a numeric port number.	https://docs.python.org/3.4/library/socket.html#socket.getnameinfo
socket getprotobyname	A							https://docs.python.org			<pre><code>
socket.getprotobyname(protocolname)</code></pre><br>Translate an Internet protocol name (for example, 'icmp') to a constant suitable for passing as the (optional) third argument to the socket() function. This is usually only needed for sockets opened in “raw” mode (SOCK_RAW); for the normal socket modes, the correct protocol is chosen automatically if the protocol is omitted or zero.	https://docs.python.org/3.4/library/socket.html#socket.getprotobyname
socket getservbyname	A							https://docs.python.org			<pre><code>
socket.getservbyname(servicename[, protocolname])</code></pre><br>Translate an Internet service name and protocol name to a port number for that service. The optional protocol name, if given, should be 'tcp' or 'udp', otherwise any protocol will match.	https://docs.python.org/3.4/library/socket.html#socket.getservbyname
socket getservbyport	A							https://docs.python.org			<pre><code>
socket.getservbyport(port[, protocolname])</code></pre><br>Translate an Internet port number and protocol name to a service name for that service. The optional protocol name, if given, should be 'tcp' or 'udp', otherwise any protocol will match.	https://docs.python.org/3.4/library/socket.html#socket.getservbyport
socket ntohl	A							https://docs.python.org			<pre><code>
socket.ntohl(x)</code></pre><br>Convert 32-bit positive integers from network to host byte order. On machines where the host byte order is the same as network byte order, this is a no-op; otherwise, it performs a 4-byte swap operation.	https://docs.python.org/3.4/library/socket.html#socket.ntohl
socket ntohs	A							https://docs.python.org			<pre><code>
socket.ntohs(x)</code></pre><br>Convert 16-bit positive integers from network to host byte order. On machines where the host byte order is the same as network byte order, this is a no-op; otherwise, it performs a 2-byte swap operation.	https://docs.python.org/3.4/library/socket.html#socket.ntohs
socket htonl	A							https://docs.python.org			<pre><code>
socket.htonl(x)</code></pre><br>Convert 32-bit positive integers from host to network byte order. On machines where the host byte order is the same as network byte order, this is a no-op; otherwise, it performs a 4-byte swap operation.	https://docs.python.org/3.4/library/socket.html#socket.htonl
socket htons	A							https://docs.python.org			<pre><code>
socket.htons(x)</code></pre><br>Convert 16-bit positive integers from host to network byte order. On machines where the host byte order is the same as network byte order, this is a no-op; otherwise, it performs a 2-byte swap operation.	https://docs.python.org/3.4/library/socket.html#socket.htons
socket inet_aton	A							https://docs.python.org			<pre><code>
socket.inet_aton(ip_string)</code></pre><br>Convert an IPv4 address from dotted-quad string format (for example, ‘123.45.67.89’) to 32-bit packed binary format, as a bytes object four characters in length. This is useful when conversing with a program that uses the standard C library and needs objects of type struct in_addr, which is the C type for the 32-bit packed binary this function returns.	https://docs.python.org/3.4/library/socket.html#socket.inet_aton
socket inet_ntoa	A							https://docs.python.org			<pre><code>
socket.inet_ntoa(packed_ip)</code></pre><br>Convert a 32-bit packed IPv4 address (a bytes object four characters in length) to its standard dotted-quad string representation (for example, ‘123.45.67.89’). This is useful when conversing with a program that uses the standard C library and needs objects of type struct in_addr, which is the C type for the 32-bit packed binary data this function takes as an argument.	https://docs.python.org/3.4/library/socket.html#socket.inet_ntoa
socket inet_pton	A							https://docs.python.org			<pre><code>
socket.inet_pton(address_family, ip_string)</code></pre><br>Convert an IP address from its family-specific string format to a packed, binary format. inet_pton() is useful when a library or network protocol calls for an object of type struct in_addr (similar to inet_aton()) or struct in6_addr.	https://docs.python.org/3.4/library/socket.html#socket.inet_pton
socket inet_ntop	A							https://docs.python.org			<pre><code>
socket.inet_ntop(address_family, packed_ip)</code></pre><br>Convert a packed IP address (a bytes object of some number of characters) to its standard, family-specific string representation (for example, '7.10.0.5' or '5aef:2b::8'). inet_ntop() is useful when a library or network protocol returns an object of type struct in_addr (similar to inet_ntoa()) or struct in6_addr.	https://docs.python.org/3.4/library/socket.html#socket.inet_ntop
socket CMSG_LEN	A							https://docs.python.org			<pre><code>
socket.CMSG_LEN(length)</code></pre><br>Return the total length, without trailing padding, of an ancillary data item with associated data of the given length. This value can often be used as the buffer size for recvmsg() to receive a single item of ancillary data, but RFC 3542 requires portable applications to use CMSG_SPACE() and thus include space for padding, even when the item will be the last in the buffer. Raises OverflowError if length is outside the permissible range of values.	https://docs.python.org/3.4/library/socket.html#socket.CMSG_LEN
socket CMSG_SPACE	A							https://docs.python.org			<pre><code>
socket.CMSG_SPACE(length)</code></pre><br>Return the buffer size needed for recvmsg() to receive an ancillary data item with associated data of the given length, along with any trailing padding. The buffer space needed to receive multiple items is the sum of the CMSG_SPACE() values for their associated data lengths. Raises OverflowError if length is outside the permissible range of values.	https://docs.python.org/3.4/library/socket.html#socket.CMSG_SPACE
socket getdefaulttimeout	A							https://docs.python.org			<pre><code>
socket.getdefaulttimeout()</code></pre><br>Return the default timeout in seconds (float) for new socket objects. A value of None indicates that new socket objects have no timeout. When the socket module is first imported, the default is None.	https://docs.python.org/3.4/library/socket.html#socket.getdefaulttimeout
socket setdefaulttimeout	A							https://docs.python.org			<pre><code>
socket.setdefaulttimeout(timeout)</code></pre><br>Set the default timeout in seconds (float) for new socket objects. When the socket module is first imported, the default is None. See settimeout() for possible values and their respective meanings.	https://docs.python.org/3.4/library/socket.html#socket.setdefaulttimeout
socket sethostname	A							https://docs.python.org			<pre><code>
socket.sethostname(name)</code></pre><br>Set the machine’s hostname to name. This will raise an OSError if you don’t have enough rights.	https://docs.python.org/3.4/library/socket.html#socket.sethostname
socket if_nameindex	A							https://docs.python.org			<pre><code>
socket.if_nameindex()</code></pre><br>Return a list of network interface information (index int, name string) tuples. OSError if the system call fails.	https://docs.python.org/3.4/library/socket.html#socket.if_nameindex
socket if_nametoindex	A							https://docs.python.org			<pre><code>
socket.if_nametoindex(if_name)</code></pre><br>Return a network interface index number corresponding to an interface name. OSError if no interface with the given name exists.	https://docs.python.org/3.4/library/socket.html#socket.if_nametoindex
socket if_indextoname	A							https://docs.python.org			<pre><code>
socket.if_indextoname(if_index)</code></pre><br>Return a network interface name corresponding to an interface index number. OSError if no interface with the given index exists.	https://docs.python.org/3.4/library/socket.html#socket.if_indextoname
spwd getspnam	A							https://docs.python.org			<pre><code>
spwd.getspnam(name)</code></pre><br>Return the shadow password database entry for the given user name.	https://docs.python.org/3.4/library/spwd.html#spwd.getspnam
spwd getspall	A							https://docs.python.org			<pre><code>
spwd.getspall()</code></pre><br>Return a list of all available shadow password database entries, in arbitrary order.	https://docs.python.org/3.4/library/spwd.html#spwd.getspall
sqlite3 connect	A							https://docs.python.org			<pre><code>
sqlite3.connect(database[, timeout, detect_types, isolation_level, check_same_thread, factory, cached_statements, uri])</code></pre><br>Opens a connection to the SQLite database file database. You can use ":memory:" to open a database connection to a database that resides in RAM instead of on disk.	https://docs.python.org/3.4/library/sqlite3.html#sqlite3.connect
sqlite3 register_converter	A							https://docs.python.org			<pre><code>
sqlite3.register_converter(typename, callable)</code></pre><br>Registers a callable to convert a bytestring from the database into a custom Python type. The callable will be invoked for all database values that are of the type typename. Confer the parameter detect_types of the connect() function for how the type detection works. Note that the case of typename and the name of the type in your query must match!	https://docs.python.org/3.4/library/sqlite3.html#sqlite3.register_converter
sqlite3 register_adapter	A							https://docs.python.org			<pre><code>
sqlite3.register_adapter(type, callable)</code></pre><br>Registers a callable to convert the custom Python type type into one of SQLite’s supported types. The callable callable accepts as single parameter the Python value, and must return a value of the following types: int, float, str or bytes.	https://docs.python.org/3.4/library/sqlite3.html#sqlite3.register_adapter
sqlite3 complete_statement	A							https://docs.python.org			<pre><code>
sqlite3.complete_statement(sql)</code></pre><br>Returns True if the string sql contains one or more complete SQL statements terminated by semicolons. It does not verify that the SQL is syntactically correct, only that there are no unclosed string literals and the statement is terminated by a semicolon.	https://docs.python.org/3.4/library/sqlite3.html#sqlite3.complete_statement
sqlite3 enable_callback_tracebacks	A							https://docs.python.org			<pre><code>
sqlite3.enable_callback_tracebacks(flag)</code></pre><br>By default you will not get any tracebacks in user-defined functions, aggregates, converters, authorizer callbacks etc. If you want to debug them, you can call this function with flag set to True. Afterwards, you will get tracebacks from callbacks on sys.stderr. Use False to disable the feature again.	https://docs.python.org/3.4/library/sqlite3.html#sqlite3.enable_callback_tracebacks
sqlite3 connect	A							https://docs.python.org			<pre><code>
sqlite3.connect(database[, timeout, detect_types, isolation_level, check_same_thread, factory, cached_statements, uri])</code></pre><br>Opens a connection to the SQLite database file database. You can use ":memory:" to open a database connection to a database that resides in RAM instead of on disk.	https://docs.python.org/3.4/library/sqlite3.html#sqlite3.connect
sqlite3 register_converter	A							https://docs.python.org			<pre><code>
sqlite3.register_converter(typename, callable)</code></pre><br>Registers a callable to convert a bytestring from the database into a custom Python type. The callable will be invoked for all database values that are of the type typename. Confer the parameter detect_types of the connect() function for how the type detection works. Note that the case of typename and the name of the type in your query must match!	https://docs.python.org/3.4/library/sqlite3.html#sqlite3.register_converter
sqlite3 register_adapter	A							https://docs.python.org			<pre><code>
sqlite3.register_adapter(type, callable)</code></pre><br>Registers a callable to convert the custom Python type type into one of SQLite’s supported types. The callable callable accepts as single parameter the Python value, and must return a value of the following types: int, float, str or bytes.	https://docs.python.org/3.4/library/sqlite3.html#sqlite3.register_adapter
sqlite3 complete_statement	A							https://docs.python.org			<pre><code>
sqlite3.complete_statement(sql)</code></pre><br>Returns True if the string sql contains one or more complete SQL statements terminated by semicolons. It does not verify that the SQL is syntactically correct, only that there are no unclosed string literals and the statement is terminated by a semicolon.	https://docs.python.org/3.4/library/sqlite3.html#sqlite3.complete_statement
sqlite3 enable_callback_tracebacks	A							https://docs.python.org			<pre><code>
sqlite3.enable_callback_tracebacks(flag)</code></pre><br>By default you will not get any tracebacks in user-defined functions, aggregates, converters, authorizer callbacks etc. If you want to debug them, you can call this function with flag set to True. Afterwards, you will get tracebacks from callbacks on sys.stderr. Use False to disable the feature again.	https://docs.python.org/3.4/library/sqlite3.html#sqlite3.enable_callback_tracebacks
ssl wrap_socket	A							https://docs.python.org			<pre><code>
ssl.wrap_socket(sock, keyfile=None, certfile=None, server_side=False, cert_reqs=CERT_NONE, ssl_version={see docs}, ca_certs=None, do_handshake_on_connect=True, suppress_ragged_eofs=True, ciphers=None)</code></pre><br>Takes an instance sock of socket.socket, and returns an instance of ssl.SSLSocket, a subtype of socket.socket, which wraps the underlying socket in an SSL context. sock must be a SOCK_STREAM socket; other socket types are unsupported.	https://docs.python.org/3.4/library/ssl.html#ssl.wrap_socket
ssl create_default_context	A							https://docs.python.org			<pre><code>
ssl.create_default_context(purpose=Purpose.SERVER_AUTH, cafile=None, capath=None, cadata=None)</code></pre><br>Return a new SSLContext object with default settings for the given purpose. The settings are chosen by the ssl module, and usually represent a higher security level than when calling the SSLContext constructor directly.	https://docs.python.org/3.4/library/ssl.html#ssl.create_default_context
ssl RAND_bytes	A							https://docs.python.org			<pre><code>
ssl.RAND_bytes(num)</code></pre><br>Return num cryptographically strong pseudo-random bytes. Raises an SSLError if the PRNG has not been seeded with enough data or if the operation is not supported by the current RAND method. RAND_status() can be used to check the status of the PRNG and RAND_add() can be used to seed the PRNG.	https://docs.python.org/3.4/library/ssl.html#ssl.RAND_bytes
ssl RAND_pseudo_bytes	A							https://docs.python.org			<pre><code>
ssl.RAND_pseudo_bytes(num)</code></pre><br>Return (bytes, is_cryptographic): bytes are num pseudo-random bytes, is_cryptographic is True if the bytes generated are cryptographically strong. Raises an SSLError if the operation is not supported by the current RAND method.	https://docs.python.org/3.4/library/ssl.html#ssl.RAND_pseudo_bytes
ssl RAND_status	A							https://docs.python.org			<pre><code>
ssl.RAND_status()</code></pre><br>Return True if the SSL pseudo-random number generator has been seeded with ‘enough’ randomness, and False otherwise. You can use ssl.RAND_egd() and ssl.RAND_add() to increase the randomness of the pseudo-random number generator.	https://docs.python.org/3.4/library/ssl.html#ssl.RAND_status
ssl RAND_egd	A							https://docs.python.org			<pre><code>
ssl.RAND_egd(path)</code></pre><br>If you are running an entropy-gathering daemon (EGD) somewhere, and path is the pathname of a socket connection open to it, this will read 256 bytes of randomness from the socket, and add it to the SSL pseudo-random number generator to increase the security of generated secret keys. This is typically only necessary on systems without better sources of randomness.	https://docs.python.org/3.4/library/ssl.html#ssl.RAND_egd
ssl RAND_add	A							https://docs.python.org			<pre><code>
ssl.RAND_add(bytes, entropy)</code></pre><br>Mix the given bytes into the SSL pseudo-random number generator. The parameter entropy (a float) is a lower bound on the entropy contained in string (so you can always use 0.0). See RFC 1750 for more information on sources of entropy.	https://docs.python.org/3.4/library/ssl.html#ssl.RAND_add
ssl match_hostname	A							https://docs.python.org			<pre><code>
ssl.match_hostname(cert, hostname)</code></pre><br>Verify that cert (in decoded format as returned by SSLSocket.getpeercert()) matches the given hostname. The rules applied are those for checking the identity of HTTPS servers as outlined in RFC 2818 and RFC 6125, except that IP addresses are not currently supported. In addition to HTTPS, this function should be suitable for checking the identity of servers in various SSL-based protocols such as FTPS, IMAPS, POPS and others.	https://docs.python.org/3.4/library/ssl.html#ssl.match_hostname
ssl cert_time_to_seconds	A							https://docs.python.org			<pre><code>
ssl.cert_time_to_seconds(timestring)</code></pre><br>Returns a floating-point value containing a normal seconds-after-the-epoch time value, given the time-string representing the “notBefore” or “notAfter” date from a certificate.	https://docs.python.org/3.4/library/ssl.html#ssl.cert_time_to_seconds
ssl get_server_certificate	A							https://docs.python.org			<pre><code>
ssl.get_server_certificate(addr, ssl_version=PROTOCOL_SSLv3, ca_certs=None)</code></pre><br>Given the address addr of an SSL-protected server, as a (hostname, port-number) pair, fetches the server’s certificate, and returns it as a PEM-encoded string. If ssl_version is specified, uses that version of the SSL protocol to attempt to connect to the server. If ca_certs is specified, it should be a file containing a list of root certificates, the same format as used for the same parameter in wrap_socket(). The call will attempt to validate the server certificate against that set of root certificates, and will fail if the validation attempt fails.	https://docs.python.org/3.4/library/ssl.html#ssl.get_server_certificate
ssl DER_cert_to_PEM_cert	A							https://docs.python.org			<pre><code>
ssl.DER_cert_to_PEM_cert(DER_cert_bytes)</code></pre><br>Given a certificate as a DER-encoded blob of bytes, returns a PEM-encoded string version of the same certificate.	https://docs.python.org/3.4/library/ssl.html#ssl.DER_cert_to_PEM_cert
ssl PEM_cert_to_DER_cert	A							https://docs.python.org			<pre><code>
ssl.PEM_cert_to_DER_cert(PEM_cert_string)</code></pre><br>Given a certificate as an ASCII PEM string, returns a DER-encoded sequence of bytes for that same certificate.	https://docs.python.org/3.4/library/ssl.html#ssl.PEM_cert_to_DER_cert
ssl get_default_verify_paths	A							https://docs.python.org			<pre><code>
ssl.get_default_verify_paths()</code></pre><br>Returns a named tuple with paths to OpenSSL’s default cafile and capath. The paths are the same as used by SSLContext.set_default_verify_paths(). The return value is a named tuple DefaultVerifyPaths:	https://docs.python.org/3.4/library/ssl.html#ssl.get_default_verify_paths
ssl enum_certificates	A							https://docs.python.org			<pre><code>
ssl.enum_certificates(store_name)</code></pre><br>Retrieve certificates from Windows’ system cert store. store_name may be one of CA, ROOT or MY. Windows may provide additional cert stores, too.	https://docs.python.org/3.4/library/ssl.html#ssl.enum_certificates
ssl enum_crls	A							https://docs.python.org			<pre><code>
ssl.enum_crls(store_name)</code></pre><br>Retrieve CRLs from Windows’ system cert store. store_name may be one of CA, ROOT or MY. Windows may provide additional cert stores, too.	https://docs.python.org/3.4/library/ssl.html#ssl.enum_crls
ssl wrap_socket	A							https://docs.python.org			<pre><code>
ssl.wrap_socket(sock, keyfile=None, certfile=None, server_side=False, cert_reqs=CERT_NONE, ssl_version={see docs}, ca_certs=None, do_handshake_on_connect=True, suppress_ragged_eofs=True, ciphers=None)</code></pre><br>Takes an instance sock of socket.socket, and returns an instance of ssl.SSLSocket, a subtype of socket.socket, which wraps the underlying socket in an SSL context. sock must be a SOCK_STREAM socket; other socket types are unsupported.	https://docs.python.org/3.4/library/ssl.html#ssl.wrap_socket
ssl create_default_context	A							https://docs.python.org			<pre><code>
ssl.create_default_context(purpose=Purpose.SERVER_AUTH, cafile=None, capath=None, cadata=None)</code></pre><br>Return a new SSLContext object with default settings for the given purpose. The settings are chosen by the ssl module, and usually represent a higher security level than when calling the SSLContext constructor directly.	https://docs.python.org/3.4/library/ssl.html#ssl.create_default_context
ssl RAND_bytes	A							https://docs.python.org			<pre><code>
ssl.RAND_bytes(num)</code></pre><br>Return num cryptographically strong pseudo-random bytes. Raises an SSLError if the PRNG has not been seeded with enough data or if the operation is not supported by the current RAND method. RAND_status() can be used to check the status of the PRNG and RAND_add() can be used to seed the PRNG.	https://docs.python.org/3.4/library/ssl.html#ssl.RAND_bytes
ssl RAND_pseudo_bytes	A							https://docs.python.org			<pre><code>
ssl.RAND_pseudo_bytes(num)</code></pre><br>Return (bytes, is_cryptographic): bytes are num pseudo-random bytes, is_cryptographic is True if the bytes generated are cryptographically strong. Raises an SSLError if the operation is not supported by the current RAND method.	https://docs.python.org/3.4/library/ssl.html#ssl.RAND_pseudo_bytes
ssl RAND_status	A							https://docs.python.org			<pre><code>
ssl.RAND_status()</code></pre><br>Return True if the SSL pseudo-random number generator has been seeded with ‘enough’ randomness, and False otherwise. You can use ssl.RAND_egd() and ssl.RAND_add() to increase the randomness of the pseudo-random number generator.	https://docs.python.org/3.4/library/ssl.html#ssl.RAND_status
ssl RAND_egd	A							https://docs.python.org			<pre><code>
ssl.RAND_egd(path)</code></pre><br>If you are running an entropy-gathering daemon (EGD) somewhere, and path is the pathname of a socket connection open to it, this will read 256 bytes of randomness from the socket, and add it to the SSL pseudo-random number generator to increase the security of generated secret keys. This is typically only necessary on systems without better sources of randomness.	https://docs.python.org/3.4/library/ssl.html#ssl.RAND_egd
ssl RAND_add	A							https://docs.python.org			<pre><code>
ssl.RAND_add(bytes, entropy)</code></pre><br>Mix the given bytes into the SSL pseudo-random number generator. The parameter entropy (a float) is a lower bound on the entropy contained in string (so you can always use 0.0). See RFC 1750 for more information on sources of entropy.	https://docs.python.org/3.4/library/ssl.html#ssl.RAND_add
ssl match_hostname	A							https://docs.python.org			<pre><code>
ssl.match_hostname(cert, hostname)</code></pre><br>Verify that cert (in decoded format as returned by SSLSocket.getpeercert()) matches the given hostname. The rules applied are those for checking the identity of HTTPS servers as outlined in RFC 2818 and RFC 6125, except that IP addresses are not currently supported. In addition to HTTPS, this function should be suitable for checking the identity of servers in various SSL-based protocols such as FTPS, IMAPS, POPS and others.	https://docs.python.org/3.4/library/ssl.html#ssl.match_hostname
ssl cert_time_to_seconds	A							https://docs.python.org			<pre><code>
ssl.cert_time_to_seconds(timestring)</code></pre><br>Returns a floating-point value containing a normal seconds-after-the-epoch time value, given the time-string representing the “notBefore” or “notAfter” date from a certificate.	https://docs.python.org/3.4/library/ssl.html#ssl.cert_time_to_seconds
ssl get_server_certificate	A							https://docs.python.org			<pre><code>
ssl.get_server_certificate(addr, ssl_version=PROTOCOL_SSLv3, ca_certs=None)</code></pre><br>Given the address addr of an SSL-protected server, as a (hostname, port-number) pair, fetches the server’s certificate, and returns it as a PEM-encoded string. If ssl_version is specified, uses that version of the SSL protocol to attempt to connect to the server. If ca_certs is specified, it should be a file containing a list of root certificates, the same format as used for the same parameter in wrap_socket(). The call will attempt to validate the server certificate against that set of root certificates, and will fail if the validation attempt fails.	https://docs.python.org/3.4/library/ssl.html#ssl.get_server_certificate
ssl DER_cert_to_PEM_cert	A							https://docs.python.org			<pre><code>
ssl.DER_cert_to_PEM_cert(DER_cert_bytes)</code></pre><br>Given a certificate as a DER-encoded blob of bytes, returns a PEM-encoded string version of the same certificate.	https://docs.python.org/3.4/library/ssl.html#ssl.DER_cert_to_PEM_cert
ssl PEM_cert_to_DER_cert	A							https://docs.python.org			<pre><code>
ssl.PEM_cert_to_DER_cert(PEM_cert_string)</code></pre><br>Given a certificate as an ASCII PEM string, returns a DER-encoded sequence of bytes for that same certificate.	https://docs.python.org/3.4/library/ssl.html#ssl.PEM_cert_to_DER_cert
ssl get_default_verify_paths	A							https://docs.python.org			<pre><code>
ssl.get_default_verify_paths()</code></pre><br>Returns a named tuple with paths to OpenSSL’s default cafile and capath. The paths are the same as used by SSLContext.set_default_verify_paths(). The return value is a named tuple DefaultVerifyPaths:	https://docs.python.org/3.4/library/ssl.html#ssl.get_default_verify_paths
ssl enum_certificates	A							https://docs.python.org			<pre><code>
ssl.enum_certificates(store_name)</code></pre><br>Retrieve certificates from Windows’ system cert store. store_name may be one of CA, ROOT or MY. Windows may provide additional cert stores, too.	https://docs.python.org/3.4/library/ssl.html#ssl.enum_certificates
ssl enum_crls	A							https://docs.python.org			<pre><code>
ssl.enum_crls(store_name)</code></pre><br>Retrieve CRLs from Windows’ system cert store. store_name may be one of CA, ROOT or MY. Windows may provide additional cert stores, too.	https://docs.python.org/3.4/library/ssl.html#ssl.enum_crls
ssl wrap_socket	A							https://docs.python.org			<pre><code>
ssl.wrap_socket(sock, keyfile=None, certfile=None, server_side=False, cert_reqs=CERT_NONE, ssl_version={see docs}, ca_certs=None, do_handshake_on_connect=True, suppress_ragged_eofs=True, ciphers=None)</code></pre><br>Takes an instance sock of socket.socket, and returns an instance of ssl.SSLSocket, a subtype of socket.socket, which wraps the underlying socket in an SSL context. sock must be a SOCK_STREAM socket; other socket types are unsupported.	https://docs.python.org/3.4/library/ssl.html#ssl.wrap_socket
ssl create_default_context	A							https://docs.python.org			<pre><code>
ssl.create_default_context(purpose=Purpose.SERVER_AUTH, cafile=None, capath=None, cadata=None)</code></pre><br>Return a new SSLContext object with default settings for the given purpose. The settings are chosen by the ssl module, and usually represent a higher security level than when calling the SSLContext constructor directly.	https://docs.python.org/3.4/library/ssl.html#ssl.create_default_context
ssl RAND_bytes	A							https://docs.python.org			<pre><code>
ssl.RAND_bytes(num)</code></pre><br>Return num cryptographically strong pseudo-random bytes. Raises an SSLError if the PRNG has not been seeded with enough data or if the operation is not supported by the current RAND method. RAND_status() can be used to check the status of the PRNG and RAND_add() can be used to seed the PRNG.	https://docs.python.org/3.4/library/ssl.html#ssl.RAND_bytes
ssl RAND_pseudo_bytes	A							https://docs.python.org			<pre><code>
ssl.RAND_pseudo_bytes(num)</code></pre><br>Return (bytes, is_cryptographic): bytes are num pseudo-random bytes, is_cryptographic is True if the bytes generated are cryptographically strong. Raises an SSLError if the operation is not supported by the current RAND method.	https://docs.python.org/3.4/library/ssl.html#ssl.RAND_pseudo_bytes
ssl RAND_status	A							https://docs.python.org			<pre><code>
ssl.RAND_status()</code></pre><br>Return True if the SSL pseudo-random number generator has been seeded with ‘enough’ randomness, and False otherwise. You can use ssl.RAND_egd() and ssl.RAND_add() to increase the randomness of the pseudo-random number generator.	https://docs.python.org/3.4/library/ssl.html#ssl.RAND_status
ssl RAND_egd	A							https://docs.python.org			<pre><code>
ssl.RAND_egd(path)</code></pre><br>If you are running an entropy-gathering daemon (EGD) somewhere, and path is the pathname of a socket connection open to it, this will read 256 bytes of randomness from the socket, and add it to the SSL pseudo-random number generator to increase the security of generated secret keys. This is typically only necessary on systems without better sources of randomness.	https://docs.python.org/3.4/library/ssl.html#ssl.RAND_egd
ssl RAND_add	A							https://docs.python.org			<pre><code>
ssl.RAND_add(bytes, entropy)</code></pre><br>Mix the given bytes into the SSL pseudo-random number generator. The parameter entropy (a float) is a lower bound on the entropy contained in string (so you can always use 0.0). See RFC 1750 for more information on sources of entropy.	https://docs.python.org/3.4/library/ssl.html#ssl.RAND_add
ssl match_hostname	A							https://docs.python.org			<pre><code>
ssl.match_hostname(cert, hostname)</code></pre><br>Verify that cert (in decoded format as returned by SSLSocket.getpeercert()) matches the given hostname. The rules applied are those for checking the identity of HTTPS servers as outlined in RFC 2818 and RFC 6125, except that IP addresses are not currently supported. In addition to HTTPS, this function should be suitable for checking the identity of servers in various SSL-based protocols such as FTPS, IMAPS, POPS and others.	https://docs.python.org/3.4/library/ssl.html#ssl.match_hostname
ssl cert_time_to_seconds	A							https://docs.python.org			<pre><code>
ssl.cert_time_to_seconds(timestring)</code></pre><br>Returns a floating-point value containing a normal seconds-after-the-epoch time value, given the time-string representing the “notBefore” or “notAfter” date from a certificate.	https://docs.python.org/3.4/library/ssl.html#ssl.cert_time_to_seconds
ssl get_server_certificate	A							https://docs.python.org			<pre><code>
ssl.get_server_certificate(addr, ssl_version=PROTOCOL_SSLv3, ca_certs=None)</code></pre><br>Given the address addr of an SSL-protected server, as a (hostname, port-number) pair, fetches the server’s certificate, and returns it as a PEM-encoded string. If ssl_version is specified, uses that version of the SSL protocol to attempt to connect to the server. If ca_certs is specified, it should be a file containing a list of root certificates, the same format as used for the same parameter in wrap_socket(). The call will attempt to validate the server certificate against that set of root certificates, and will fail if the validation attempt fails.	https://docs.python.org/3.4/library/ssl.html#ssl.get_server_certificate
ssl DER_cert_to_PEM_cert	A							https://docs.python.org			<pre><code>
ssl.DER_cert_to_PEM_cert(DER_cert_bytes)</code></pre><br>Given a certificate as a DER-encoded blob of bytes, returns a PEM-encoded string version of the same certificate.	https://docs.python.org/3.4/library/ssl.html#ssl.DER_cert_to_PEM_cert
ssl PEM_cert_to_DER_cert	A							https://docs.python.org			<pre><code>
ssl.PEM_cert_to_DER_cert(PEM_cert_string)</code></pre><br>Given a certificate as an ASCII PEM string, returns a DER-encoded sequence of bytes for that same certificate.	https://docs.python.org/3.4/library/ssl.html#ssl.PEM_cert_to_DER_cert
ssl get_default_verify_paths	A							https://docs.python.org			<pre><code>
ssl.get_default_verify_paths()</code></pre><br>Returns a named tuple with paths to OpenSSL’s default cafile and capath. The paths are the same as used by SSLContext.set_default_verify_paths(). The return value is a named tuple DefaultVerifyPaths:	https://docs.python.org/3.4/library/ssl.html#ssl.get_default_verify_paths
ssl enum_certificates	A							https://docs.python.org			<pre><code>
ssl.enum_certificates(store_name)</code></pre><br>Retrieve certificates from Windows’ system cert store. store_name may be one of CA, ROOT or MY. Windows may provide additional cert stores, too.	https://docs.python.org/3.4/library/ssl.html#ssl.enum_certificates
ssl enum_crls	A							https://docs.python.org			<pre><code>
ssl.enum_crls(store_name)</code></pre><br>Retrieve CRLs from Windows’ system cert store. store_name may be one of CA, ROOT or MY. Windows may provide additional cert stores, too.	https://docs.python.org/3.4/library/ssl.html#ssl.enum_crls
stat S_ISDIR	A							https://docs.python.org			<pre><code>
stat.S_ISDIR(mode)</code></pre><br>Return non-zero if the mode is from a directory.	https://docs.python.org/3.4/library/stat.html#stat.S_ISDIR
stat S_ISCHR	A							https://docs.python.org			<pre><code>
stat.S_ISCHR(mode)</code></pre><br>Return non-zero if the mode is from a character special device file.	https://docs.python.org/3.4/library/stat.html#stat.S_ISCHR
stat S_ISBLK	A							https://docs.python.org			<pre><code>
stat.S_ISBLK(mode)</code></pre><br>Return non-zero if the mode is from a block special device file.	https://docs.python.org/3.4/library/stat.html#stat.S_ISBLK
stat S_ISREG	A							https://docs.python.org			<pre><code>
stat.S_ISREG(mode)</code></pre><br>Return non-zero if the mode is from a regular file.	https://docs.python.org/3.4/library/stat.html#stat.S_ISREG
stat S_ISFIFO	A							https://docs.python.org			<pre><code>
stat.S_ISFIFO(mode)</code></pre><br>Return non-zero if the mode is from a FIFO (named pipe).	https://docs.python.org/3.4/library/stat.html#stat.S_ISFIFO
stat S_ISLNK	A							https://docs.python.org			<pre><code>
stat.S_ISLNK(mode)</code></pre><br>Return non-zero if the mode is from a symbolic link.	https://docs.python.org/3.4/library/stat.html#stat.S_ISLNK
stat S_ISSOCK	A							https://docs.python.org			<pre><code>
stat.S_ISSOCK(mode)</code></pre><br>Return non-zero if the mode is from a socket.	https://docs.python.org/3.4/library/stat.html#stat.S_ISSOCK
stat S_ISDOOR	A							https://docs.python.org			<pre><code>
stat.S_ISDOOR(mode)</code></pre><br>Return non-zero if the mode is from a door.	https://docs.python.org/3.4/library/stat.html#stat.S_ISDOOR
stat S_ISPORT	A							https://docs.python.org			<pre><code>
stat.S_ISPORT(mode)</code></pre><br>Return non-zero if the mode is from an event port.	https://docs.python.org/3.4/library/stat.html#stat.S_ISPORT
stat S_ISWHT	A							https://docs.python.org			<pre><code>
stat.S_ISWHT(mode)</code></pre><br>Return non-zero if the mode is from a whiteout.	https://docs.python.org/3.4/library/stat.html#stat.S_ISWHT
stat S_IMODE	A							https://docs.python.org			<pre><code>
stat.S_IMODE(mode)</code></pre><br>Return the portion of the file’s mode that can be set by os.chmod()—that is, the file’s permission bits, plus the sticky bit, set-group-id, and set-user-id bits (on systems that support them).	https://docs.python.org/3.4/library/stat.html#stat.S_IMODE
stat S_IFMT	A							https://docs.python.org			<pre><code>
stat.S_IFMT(mode)</code></pre><br>Return the portion of the file’s mode that describes the file type (used by the S_IS*() functions above).	https://docs.python.org/3.4/library/stat.html#stat.S_IFMT
stat filemode	A							https://docs.python.org			<pre><code>
stat.filemode(mode)</code></pre><br>Convert a file’s mode to a string of the form ‘-rwxrwxrwx’.	https://docs.python.org/3.4/library/stat.html#stat.filemode
statistics mean	A							https://docs.python.org			<pre><code>
statistics.mean(data)</code></pre><br>Return the sample arithmetic mean of data, a sequence or iterator of real-valued numbers.	https://docs.python.org/3.4/library/statistics.html#statistics.mean
statistics median	A							https://docs.python.org			<pre><code>
statistics.median(data)</code></pre><br>Return the median (middle value) of numeric data, using the common “mean of middle two” method. If data is empty, StatisticsError is raised.	https://docs.python.org/3.4/library/statistics.html#statistics.median
statistics median_low	A							https://docs.python.org			<pre><code>
statistics.median_low(data)</code></pre><br>Return the low median of numeric data. If data is empty, StatisticsError is raised.	https://docs.python.org/3.4/library/statistics.html#statistics.median_low
statistics median_high	A							https://docs.python.org			<pre><code>
statistics.median_high(data)</code></pre><br>Return the high median of data. If data is empty, StatisticsError is raised.	https://docs.python.org/3.4/library/statistics.html#statistics.median_high
statistics median_grouped	A							https://docs.python.org			<pre><code>
statistics.median_grouped(data, interval=1)</code></pre><br>Return the median of grouped continuous data, calculated as the 50th percentile, using interpolation. If data is empty, StatisticsError is raised.	https://docs.python.org/3.4/library/statistics.html#statistics.median_grouped
statistics mode	A							https://docs.python.org			<pre><code>
statistics.mode(data)</code></pre><br>Return the most common data point from discrete or nominal data. The mode (when it exists) is the most typical value, and is a robust measure of central location.	https://docs.python.org/3.4/library/statistics.html#statistics.mode
statistics pstdev	A							https://docs.python.org			<pre><code>
statistics.pstdev(data, mu=None)</code></pre><br>Return the population standard deviation (the square root of the population variance). See pvariance() for arguments and other details.	https://docs.python.org/3.4/library/statistics.html#statistics.pstdev
statistics pvariance	A							https://docs.python.org			<pre><code>
statistics.pvariance(data, mu=None)</code></pre><br>Return the population variance of data, a non-empty iterable of real-valued numbers. Variance, or second moment about the mean, is a measure of the variability (spread or dispersion) of data. A large variance indicates that the data is spread out; a small variance indicates it is clustered closely around the mean.	https://docs.python.org/3.4/library/statistics.html#statistics.pvariance
statistics stdev	A							https://docs.python.org			<pre><code>
statistics.stdev(data, xbar=None)</code></pre><br>Return the sample standard deviation (the square root of the sample variance). See variance() for arguments and other details.	https://docs.python.org/3.4/library/statistics.html#statistics.stdev
statistics variance	A							https://docs.python.org			<pre><code>
statistics.variance(data, xbar=None)</code></pre><br>Return the sample variance of data, an iterable of at least two real-valued numbers. Variance, or second moment about the mean, is a measure of the variability (spread or dispersion) of data. A large variance indicates that the data is spread out; a small variance indicates it is clustered closely around the mean.	https://docs.python.org/3.4/library/statistics.html#statistics.variance
statistics mean	A							https://docs.python.org			<pre><code>
statistics.mean(data)</code></pre><br>Return the sample arithmetic mean of data, a sequence or iterator of real-valued numbers.	https://docs.python.org/3.4/library/statistics.html#statistics.mean
statistics median	A							https://docs.python.org			<pre><code>
statistics.median(data)</code></pre><br>Return the median (middle value) of numeric data, using the common “mean of middle two” method. If data is empty, StatisticsError is raised.	https://docs.python.org/3.4/library/statistics.html#statistics.median
statistics median_low	A							https://docs.python.org			<pre><code>
statistics.median_low(data)</code></pre><br>Return the low median of numeric data. If data is empty, StatisticsError is raised.	https://docs.python.org/3.4/library/statistics.html#statistics.median_low
statistics median_high	A							https://docs.python.org			<pre><code>
statistics.median_high(data)</code></pre><br>Return the high median of data. If data is empty, StatisticsError is raised.	https://docs.python.org/3.4/library/statistics.html#statistics.median_high
statistics median_grouped	A							https://docs.python.org			<pre><code>
statistics.median_grouped(data, interval=1)</code></pre><br>Return the median of grouped continuous data, calculated as the 50th percentile, using interpolation. If data is empty, StatisticsError is raised.	https://docs.python.org/3.4/library/statistics.html#statistics.median_grouped
statistics mode	A							https://docs.python.org			<pre><code>
statistics.mode(data)</code></pre><br>Return the most common data point from discrete or nominal data. The mode (when it exists) is the most typical value, and is a robust measure of central location.	https://docs.python.org/3.4/library/statistics.html#statistics.mode
statistics pstdev	A							https://docs.python.org			<pre><code>
statistics.pstdev(data, mu=None)</code></pre><br>Return the population standard deviation (the square root of the population variance). See pvariance() for arguments and other details.	https://docs.python.org/3.4/library/statistics.html#statistics.pstdev
statistics pvariance	A							https://docs.python.org			<pre><code>
statistics.pvariance(data, mu=None)</code></pre><br>Return the population variance of data, a non-empty iterable of real-valued numbers. Variance, or second moment about the mean, is a measure of the variability (spread or dispersion) of data. A large variance indicates that the data is spread out; a small variance indicates it is clustered closely around the mean.	https://docs.python.org/3.4/library/statistics.html#statistics.pvariance
statistics stdev	A							https://docs.python.org			<pre><code>
statistics.stdev(data, xbar=None)</code></pre><br>Return the sample standard deviation (the square root of the sample variance). See variance() for arguments and other details.	https://docs.python.org/3.4/library/statistics.html#statistics.stdev
statistics variance	A							https://docs.python.org			<pre><code>
statistics.variance(data, xbar=None)</code></pre><br>Return the sample variance of data, an iterable of at least two real-valued numbers. Variance, or second moment about the mean, is a measure of the variability (spread or dispersion) of data. A large variance indicates that the data is spread out; a small variance indicates it is clustered closely around the mean.	https://docs.python.org/3.4/library/statistics.html#statistics.variance
string capwords	A							https://docs.python.org			<pre><code>
string.capwords(s, sep=None)</code></pre><br>Split the argument into words using str.split(), capitalize each word using str.capitalize(), and join the capitalized words using str.join(). If the optional second argument sep is absent or None, runs of whitespace characters are replaced by a single space and leading and trailing whitespace are removed, otherwise sep is used to split and join the words.	https://docs.python.org/3.4/library/string.html#string.capwords
string capwords	A							https://docs.python.org			<pre><code>
string.capwords(s, sep=None)</code></pre><br>Split the argument into words using str.split(), capitalize each word using str.capitalize(), and join the capitalized words using str.join(). If the optional second argument sep is absent or None, runs of whitespace characters are replaced by a single space and leading and trailing whitespace are removed, otherwise sep is used to split and join the words.	https://docs.python.org/3.4/library/string.html#string.capwords
stringprep in_table_a1	A							https://docs.python.org			<pre><code>
stringprep.in_table_a1(code)</code></pre><br>Determine whether code is in tableA.1 (Unassigned code points in Unicode 3.2).	https://docs.python.org/3.4/library/stringprep.html#stringprep.in_table_a1
stringprep in_table_b1	A							https://docs.python.org			<pre><code>
stringprep.in_table_b1(code)</code></pre><br>Determine whether code is in tableB.1 (Commonly mapped to nothing).	https://docs.python.org/3.4/library/stringprep.html#stringprep.in_table_b1
stringprep map_table_b2	A							https://docs.python.org			<pre><code>
stringprep.map_table_b2(code)</code></pre><br>Return the mapped value for code according to tableB.2 (Mapping for case-folding used with NFKC).	https://docs.python.org/3.4/library/stringprep.html#stringprep.map_table_b2
stringprep map_table_b3	A							https://docs.python.org			<pre><code>
stringprep.map_table_b3(code)</code></pre><br>Return the mapped value for code according to tableB.3 (Mapping for case-folding used with no normalization).	https://docs.python.org/3.4/library/stringprep.html#stringprep.map_table_b3
stringprep in_table_c11	A							https://docs.python.org			<pre><code>
stringprep.in_table_c11(code)</code></pre><br>Determine whether code is in tableC.1.1 (ASCII space characters).	https://docs.python.org/3.4/library/stringprep.html#stringprep.in_table_c11
stringprep in_table_c12	A							https://docs.python.org			<pre><code>
stringprep.in_table_c12(code)</code></pre><br>Determine whether code is in tableC.1.2 (Non-ASCII space characters).	https://docs.python.org/3.4/library/stringprep.html#stringprep.in_table_c12
stringprep in_table_c11_c12	A							https://docs.python.org			<pre><code>
stringprep.in_table_c11_c12(code)</code></pre><br>Determine whether code is in tableC.1 (Space characters, union of C.1.1 and C.1.2).	https://docs.python.org/3.4/library/stringprep.html#stringprep.in_table_c11_c12
stringprep in_table_c21	A							https://docs.python.org			<pre><code>
stringprep.in_table_c21(code)</code></pre><br>Determine whether code is in tableC.2.1 (ASCII control characters).	https://docs.python.org/3.4/library/stringprep.html#stringprep.in_table_c21
stringprep in_table_c22	A							https://docs.python.org			<pre><code>
stringprep.in_table_c22(code)</code></pre><br>Determine whether code is in tableC.2.2 (Non-ASCII control characters).	https://docs.python.org/3.4/library/stringprep.html#stringprep.in_table_c22
stringprep in_table_c21_c22	A							https://docs.python.org			<pre><code>
stringprep.in_table_c21_c22(code)</code></pre><br>Determine whether code is in tableC.2 (Control characters, union of C.2.1 and C.2.2).	https://docs.python.org/3.4/library/stringprep.html#stringprep.in_table_c21_c22
stringprep in_table_c3	A							https://docs.python.org			<pre><code>
stringprep.in_table_c3(code)</code></pre><br>Determine whether code is in tableC.3 (Private use).	https://docs.python.org/3.4/library/stringprep.html#stringprep.in_table_c3
stringprep in_table_c4	A							https://docs.python.org			<pre><code>
stringprep.in_table_c4(code)</code></pre><br>Determine whether code is in tableC.4 (Non-character code points).	https://docs.python.org/3.4/library/stringprep.html#stringprep.in_table_c4
stringprep in_table_c5	A							https://docs.python.org			<pre><code>
stringprep.in_table_c5(code)</code></pre><br>Determine whether code is in tableC.5 (Surrogate codes).	https://docs.python.org/3.4/library/stringprep.html#stringprep.in_table_c5
stringprep in_table_c6	A							https://docs.python.org			<pre><code>
stringprep.in_table_c6(code)</code></pre><br>Determine whether code is in tableC.6 (Inappropriate for plain text).	https://docs.python.org/3.4/library/stringprep.html#stringprep.in_table_c6
stringprep in_table_c7	A							https://docs.python.org			<pre><code>
stringprep.in_table_c7(code)</code></pre><br>Determine whether code is in tableC.7 (Inappropriate for canonical representation).	https://docs.python.org/3.4/library/stringprep.html#stringprep.in_table_c7
stringprep in_table_c8	A							https://docs.python.org			<pre><code>
stringprep.in_table_c8(code)</code></pre><br>Determine whether code is in tableC.8 (Change display properties or are deprecated).	https://docs.python.org/3.4/library/stringprep.html#stringprep.in_table_c8
stringprep in_table_c9	A							https://docs.python.org			<pre><code>
stringprep.in_table_c9(code)</code></pre><br>Determine whether code is in tableC.9 (Tagging characters).	https://docs.python.org/3.4/library/stringprep.html#stringprep.in_table_c9
stringprep in_table_d1	A							https://docs.python.org			<pre><code>
stringprep.in_table_d1(code)</code></pre><br>Determine whether code is in tableD.1 (Characters with bidirectional property “R” or “AL”).	https://docs.python.org/3.4/library/stringprep.html#stringprep.in_table_d1
stringprep in_table_d2	A							https://docs.python.org			<pre><code>
stringprep.in_table_d2(code)</code></pre><br>Determine whether code is in tableD.2 (Characters with bidirectional property “L”).	https://docs.python.org/3.4/library/stringprep.html#stringprep.in_table_d2
struct pack	A							https://docs.python.org			<pre><code>
struct.pack(fmt, v1, v2, ...)</code></pre><br>Return a bytes object containing the values v1, v2, ... packed according to the format string fmt. The arguments must match the values required by the format exactly.	https://docs.python.org/3.4/library/struct.html#struct.pack
struct pack_into	A							https://docs.python.org			<pre><code>
struct.pack_into(fmt, buffer, offset, v1, v2, ...)</code></pre><br>Pack the values v1, v2, ... according to the format string fmt and write the packed bytes into the writable buffer buffer starting at position offset. Note that offset is a required argument.	https://docs.python.org/3.4/library/struct.html#struct.pack_into
struct unpack	A							https://docs.python.org			<pre><code>
struct.unpack(fmt, buffer)</code></pre><br>Unpack from the buffer buffer (presumably packed by pack(fmt, ...)) according to the format string fmt. The result is a tuple even if it contains exactly one item. The buffer must contain exactly the amount of data required by the format (len(bytes) must equal calcsize(fmt)).	https://docs.python.org/3.4/library/struct.html#struct.unpack
struct unpack_from	A							https://docs.python.org			<pre><code>
struct.unpack_from(fmt, buffer, offset=0)</code></pre><br>Unpack from buffer starting at position offset, according to the format string fmt. The result is a tuple even if it contains exactly one item. buffer must contain at least the amount of data required by the format (len(buffer[offset:]) must be at least calcsize(fmt)).	https://docs.python.org/3.4/library/struct.html#struct.unpack_from
struct iter_unpack	A							https://docs.python.org			<pre><code>
struct.iter_unpack(fmt, buffer)</code></pre><br>Iteratively unpack from the buffer buffer according to the format string fmt. This function returns an iterator which will read equally-sized chunks from the buffer until all its contents have been consumed. The buffer’s size in bytes must be a multiple of the amount of data required by the format, as reflected by calcsize().	https://docs.python.org/3.4/library/struct.html#struct.iter_unpack
struct calcsize	A							https://docs.python.org			<pre><code>
struct.calcsize(fmt)</code></pre><br>Return the size of the struct (and hence of the bytes object produced by pack(fmt, ...)) corresponding to the format string fmt.	https://docs.python.org/3.4/library/struct.html#struct.calcsize
struct pack	A							https://docs.python.org			<pre><code>
struct.pack(fmt, v1, v2, ...)</code></pre><br>Return a bytes object containing the values v1, v2, ... packed according to the format string fmt. The arguments must match the values required by the format exactly.	https://docs.python.org/3.4/library/struct.html#struct.pack
struct pack_into	A							https://docs.python.org			<pre><code>
struct.pack_into(fmt, buffer, offset, v1, v2, ...)</code></pre><br>Pack the values v1, v2, ... according to the format string fmt and write the packed bytes into the writable buffer buffer starting at position offset. Note that offset is a required argument.	https://docs.python.org/3.4/library/struct.html#struct.pack_into
struct unpack	A							https://docs.python.org			<pre><code>
struct.unpack(fmt, buffer)</code></pre><br>Unpack from the buffer buffer (presumably packed by pack(fmt, ...)) according to the format string fmt. The result is a tuple even if it contains exactly one item. The buffer must contain exactly the amount of data required by the format (len(bytes) must equal calcsize(fmt)).	https://docs.python.org/3.4/library/struct.html#struct.unpack
struct unpack_from	A							https://docs.python.org			<pre><code>
struct.unpack_from(fmt, buffer, offset=0)</code></pre><br>Unpack from buffer starting at position offset, according to the format string fmt. The result is a tuple even if it contains exactly one item. buffer must contain at least the amount of data required by the format (len(buffer[offset:]) must be at least calcsize(fmt)).	https://docs.python.org/3.4/library/struct.html#struct.unpack_from
struct iter_unpack	A							https://docs.python.org			<pre><code>
struct.iter_unpack(fmt, buffer)</code></pre><br>Iteratively unpack from the buffer buffer according to the format string fmt. This function returns an iterator which will read equally-sized chunks from the buffer until all its contents have been consumed. The buffer’s size in bytes must be a multiple of the amount of data required by the format, as reflected by calcsize().	https://docs.python.org/3.4/library/struct.html#struct.iter_unpack
struct calcsize	A							https://docs.python.org			<pre><code>
struct.calcsize(fmt)</code></pre><br>Return the size of the struct (and hence of the bytes object produced by pack(fmt, ...)) corresponding to the format string fmt.	https://docs.python.org/3.4/library/struct.html#struct.calcsize
subprocess call	A							https://docs.python.org			<pre><code>
subprocess.call(args, *, stdin=None, stdout=None, stderr=None, shell=False, timeout=None)</code></pre><br>Run the command described by args. Wait for command to complete, then return the returncode attribute.	https://docs.python.org/3.4/library/subprocess.html#subprocess.call
subprocess check_call	A							https://docs.python.org			<pre><code>
subprocess.check_call(args, *, stdin=None, stdout=None, stderr=None, shell=False, timeout=None)</code></pre><br>Run command with arguments. Wait for command to complete. If the return code was zero then return, otherwise raise CalledProcessError. The CalledProcessError object will have the return code in the returncode attribute.	https://docs.python.org/3.4/library/subprocess.html#subprocess.check_call
subprocess check_output	A							https://docs.python.org			<pre><code>
subprocess.check_output(args, *, input=None, stdin=None, stderr=None, shell=False, universal_newlines=False, timeout=None)</code></pre><br>Run command with arguments and return its output.	https://docs.python.org/3.4/library/subprocess.html#subprocess.check_output
subprocess getstatusoutput	A							https://docs.python.org			<pre><code>
subprocess.getstatusoutput(cmd)</code></pre><br>Return (status, output) of executing cmd in a shell.	https://docs.python.org/3.4/library/subprocess.html#subprocess.getstatusoutput
subprocess getoutput	A							https://docs.python.org			<pre><code>
subprocess.getoutput(cmd)</code></pre><br>Return output (stdout and stderr) of executing cmd in a shell.	https://docs.python.org/3.4/library/subprocess.html#subprocess.getoutput
subprocess call	A							https://docs.python.org			<pre><code>
subprocess.call(args, *, stdin=None, stdout=None, stderr=None, shell=False, timeout=None)</code></pre><br>Run the command described by args. Wait for command to complete, then return the returncode attribute.	https://docs.python.org/3.4/library/subprocess.html#subprocess.call
subprocess check_call	A							https://docs.python.org			<pre><code>
subprocess.check_call(args, *, stdin=None, stdout=None, stderr=None, shell=False, timeout=None)</code></pre><br>Run command with arguments. Wait for command to complete. If the return code was zero then return, otherwise raise CalledProcessError. The CalledProcessError object will have the return code in the returncode attribute.	https://docs.python.org/3.4/library/subprocess.html#subprocess.check_call
subprocess check_output	A							https://docs.python.org			<pre><code>
subprocess.check_output(args, *, input=None, stdin=None, stderr=None, shell=False, universal_newlines=False, timeout=None)</code></pre><br>Run command with arguments and return its output.	https://docs.python.org/3.4/library/subprocess.html#subprocess.check_output
subprocess getstatusoutput	A							https://docs.python.org			<pre><code>
subprocess.getstatusoutput(cmd)</code></pre><br>Return (status, output) of executing cmd in a shell.	https://docs.python.org/3.4/library/subprocess.html#subprocess.getstatusoutput
subprocess getoutput	A							https://docs.python.org			<pre><code>
subprocess.getoutput(cmd)</code></pre><br>Return output (stdout and stderr) of executing cmd in a shell.	https://docs.python.org/3.4/library/subprocess.html#subprocess.getoutput
sunau open	A							https://docs.python.org			<pre><code>
sunau.open(file, mode)</code></pre><br>If file is a string, open the file by that name, otherwise treat it as a seekable file-like object. mode can be any of	https://docs.python.org/3.4/library/sunau.html#sunau.open
sunau openfp	A							https://docs.python.org			<pre><code>
sunau.openfp(file, mode)</code></pre><br>A synonym for open(), maintained for backwards compatibility.	https://docs.python.org/3.4/library/sunau.html#sunau.openfp
symtable symtable	A							https://docs.python.org			<pre><code>
symtable.symtable(code, filename, compile_type)</code></pre><br>Return the toplevel SymbolTable for the Python source code. filename is the name of the file containing the code. compile_type is like the mode argument to compile().	https://docs.python.org/3.4/library/symtable.html#symtable.symtable
symtable symtable	A							https://docs.python.org			<pre><code>
symtable.symtable(code, filename, compile_type)</code></pre><br>Return the toplevel SymbolTable for the Python source code. filename is the name of the file containing the code. compile_type is like the mode argument to compile().	https://docs.python.org/3.4/library/symtable.html#symtable.symtable
sys call_tracing	A							https://docs.python.org			<pre><code>
sys.call_tracing(func, args)</code></pre><br>Call func(*args), while tracing is enabled. The tracing state is saved, and restored afterwards. This is intended to be called from a debugger from a checkpoint, to recursively debug some other code.	https://docs.python.org/3.4/library/sys.html#sys.call_tracing
sys _clear_type_cache	A							https://docs.python.org			<pre><code>
sys._clear_type_cache()</code></pre><br>Clear the internal type cache. The type cache is used to speed up attribute and method lookups. Use the function only to drop unnecessary references during reference leak debugging.	https://docs.python.org/3.4/library/sys.html#sys._clear_type_cache
sys _current_frames	A							https://docs.python.org			<pre><code>
sys._current_frames()</code></pre><br>Return a dictionary mapping each thread’s identifier to the topmost stack frame currently active in that thread at the time the function is called. Note that functions in the traceback module can build the call stack given such a frame.	https://docs.python.org/3.4/library/sys.html#sys._current_frames
sys _debugmallocstats	A							https://docs.python.org			<pre><code>
sys._debugmallocstats()</code></pre><br>Print low-level information to stderr about the state of CPython’s memory allocator.	https://docs.python.org/3.4/library/sys.html#sys._debugmallocstats
sys displayhook	A							https://docs.python.org			<pre><code>
sys.displayhook(value)</code></pre><br>If value is not None, this function prints repr(value) to sys.stdout, and saves value in builtins._. If repr(value) is not encodable to sys.stdout.encoding with sys.stdout.errors error handler (which is probably 'strict'), encode it to sys.stdout.encoding with 'backslashreplace' error handler.	https://docs.python.org/3.4/library/sys.html#sys.displayhook
sys excepthook	A							https://docs.python.org			<pre><code>
sys.excepthook(type, value, traceback)</code></pre><br>This function prints out a given traceback and exception to sys.stderr.	https://docs.python.org/3.4/library/sys.html#sys.excepthook
sys exc_info	A							https://docs.python.org			<pre><code>
sys.exc_info()</code></pre><br>This function returns a tuple of three values that give information about the exception that is currently being handled. The information returned is specific both to the current thread and to the current stack frame. If the current stack frame is not handling an exception, the information is taken from the calling stack frame, or its caller, and so on until a stack frame is found that is handling an exception. Here, “handling an exception” is defined as “executing an except clause.” For any stack frame, only information about the exception being currently handled is accessible.	https://docs.python.org/3.4/library/sys.html#sys.exc_info
sys exit	A							https://docs.python.org			<pre><code>
sys.exit([arg])</code></pre><br>Exit from Python. This is implemented by raising the SystemExit exception, so cleanup actions specified by finally clauses of try statements are honored, and it is possible to intercept the exit attempt at an outer level.	https://docs.python.org/3.4/library/sys.html#sys.exit
sys getallocatedblocks	A							https://docs.python.org			<pre><code>
sys.getallocatedblocks()</code></pre><br>Return the number of memory blocks currently allocated by the interpreter, regardless of their size. This function is mainly useful for tracking and debugging memory leaks. Because of the interpreter’s internal caches, the result can vary from call to call; you may have to call _clear_type_cache() and gc.collect() to get more predictable results.	https://docs.python.org/3.4/library/sys.html#sys.getallocatedblocks
sys getcheckinterval	A							https://docs.python.org			<pre><code>
sys.getcheckinterval()</code></pre><br>Return the interpreter’s “check interval”; see setcheckinterval().	https://docs.python.org/3.4/library/sys.html#sys.getcheckinterval
sys getdefaultencoding	A							https://docs.python.org			<pre><code>
sys.getdefaultencoding()</code></pre><br>Return the name of the current default string encoding used by the Unicode implementation.	https://docs.python.org/3.4/library/sys.html#sys.getdefaultencoding
sys getdlopenflags	A							https://docs.python.org			<pre><code>
sys.getdlopenflags()</code></pre><br>Return the current value of the flags that are used for dlopen() calls. Symbolic names for the flag values can be found in the os module (RTLD_xxx constants, e.g. os.RTLD_LAZY). Availability: Unix.	https://docs.python.org/3.4/library/sys.html#sys.getdlopenflags
sys getfilesystemencoding	A							https://docs.python.org			<pre><code>
sys.getfilesystemencoding()</code></pre><br>Return the name of the encoding used to convert Unicode filenames into system file names. The result value depends on the operating system:	https://docs.python.org/3.4/library/sys.html#sys.getfilesystemencoding
sys getrefcount	A							https://docs.python.org			<pre><code>
sys.getrefcount(object)</code></pre><br>Return the reference count of the object. The count returned is generally one higher than you might expect, because it includes the (temporary) reference as an argument to getrefcount().	https://docs.python.org/3.4/library/sys.html#sys.getrefcount
sys getrecursionlimit	A							https://docs.python.org			<pre><code>
sys.getrecursionlimit()</code></pre><br>Return the current value of the recursion limit, the maximum depth of the Python interpreter stack. This limit prevents infinite recursion from causing an overflow of the C stack and crashing Python. It can be set by setrecursionlimit().	https://docs.python.org/3.4/library/sys.html#sys.getrecursionlimit
sys getsizeof	A							https://docs.python.org			<pre><code>
sys.getsizeof(object[, default])</code></pre><br>Return the size of an object in bytes. The object can be any type of object. All built-in objects will return correct results, but this does not have to hold true for third-party extensions as it is implementation specific.	https://docs.python.org/3.4/library/sys.html#sys.getsizeof
sys getswitchinterval	A							https://docs.python.org			<pre><code>
sys.getswitchinterval()</code></pre><br>Return the interpreter’s “thread switch interval”; see setswitchinterval().	https://docs.python.org/3.4/library/sys.html#sys.getswitchinterval
sys _getframe	A							https://docs.python.org			<pre><code>
sys._getframe([depth])</code></pre><br>Return a frame object from the call stack. If optional integer depth is given, return the frame object that many calls below the top of the stack. If that is deeper than the call stack, ValueError is raised. The default for depth is zero, returning the frame at the top of the call stack.	https://docs.python.org/3.4/library/sys.html#sys._getframe
sys getprofile	A							https://docs.python.org			<pre><code>
sys.getprofile()</code></pre><br>Get the profiler function as set by setprofile().	https://docs.python.org/3.4/library/sys.html#sys.getprofile
sys gettrace	A							https://docs.python.org			<pre><code>
sys.gettrace()</code></pre><br>Get the trace function as set by settrace().	https://docs.python.org/3.4/library/sys.html#sys.gettrace
sys getwindowsversion	A							https://docs.python.org			<pre><code>
sys.getwindowsversion()</code></pre><br>Return a named tuple describing the Windows version currently running. The named elements are major, minor, build, platform, service_pack, service_pack_minor, service_pack_major, suite_mask, and product_type. service_pack contains a string while all other values are integers. The components can also be accessed by name, so sys.getwindowsversion()[0] is equivalent to sys.getwindowsversion().major. For compatibility with prior versions, only the first 5 elements are retrievable by indexing.	https://docs.python.org/3.4/library/sys.html#sys.getwindowsversion
sys intern	A							https://docs.python.org			<pre><code>
sys.intern(string)</code></pre><br>Enter string in the table of “interned” strings and return the interned string – which is string itself or a copy. Interning strings is useful to gain a little performance on dictionary lookup – if the keys in a dictionary are interned, and the lookup key is interned, the key comparisons (after hashing) can be done by a pointer compare instead of a string compare. Normally, the names used in Python programs are automatically interned, and the dictionaries used to hold module, class or instance attributes have interned keys.	https://docs.python.org/3.4/library/sys.html#sys.intern
sys setcheckinterval	A							https://docs.python.org			<pre><code>
sys.setcheckinterval(interval)</code></pre><br>Set the interpreter’s “check interval”. This integer value determines how often the interpreter checks for periodic things such as thread switches and signal handlers. The default is 100, meaning the check is performed every 100 Python virtual instructions. Setting it to a larger value may increase performance for programs using threads. Setting it to a value <= 0 checks every virtual instruction, maximizing responsiveness as well as overhead.	https://docs.python.org/3.4/library/sys.html#sys.setcheckinterval
sys setdlopenflags	A							https://docs.python.org			<pre><code>
sys.setdlopenflags(n)</code></pre><br>Set the flags used by the interpreter for dlopen() calls, such as when the interpreter loads extension modules. Among other things, this will enable a lazy resolving of symbols when importing a module, if called as sys.setdlopenflags(0). To share symbols across extension modules, call as sys.setdlopenflags(os.RTLD_GLOBAL). Symbolic names for the flag values can be found in the os module (RTLD_xxx constants, e.g. os.RTLD_LAZY).	https://docs.python.org/3.4/library/sys.html#sys.setdlopenflags
sys setprofile	A							https://docs.python.org			<pre><code>
sys.setprofile(profilefunc)</code></pre><br>Set the system’s profile function, which allows you to implement a Python source code profiler in Python. See chapter The Python Profilers for more information on the Python profiler. The system’s profile function is called similarly to the system’s trace function (see settrace()), but it isn’t called for each executed line of code (only on call and return, but the return event is reported even when an exception has been set). The function is thread-specific, but there is no way for the profiler to know about context switches between threads, so it does not make sense to use this in the presence of multiple threads. Also, its return value is not used, so it can simply return None.	https://docs.python.org/3.4/library/sys.html#sys.setprofile
sys setrecursionlimit	A							https://docs.python.org			<pre><code>
sys.setrecursionlimit(limit)</code></pre><br>Set the maximum depth of the Python interpreter stack to limit. This limit prevents infinite recursion from causing an overflow of the C stack and crashing Python.	https://docs.python.org/3.4/library/sys.html#sys.setrecursionlimit
sys setswitchinterval	A							https://docs.python.org			<pre><code>
sys.setswitchinterval(interval)</code></pre><br>Set the interpreter’s thread switch interval (in seconds). This floating-point value determines the ideal duration of the “timeslices” allocated to concurrently running Python threads. Please note that the actual value can be higher, especially if long-running internal functions or methods are used. Also, which thread becomes scheduled at the end of the interval is the operating system’s decision. The interpreter doesn’t have its own scheduler.	https://docs.python.org/3.4/library/sys.html#sys.setswitchinterval
sys settrace	A							https://docs.python.org			<pre><code>
sys.settrace(tracefunc)</code></pre><br>Set the system’s trace function, which allows you to implement a Python source code debugger in Python. The function is thread-specific; for a debugger to support multiple threads, it must be registered using settrace() for each thread being debugged.	https://docs.python.org/3.4/library/sys.html#sys.settrace
sys settscdump	A							https://docs.python.org			<pre><code>
sys.settscdump(on_flag)</code></pre><br>Activate dumping of VM measurements using the Pentium timestamp counter, if on_flag is true. Deactivate these dumps if on_flag is off. The function is available only if Python was compiled with --with-tsc. To understand the output of this dump, read Python/ceval.c in the Python sources.	https://docs.python.org/3.4/library/sys.html#sys.settscdump
sysconfig get_config_vars	A							https://docs.python.org			<pre><code>
sysconfig.get_config_vars(*args)</code></pre><br>With no arguments, return a dictionary of all configuration variables relevant for the current platform.	https://docs.python.org/3.4/library/sysconfig.html#sysconfig.get_config_vars
sysconfig get_config_var	A							https://docs.python.org			<pre><code>
sysconfig.get_config_var(name)</code></pre><br>Return the value of a single variable name. Equivalent to get_config_vars().get(name).	https://docs.python.org/3.4/library/sysconfig.html#sysconfig.get_config_var
sysconfig get_scheme_names	A							https://docs.python.org			<pre><code>
sysconfig.get_scheme_names()</code></pre><br>Return a tuple containing all schemes currently supported in sysconfig.	https://docs.python.org/3.4/library/sysconfig.html#sysconfig.get_scheme_names
sysconfig get_path_names	A							https://docs.python.org			<pre><code>
sysconfig.get_path_names()</code></pre><br>Return a tuple containing all path names currently supported in sysconfig.	https://docs.python.org/3.4/library/sysconfig.html#sysconfig.get_path_names
sysconfig get_path	A							https://docs.python.org			<pre><code>
sysconfig.get_path(name[, scheme[, vars[, expand]]])</code></pre><br>Return an installation path corresponding to the path name, from the install scheme named scheme.	https://docs.python.org/3.4/library/sysconfig.html#sysconfig.get_path
sysconfig get_paths	A							https://docs.python.org			<pre><code>
sysconfig.get_paths([scheme[, vars[, expand]]])</code></pre><br>Return a dictionary containing all installation paths corresponding to an installation scheme. See get_path() for more information.	https://docs.python.org/3.4/library/sysconfig.html#sysconfig.get_paths
sysconfig get_python_version	A							https://docs.python.org			<pre><code>
sysconfig.get_python_version()</code></pre><br>Return the MAJOR.MINOR Python version number as a string. Similar to sys.version[:3].	https://docs.python.org/3.4/library/sysconfig.html#sysconfig.get_python_version
sysconfig get_platform	A							https://docs.python.org			<pre><code>
sysconfig.get_platform()</code></pre><br>Return a string that identifies the current platform.	https://docs.python.org/3.4/library/sysconfig.html#sysconfig.get_platform
sysconfig is_python_build	A							https://docs.python.org			<pre><code>
sysconfig.is_python_build()</code></pre><br>Return True if the current Python installation was built from source.	https://docs.python.org/3.4/library/sysconfig.html#sysconfig.is_python_build
sysconfig parse_config_h	A							https://docs.python.org			<pre><code>
sysconfig.parse_config_h(fp[, vars])</code></pre><br>Parse a config.h-style file.	https://docs.python.org/3.4/library/sysconfig.html#sysconfig.parse_config_h
sysconfig get_config_h_filename	A							https://docs.python.org			<pre><code>
sysconfig.get_config_h_filename()</code></pre><br>Return the path of pyconfig.h.	https://docs.python.org/3.4/library/sysconfig.html#sysconfig.get_config_h_filename
sysconfig get_makefile_filename	A							https://docs.python.org			<pre><code>
sysconfig.get_makefile_filename()</code></pre><br>Return the path of Makefile.	https://docs.python.org/3.4/library/sysconfig.html#sysconfig.get_makefile_filename
sysconfig get_config_vars	A							https://docs.python.org			<pre><code>
sysconfig.get_config_vars(*args)</code></pre><br>With no arguments, return a dictionary of all configuration variables relevant for the current platform.	https://docs.python.org/3.4/library/sysconfig.html#sysconfig.get_config_vars
sysconfig get_config_var	A							https://docs.python.org			<pre><code>
sysconfig.get_config_var(name)</code></pre><br>Return the value of a single variable name. Equivalent to get_config_vars().get(name).	https://docs.python.org/3.4/library/sysconfig.html#sysconfig.get_config_var
sysconfig get_scheme_names	A							https://docs.python.org			<pre><code>
sysconfig.get_scheme_names()</code></pre><br>Return a tuple containing all schemes currently supported in sysconfig.	https://docs.python.org/3.4/library/sysconfig.html#sysconfig.get_scheme_names
sysconfig get_path_names	A							https://docs.python.org			<pre><code>
sysconfig.get_path_names()</code></pre><br>Return a tuple containing all path names currently supported in sysconfig.	https://docs.python.org/3.4/library/sysconfig.html#sysconfig.get_path_names
sysconfig get_path	A							https://docs.python.org			<pre><code>
sysconfig.get_path(name[, scheme[, vars[, expand]]])</code></pre><br>Return an installation path corresponding to the path name, from the install scheme named scheme.	https://docs.python.org/3.4/library/sysconfig.html#sysconfig.get_path
sysconfig get_paths	A							https://docs.python.org			<pre><code>
sysconfig.get_paths([scheme[, vars[, expand]]])</code></pre><br>Return a dictionary containing all installation paths corresponding to an installation scheme. See get_path() for more information.	https://docs.python.org/3.4/library/sysconfig.html#sysconfig.get_paths
sysconfig get_python_version	A							https://docs.python.org			<pre><code>
sysconfig.get_python_version()</code></pre><br>Return the MAJOR.MINOR Python version number as a string. Similar to sys.version[:3].	https://docs.python.org/3.4/library/sysconfig.html#sysconfig.get_python_version
sysconfig get_platform	A							https://docs.python.org			<pre><code>
sysconfig.get_platform()</code></pre><br>Return a string that identifies the current platform.	https://docs.python.org/3.4/library/sysconfig.html#sysconfig.get_platform
sysconfig is_python_build	A							https://docs.python.org			<pre><code>
sysconfig.is_python_build()</code></pre><br>Return True if the current Python installation was built from source.	https://docs.python.org/3.4/library/sysconfig.html#sysconfig.is_python_build
sysconfig parse_config_h	A							https://docs.python.org			<pre><code>
sysconfig.parse_config_h(fp[, vars])</code></pre><br>Parse a config.h-style file.	https://docs.python.org/3.4/library/sysconfig.html#sysconfig.parse_config_h
sysconfig get_config_h_filename	A							https://docs.python.org			<pre><code>
sysconfig.get_config_h_filename()</code></pre><br>Return the path of pyconfig.h.	https://docs.python.org/3.4/library/sysconfig.html#sysconfig.get_config_h_filename
sysconfig get_makefile_filename	A							https://docs.python.org			<pre><code>
sysconfig.get_makefile_filename()</code></pre><br>Return the path of Makefile.	https://docs.python.org/3.4/library/sysconfig.html#sysconfig.get_makefile_filename
syslog syslog	A							https://docs.python.org			<pre><code>
syslog.syslog(message)</code></pre><br>Send the string message to the system logger. A trailing newline is added if necessary. Each message is tagged with a priority composed of a facility and a level. The optional priority argument, which defaults to LOG_INFO, determines the message priority. If the facility is not encoded in priority using logical-or (LOG_INFO | LOG_USER), the value given in the openlog() call is used.	https://docs.python.org/3.4/library/syslog.html#syslog.syslog
syslog openlog	A							https://docs.python.org			<pre><code>
syslog.openlog([ident[, logoption[, facility]]])</code></pre><br>Logging options of subsequent syslog() calls can be set by calling openlog(). syslog() will call openlog() with no arguments if the log is not currently open.	https://docs.python.org/3.4/library/syslog.html#syslog.openlog
syslog closelog	A							https://docs.python.org			<pre><code>
syslog.closelog()</code></pre><br>Reset the syslog module values and call the system library closelog().	https://docs.python.org/3.4/library/syslog.html#syslog.closelog
syslog setlogmask	A							https://docs.python.org			<pre><code>
syslog.setlogmask(maskpri)</code></pre><br>Set the priority mask to maskpri and return the previous mask value. Calls to syslog() with a priority level not set in maskpri are ignored. The default is to log all priorities. The function LOG_MASK(pri) calculates the mask for the individual priority pri. The function LOG_UPTO(pri) calculates the mask for all priorities up to and including pri.	https://docs.python.org/3.4/library/syslog.html#syslog.setlogmask
tabnanny check	A							https://docs.python.org			<pre><code>
tabnanny.check(file_or_dir)</code></pre><br>If file_or_dir is a directory and not a symbolic link, then recursively descend the directory tree named by file_or_dir, checking all .py files along the way. If file_or_dir is an ordinary Python source file, it is checked for whitespace related problems. The diagnostic messages are written to standard output using the print() function.	https://docs.python.org/3.4/library/tabnanny.html#tabnanny.check
tabnanny tokeneater	A							https://docs.python.org			<pre><code>
tabnanny.tokeneater(type, token, start, end, line)</code></pre><br>This function is used by check() as a callback parameter to the function tokenize.tokenize().	https://docs.python.org/3.4/library/tabnanny.html#tabnanny.tokeneater
tarfile open	A							https://docs.python.org			<pre><code>
tarfile.open(name=None, mode='r', fileobj=None, bufsize=10240, **kwargs)</code></pre><br>Return a TarFile object for the pathname name. For detailed information on TarFile objects and the keyword arguments that are allowed, see TarFile Objects.	https://docs.python.org/3.4/library/tarfile.html#tarfile.open
tarfile is_tarfile	A							https://docs.python.org			<pre><code>
tarfile.is_tarfile(name)</code></pre><br>Return True if name is a tar archive file, that the tarfile module can read.	https://docs.python.org/3.4/library/tarfile.html#tarfile.is_tarfile
tempfile TemporaryFile	A							https://docs.python.org			<pre><code>
tempfile.TemporaryFile(mode='w+b', buffering=None, encoding=None, newline=None, suffix='', prefix='tmp', dir=None)</code></pre><br>Return a file-like object that can be used as a temporary storage area. The file is created using mkstemp(). It will be destroyed as soon as it is closed (including an implicit close when the object is garbage collected). Under Unix, the directory entry for the file is removed immediately after the file is created. Other platforms do not support this; your code should not rely on a temporary file created using this function having or not having a visible name in the file system.	https://docs.python.org/3.4/library/tempfile.html#tempfile.TemporaryFile
tempfile NamedTemporaryFile	A							https://docs.python.org			<pre><code>
tempfile.NamedTemporaryFile(mode='w+b', buffering=None, encoding=None, newline=None, suffix='', prefix='tmp', dir=None, delete=True)</code></pre><br>This function operates exactly as TemporaryFile() does, except that the file is guaranteed to have a visible name in the file system (on Unix, the directory entry is not unlinked). That name can be retrieved from the name attribute of the file object. Whether the name can be used to open the file a second time, while the named temporary file is still open, varies across platforms (it can be so used on Unix; it cannot on Windows NT or later). If delete is true (the default), the file is deleted as soon as it is closed. The returned object is always a file-like object whose file attribute is the underlying true file object. This file-like object can be used in a with statement, just like a normal file.	https://docs.python.org/3.4/library/tempfile.html#tempfile.NamedTemporaryFile
tempfile SpooledTemporaryFile	A							https://docs.python.org			<pre><code>
tempfile.SpooledTemporaryFile(max_size=0, mode='w+b', buffering=None, encoding=None, newline=None, suffix='', prefix='tmp', dir=None)</code></pre><br>This function operates exactly as TemporaryFile() does, except that data is spooled in memory until the file size exceeds max_size, or until the file’s fileno() method is called, at which point the contents are written to disk and operation proceeds as with TemporaryFile().	https://docs.python.org/3.4/library/tempfile.html#tempfile.SpooledTemporaryFile
tempfile TemporaryDirectory	A							https://docs.python.org			<pre><code>
tempfile.TemporaryDirectory(suffix='', prefix='tmp', dir=None)</code></pre><br>This function creates a temporary directory using mkdtemp() (the supplied arguments are passed directly to the underlying function). The resulting object can be used as a context manager (see With Statement Context Managers). On completion of the context or destruction of the temporary directory object the newly created temporary directory and all its contents are removed from the filesystem.	https://docs.python.org/3.4/library/tempfile.html#tempfile.TemporaryDirectory
tempfile mkstemp	A							https://docs.python.org			<pre><code>
tempfile.mkstemp(suffix='', prefix='tmp', dir=None, text=False)</code></pre><br>Creates a temporary file in the most secure manner possible. There are no race conditions in the file’s creation, assuming that the platform properly implements the os.O_EXCL flag for os.open(). The file is readable and writable only by the creating user ID. If the platform uses permission bits to indicate whether a file is executable, the file is executable by no one. The file descriptor is not inherited by child processes.	https://docs.python.org/3.4/library/tempfile.html#tempfile.mkstemp
tempfile mkdtemp	A							https://docs.python.org			<pre><code>
tempfile.mkdtemp(suffix='', prefix='tmp', dir=None)</code></pre><br>Creates a temporary directory in the most secure manner possible. There are no race conditions in the directory’s creation. The directory is readable, writable, and searchable only by the creating user ID.	https://docs.python.org/3.4/library/tempfile.html#tempfile.mkdtemp
tempfile mktemp	A							https://docs.python.org			<pre><code>
tempfile.mktemp(suffix='', prefix='tmp', dir=None)</code></pre><br>Deprecated since version 2.3: Use mkstemp() instead.	https://docs.python.org/3.4/library/tempfile.html#tempfile.mktemp
tempfile gettempdir	A							https://docs.python.org			<pre><code>
tempfile.gettempdir()</code></pre><br>Return the directory currently selected to create temporary files in. If tempdir is not None, this simply returns its contents; otherwise, the search described above is performed, and the result returned.	https://docs.python.org/3.4/library/tempfile.html#tempfile.gettempdir
tempfile gettempprefix	A							https://docs.python.org			<pre><code>
tempfile.gettempprefix()</code></pre><br>Return the filename prefix used to create temporary files. This does not contain the directory component.	https://docs.python.org/3.4/library/tempfile.html#tempfile.gettempprefix
termios tcgetattr	A							https://docs.python.org			<pre><code>
termios.tcgetattr(fd)</code></pre><br>Return a list containing the tty attributes for file descriptor fd, as follows: [iflag, oflag, cflag, lflag, ispeed, ospeed, cc] where cc is a list of the tty special characters (each a string of length 1, except the items with indices VMIN and VTIME, which are integers when these fields are defined). The interpretation of the flags and the speeds as well as the indexing in the cc array must be done using the symbolic constants defined in the termios module.	https://docs.python.org/3.4/library/termios.html#termios.tcgetattr
termios tcsetattr	A							https://docs.python.org			<pre><code>
termios.tcsetattr(fd, when, attributes)</code></pre><br>Set the tty attributes for file descriptor fd from the attributes, which is a list like the one returned by tcgetattr(). The when argument determines when the attributes are changed: TCSANOW to change immediately, TCSADRAIN to change after transmitting all queued output, or TCSAFLUSH to change after transmitting all queued output and discarding all queued input.	https://docs.python.org/3.4/library/termios.html#termios.tcsetattr
termios tcsendbreak	A							https://docs.python.org			<pre><code>
termios.tcsendbreak(fd, duration)</code></pre><br>Send a break on file descriptor fd. A zero duration sends a break for 0.25 –0.5 seconds; a nonzero duration has a system dependent meaning.	https://docs.python.org/3.4/library/termios.html#termios.tcsendbreak
termios tcdrain	A							https://docs.python.org			<pre><code>
termios.tcdrain(fd)</code></pre><br>Wait until all output written to file descriptor fd has been transmitted.	https://docs.python.org/3.4/library/termios.html#termios.tcdrain
termios tcflush	A							https://docs.python.org			<pre><code>
termios.tcflush(fd, queue)</code></pre><br>Discard queued data on file descriptor fd. The queue selector specifies which queue: TCIFLUSH for the input queue, TCOFLUSH for the output queue, or TCIOFLUSH for both queues.	https://docs.python.org/3.4/library/termios.html#termios.tcflush
termios tcflow	A							https://docs.python.org			<pre><code>
termios.tcflow(fd, action)</code></pre><br>Suspend or resume input or output on file descriptor fd. The action argument can be TCOOFF to suspend output, TCOON to restart output, TCIOFF to suspend input, or TCION to restart input.	https://docs.python.org/3.4/library/termios.html#termios.tcflow
test.support forget	A							https://docs.python.org			<pre><code>
test.support.forget(module_name)</code></pre><br>Remove the module named module_name from sys.modules and delete any byte-compiled files of the module.	https://docs.python.org/3.4/library/test.html#test.support.forget
test.support is_resource_enabled	A							https://docs.python.org			<pre><code>
test.support.is_resource_enabled(resource)</code></pre><br>Return True if resource is enabled and available. The list of available resources is only set when test.regrtest is executing the tests.	https://docs.python.org/3.4/library/test.html#test.support.is_resource_enabled
test.support requires	A							https://docs.python.org			<pre><code>
test.support.requires(resource, msg=None)</code></pre><br>Raise ResourceDenied if resource is not available. msg is the argument to ResourceDenied if it is raised. Always returns True if called by a function whose __name__ is '__main__'. Used when tests are executed by test.regrtest.	https://docs.python.org/3.4/library/test.html#test.support.requires
test.support findfile	A							https://docs.python.org			<pre><code>
test.support.findfile(filename, subdir=None)</code></pre><br>Return the path to the file named filename. If no match is found filename is returned. This does not equal a failure since it could be the path to the file.	https://docs.python.org/3.4/library/test.html#test.support.findfile
test.support run_unittest	A							https://docs.python.org			<pre><code>
test.support.run_unittest(*classes)</code></pre><br>Execute unittest.TestCase subclasses passed to the function. The function scans the classes for methods starting with the prefix test_ and executes the tests individually.	https://docs.python.org/3.4/library/test.html#test.support.run_unittest
test.support run_doctest	A							https://docs.python.org			<pre><code>
test.support.run_doctest(module, verbosity=None)</code></pre><br>Run doctest.testmod() on the given module. Return (failure_count, test_count).	https://docs.python.org/3.4/library/test.html#test.support.run_doctest
test.support check_warnings	A							https://docs.python.org			<pre><code>
test.support.check_warnings(*filters, quiet=True)</code></pre><br>A convenience wrapper for warnings.catch_warnings() that makes it easier to test that a warning was correctly raised. It is approximately equivalent to calling warnings.catch_warnings(record=True) with warnings.simplefilter() set to always and with the option to automatically validate the results that are recorded.	https://docs.python.org/3.4/library/test.html#test.support.check_warnings
test.support captured_stdin	A							https://docs.python.org			<pre><code>
test.support.captured_stdin()</code></pre><br>A context managers that temporarily replaces the named stream with io.StringIO object.	https://docs.python.org/3.4/library/test.html#test.support.captured_stdin
test.support temp_dir	A							https://docs.python.org			<pre><code>
test.support.temp_dir(path=None, quiet=False)</code></pre><br>A context manager that creates a temporary directory at path and yields the directory.	https://docs.python.org/3.4/library/test.html#test.support.temp_dir
test.support change_cwd	A							https://docs.python.org			<pre><code>
test.support.change_cwd(path, quiet=False)</code></pre><br>A context manager that temporarily changes the current working directory to path and yields the directory.	https://docs.python.org/3.4/library/test.html#test.support.change_cwd
test.support temp_cwd	A							https://docs.python.org			<pre><code>
test.support.temp_cwd(name='tempcwd', quiet=False)</code></pre><br>A context manager that temporarily creates a new directory and changes the current working directory (CWD).	https://docs.python.org/3.4/library/test.html#test.support.temp_cwd
test.support temp_umask	A							https://docs.python.org			<pre><code>
test.support.temp_umask(umask)</code></pre><br>A context manager that temporarily sets the process umask.	https://docs.python.org/3.4/library/test.html#test.support.temp_umask
test.support can_symlink	A							https://docs.python.org			<pre><code>
test.support.can_symlink()</code></pre><br>Return True if the OS supports symbolic links, False otherwise.	https://docs.python.org/3.4/library/test.html#test.support.can_symlink
@ skip_unless_symlink	A							https://docs.python.org			<pre><code>
@test.support.skip_unless_symlink</code></pre><br>A decorator for running tests that require support for symbolic links.	https://docs.python.org/3.4/library/test.html#test.support.skip_unless_symlink
@ anticipate_failure	A							https://docs.python.org			<pre><code>
@test.support.anticipate_failure(condition)</code></pre><br>A decorator to conditionally mark tests with unittest.expectedFailure(). Any use of this decorator should have an associated comment identifying the relevant tracker issue.	https://docs.python.org/3.4/library/test.html#test.support.anticipate_failure
@ run_with_locale	A							https://docs.python.org			<pre><code>
@test.support.run_with_locale(catstr, *locales)</code></pre><br>A decorator for running a function in a different locale, correctly resetting it after it has finished. catstr is the locale category as a string (for example "LC_ALL"). The locales passed will be tried sequentially, and the first valid locale will be used.	https://docs.python.org/3.4/library/test.html#test.support.run_with_locale
test.support make_bad_fd	A							https://docs.python.org			<pre><code>
test.support.make_bad_fd()</code></pre><br>Create an invalid file descriptor by opening and closing a temporary file, and returning its descriptor.	https://docs.python.org/3.4/library/test.html#test.support.make_bad_fd
test.support import_module	A							https://docs.python.org			<pre><code>
test.support.import_module(name, deprecated=False)</code></pre><br>This function imports and returns the named module. Unlike a normal import, this function raises unittest.SkipTest if the module cannot be imported.	https://docs.python.org/3.4/library/test.html#test.support.import_module
test.support import_fresh_module	A							https://docs.python.org			<pre><code>
test.support.import_fresh_module(name, fresh=(), blocked=(), deprecated=False)</code></pre><br>This function imports and returns a fresh copy of the named Python module by removing the named module from sys.modules before doing the import. Note that unlike reload(), the original module is not affected by this operation.	https://docs.python.org/3.4/library/test.html#test.support.import_fresh_module
test.support bind_port	A							https://docs.python.org			<pre><code>
test.support.bind_port(sock, host=HOST)</code></pre><br>Bind the socket to a free port and return the port number. Relies on ephemeral ports in order to ensure we are using an unbound port. This is important as many tests may be running simultaneously, especially in a buildbot environment. This method raises an exception if the sock.family is AF_INET and sock.type is SOCK_STREAM, and the socket has SO_REUSEADDR or SO_REUSEPORT set on it. Tests should never set these socket options for TCP/IP sockets. The only case for setting these options is testing multicasting via multiple UDP sockets.	https://docs.python.org/3.4/library/test.html#test.support.bind_port
test.support find_unused_port	A							https://docs.python.org			<pre><code>
test.support.find_unused_port(family=socket.AF_INET, socktype=socket.SOCK_STREAM)</code></pre><br>Returns an unused port that should be suitable for binding. This is achieved by creating a temporary socket with the same family and type as the sock parameter (default is AF_INET, SOCK_STREAM), and binding it to the specified host address (defaults to 0.0.0.0) with the port set to 0, eliciting an unused ephemeral port from the OS. The temporary socket is then closed and deleted, and the ephemeral port is returned.	https://docs.python.org/3.4/library/test.html#test.support.find_unused_port
test.support load_package_tests	A							https://docs.python.org			<pre><code>
test.support.load_package_tests(pkg_dir, loader, standard_tests, pattern)</code></pre><br>Generic implementation of the unittest load_tests protocol for use in test packages. pkg_dir is the root directory of the package; loader, standard_tests, and pattern are the arguments expected by load_tests. In simple cases, the test package’s __init__.py can be the following:	https://docs.python.org/3.4/library/test.html#test.support.load_package_tests
textwrap wrap	A							https://docs.python.org			<pre><code>
textwrap.wrap(text, width=70, **kwargs)</code></pre><br>Wraps the single paragraph in text (a string) so every line is at most width characters long. Returns a list of output lines, without final newlines.	https://docs.python.org/3.4/library/textwrap.html#textwrap.wrap
textwrap fill	A							https://docs.python.org			<pre><code>
textwrap.fill(text, width=70, **kwargs)</code></pre><br>Wraps the single paragraph in text, and returns a single string containing the wrapped paragraph. fill() is shorthand for	https://docs.python.org/3.4/library/textwrap.html#textwrap.fill
textwrap shorten	A							https://docs.python.org			<pre><code>
textwrap.shorten(text, width, **kwargs)</code></pre><br>Collapse and truncate the given text to fit in the given width.	https://docs.python.org/3.4/library/textwrap.html#textwrap.shorten
textwrap dedent	A							https://docs.python.org			<pre><code>
textwrap.dedent(text)</code></pre><br>Remove any common leading whitespace from every line in text.	https://docs.python.org/3.4/library/textwrap.html#textwrap.dedent
textwrap indent	A							https://docs.python.org			<pre><code>
textwrap.indent(text, prefix, predicate=None)</code></pre><br>Add prefix to the beginning of selected lines in text.	https://docs.python.org/3.4/library/textwrap.html#textwrap.indent
threading active_count	A							https://docs.python.org			<pre><code>
threading.active_count()</code></pre><br>Return the number of Thread objects currently alive. The returned count is equal to the length of the list returned by enumerate().	https://docs.python.org/3.4/library/threading.html#threading.active_count
threading current_thread	A							https://docs.python.org			<pre><code>
threading.current_thread()</code></pre><br>Return the current Thread object, corresponding to the caller’s thread of control. If the caller’s thread of control was not created through the threading module, a dummy thread object with limited functionality is returned.	https://docs.python.org/3.4/library/threading.html#threading.current_thread
threading get_ident	A							https://docs.python.org			<pre><code>
threading.get_ident()</code></pre><br>Return the ‘thread identifier’ of the current thread. This is a nonzero integer. Its value has no direct meaning; it is intended as a magic cookie to be used e.g. to index a dictionary of thread-specific data. Thread identifiers may be recycled when a thread exits and another thread is created.	https://docs.python.org/3.4/library/threading.html#threading.get_ident
threading enumerate	A							https://docs.python.org			<pre><code>
threading.enumerate()</code></pre><br>Return a list of all Thread objects currently alive. The list includes daemonic threads, dummy thread objects created by current_thread(), and the main thread. It excludes terminated threads and threads that have not yet been started.	https://docs.python.org/3.4/library/threading.html#threading.enumerate
threading main_thread	A							https://docs.python.org			<pre><code>
threading.main_thread()</code></pre><br>Return the main Thread object. In normal conditions, the main thread is the thread from which the Python interpreter was started.	https://docs.python.org/3.4/library/threading.html#threading.main_thread
threading settrace	A							https://docs.python.org			<pre><code>
threading.settrace(func)</code></pre><br>Set a trace function for all threads started from the threading module. The func will be passed to sys.settrace() for each thread, before its run() method is called.	https://docs.python.org/3.4/library/threading.html#threading.settrace
threading setprofile	A							https://docs.python.org			<pre><code>
threading.setprofile(func)</code></pre><br>Set a profile function for all threads started from the threading module. The func will be passed to sys.setprofile() for each thread, before its run() method is called.	https://docs.python.org/3.4/library/threading.html#threading.setprofile
threading stack_size	A							https://docs.python.org			<pre><code>
threading.stack_size([size])</code></pre><br>Return the thread stack size used when creating new threads. The optional size argument specifies the stack size to be used for subsequently created threads, and must be 0 (use platform or configured default) or a positive integer value of at least 32,768 (32 KiB). If size is not specified, 0 is used. If changing the thread stack size is unsupported, a RuntimeError is raised. If the specified stack size is invalid, a ValueError is raised and the stack size is unmodified. 32 KiB is currently the minimum supported stack size value to guarantee sufficient stack space for the interpreter itself. Note that some platforms may have particular restrictions on values for the stack size, such as requiring a minimum stack size > 32 KiB or requiring allocation in multiples of the system memory page size - platform documentation should be referred to for more information (4 KiB pages are common; using multiples of 4096 for the stack size is the suggested approach in the absence of more specific information). Availability: Windows, systems with POSIX threads.	https://docs.python.org/3.4/library/threading.html#threading.stack_size
time asctime	A							https://docs.python.org			<pre><code>
time.asctime([t])</code></pre><br>Convert a tuple or struct_time representing a time as returned by gmtime() or localtime() to a string of the following form: 'Sun Jun 20 23:21:05 1993'. If t is not provided, the current time as returned by localtime() is used. Locale information is not used by asctime().	https://docs.python.org/3.4/library/time.html#time.asctime
time clock	A							https://docs.python.org			<pre><code>
time.clock()</code></pre><br>On Unix, return the current processor time as a floating point number expressed in seconds. The precision, and in fact the very definition of the meaning of “processor time”, depends on that of the C function of the same name.	https://docs.python.org/3.4/library/time.html#time.clock
time clock_getres	A							https://docs.python.org			<pre><code>
time.clock_getres(clk_id)</code></pre><br>Return the resolution (precision) of the specified clock clk_id.	https://docs.python.org/3.4/library/time.html#time.clock_getres
time clock_gettime	A							https://docs.python.org			<pre><code>
time.clock_gettime(clk_id)</code></pre><br>Return the time of the specified clock clk_id.	https://docs.python.org/3.4/library/time.html#time.clock_gettime
time clock_settime	A							https://docs.python.org			<pre><code>
time.clock_settime(clk_id, time)</code></pre><br>Set the time of the specified clock clk_id.	https://docs.python.org/3.4/library/time.html#time.clock_settime
time ctime	A							https://docs.python.org			<pre><code>
time.ctime([secs])</code></pre><br>Convert a time expressed in seconds since the epoch to a string representing local time. If secs is not provided or None, the current time as returned by time() is used. ctime(secs) is equivalent to asctime(localtime(secs)). Locale information is not used by ctime().	https://docs.python.org/3.4/library/time.html#time.ctime
time get_clock_info	A							https://docs.python.org			<pre><code>
time.get_clock_info(name)</code></pre><br>Get information on the specified clock as a namespace object. Supported clock names and the corresponding functions to read their value are:	https://docs.python.org/3.4/library/time.html#time.get_clock_info
time gmtime	A							https://docs.python.org			<pre><code>
time.gmtime([secs])</code></pre><br>Convert a time expressed in seconds since the epoch to a struct_time in UTC in which the dst flag is always zero. If secs is not provided or None, the current time as returned by time() is used. Fractions of a second are ignored. See above for a description of the struct_time object. See calendar.timegm() for the inverse of this function.	https://docs.python.org/3.4/library/time.html#time.gmtime
time localtime	A							https://docs.python.org			<pre><code>
time.localtime([secs])</code></pre><br>Like gmtime() but converts to local time. If secs is not provided or None, the current time as returned by time() is used. The dst flag is set to 1 when DST applies to the given time.	https://docs.python.org/3.4/library/time.html#time.localtime
time mktime	A							https://docs.python.org			<pre><code>
time.mktime(t)</code></pre><br>This is the inverse function of localtime(). Its argument is the struct_time or full 9-tuple (since the dst flag is needed; use -1 as the dst flag if it is unknown) which expresses the time in local time, not UTC. It returns a floating point number, for compatibility with time(). If the input value cannot be represented as a valid time, either OverflowError or ValueError will be raised (which depends on whether the invalid value is caught by Python or the underlying C libraries). The earliest date for which it can generate a time is platform-dependent.	https://docs.python.org/3.4/library/time.html#time.mktime
time monotonic	A							https://docs.python.org			<pre><code>
time.monotonic()</code></pre><br>Return the value (in fractional seconds) of a monotonic clock, i.e. a clock that cannot go backwards. The clock is not affected by system clock updates. The reference point of the returned value is undefined, so that only the difference between the results of consecutive calls is valid.	https://docs.python.org/3.4/library/time.html#time.monotonic
time perf_counter	A							https://docs.python.org			<pre><code>
time.perf_counter()</code></pre><br>Return the value (in fractional seconds) of a performance counter, i.e. a clock with the highest available resolution to measure a short duration. It does include time elapsed during sleep and is system-wide. The reference point of the returned value is undefined, so that only the difference between the results of consecutive calls is valid.	https://docs.python.org/3.4/library/time.html#time.perf_counter
time process_time	A							https://docs.python.org			<pre><code>
time.process_time()</code></pre><br>Return the value (in fractional seconds) of the sum of the system and user CPU time of the current process. It does not include time elapsed during sleep. It is process-wide by definition. The reference point of the returned value is undefined, so that only the difference between the results of consecutive calls is valid.	https://docs.python.org/3.4/library/time.html#time.process_time
time sleep	A							https://docs.python.org			<pre><code>
time.sleep(secs)</code></pre><br>Suspend execution of the calling thread for the given number of seconds. The argument may be a floating point number to indicate a more precise sleep time. The actual suspension time may be less than that requested because any caught signal will terminate the sleep() following execution of that signal’s catching routine. Also, the suspension time may be longer than requested by an arbitrary amount because of the scheduling of other activity in the system.	https://docs.python.org/3.4/library/time.html#time.sleep
time strftime	A							https://docs.python.org			<pre><code>
time.strftime(format[, t])</code></pre><br>Convert a tuple or struct_time representing a time as returned by gmtime() or localtime() to a string as specified by the format argument. If t is not provided, the current time as returned by localtime() is used. format must be a string. ValueError is raised if any field in t is outside of the allowed range.	https://docs.python.org/3.4/library/time.html#time.strftime
time strptime	A							https://docs.python.org			<pre><code>
time.strptime(string[, format])</code></pre><br>Parse a string representing a time according to a format. The return value is a struct_time as returned by gmtime() or localtime().	https://docs.python.org/3.4/library/time.html#time.strptime
time time	A							https://docs.python.org			<pre><code>
time.time()</code></pre><br>Return the time in seconds since the epoch as a floating point number. Note that even though the time is always returned as a floating point number, not all systems provide time with a better precision than 1 second. While this function normally returns non-decreasing values, it can return a lower value than a previous call if the system clock has been set back between the two calls.	https://docs.python.org/3.4/library/time.html#time.time
time tzset	A							https://docs.python.org			<pre><code>
time.tzset()</code></pre><br>Resets the time conversion rules used by the library routines. The environment variable TZ specifies how this is done.	https://docs.python.org/3.4/library/time.html#time.tzset
timeit timeit	A							https://docs.python.org			<pre><code>
timeit.timeit(stmt='pass', setup='pass', timer=<default timer>, number=1000000)</code></pre><br>Create a Timer instance with the given statement, setup code and timer function and run its timeit() method with number executions.	https://docs.python.org/3.4/library/timeit.html#timeit.timeit
timeit repeat	A							https://docs.python.org			<pre><code>
timeit.repeat(stmt='pass', setup='pass', timer=<default timer>, repeat=3, number=1000000)</code></pre><br>Create a Timer instance with the given statement, setup code and timer function and run its repeat() method with the given repeat count and number executions.	https://docs.python.org/3.4/library/timeit.html#timeit.repeat
timeit default_timer	A							https://docs.python.org			<pre><code>
timeit.default_timer()</code></pre><br>The default timer, which is always time.perf_counter().	https://docs.python.org/3.4/library/timeit.html#timeit.default_timer
timeit timeit	A							https://docs.python.org			<pre><code>
timeit.timeit(stmt='pass', setup='pass', timer=<default timer>, number=1000000)</code></pre><br>Create a Timer instance with the given statement, setup code and timer function and run its timeit() method with number executions.	https://docs.python.org/3.4/library/timeit.html#timeit.timeit
timeit repeat	A							https://docs.python.org			<pre><code>
timeit.repeat(stmt='pass', setup='pass', timer=<default timer>, repeat=3, number=1000000)</code></pre><br>Create a Timer instance with the given statement, setup code and timer function and run its repeat() method with the given repeat count and number executions.	https://docs.python.org/3.4/library/timeit.html#timeit.repeat
timeit default_timer	A							https://docs.python.org			<pre><code>
timeit.default_timer()</code></pre><br>The default timer, which is always time.perf_counter().	https://docs.python.org/3.4/library/timeit.html#timeit.default_timer
tkinter Tcl	A							https://docs.python.org			<pre><code>
tkinter.Tcl(screenName=None, baseName=None, className='Tk', useTk=0)</code></pre><br>The Tcl() function is a factory function which creates an object much like that created by the Tk class, except that it does not initialize the Tk subsystem. This is most often useful when driving the Tcl interpreter in an environment where one doesn’t want to create extraneous toplevel windows, or where one cannot (such as Unix/Linux systems without an X server). An object created by the Tcl() object can have a Toplevel window created (and the Tk subsystem initialized) by calling its loadtk() method.	https://docs.python.org/3.4/library/tkinter.html#tkinter.Tcl
tkinter Tcl	A							https://docs.python.org			<pre><code>
tkinter.Tcl(screenName=None, baseName=None, className='Tk', useTk=0)</code></pre><br>The Tcl() function is a factory function which creates an object much like that created by the Tk class, except that it does not initialize the Tk subsystem. This is most often useful when driving the Tcl interpreter in an environment where one doesn’t want to create extraneous toplevel windows, or where one cannot (such as Unix/Linux systems without an X server). An object created by the Tcl() object can have a Toplevel window created (and the Tk subsystem initialized) by calling its loadtk() method.	https://docs.python.org/3.4/library/tkinter.html#tkinter.Tcl
token ISTERMINAL	A							https://docs.python.org			<pre><code>
token.ISTERMINAL(x)</code></pre><br>Return true for terminal token values.	https://docs.python.org/3.4/library/token.html#token.ISTERMINAL
token ISNONTERMINAL	A							https://docs.python.org			<pre><code>
token.ISNONTERMINAL(x)</code></pre><br>Return true for non-terminal token values.	https://docs.python.org/3.4/library/token.html#token.ISNONTERMINAL
token ISEOF	A							https://docs.python.org			<pre><code>
token.ISEOF(x)</code></pre><br>Return true if x is the marker indicating the end of input.	https://docs.python.org/3.4/library/token.html#token.ISEOF
tokenize tokenize	A							https://docs.python.org			<pre><code>
tokenize.tokenize(readline)</code></pre><br>The tokenize() generator requires one argument, readline, which must be a callable object which provides the same interface as the io.IOBase.readline() method of file objects. Each call to the function should return one line of input as bytes.	https://docs.python.org/3.4/library/tokenize.html#tokenize.tokenize
tokenize untokenize	A							https://docs.python.org			<pre><code>
tokenize.untokenize(iterable)</code></pre><br>Converts tokens back into Python source code. The iterable must return sequences with at least two elements, the token type and the token string. Any additional sequence elements are ignored.	https://docs.python.org/3.4/library/tokenize.html#tokenize.untokenize
tokenize detect_encoding	A							https://docs.python.org			<pre><code>
tokenize.detect_encoding(readline)</code></pre><br>The detect_encoding() function is used to detect the encoding that should be used to decode a Python source file. It requires one argument, readline, in the same way as the tokenize() generator.	https://docs.python.org/3.4/library/tokenize.html#tokenize.detect_encoding
tokenize open	A							https://docs.python.org			<pre><code>
tokenize.open(filename)</code></pre><br>Open a file in read only mode using the encoding detected by detect_encoding().	https://docs.python.org/3.4/library/tokenize.html#tokenize.open
tokenize tokenize	A							https://docs.python.org			<pre><code>
tokenize.tokenize(readline)</code></pre><br>The tokenize() generator requires one argument, readline, which must be a callable object which provides the same interface as the io.IOBase.readline() method of file objects. Each call to the function should return one line of input as bytes.	https://docs.python.org/3.4/library/tokenize.html#tokenize.tokenize
tokenize untokenize	A							https://docs.python.org			<pre><code>
tokenize.untokenize(iterable)</code></pre><br>Converts tokens back into Python source code. The iterable must return sequences with at least two elements, the token type and the token string. Any additional sequence elements are ignored.	https://docs.python.org/3.4/library/tokenize.html#tokenize.untokenize
tokenize detect_encoding	A							https://docs.python.org			<pre><code>
tokenize.detect_encoding(readline)</code></pre><br>The detect_encoding() function is used to detect the encoding that should be used to decode a Python source file. It requires one argument, readline, in the same way as the tokenize() generator.	https://docs.python.org/3.4/library/tokenize.html#tokenize.detect_encoding
tokenize open	A							https://docs.python.org			<pre><code>
tokenize.open(filename)</code></pre><br>Open a file in read only mode using the encoding detected by detect_encoding().	https://docs.python.org/3.4/library/tokenize.html#tokenize.open
traceback print_tb	A							https://docs.python.org			<pre><code>
traceback.print_tb(traceback, limit=None, file=None)</code></pre><br>Print up to limit stack trace entries from traceback. If limit is omitted or None, all entries are printed. If file is omitted or None, the output goes to sys.stderr; otherwise it should be an open file or file-like object to receive the output.	https://docs.python.org/3.4/library/traceback.html#traceback.print_tb
traceback print_exception	A							https://docs.python.org			<pre><code>
traceback.print_exception(type, value, traceback, limit=None, file=None, chain=True)</code></pre><br>Print exception information and up to limit stack trace entries from traceback to file. This differs from print_tb() in the following ways:	https://docs.python.org/3.4/library/traceback.html#traceback.print_exception
traceback print_exc	A							https://docs.python.org			<pre><code>
traceback.print_exc(limit=None, file=None, chain=True)</code></pre><br>This is a shorthand for print_exception(*sys.exc_info()).	https://docs.python.org/3.4/library/traceback.html#traceback.print_exc
traceback print_last	A							https://docs.python.org			<pre><code>
traceback.print_last(limit=None, file=None, chain=True)</code></pre><br>This is a shorthand for print_exception(sys.last_type, sys.last_value, sys.last_traceback, limit, file). In general it will work only after an exception has reached an interactive prompt (see sys.last_type).	https://docs.python.org/3.4/library/traceback.html#traceback.print_last
traceback print_stack	A							https://docs.python.org			<pre><code>
traceback.print_stack(f=None, limit=None, file=None)</code></pre><br>This function prints a stack trace from its invocation point. The optional f argument can be used to specify an alternate stack frame to start. The optional limit and file arguments have the same meaning as for print_exception().	https://docs.python.org/3.4/library/traceback.html#traceback.print_stack
traceback extract_tb	A							https://docs.python.org			<pre><code>
traceback.extract_tb(traceback, limit=None)</code></pre><br>Return a list of up to limit “pre-processed” stack trace entries extracted from the traceback object traceback. It is useful for alternate formatting of stack traces. If limit is omitted or None, all entries are extracted. A “pre-processed” stack trace entry is a 4-tuple (filename, line number, function name, text) representing the information that is usually printed for a stack trace. The text is a string with leading and trailing whitespace stripped; if the source is not available it is None.	https://docs.python.org/3.4/library/traceback.html#traceback.extract_tb
traceback extract_stack	A							https://docs.python.org			<pre><code>
traceback.extract_stack(f=None, limit=None)</code></pre><br>Extract the raw traceback from the current stack frame. The return value has the same format as for extract_tb(). The optional f and limit arguments have the same meaning as for print_stack().	https://docs.python.org/3.4/library/traceback.html#traceback.extract_stack
traceback format_list	A							https://docs.python.org			<pre><code>
traceback.format_list(list)</code></pre><br>Given a list of tuples as returned by extract_tb() or extract_stack(), return a list of strings ready for printing. Each string in the resulting list corresponds to the item with the same index in the argument list. Each string ends in a newline; the strings may contain internal newlines as well, for those items whose source text line is not None.	https://docs.python.org/3.4/library/traceback.html#traceback.format_list
traceback format_exception_only	A							https://docs.python.org			<pre><code>
traceback.format_exception_only(type, value)</code></pre><br>Format the exception part of a traceback. The arguments are the exception type and value such as given by sys.last_type and sys.last_value. The return value is a list of strings, each ending in a newline. Normally, the list contains a single string; however, for SyntaxError exceptions, it contains several lines that (when printed) display detailed information about where the syntax error occurred. The message indicating which exception occurred is the always last string in the list.	https://docs.python.org/3.4/library/traceback.html#traceback.format_exception_only
traceback format_exception	A							https://docs.python.org			<pre><code>
traceback.format_exception(type, value, tb, limit=None, chain=True)</code></pre><br>Format a stack trace and the exception information. The arguments have the same meaning as the corresponding arguments to print_exception(). The return value is a list of strings, each ending in a newline and some containing internal newlines. When these lines are concatenated and printed, exactly the same text is printed as does print_exception().	https://docs.python.org/3.4/library/traceback.html#traceback.format_exception
traceback format_exc	A							https://docs.python.org			<pre><code>
traceback.format_exc(limit=None, chain=True)</code></pre><br>This is like print_exc(limit) but returns a string instead of printing to a file.	https://docs.python.org/3.4/library/traceback.html#traceback.format_exc
traceback format_tb	A							https://docs.python.org			<pre><code>
traceback.format_tb(tb, limit=None)</code></pre><br>A shorthand for format_list(extract_tb(tb, limit)).	https://docs.python.org/3.4/library/traceback.html#traceback.format_tb
traceback format_stack	A							https://docs.python.org			<pre><code>
traceback.format_stack(f=None, limit=None)</code></pre><br>A shorthand for format_list(extract_stack(f, limit)).	https://docs.python.org/3.4/library/traceback.html#traceback.format_stack
traceback clear_frames	A							https://docs.python.org			<pre><code>
traceback.clear_frames(tb)</code></pre><br>Clears the local variables of all the stack frames in a traceback tb by calling the clear() method of each frame object.	https://docs.python.org/3.4/library/traceback.html#traceback.clear_frames
tracemalloc clear_traces	A							https://docs.python.org			<pre><code>
tracemalloc.clear_traces()</code></pre><br>Clear traces of memory blocks allocated by Python.	https://docs.python.org/3.4/library/tracemalloc.html#tracemalloc.clear_traces
tracemalloc get_object_traceback	A							https://docs.python.org			<pre><code>
tracemalloc.get_object_traceback(obj)</code></pre><br>Get the traceback where the Python object obj was allocated. Return a Traceback instance, or None if the tracemalloc module is not tracing memory allocations or did not trace the allocation of the object.	https://docs.python.org/3.4/library/tracemalloc.html#tracemalloc.get_object_traceback
tracemalloc get_traceback_limit	A							https://docs.python.org			<pre><code>
tracemalloc.get_traceback_limit()</code></pre><br>Get the maximum number of frames stored in the traceback of a trace.	https://docs.python.org/3.4/library/tracemalloc.html#tracemalloc.get_traceback_limit
tracemalloc get_traced_memory	A							https://docs.python.org			<pre><code>
tracemalloc.get_traced_memory()</code></pre><br>Get the current size and peak size of memory blocks traced by the tracemalloc module as a tuple: (current: int, peak: int).	https://docs.python.org/3.4/library/tracemalloc.html#tracemalloc.get_traced_memory
tracemalloc get_tracemalloc_memory	A							https://docs.python.org			<pre><code>
tracemalloc.get_tracemalloc_memory()</code></pre><br>Get the memory usage in bytes of the tracemalloc module used to store traces of memory blocks. Return an int.	https://docs.python.org/3.4/library/tracemalloc.html#tracemalloc.get_tracemalloc_memory
tracemalloc is_tracing	A							https://docs.python.org			<pre><code>
tracemalloc.is_tracing()</code></pre><br>True if the tracemalloc module is tracing Python memory allocations, False otherwise.	https://docs.python.org/3.4/library/tracemalloc.html#tracemalloc.is_tracing
tracemalloc start	A							https://docs.python.org			<pre><code>
tracemalloc.start(nframe: int=1)</code></pre><br>Start tracing Python memory allocations: install hooks on Python memory allocators. Collected tracebacks of traces will be limited to nframe frames. By default, a trace of a memory block only stores the most recent frame: the limit is 1. nframe must be greater or equal to 1.	https://docs.python.org/3.4/library/tracemalloc.html#tracemalloc.start
tracemalloc stop	A							https://docs.python.org			<pre><code>
tracemalloc.stop()</code></pre><br>Stop tracing Python memory allocations: uninstall hooks on Python memory allocators. Also clears all previously collected traces of memory blocks allocated by Python.	https://docs.python.org/3.4/library/tracemalloc.html#tracemalloc.stop
tracemalloc take_snapshot	A							https://docs.python.org			<pre><code>
tracemalloc.take_snapshot()</code></pre><br>Take a snapshot of traces of memory blocks allocated by Python. Return a new Snapshot instance.	https://docs.python.org/3.4/library/tracemalloc.html#tracemalloc.take_snapshot
tracemalloc clear_traces	A							https://docs.python.org			<pre><code>
tracemalloc.clear_traces()</code></pre><br>Clear traces of memory blocks allocated by Python.	https://docs.python.org/3.4/library/tracemalloc.html#tracemalloc.clear_traces
tracemalloc get_object_traceback	A							https://docs.python.org			<pre><code>
tracemalloc.get_object_traceback(obj)</code></pre><br>Get the traceback where the Python object obj was allocated. Return a Traceback instance, or None if the tracemalloc module is not tracing memory allocations or did not trace the allocation of the object.	https://docs.python.org/3.4/library/tracemalloc.html#tracemalloc.get_object_traceback
tracemalloc get_traceback_limit	A							https://docs.python.org			<pre><code>
tracemalloc.get_traceback_limit()</code></pre><br>Get the maximum number of frames stored in the traceback of a trace.	https://docs.python.org/3.4/library/tracemalloc.html#tracemalloc.get_traceback_limit
tracemalloc get_traced_memory	A							https://docs.python.org			<pre><code>
tracemalloc.get_traced_memory()</code></pre><br>Get the current size and peak size of memory blocks traced by the tracemalloc module as a tuple: (current: int, peak: int).	https://docs.python.org/3.4/library/tracemalloc.html#tracemalloc.get_traced_memory
tracemalloc get_tracemalloc_memory	A							https://docs.python.org			<pre><code>
tracemalloc.get_tracemalloc_memory()</code></pre><br>Get the memory usage in bytes of the tracemalloc module used to store traces of memory blocks. Return an int.	https://docs.python.org/3.4/library/tracemalloc.html#tracemalloc.get_tracemalloc_memory
tracemalloc is_tracing	A							https://docs.python.org			<pre><code>
tracemalloc.is_tracing()</code></pre><br>True if the tracemalloc module is tracing Python memory allocations, False otherwise.	https://docs.python.org/3.4/library/tracemalloc.html#tracemalloc.is_tracing
tracemalloc start	A							https://docs.python.org			<pre><code>
tracemalloc.start(nframe: int=1)</code></pre><br>Start tracing Python memory allocations: install hooks on Python memory allocators. Collected tracebacks of traces will be limited to nframe frames. By default, a trace of a memory block only stores the most recent frame: the limit is 1. nframe must be greater or equal to 1.	https://docs.python.org/3.4/library/tracemalloc.html#tracemalloc.start
tracemalloc stop	A							https://docs.python.org			<pre><code>
tracemalloc.stop()</code></pre><br>Stop tracing Python memory allocations: uninstall hooks on Python memory allocators. Also clears all previously collected traces of memory blocks allocated by Python.	https://docs.python.org/3.4/library/tracemalloc.html#tracemalloc.stop
tracemalloc take_snapshot	A							https://docs.python.org			<pre><code>
tracemalloc.take_snapshot()</code></pre><br>Take a snapshot of traces of memory blocks allocated by Python. Return a new Snapshot instance.	https://docs.python.org/3.4/library/tracemalloc.html#tracemalloc.take_snapshot
tracemalloc clear_traces	A							https://docs.python.org			<pre><code>
tracemalloc.clear_traces()</code></pre><br>Clear traces of memory blocks allocated by Python.	https://docs.python.org/3.4/library/tracemalloc.html#tracemalloc.clear_traces
tracemalloc get_object_traceback	A							https://docs.python.org			<pre><code>
tracemalloc.get_object_traceback(obj)</code></pre><br>Get the traceback where the Python object obj was allocated. Return a Traceback instance, or None if the tracemalloc module is not tracing memory allocations or did not trace the allocation of the object.	https://docs.python.org/3.4/library/tracemalloc.html#tracemalloc.get_object_traceback
tracemalloc get_traceback_limit	A							https://docs.python.org			<pre><code>
tracemalloc.get_traceback_limit()</code></pre><br>Get the maximum number of frames stored in the traceback of a trace.	https://docs.python.org/3.4/library/tracemalloc.html#tracemalloc.get_traceback_limit
tracemalloc get_traced_memory	A							https://docs.python.org			<pre><code>
tracemalloc.get_traced_memory()</code></pre><br>Get the current size and peak size of memory blocks traced by the tracemalloc module as a tuple: (current: int, peak: int).	https://docs.python.org/3.4/library/tracemalloc.html#tracemalloc.get_traced_memory
tracemalloc get_tracemalloc_memory	A							https://docs.python.org			<pre><code>
tracemalloc.get_tracemalloc_memory()</code></pre><br>Get the memory usage in bytes of the tracemalloc module used to store traces of memory blocks. Return an int.	https://docs.python.org/3.4/library/tracemalloc.html#tracemalloc.get_tracemalloc_memory
tracemalloc is_tracing	A							https://docs.python.org			<pre><code>
tracemalloc.is_tracing()</code></pre><br>True if the tracemalloc module is tracing Python memory allocations, False otherwise.	https://docs.python.org/3.4/library/tracemalloc.html#tracemalloc.is_tracing
tracemalloc start	A							https://docs.python.org			<pre><code>
tracemalloc.start(nframe: int=1)</code></pre><br>Start tracing Python memory allocations: install hooks on Python memory allocators. Collected tracebacks of traces will be limited to nframe frames. By default, a trace of a memory block only stores the most recent frame: the limit is 1. nframe must be greater or equal to 1.	https://docs.python.org/3.4/library/tracemalloc.html#tracemalloc.start
tracemalloc stop	A							https://docs.python.org			<pre><code>
tracemalloc.stop()</code></pre><br>Stop tracing Python memory allocations: uninstall hooks on Python memory allocators. Also clears all previously collected traces of memory blocks allocated by Python.	https://docs.python.org/3.4/library/tracemalloc.html#tracemalloc.stop
tracemalloc take_snapshot	A							https://docs.python.org			<pre><code>
tracemalloc.take_snapshot()</code></pre><br>Take a snapshot of traces of memory blocks allocated by Python. Return a new Snapshot instance.	https://docs.python.org/3.4/library/tracemalloc.html#tracemalloc.take_snapshot
tty setraw	A							https://docs.python.org			<pre><code>
tty.setraw(fd, when=termios.TCSAFLUSH)</code></pre><br>Change the mode of the file descriptor fd to raw. If when is omitted, it defaults to termios.TCSAFLUSH, and is passed to termios.tcsetattr().	https://docs.python.org/3.4/library/tty.html#tty.setraw
tty setcbreak	A							https://docs.python.org			<pre><code>
tty.setcbreak(fd, when=termios.TCSAFLUSH)</code></pre><br>Change the mode of file descriptor fd to cbreak. If when is omitted, it defaults to termios.TCSAFLUSH, and is passed to termios.tcsetattr().	https://docs.python.org/3.4/library/tty.html#tty.setcbreak
turtle forward	A							https://docs.python.org			<pre><code>
turtle.forward(distance)</code></pre><br>Move the turtle forward by the specified distance, in the direction the turtle is headed.	https://docs.python.org/3.4/library/turtle.html#turtle.forward
turtle back	A							https://docs.python.org			<pre><code>
turtle.back(distance)</code></pre><br>Move the turtle backward by distance, opposite to the direction the turtle is headed. Do not change the turtle’s heading.	https://docs.python.org/3.4/library/turtle.html#turtle.back
turtle right	A							https://docs.python.org			<pre><code>
turtle.right(angle)</code></pre><br>Turn turtle right by angle units. (Units are by default degrees, but can be set via the degrees() and radians() functions.) Angle orientation depends on the turtle mode, see mode().	https://docs.python.org/3.4/library/turtle.html#turtle.right
turtle left	A							https://docs.python.org			<pre><code>
turtle.left(angle)</code></pre><br>Turn turtle left by angle units. (Units are by default degrees, but can be set via the degrees() and radians() functions.) Angle orientation depends on the turtle mode, see mode().	https://docs.python.org/3.4/library/turtle.html#turtle.left
turtle goto	A							https://docs.python.org			<pre><code>
turtle.goto(x, y=None)</code></pre><br>If y is None, x must be a pair of coordinates or a Vec2D (e.g. as returned by pos()).	https://docs.python.org/3.4/library/turtle.html#turtle.goto
turtle setx	A							https://docs.python.org			<pre><code>
turtle.setx(x)</code></pre><br>Set the turtle’s first coordinate to x, leave second coordinate unchanged.	https://docs.python.org/3.4/library/turtle.html#turtle.setx
turtle sety	A							https://docs.python.org			<pre><code>
turtle.sety(y)</code></pre><br>Set the turtle’s second coordinate to y, leave first coordinate unchanged.	https://docs.python.org/3.4/library/turtle.html#turtle.sety
turtle setheading	A							https://docs.python.org			<pre><code>
turtle.setheading(to_angle)</code></pre><br>Set the orientation of the turtle to to_angle. Here are some common directions in degrees:	https://docs.python.org/3.4/library/turtle.html#turtle.setheading
turtle home	A							https://docs.python.org			<pre><code>
turtle.home()</code></pre><br>Move turtle to the origin – coordinates (0,0) – and set its heading to its start-orientation (which depends on the mode, see mode()).	https://docs.python.org/3.4/library/turtle.html#turtle.home
turtle circle	A							https://docs.python.org			<pre><code>
turtle.circle(radius, extent=None, steps=None)</code></pre><br>Draw a circle with given radius. The center is radius units left of the turtle; extent – an angle – determines which part of the circle is drawn. If extent is not given, draw the entire circle. If extent is not a full circle, one endpoint of the arc is the current pen position. Draw the arc in counterclockwise direction if radius is positive, otherwise in clockwise direction. Finally the direction of the turtle is changed by the amount of extent.	https://docs.python.org/3.4/library/turtle.html#turtle.circle
turtle dot	A							https://docs.python.org			<pre><code>
turtle.dot(size=None, *color)</code></pre><br>Draw a circular dot with diameter size, using color. If size is not given, the maximum of pensize+4 and 2*pensize is used.	https://docs.python.org/3.4/library/turtle.html#turtle.dot
turtle stamp	A							https://docs.python.org			<pre><code>
turtle.stamp()</code></pre><br>Stamp a copy of the turtle shape onto the canvas at the current turtle position. Return a stamp_id for that stamp, which can be used to delete it by calling clearstamp(stamp_id).	https://docs.python.org/3.4/library/turtle.html#turtle.stamp
turtle clearstamp	A							https://docs.python.org			<pre><code>
turtle.clearstamp(stampid)</code></pre><br>Delete stamp with given stampid.	https://docs.python.org/3.4/library/turtle.html#turtle.clearstamp
turtle clearstamps	A							https://docs.python.org			<pre><code>
turtle.clearstamps(n=None)</code></pre><br>Delete all or first/last n of turtle’s stamps. If n is None, delete all stamps, if n > 0 delete first n stamps, else if n < 0 delete last n stamps.	https://docs.python.org/3.4/library/turtle.html#turtle.clearstamps
turtle undo	A							https://docs.python.org			<pre><code>
turtle.undo()</code></pre><br>Undo (repeatedly) the last turtle action(s). Number of available undo actions is determined by the size of the undobuffer.	https://docs.python.org/3.4/library/turtle.html#turtle.undo
turtle speed	A							https://docs.python.org			<pre><code>
turtle.speed(speed=None)</code></pre><br>Set the turtle’s speed to an integer value in the range 0..10. If no argument is given, return current speed.	https://docs.python.org/3.4/library/turtle.html#turtle.speed
turtle position	A							https://docs.python.org			<pre><code>
turtle.position()</code></pre><br>Return the turtle’s current location (x,y) (as a Vec2D vector).	https://docs.python.org/3.4/library/turtle.html#turtle.position
turtle towards	A							https://docs.python.org			<pre><code>
turtle.towards(x, y=None)</code></pre><br>Return the angle between the line from turtle position to position specified by (x,y), the vector or the other turtle. This depends on the turtle’s start orientation which depends on the mode - “standard”/”world” or “logo”).	https://docs.python.org/3.4/library/turtle.html#turtle.towards
turtle xcor	A							https://docs.python.org			<pre><code>
turtle.xcor()</code></pre><br>Return the turtle’s x coordinate.	https://docs.python.org/3.4/library/turtle.html#turtle.xcor
turtle ycor	A							https://docs.python.org			<pre><code>
turtle.ycor()</code></pre><br>Return the turtle’s y coordinate.	https://docs.python.org/3.4/library/turtle.html#turtle.ycor
turtle heading	A							https://docs.python.org			<pre><code>
turtle.heading()</code></pre><br>Return the turtle’s current heading (value depends on the turtle mode, see mode()).	https://docs.python.org/3.4/library/turtle.html#turtle.heading
turtle distance	A							https://docs.python.org			<pre><code>
turtle.distance(x, y=None)</code></pre><br>Return the distance from the turtle to (x,y), the given vector, or the given other turtle, in turtle step units.	https://docs.python.org/3.4/library/turtle.html#turtle.distance
turtle degrees	A							https://docs.python.org			<pre><code>
turtle.degrees(fullcircle=360.0)</code></pre><br>Set angle measurement units, i.e. set number of “degrees” for a full circle. Default value is 360 degrees.	https://docs.python.org/3.4/library/turtle.html#turtle.degrees
turtle radians	A							https://docs.python.org			<pre><code>
turtle.radians()</code></pre><br>Set the angle measurement units to radians. Equivalent to degrees(2*math.pi).	https://docs.python.org/3.4/library/turtle.html#turtle.radians
turtle pendown	A							https://docs.python.org			<pre><code>
turtle.pendown()</code></pre><br>Pull the pen down – drawing when moving.	https://docs.python.org/3.4/library/turtle.html#turtle.pendown
turtle penup	A							https://docs.python.org			<pre><code>
turtle.penup()</code></pre><br>Pull the pen up – no drawing when moving.	https://docs.python.org/3.4/library/turtle.html#turtle.penup
turtle pensize	A							https://docs.python.org			<pre><code>
turtle.pensize(width=None)</code></pre><br>Set the line thickness to width or return it. If resizemode is set to “auto” and turtleshape is a polygon, that polygon is drawn with the same line thickness. If no argument is given, the current pensize is returned.	https://docs.python.org/3.4/library/turtle.html#turtle.pensize
turtle pen	A							https://docs.python.org			<pre><code>
turtle.pen(pen=None, **pendict)</code></pre><br>Return or set the pen’s attributes in a “pen-dictionary” with the following key/value pairs:	https://docs.python.org/3.4/library/turtle.html#turtle.pen
turtle isdown	A							https://docs.python.org			<pre><code>
turtle.isdown()</code></pre><br>Return True if pen is down, False if it’s up.	https://docs.python.org/3.4/library/turtle.html#turtle.isdown
turtle pencolor	A							https://docs.python.org			<pre><code>
turtle.pencolor(*args)</code></pre><br>Return or set the pencolor.	https://docs.python.org/3.4/library/turtle.html#turtle.pencolor
turtle fillcolor	A							https://docs.python.org			<pre><code>
turtle.fillcolor(*args)</code></pre><br>Return or set the fillcolor.	https://docs.python.org/3.4/library/turtle.html#turtle.fillcolor
turtle color	A							https://docs.python.org			<pre><code>
turtle.color(*args)</code></pre><br>Return or set pencolor and fillcolor.	https://docs.python.org/3.4/library/turtle.html#turtle.color
turtle filling	A							https://docs.python.org			<pre><code>
turtle.filling()</code></pre><br>Return fillstate (True if filling, False else).	https://docs.python.org/3.4/library/turtle.html#turtle.filling
turtle begin_fill	A							https://docs.python.org			<pre><code>
turtle.begin_fill()</code></pre><br>To be called just before drawing a shape to be filled.	https://docs.python.org/3.4/library/turtle.html#turtle.begin_fill
turtle end_fill	A							https://docs.python.org			<pre><code>
turtle.end_fill()</code></pre><br>Fill the shape drawn after the last call to begin_fill().	https://docs.python.org/3.4/library/turtle.html#turtle.end_fill
turtle reset	A							https://docs.python.org			<pre><code>
turtle.reset()</code></pre><br>Delete the turtle’s drawings from the screen, re-center the turtle and set variables to the default values.	https://docs.python.org/3.4/library/turtle.html#turtle.reset
turtle clear	A							https://docs.python.org			<pre><code>
turtle.clear()</code></pre><br>Delete the turtle’s drawings from the screen. Do not move turtle. State and position of the turtle as well as drawings of other turtles are not affected.	https://docs.python.org/3.4/library/turtle.html#turtle.clear
turtle write	A							https://docs.python.org			<pre><code>
turtle.write(arg, move=False, align="left", font=("Arial", 8, "normal"))</code></pre><br>Write text - the string representation of arg - at the current turtle position according to align (“left”, “center” or right”) and with the given font. If move is true, the pen is moved to the bottom-right corner of the text. By default, move is False.	https://docs.python.org/3.4/library/turtle.html#turtle.write
turtle hideturtle	A							https://docs.python.org			<pre><code>
turtle.hideturtle()</code></pre><br>Make the turtle invisible. It’s a good idea to do this while you’re in the middle of doing some complex drawing, because hiding the turtle speeds up the drawing observably.	https://docs.python.org/3.4/library/turtle.html#turtle.hideturtle
turtle showturtle	A							https://docs.python.org			<pre><code>
turtle.showturtle()</code></pre><br>Make the turtle visible.	https://docs.python.org/3.4/library/turtle.html#turtle.showturtle
turtle isvisible	A							https://docs.python.org			<pre><code>
turtle.isvisible()</code></pre><br>Return True if the Turtle is shown, False if it’s hidden.	https://docs.python.org/3.4/library/turtle.html#turtle.isvisible
turtle shape	A							https://docs.python.org			<pre><code>
turtle.shape(name=None)</code></pre><br>Set turtle shape to shape with given name or, if name is not given, return name of current shape. Shape with name must exist in the TurtleScreen’s shape dictionary. Initially there are the following polygon shapes: “arrow”, “turtle”, “circle”, “square”, “triangle”, “classic”. To learn about how to deal with shapes see Screen method register_shape().	https://docs.python.org/3.4/library/turtle.html#turtle.shape
turtle resizemode	A							https://docs.python.org			<pre><code>
turtle.resizemode(rmode=None)</code></pre><br>Set resizemode to one of the values: “auto”, “user”, “noresize”. If rmode is not given, return current resizemode. Different resizemodes have the following effects:	https://docs.python.org/3.4/library/turtle.html#turtle.resizemode
turtle shapesize	A							https://docs.python.org			<pre><code>
turtle.shapesize(stretch_wid=None, stretch_len=None, outline=None)</code></pre><br>Return or set the pen’s attributes x/y-stretchfactors and/or outline. Set resizemode to “user”. If and only if resizemode is set to “user”, the turtle will be displayed stretched according to its stretchfactors: stretch_wid is stretchfactor perpendicular to its orientation, stretch_len is stretchfactor in direction of its orientation, outline determines the width of the shapes’s outline.	https://docs.python.org/3.4/library/turtle.html#turtle.shapesize
turtle shearfactor	A							https://docs.python.org			<pre><code>
turtle.shearfactor(shear=None)</code></pre><br>Set or return the current shearfactor. Shear the turtleshape according to the given shearfactor shear, which is the tangent of the shear angle. Do not change the turtle’s heading (direction of movement). If shear is not given: return the current shearfactor, i. e. the tangent of the shear angle, by which lines parallel to the heading of the turtle are sheared.	https://docs.python.org/3.4/library/turtle.html#turtle.shearfactor
turtle tilt	A							https://docs.python.org			<pre><code>
turtle.tilt(angle)</code></pre><br>Rotate the turtleshape by angle from its current tilt-angle, but do not change the turtle’s heading (direction of movement).	https://docs.python.org/3.4/library/turtle.html#turtle.tilt
turtle settiltangle	A							https://docs.python.org			<pre><code>
turtle.settiltangle(angle)</code></pre><br>Rotate the turtleshape to point in the direction specified by angle, regardless of its current tilt-angle. Do not change the turtle’s heading (direction of movement).	https://docs.python.org/3.4/library/turtle.html#turtle.settiltangle
turtle tiltangle	A							https://docs.python.org			<pre><code>
turtle.tiltangle(angle=None)</code></pre><br>Set or return the current tilt-angle. If angle is given, rotate the turtleshape to point in the direction specified by angle, regardless of its current tilt-angle. Do not change the turtle’s heading (direction of movement). If angle is not given: return the current tilt-angle, i. e. the angle between the orientation of the turtleshape and the heading of the turtle (its direction of movement).	https://docs.python.org/3.4/library/turtle.html#turtle.tiltangle
turtle shapetransform	A							https://docs.python.org			<pre><code>
turtle.shapetransform(t11=None, t12=None, t21=None, t22=None)</code></pre><br>Set or return the current transformation matrix of the turtle shape.	https://docs.python.org/3.4/library/turtle.html#turtle.shapetransform
turtle get_shapepoly	A							https://docs.python.org			<pre><code>
turtle.get_shapepoly()</code></pre><br>Return the current shape polygon as tuple of coordinate pairs. This can be used to define a new shape or components of a compound shape.	https://docs.python.org/3.4/library/turtle.html#turtle.get_shapepoly
turtle onclick	A							https://docs.python.org			<pre><code>
turtle.onclick(fun, btn=1, add=None)</code></pre><br>Bind fun to mouse-click events on this turtle. If fun is None, existing bindings are removed. Example for the anonymous turtle, i.e. the procedural way:	https://docs.python.org/3.4/library/turtle.html#turtle.onclick
turtle onrelease	A							https://docs.python.org			<pre><code>
turtle.onrelease(fun, btn=1, add=None)</code></pre><br>Bind fun to mouse-button-release events on this turtle. If fun is None, existing bindings are removed.	https://docs.python.org/3.4/library/turtle.html#turtle.onrelease
turtle ondrag	A							https://docs.python.org			<pre><code>
turtle.ondrag(fun, btn=1, add=None)</code></pre><br>Bind fun to mouse-move events on this turtle. If fun is None, existing bindings are removed.	https://docs.python.org/3.4/library/turtle.html#turtle.ondrag
turtle begin_poly	A							https://docs.python.org			<pre><code>
turtle.begin_poly()</code></pre><br>Start recording the vertices of a polygon. Current turtle position is first vertex of polygon.	https://docs.python.org/3.4/library/turtle.html#turtle.begin_poly
turtle end_poly	A							https://docs.python.org			<pre><code>
turtle.end_poly()</code></pre><br>Stop recording the vertices of a polygon. Current turtle position is last vertex of polygon. This will be connected with the first vertex.	https://docs.python.org/3.4/library/turtle.html#turtle.end_poly
turtle get_poly	A							https://docs.python.org			<pre><code>
turtle.get_poly()</code></pre><br>Return the last recorded polygon.	https://docs.python.org/3.4/library/turtle.html#turtle.get_poly
turtle clone	A							https://docs.python.org			<pre><code>
turtle.clone()</code></pre><br>Create and return a clone of the turtle with same position, heading and turtle properties.	https://docs.python.org/3.4/library/turtle.html#turtle.clone
turtle getturtle	A							https://docs.python.org			<pre><code>
turtle.getturtle()</code></pre><br>Return the Turtle object itself. Only reasonable use: as a function to return the “anonymous turtle”:	https://docs.python.org/3.4/library/turtle.html#turtle.getturtle
turtle getscreen	A							https://docs.python.org			<pre><code>
turtle.getscreen()</code></pre><br>Return the TurtleScreen object the turtle is drawing on. TurtleScreen methods can then be called for that object.	https://docs.python.org/3.4/library/turtle.html#turtle.getscreen
turtle setundobuffer	A							https://docs.python.org			<pre><code>
turtle.setundobuffer(size)</code></pre><br>Set or disable undobuffer. If size is an integer an empty undobuffer of given size is installed. size gives the maximum number of turtle actions that can be undone by the undo() method/function. If size is None, the undobuffer is disabled.	https://docs.python.org/3.4/library/turtle.html#turtle.setundobuffer
turtle undobufferentries	A							https://docs.python.org			<pre><code>
turtle.undobufferentries()</code></pre><br>Return number of entries in the undobuffer.	https://docs.python.org/3.4/library/turtle.html#turtle.undobufferentries
turtle bgcolor	A							https://docs.python.org			<pre><code>
turtle.bgcolor(*args)</code></pre><br>Set or return background color of the TurtleScreen.	https://docs.python.org/3.4/library/turtle.html#turtle.bgcolor
turtle bgpic	A							https://docs.python.org			<pre><code>
turtle.bgpic(picname=None)</code></pre><br>Set background image or return name of current backgroundimage. If picname is a filename, set the corresponding image as background. If picname is "nopic", delete background image, if present. If picname is None, return the filename of the current backgroundimage.	https://docs.python.org/3.4/library/turtle.html#turtle.bgpic
turtle clear	A							https://docs.python.org			<pre><code>
turtle.clear()</code></pre><br>Delete all drawings and all turtles from the TurtleScreen. Reset the now empty TurtleScreen to its initial state: white background, no background image, no event bindings and tracing on.	https://docs.python.org/3.4/library/turtle.html#turtle.clearscreen
turtle reset	A							https://docs.python.org			<pre><code>
turtle.reset()</code></pre><br>Reset all Turtles on the Screen to their initial state.	https://docs.python.org/3.4/library/turtle.html#turtle.resetscreen
turtle screensize	A							https://docs.python.org			<pre><code>
turtle.screensize(canvwidth=None, canvheight=None, bg=None)</code></pre><br>If no arguments are given, return current (canvaswidth, canvasheight). Else resize the canvas the turtles are drawing on. Do not alter the drawing window. To observe hidden parts of the canvas, use the scrollbars. With this method, one can make visible those parts of a drawing which were outside the canvas before.	https://docs.python.org/3.4/library/turtle.html#turtle.screensize
turtle setworldcoordinates	A							https://docs.python.org			<pre><code>
turtle.setworldcoordinates(llx, lly, urx, ury)</code></pre><br>Set up user-defined coordinate system and switch to mode “world” if necessary. This performs a screen.reset(). If mode “world” is already active, all drawings are redrawn according to the new coordinates.	https://docs.python.org/3.4/library/turtle.html#turtle.setworldcoordinates
turtle delay	A							https://docs.python.org			<pre><code>
turtle.delay(delay=None)</code></pre><br>Set or return the drawing delay in milliseconds. (This is approximately the time interval between two consecutive canvas updates.) The longer the drawing delay, the slower the animation.	https://docs.python.org/3.4/library/turtle.html#turtle.delay
turtle tracer	A							https://docs.python.org			<pre><code>
turtle.tracer(n=None, delay=None)</code></pre><br>Turn turtle animation on/off and set delay for update drawings. If n is given, only each n-th regular screen update is really performed. (Can be used to accelerate the drawing of complex graphics.) When called without arguments, returns the currently stored value of n. Second argument sets delay value (see delay()).	https://docs.python.org/3.4/library/turtle.html#turtle.tracer
turtle update	A							https://docs.python.org			<pre><code>
turtle.update()</code></pre><br>Perform a TurtleScreen update. To be used when tracer is turned off.	https://docs.python.org/3.4/library/turtle.html#turtle.update
turtle listen	A							https://docs.python.org			<pre><code>
turtle.listen(xdummy=None, ydummy=None)</code></pre><br>Set focus on TurtleScreen (in order to collect key-events). Dummy arguments are provided in order to be able to pass listen() to the onclick method.	https://docs.python.org/3.4/library/turtle.html#turtle.listen
turtle onkey	A							https://docs.python.org			<pre><code>
turtle.onkey(fun, key)</code></pre><br>Bind fun to key-release event of key. If fun is None, event bindings are removed. Remark: in order to be able to register key-events, TurtleScreen must have the focus. (See method listen().)	https://docs.python.org/3.4/library/turtle.html#turtle.onkey
turtle onkeypress	A							https://docs.python.org			<pre><code>
turtle.onkeypress(fun, key=None)</code></pre><br>Bind fun to key-press event of key if key is given, or to any key-press-event if no key is given. Remark: in order to be able to register key-events, TurtleScreen must have focus. (See method listen().)	https://docs.python.org/3.4/library/turtle.html#turtle.onkeypress
turtle onclick	A							https://docs.python.org			<pre><code>
turtle.onclick(fun, btn=1, add=None)</code></pre><br>Bind fun to mouse-click events on this screen. If fun is None, existing bindings are removed.	https://docs.python.org/3.4/library/turtle.html#turtle.onscreenclick
turtle ontimer	A							https://docs.python.org			<pre><code>
turtle.ontimer(fun, t=0)</code></pre><br>Install a timer that calls fun after t milliseconds.	https://docs.python.org/3.4/library/turtle.html#turtle.ontimer
turtle mainloop	A							https://docs.python.org			<pre><code>
turtle.mainloop()</code></pre><br>Starts event loop - calling Tkinter’s mainloop function. Must be the last statement in a turtle graphics program. Must not be used if a script is run from within IDLE in -n mode (No subprocess) - for interactive use of turtle graphics.	https://docs.python.org/3.4/library/turtle.html#turtle.mainloop
turtle textinput	A							https://docs.python.org			<pre><code>
turtle.textinput(title, prompt)</code></pre><br>Pop up a dialog window for input of a string. Parameter title is the title of the dialog window, propmt is a text mostly describing what information to input. Return the string input. If the dialog is canceled, return None.	https://docs.python.org/3.4/library/turtle.html#turtle.textinput
turtle numinput	A							https://docs.python.org			<pre><code>
turtle.numinput(title, prompt, default=None, minval=None, maxval=None)</code></pre><br>Pop up a dialog window for input of a number. title is the title of the dialog window, prompt is a text mostly describing what numerical information to input. default: default value, minval: minimum value for input, maxval: maximum value for input The number input must be in the range minval .. maxval if these are given. If not, a hint is issued and the dialog remains open for correction. Return the number input. If the dialog is canceled, return None.	https://docs.python.org/3.4/library/turtle.html#turtle.numinput
turtle mode	A							https://docs.python.org			<pre><code>
turtle.mode(mode=None)</code></pre><br>Set turtle mode (“standard”, “logo” or “world”) and perform reset. If mode is not given, current mode is returned.	https://docs.python.org/3.4/library/turtle.html#turtle.mode
turtle colormode	A							https://docs.python.org			<pre><code>
turtle.colormode(cmode=None)</code></pre><br>Return the colormode or set it to 1.0 or 255. Subsequently r, g, b values of color triples have to be in the range 0..cmode.	https://docs.python.org/3.4/library/turtle.html#turtle.colormode
turtle getcanvas	A							https://docs.python.org			<pre><code>
turtle.getcanvas()</code></pre><br>Return the Canvas of this TurtleScreen. Useful for insiders who know what to do with a Tkinter Canvas.	https://docs.python.org/3.4/library/turtle.html#turtle.getcanvas
turtle getshapes	A							https://docs.python.org			<pre><code>
turtle.getshapes()</code></pre><br>Return a list of names of all currently available turtle shapes.	https://docs.python.org/3.4/library/turtle.html#turtle.getshapes
turtle register_shape	A							https://docs.python.org			<pre><code>
turtle.register_shape(name, shape=None)</code></pre><br>There are three different ways to call this function:	https://docs.python.org/3.4/library/turtle.html#turtle.register_shape
turtle turtles	A							https://docs.python.org			<pre><code>
turtle.turtles()</code></pre><br>Return the list of turtles on the screen.	https://docs.python.org/3.4/library/turtle.html#turtle.turtles
turtle window_height	A							https://docs.python.org			<pre><code>
turtle.window_height()</code></pre><br>Return the height of the turtle window.	https://docs.python.org/3.4/library/turtle.html#turtle.window_height
turtle window_width	A							https://docs.python.org			<pre><code>
turtle.window_width()</code></pre><br>Return the width of the turtle window.	https://docs.python.org/3.4/library/turtle.html#turtle.window_width
turtle bye	A							https://docs.python.org			<pre><code>
turtle.bye()</code></pre><br>Shut the turtlegraphics window.	https://docs.python.org/3.4/library/turtle.html#turtle.bye
turtle exitonclick	A							https://docs.python.org			<pre><code>
turtle.exitonclick()</code></pre><br>Bind bye() method to mouse clicks on the Screen.	https://docs.python.org/3.4/library/turtle.html#turtle.exitonclick
turtle setup	A							https://docs.python.org			<pre><code>
turtle.setup(width=_CFG["width"], height=_CFG["height"], startx=_CFG["leftright"], starty=_CFG["topbottom"])</code></pre><br>Set the size and position of the main window. Default values of arguments are stored in the configuration dictionary and can be changed via a turtle.cfg file.	https://docs.python.org/3.4/library/turtle.html#turtle.setup
turtle title	A							https://docs.python.org			<pre><code>
turtle.title(titlestring)</code></pre><br>Set title of turtle window to titlestring.	https://docs.python.org/3.4/library/turtle.html#turtle.title
turtle write_docstringdict	A							https://docs.python.org			<pre><code>
turtle.write_docstringdict(filename="turtle_docstringdict")</code></pre><br>Create and write docstring-dictionary to a Python script with the given filename. This function has to be called explicitly (it is not used by the turtle graphics classes). The docstring dictionary will be written to the Python script filename.py. It is intended to serve as a template for translation of the docstrings into different languages.	https://docs.python.org/3.4/library/turtle.html#turtle.write_docstringdict
turtle forward	A							https://docs.python.org			<pre><code>
turtle.forward(distance)</code></pre><br>Move the turtle forward by the specified distance, in the direction the turtle is headed.	https://docs.python.org/3.4/library/turtle.html#turtle.forward
turtle back	A							https://docs.python.org			<pre><code>
turtle.back(distance)</code></pre><br>Move the turtle backward by distance, opposite to the direction the turtle is headed. Do not change the turtle’s heading.	https://docs.python.org/3.4/library/turtle.html#turtle.back
turtle right	A							https://docs.python.org			<pre><code>
turtle.right(angle)</code></pre><br>Turn turtle right by angle units. (Units are by default degrees, but can be set via the degrees() and radians() functions.) Angle orientation depends on the turtle mode, see mode().	https://docs.python.org/3.4/library/turtle.html#turtle.right
turtle left	A							https://docs.python.org			<pre><code>
turtle.left(angle)</code></pre><br>Turn turtle left by angle units. (Units are by default degrees, but can be set via the degrees() and radians() functions.) Angle orientation depends on the turtle mode, see mode().	https://docs.python.org/3.4/library/turtle.html#turtle.left
turtle goto	A							https://docs.python.org			<pre><code>
turtle.goto(x, y=None)</code></pre><br>If y is None, x must be a pair of coordinates or a Vec2D (e.g. as returned by pos()).	https://docs.python.org/3.4/library/turtle.html#turtle.goto
turtle setx	A							https://docs.python.org			<pre><code>
turtle.setx(x)</code></pre><br>Set the turtle’s first coordinate to x, leave second coordinate unchanged.	https://docs.python.org/3.4/library/turtle.html#turtle.setx
turtle sety	A							https://docs.python.org			<pre><code>
turtle.sety(y)</code></pre><br>Set the turtle’s second coordinate to y, leave first coordinate unchanged.	https://docs.python.org/3.4/library/turtle.html#turtle.sety
turtle setheading	A							https://docs.python.org			<pre><code>
turtle.setheading(to_angle)</code></pre><br>Set the orientation of the turtle to to_angle. Here are some common directions in degrees:	https://docs.python.org/3.4/library/turtle.html#turtle.setheading
turtle home	A							https://docs.python.org			<pre><code>
turtle.home()</code></pre><br>Move turtle to the origin – coordinates (0,0) – and set its heading to its start-orientation (which depends on the mode, see mode()).	https://docs.python.org/3.4/library/turtle.html#turtle.home
turtle circle	A							https://docs.python.org			<pre><code>
turtle.circle(radius, extent=None, steps=None)</code></pre><br>Draw a circle with given radius. The center is radius units left of the turtle; extent – an angle – determines which part of the circle is drawn. If extent is not given, draw the entire circle. If extent is not a full circle, one endpoint of the arc is the current pen position. Draw the arc in counterclockwise direction if radius is positive, otherwise in clockwise direction. Finally the direction of the turtle is changed by the amount of extent.	https://docs.python.org/3.4/library/turtle.html#turtle.circle
turtle dot	A							https://docs.python.org			<pre><code>
turtle.dot(size=None, *color)</code></pre><br>Draw a circular dot with diameter size, using color. If size is not given, the maximum of pensize+4 and 2*pensize is used.	https://docs.python.org/3.4/library/turtle.html#turtle.dot
turtle stamp	A							https://docs.python.org			<pre><code>
turtle.stamp()</code></pre><br>Stamp a copy of the turtle shape onto the canvas at the current turtle position. Return a stamp_id for that stamp, which can be used to delete it by calling clearstamp(stamp_id).	https://docs.python.org/3.4/library/turtle.html#turtle.stamp
turtle clearstamp	A							https://docs.python.org			<pre><code>
turtle.clearstamp(stampid)</code></pre><br>Delete stamp with given stampid.	https://docs.python.org/3.4/library/turtle.html#turtle.clearstamp
turtle clearstamps	A							https://docs.python.org			<pre><code>
turtle.clearstamps(n=None)</code></pre><br>Delete all or first/last n of turtle’s stamps. If n is None, delete all stamps, if n > 0 delete first n stamps, else if n < 0 delete last n stamps.	https://docs.python.org/3.4/library/turtle.html#turtle.clearstamps
turtle undo	A							https://docs.python.org			<pre><code>
turtle.undo()</code></pre><br>Undo (repeatedly) the last turtle action(s). Number of available undo actions is determined by the size of the undobuffer.	https://docs.python.org/3.4/library/turtle.html#turtle.undo
turtle speed	A							https://docs.python.org			<pre><code>
turtle.speed(speed=None)</code></pre><br>Set the turtle’s speed to an integer value in the range 0..10. If no argument is given, return current speed.	https://docs.python.org/3.4/library/turtle.html#turtle.speed
turtle position	A							https://docs.python.org			<pre><code>
turtle.position()</code></pre><br>Return the turtle’s current location (x,y) (as a Vec2D vector).	https://docs.python.org/3.4/library/turtle.html#turtle.position
turtle towards	A							https://docs.python.org			<pre><code>
turtle.towards(x, y=None)</code></pre><br>Return the angle between the line from turtle position to position specified by (x,y), the vector or the other turtle. This depends on the turtle’s start orientation which depends on the mode - “standard”/”world” or “logo”).	https://docs.python.org/3.4/library/turtle.html#turtle.towards
turtle xcor	A							https://docs.python.org			<pre><code>
turtle.xcor()</code></pre><br>Return the turtle’s x coordinate.	https://docs.python.org/3.4/library/turtle.html#turtle.xcor
turtle ycor	A							https://docs.python.org			<pre><code>
turtle.ycor()</code></pre><br>Return the turtle’s y coordinate.	https://docs.python.org/3.4/library/turtle.html#turtle.ycor
turtle heading	A							https://docs.python.org			<pre><code>
turtle.heading()</code></pre><br>Return the turtle’s current heading (value depends on the turtle mode, see mode()).	https://docs.python.org/3.4/library/turtle.html#turtle.heading
turtle distance	A							https://docs.python.org			<pre><code>
turtle.distance(x, y=None)</code></pre><br>Return the distance from the turtle to (x,y), the given vector, or the given other turtle, in turtle step units.	https://docs.python.org/3.4/library/turtle.html#turtle.distance
turtle degrees	A							https://docs.python.org			<pre><code>
turtle.degrees(fullcircle=360.0)</code></pre><br>Set angle measurement units, i.e. set number of “degrees” for a full circle. Default value is 360 degrees.	https://docs.python.org/3.4/library/turtle.html#turtle.degrees
turtle radians	A							https://docs.python.org			<pre><code>
turtle.radians()</code></pre><br>Set the angle measurement units to radians. Equivalent to degrees(2*math.pi).	https://docs.python.org/3.4/library/turtle.html#turtle.radians
turtle pendown	A							https://docs.python.org			<pre><code>
turtle.pendown()</code></pre><br>Pull the pen down – drawing when moving.	https://docs.python.org/3.4/library/turtle.html#turtle.pendown
turtle penup	A							https://docs.python.org			<pre><code>
turtle.penup()</code></pre><br>Pull the pen up – no drawing when moving.	https://docs.python.org/3.4/library/turtle.html#turtle.penup
turtle pensize	A							https://docs.python.org			<pre><code>
turtle.pensize(width=None)</code></pre><br>Set the line thickness to width or return it. If resizemode is set to “auto” and turtleshape is a polygon, that polygon is drawn with the same line thickness. If no argument is given, the current pensize is returned.	https://docs.python.org/3.4/library/turtle.html#turtle.pensize
turtle pen	A							https://docs.python.org			<pre><code>
turtle.pen(pen=None, **pendict)</code></pre><br>Return or set the pen’s attributes in a “pen-dictionary” with the following key/value pairs:	https://docs.python.org/3.4/library/turtle.html#turtle.pen
turtle isdown	A							https://docs.python.org			<pre><code>
turtle.isdown()</code></pre><br>Return True if pen is down, False if it’s up.	https://docs.python.org/3.4/library/turtle.html#turtle.isdown
turtle pencolor	A							https://docs.python.org			<pre><code>
turtle.pencolor(*args)</code></pre><br>Return or set the pencolor.	https://docs.python.org/3.4/library/turtle.html#turtle.pencolor
turtle fillcolor	A							https://docs.python.org			<pre><code>
turtle.fillcolor(*args)</code></pre><br>Return or set the fillcolor.	https://docs.python.org/3.4/library/turtle.html#turtle.fillcolor
turtle color	A							https://docs.python.org			<pre><code>
turtle.color(*args)</code></pre><br>Return or set pencolor and fillcolor.	https://docs.python.org/3.4/library/turtle.html#turtle.color
turtle filling	A							https://docs.python.org			<pre><code>
turtle.filling()</code></pre><br>Return fillstate (True if filling, False else).	https://docs.python.org/3.4/library/turtle.html#turtle.filling
turtle begin_fill	A							https://docs.python.org			<pre><code>
turtle.begin_fill()</code></pre><br>To be called just before drawing a shape to be filled.	https://docs.python.org/3.4/library/turtle.html#turtle.begin_fill
turtle end_fill	A							https://docs.python.org			<pre><code>
turtle.end_fill()</code></pre><br>Fill the shape drawn after the last call to begin_fill().	https://docs.python.org/3.4/library/turtle.html#turtle.end_fill
turtle reset	A							https://docs.python.org			<pre><code>
turtle.reset()</code></pre><br>Delete the turtle’s drawings from the screen, re-center the turtle and set variables to the default values.	https://docs.python.org/3.4/library/turtle.html#turtle.reset
turtle clear	A							https://docs.python.org			<pre><code>
turtle.clear()</code></pre><br>Delete the turtle’s drawings from the screen. Do not move turtle. State and position of the turtle as well as drawings of other turtles are not affected.	https://docs.python.org/3.4/library/turtle.html#turtle.clear
turtle write	A							https://docs.python.org			<pre><code>
turtle.write(arg, move=False, align="left", font=("Arial", 8, "normal"))</code></pre><br>Write text - the string representation of arg - at the current turtle position according to align (“left”, “center” or right”) and with the given font. If move is true, the pen is moved to the bottom-right corner of the text. By default, move is False.	https://docs.python.org/3.4/library/turtle.html#turtle.write
turtle hideturtle	A							https://docs.python.org			<pre><code>
turtle.hideturtle()</code></pre><br>Make the turtle invisible. It’s a good idea to do this while you’re in the middle of doing some complex drawing, because hiding the turtle speeds up the drawing observably.	https://docs.python.org/3.4/library/turtle.html#turtle.hideturtle
turtle showturtle	A							https://docs.python.org			<pre><code>
turtle.showturtle()</code></pre><br>Make the turtle visible.	https://docs.python.org/3.4/library/turtle.html#turtle.showturtle
turtle isvisible	A							https://docs.python.org			<pre><code>
turtle.isvisible()</code></pre><br>Return True if the Turtle is shown, False if it’s hidden.	https://docs.python.org/3.4/library/turtle.html#turtle.isvisible
turtle shape	A							https://docs.python.org			<pre><code>
turtle.shape(name=None)</code></pre><br>Set turtle shape to shape with given name or, if name is not given, return name of current shape. Shape with name must exist in the TurtleScreen’s shape dictionary. Initially there are the following polygon shapes: “arrow”, “turtle”, “circle”, “square”, “triangle”, “classic”. To learn about how to deal with shapes see Screen method register_shape().	https://docs.python.org/3.4/library/turtle.html#turtle.shape
turtle resizemode	A							https://docs.python.org			<pre><code>
turtle.resizemode(rmode=None)</code></pre><br>Set resizemode to one of the values: “auto”, “user”, “noresize”. If rmode is not given, return current resizemode. Different resizemodes have the following effects:	https://docs.python.org/3.4/library/turtle.html#turtle.resizemode
turtle shapesize	A							https://docs.python.org			<pre><code>
turtle.shapesize(stretch_wid=None, stretch_len=None, outline=None)</code></pre><br>Return or set the pen’s attributes x/y-stretchfactors and/or outline. Set resizemode to “user”. If and only if resizemode is set to “user”, the turtle will be displayed stretched according to its stretchfactors: stretch_wid is stretchfactor perpendicular to its orientation, stretch_len is stretchfactor in direction of its orientation, outline determines the width of the shapes’s outline.	https://docs.python.org/3.4/library/turtle.html#turtle.shapesize
turtle shearfactor	A							https://docs.python.org			<pre><code>
turtle.shearfactor(shear=None)</code></pre><br>Set or return the current shearfactor. Shear the turtleshape according to the given shearfactor shear, which is the tangent of the shear angle. Do not change the turtle’s heading (direction of movement). If shear is not given: return the current shearfactor, i. e. the tangent of the shear angle, by which lines parallel to the heading of the turtle are sheared.	https://docs.python.org/3.4/library/turtle.html#turtle.shearfactor
turtle tilt	A							https://docs.python.org			<pre><code>
turtle.tilt(angle)</code></pre><br>Rotate the turtleshape by angle from its current tilt-angle, but do not change the turtle’s heading (direction of movement).	https://docs.python.org/3.4/library/turtle.html#turtle.tilt
turtle settiltangle	A							https://docs.python.org			<pre><code>
turtle.settiltangle(angle)</code></pre><br>Rotate the turtleshape to point in the direction specified by angle, regardless of its current tilt-angle. Do not change the turtle’s heading (direction of movement).	https://docs.python.org/3.4/library/turtle.html#turtle.settiltangle
turtle tiltangle	A							https://docs.python.org			<pre><code>
turtle.tiltangle(angle=None)</code></pre><br>Set or return the current tilt-angle. If angle is given, rotate the turtleshape to point in the direction specified by angle, regardless of its current tilt-angle. Do not change the turtle’s heading (direction of movement). If angle is not given: return the current tilt-angle, i. e. the angle between the orientation of the turtleshape and the heading of the turtle (its direction of movement).	https://docs.python.org/3.4/library/turtle.html#turtle.tiltangle
turtle shapetransform	A							https://docs.python.org			<pre><code>
turtle.shapetransform(t11=None, t12=None, t21=None, t22=None)</code></pre><br>Set or return the current transformation matrix of the turtle shape.	https://docs.python.org/3.4/library/turtle.html#turtle.shapetransform
turtle get_shapepoly	A							https://docs.python.org			<pre><code>
turtle.get_shapepoly()</code></pre><br>Return the current shape polygon as tuple of coordinate pairs. This can be used to define a new shape or components of a compound shape.	https://docs.python.org/3.4/library/turtle.html#turtle.get_shapepoly
turtle onclick	A							https://docs.python.org			<pre><code>
turtle.onclick(fun, btn=1, add=None)</code></pre><br>Bind fun to mouse-click events on this turtle. If fun is None, existing bindings are removed. Example for the anonymous turtle, i.e. the procedural way:	https://docs.python.org/3.4/library/turtle.html#turtle.onclick
turtle onrelease	A							https://docs.python.org			<pre><code>
turtle.onrelease(fun, btn=1, add=None)</code></pre><br>Bind fun to mouse-button-release events on this turtle. If fun is None, existing bindings are removed.	https://docs.python.org/3.4/library/turtle.html#turtle.onrelease
turtle ondrag	A							https://docs.python.org			<pre><code>
turtle.ondrag(fun, btn=1, add=None)</code></pre><br>Bind fun to mouse-move events on this turtle. If fun is None, existing bindings are removed.	https://docs.python.org/3.4/library/turtle.html#turtle.ondrag
turtle begin_poly	A							https://docs.python.org			<pre><code>
turtle.begin_poly()</code></pre><br>Start recording the vertices of a polygon. Current turtle position is first vertex of polygon.	https://docs.python.org/3.4/library/turtle.html#turtle.begin_poly
turtle end_poly	A							https://docs.python.org			<pre><code>
turtle.end_poly()</code></pre><br>Stop recording the vertices of a polygon. Current turtle position is last vertex of polygon. This will be connected with the first vertex.	https://docs.python.org/3.4/library/turtle.html#turtle.end_poly
turtle get_poly	A							https://docs.python.org			<pre><code>
turtle.get_poly()</code></pre><br>Return the last recorded polygon.	https://docs.python.org/3.4/library/turtle.html#turtle.get_poly
turtle clone	A							https://docs.python.org			<pre><code>
turtle.clone()</code></pre><br>Create and return a clone of the turtle with same position, heading and turtle properties.	https://docs.python.org/3.4/library/turtle.html#turtle.clone
turtle getturtle	A							https://docs.python.org			<pre><code>
turtle.getturtle()</code></pre><br>Return the Turtle object itself. Only reasonable use: as a function to return the “anonymous turtle”:	https://docs.python.org/3.4/library/turtle.html#turtle.getturtle
turtle getscreen	A							https://docs.python.org			<pre><code>
turtle.getscreen()</code></pre><br>Return the TurtleScreen object the turtle is drawing on. TurtleScreen methods can then be called for that object.	https://docs.python.org/3.4/library/turtle.html#turtle.getscreen
turtle setundobuffer	A							https://docs.python.org			<pre><code>
turtle.setundobuffer(size)</code></pre><br>Set or disable undobuffer. If size is an integer an empty undobuffer of given size is installed. size gives the maximum number of turtle actions that can be undone by the undo() method/function. If size is None, the undobuffer is disabled.	https://docs.python.org/3.4/library/turtle.html#turtle.setundobuffer
turtle undobufferentries	A							https://docs.python.org			<pre><code>
turtle.undobufferentries()</code></pre><br>Return number of entries in the undobuffer.	https://docs.python.org/3.4/library/turtle.html#turtle.undobufferentries
turtle forward	A							https://docs.python.org			<pre><code>
turtle.forward(distance)</code></pre><br>Move the turtle forward by the specified distance, in the direction the turtle is headed.	https://docs.python.org/3.4/library/turtle.html#turtle.forward
turtle back	A							https://docs.python.org			<pre><code>
turtle.back(distance)</code></pre><br>Move the turtle backward by distance, opposite to the direction the turtle is headed. Do not change the turtle’s heading.	https://docs.python.org/3.4/library/turtle.html#turtle.back
turtle right	A							https://docs.python.org			<pre><code>
turtle.right(angle)</code></pre><br>Turn turtle right by angle units. (Units are by default degrees, but can be set via the degrees() and radians() functions.) Angle orientation depends on the turtle mode, see mode().	https://docs.python.org/3.4/library/turtle.html#turtle.right
turtle left	A							https://docs.python.org			<pre><code>
turtle.left(angle)</code></pre><br>Turn turtle left by angle units. (Units are by default degrees, but can be set via the degrees() and radians() functions.) Angle orientation depends on the turtle mode, see mode().	https://docs.python.org/3.4/library/turtle.html#turtle.left
turtle goto	A							https://docs.python.org			<pre><code>
turtle.goto(x, y=None)</code></pre><br>If y is None, x must be a pair of coordinates or a Vec2D (e.g. as returned by pos()).	https://docs.python.org/3.4/library/turtle.html#turtle.goto
turtle setx	A							https://docs.python.org			<pre><code>
turtle.setx(x)</code></pre><br>Set the turtle’s first coordinate to x, leave second coordinate unchanged.	https://docs.python.org/3.4/library/turtle.html#turtle.setx
turtle sety	A							https://docs.python.org			<pre><code>
turtle.sety(y)</code></pre><br>Set the turtle’s second coordinate to y, leave first coordinate unchanged.	https://docs.python.org/3.4/library/turtle.html#turtle.sety
turtle setheading	A							https://docs.python.org			<pre><code>
turtle.setheading(to_angle)</code></pre><br>Set the orientation of the turtle to to_angle. Here are some common directions in degrees:	https://docs.python.org/3.4/library/turtle.html#turtle.setheading
turtle home	A							https://docs.python.org			<pre><code>
turtle.home()</code></pre><br>Move turtle to the origin – coordinates (0,0) – and set its heading to its start-orientation (which depends on the mode, see mode()).	https://docs.python.org/3.4/library/turtle.html#turtle.home
turtle circle	A							https://docs.python.org			<pre><code>
turtle.circle(radius, extent=None, steps=None)</code></pre><br>Draw a circle with given radius. The center is radius units left of the turtle; extent – an angle – determines which part of the circle is drawn. If extent is not given, draw the entire circle. If extent is not a full circle, one endpoint of the arc is the current pen position. Draw the arc in counterclockwise direction if radius is positive, otherwise in clockwise direction. Finally the direction of the turtle is changed by the amount of extent.	https://docs.python.org/3.4/library/turtle.html#turtle.circle
turtle dot	A							https://docs.python.org			<pre><code>
turtle.dot(size=None, *color)</code></pre><br>Draw a circular dot with diameter size, using color. If size is not given, the maximum of pensize+4 and 2*pensize is used.	https://docs.python.org/3.4/library/turtle.html#turtle.dot
turtle stamp	A							https://docs.python.org			<pre><code>
turtle.stamp()</code></pre><br>Stamp a copy of the turtle shape onto the canvas at the current turtle position. Return a stamp_id for that stamp, which can be used to delete it by calling clearstamp(stamp_id).	https://docs.python.org/3.4/library/turtle.html#turtle.stamp
turtle clearstamp	A							https://docs.python.org			<pre><code>
turtle.clearstamp(stampid)</code></pre><br>Delete stamp with given stampid.	https://docs.python.org/3.4/library/turtle.html#turtle.clearstamp
turtle clearstamps	A							https://docs.python.org			<pre><code>
turtle.clearstamps(n=None)</code></pre><br>Delete all or first/last n of turtle’s stamps. If n is None, delete all stamps, if n > 0 delete first n stamps, else if n < 0 delete last n stamps.	https://docs.python.org/3.4/library/turtle.html#turtle.clearstamps
turtle undo	A							https://docs.python.org			<pre><code>
turtle.undo()</code></pre><br>Undo (repeatedly) the last turtle action(s). Number of available undo actions is determined by the size of the undobuffer.	https://docs.python.org/3.4/library/turtle.html#turtle.undo
turtle speed	A							https://docs.python.org			<pre><code>
turtle.speed(speed=None)</code></pre><br>Set the turtle’s speed to an integer value in the range 0..10. If no argument is given, return current speed.	https://docs.python.org/3.4/library/turtle.html#turtle.speed
turtle position	A							https://docs.python.org			<pre><code>
turtle.position()</code></pre><br>Return the turtle’s current location (x,y) (as a Vec2D vector).	https://docs.python.org/3.4/library/turtle.html#turtle.position
turtle towards	A							https://docs.python.org			<pre><code>
turtle.towards(x, y=None)</code></pre><br>Return the angle between the line from turtle position to position specified by (x,y), the vector or the other turtle. This depends on the turtle’s start orientation which depends on the mode - “standard”/”world” or “logo”).	https://docs.python.org/3.4/library/turtle.html#turtle.towards
turtle xcor	A							https://docs.python.org			<pre><code>
turtle.xcor()</code></pre><br>Return the turtle’s x coordinate.	https://docs.python.org/3.4/library/turtle.html#turtle.xcor
turtle ycor	A							https://docs.python.org			<pre><code>
turtle.ycor()</code></pre><br>Return the turtle’s y coordinate.	https://docs.python.org/3.4/library/turtle.html#turtle.ycor
turtle heading	A							https://docs.python.org			<pre><code>
turtle.heading()</code></pre><br>Return the turtle’s current heading (value depends on the turtle mode, see mode()).	https://docs.python.org/3.4/library/turtle.html#turtle.heading
turtle distance	A							https://docs.python.org			<pre><code>
turtle.distance(x, y=None)</code></pre><br>Return the distance from the turtle to (x,y), the given vector, or the given other turtle, in turtle step units.	https://docs.python.org/3.4/library/turtle.html#turtle.distance
turtle degrees	A							https://docs.python.org			<pre><code>
turtle.degrees(fullcircle=360.0)</code></pre><br>Set angle measurement units, i.e. set number of “degrees” for a full circle. Default value is 360 degrees.	https://docs.python.org/3.4/library/turtle.html#turtle.degrees
turtle radians	A							https://docs.python.org			<pre><code>
turtle.radians()</code></pre><br>Set the angle measurement units to radians. Equivalent to degrees(2*math.pi).	https://docs.python.org/3.4/library/turtle.html#turtle.radians
turtle pendown	A							https://docs.python.org			<pre><code>
turtle.pendown()</code></pre><br>Pull the pen down – drawing when moving.	https://docs.python.org/3.4/library/turtle.html#turtle.pendown
turtle penup	A							https://docs.python.org			<pre><code>
turtle.penup()</code></pre><br>Pull the pen up – no drawing when moving.	https://docs.python.org/3.4/library/turtle.html#turtle.penup
turtle pensize	A							https://docs.python.org			<pre><code>
turtle.pensize(width=None)</code></pre><br>Set the line thickness to width or return it. If resizemode is set to “auto” and turtleshape is a polygon, that polygon is drawn with the same line thickness. If no argument is given, the current pensize is returned.	https://docs.python.org/3.4/library/turtle.html#turtle.pensize
turtle pen	A							https://docs.python.org			<pre><code>
turtle.pen(pen=None, **pendict)</code></pre><br>Return or set the pen’s attributes in a “pen-dictionary” with the following key/value pairs:	https://docs.python.org/3.4/library/turtle.html#turtle.pen
turtle isdown	A							https://docs.python.org			<pre><code>
turtle.isdown()</code></pre><br>Return True if pen is down, False if it’s up.	https://docs.python.org/3.4/library/turtle.html#turtle.isdown
turtle pencolor	A							https://docs.python.org			<pre><code>
turtle.pencolor(*args)</code></pre><br>Return or set the pencolor.	https://docs.python.org/3.4/library/turtle.html#turtle.pencolor
turtle fillcolor	A							https://docs.python.org			<pre><code>
turtle.fillcolor(*args)</code></pre><br>Return or set the fillcolor.	https://docs.python.org/3.4/library/turtle.html#turtle.fillcolor
turtle color	A							https://docs.python.org			<pre><code>
turtle.color(*args)</code></pre><br>Return or set pencolor and fillcolor.	https://docs.python.org/3.4/library/turtle.html#turtle.color
turtle filling	A							https://docs.python.org			<pre><code>
turtle.filling()</code></pre><br>Return fillstate (True if filling, False else).	https://docs.python.org/3.4/library/turtle.html#turtle.filling
turtle begin_fill	A							https://docs.python.org			<pre><code>
turtle.begin_fill()</code></pre><br>To be called just before drawing a shape to be filled.	https://docs.python.org/3.4/library/turtle.html#turtle.begin_fill
turtle end_fill	A							https://docs.python.org			<pre><code>
turtle.end_fill()</code></pre><br>Fill the shape drawn after the last call to begin_fill().	https://docs.python.org/3.4/library/turtle.html#turtle.end_fill
turtle reset	A							https://docs.python.org			<pre><code>
turtle.reset()</code></pre><br>Delete the turtle’s drawings from the screen, re-center the turtle and set variables to the default values.	https://docs.python.org/3.4/library/turtle.html#turtle.reset
turtle clear	A							https://docs.python.org			<pre><code>
turtle.clear()</code></pre><br>Delete the turtle’s drawings from the screen. Do not move turtle. State and position of the turtle as well as drawings of other turtles are not affected.	https://docs.python.org/3.4/library/turtle.html#turtle.clear
turtle write	A							https://docs.python.org			<pre><code>
turtle.write(arg, move=False, align="left", font=("Arial", 8, "normal"))</code></pre><br>Write text - the string representation of arg - at the current turtle position according to align (“left”, “center” or right”) and with the given font. If move is true, the pen is moved to the bottom-right corner of the text. By default, move is False.	https://docs.python.org/3.4/library/turtle.html#turtle.write
turtle pendown	A							https://docs.python.org			<pre><code>
turtle.pendown()</code></pre><br>Pull the pen down – drawing when moving.	https://docs.python.org/3.4/library/turtle.html#turtle.pendown
turtle penup	A							https://docs.python.org			<pre><code>
turtle.penup()</code></pre><br>Pull the pen up – no drawing when moving.	https://docs.python.org/3.4/library/turtle.html#turtle.penup
turtle pensize	A							https://docs.python.org			<pre><code>
turtle.pensize(width=None)</code></pre><br>Set the line thickness to width or return it. If resizemode is set to “auto” and turtleshape is a polygon, that polygon is drawn with the same line thickness. If no argument is given, the current pensize is returned.	https://docs.python.org/3.4/library/turtle.html#turtle.pensize
turtle pen	A							https://docs.python.org			<pre><code>
turtle.pen(pen=None, **pendict)</code></pre><br>Return or set the pen’s attributes in a “pen-dictionary” with the following key/value pairs:	https://docs.python.org/3.4/library/turtle.html#turtle.pen
turtle isdown	A							https://docs.python.org			<pre><code>
turtle.isdown()</code></pre><br>Return True if pen is down, False if it’s up.	https://docs.python.org/3.4/library/turtle.html#turtle.isdown
turtle pencolor	A							https://docs.python.org			<pre><code>
turtle.pencolor(*args)</code></pre><br>Return or set the pencolor.	https://docs.python.org/3.4/library/turtle.html#turtle.pencolor
turtle fillcolor	A							https://docs.python.org			<pre><code>
turtle.fillcolor(*args)</code></pre><br>Return or set the fillcolor.	https://docs.python.org/3.4/library/turtle.html#turtle.fillcolor
turtle color	A							https://docs.python.org			<pre><code>
turtle.color(*args)</code></pre><br>Return or set pencolor and fillcolor.	https://docs.python.org/3.4/library/turtle.html#turtle.color
turtle filling	A							https://docs.python.org			<pre><code>
turtle.filling()</code></pre><br>Return fillstate (True if filling, False else).	https://docs.python.org/3.4/library/turtle.html#turtle.filling
turtle begin_fill	A							https://docs.python.org			<pre><code>
turtle.begin_fill()</code></pre><br>To be called just before drawing a shape to be filled.	https://docs.python.org/3.4/library/turtle.html#turtle.begin_fill
turtle end_fill	A							https://docs.python.org			<pre><code>
turtle.end_fill()</code></pre><br>Fill the shape drawn after the last call to begin_fill().	https://docs.python.org/3.4/library/turtle.html#turtle.end_fill
turtle reset	A							https://docs.python.org			<pre><code>
turtle.reset()</code></pre><br>Delete the turtle’s drawings from the screen, re-center the turtle and set variables to the default values.	https://docs.python.org/3.4/library/turtle.html#turtle.reset
turtle clear	A							https://docs.python.org			<pre><code>
turtle.clear()</code></pre><br>Delete the turtle’s drawings from the screen. Do not move turtle. State and position of the turtle as well as drawings of other turtles are not affected.	https://docs.python.org/3.4/library/turtle.html#turtle.clear
turtle write	A							https://docs.python.org			<pre><code>
turtle.write(arg, move=False, align="left", font=("Arial", 8, "normal"))</code></pre><br>Write text - the string representation of arg - at the current turtle position according to align (“left”, “center” or right”) and with the given font. If move is true, the pen is moved to the bottom-right corner of the text. By default, move is False.	https://docs.python.org/3.4/library/turtle.html#turtle.write
turtle hideturtle	A							https://docs.python.org			<pre><code>
turtle.hideturtle()</code></pre><br>Make the turtle invisible. It’s a good idea to do this while you’re in the middle of doing some complex drawing, because hiding the turtle speeds up the drawing observably.	https://docs.python.org/3.4/library/turtle.html#turtle.hideturtle
turtle showturtle	A							https://docs.python.org			<pre><code>
turtle.showturtle()</code></pre><br>Make the turtle visible.	https://docs.python.org/3.4/library/turtle.html#turtle.showturtle
turtle isvisible	A							https://docs.python.org			<pre><code>
turtle.isvisible()</code></pre><br>Return True if the Turtle is shown, False if it’s hidden.	https://docs.python.org/3.4/library/turtle.html#turtle.isvisible
turtle shape	A							https://docs.python.org			<pre><code>
turtle.shape(name=None)</code></pre><br>Set turtle shape to shape with given name or, if name is not given, return name of current shape. Shape with name must exist in the TurtleScreen’s shape dictionary. Initially there are the following polygon shapes: “arrow”, “turtle”, “circle”, “square”, “triangle”, “classic”. To learn about how to deal with shapes see Screen method register_shape().	https://docs.python.org/3.4/library/turtle.html#turtle.shape
turtle resizemode	A							https://docs.python.org			<pre><code>
turtle.resizemode(rmode=None)</code></pre><br>Set resizemode to one of the values: “auto”, “user”, “noresize”. If rmode is not given, return current resizemode. Different resizemodes have the following effects:	https://docs.python.org/3.4/library/turtle.html#turtle.resizemode
turtle shapesize	A							https://docs.python.org			<pre><code>
turtle.shapesize(stretch_wid=None, stretch_len=None, outline=None)</code></pre><br>Return or set the pen’s attributes x/y-stretchfactors and/or outline. Set resizemode to “user”. If and only if resizemode is set to “user”, the turtle will be displayed stretched according to its stretchfactors: stretch_wid is stretchfactor perpendicular to its orientation, stretch_len is stretchfactor in direction of its orientation, outline determines the width of the shapes’s outline.	https://docs.python.org/3.4/library/turtle.html#turtle.shapesize
turtle shearfactor	A							https://docs.python.org			<pre><code>
turtle.shearfactor(shear=None)</code></pre><br>Set or return the current shearfactor. Shear the turtleshape according to the given shearfactor shear, which is the tangent of the shear angle. Do not change the turtle’s heading (direction of movement). If shear is not given: return the current shearfactor, i. e. the tangent of the shear angle, by which lines parallel to the heading of the turtle are sheared.	https://docs.python.org/3.4/library/turtle.html#turtle.shearfactor
turtle tilt	A							https://docs.python.org			<pre><code>
turtle.tilt(angle)</code></pre><br>Rotate the turtleshape by angle from its current tilt-angle, but do not change the turtle’s heading (direction of movement).	https://docs.python.org/3.4/library/turtle.html#turtle.tilt
turtle settiltangle	A							https://docs.python.org			<pre><code>
turtle.settiltangle(angle)</code></pre><br>Rotate the turtleshape to point in the direction specified by angle, regardless of its current tilt-angle. Do not change the turtle’s heading (direction of movement).	https://docs.python.org/3.4/library/turtle.html#turtle.settiltangle
turtle tiltangle	A							https://docs.python.org			<pre><code>
turtle.tiltangle(angle=None)</code></pre><br>Set or return the current tilt-angle. If angle is given, rotate the turtleshape to point in the direction specified by angle, regardless of its current tilt-angle. Do not change the turtle’s heading (direction of movement). If angle is not given: return the current tilt-angle, i. e. the angle between the orientation of the turtleshape and the heading of the turtle (its direction of movement).	https://docs.python.org/3.4/library/turtle.html#turtle.tiltangle
turtle shapetransform	A							https://docs.python.org			<pre><code>
turtle.shapetransform(t11=None, t12=None, t21=None, t22=None)</code></pre><br>Set or return the current transformation matrix of the turtle shape.	https://docs.python.org/3.4/library/turtle.html#turtle.shapetransform
turtle get_shapepoly	A							https://docs.python.org			<pre><code>
turtle.get_shapepoly()</code></pre><br>Return the current shape polygon as tuple of coordinate pairs. This can be used to define a new shape or components of a compound shape.	https://docs.python.org/3.4/library/turtle.html#turtle.get_shapepoly
turtle hideturtle	A							https://docs.python.org			<pre><code>
turtle.hideturtle()</code></pre><br>Make the turtle invisible. It’s a good idea to do this while you’re in the middle of doing some complex drawing, because hiding the turtle speeds up the drawing observably.	https://docs.python.org/3.4/library/turtle.html#turtle.hideturtle
turtle showturtle	A							https://docs.python.org			<pre><code>
turtle.showturtle()</code></pre><br>Make the turtle visible.	https://docs.python.org/3.4/library/turtle.html#turtle.showturtle
turtle isvisible	A							https://docs.python.org			<pre><code>
turtle.isvisible()</code></pre><br>Return True if the Turtle is shown, False if it’s hidden.	https://docs.python.org/3.4/library/turtle.html#turtle.isvisible
turtle shape	A							https://docs.python.org			<pre><code>
turtle.shape(name=None)</code></pre><br>Set turtle shape to shape with given name or, if name is not given, return name of current shape. Shape with name must exist in the TurtleScreen’s shape dictionary. Initially there are the following polygon shapes: “arrow”, “turtle”, “circle”, “square”, “triangle”, “classic”. To learn about how to deal with shapes see Screen method register_shape().	https://docs.python.org/3.4/library/turtle.html#turtle.shape
turtle resizemode	A							https://docs.python.org			<pre><code>
turtle.resizemode(rmode=None)</code></pre><br>Set resizemode to one of the values: “auto”, “user”, “noresize”. If rmode is not given, return current resizemode. Different resizemodes have the following effects:	https://docs.python.org/3.4/library/turtle.html#turtle.resizemode
turtle shapesize	A							https://docs.python.org			<pre><code>
turtle.shapesize(stretch_wid=None, stretch_len=None, outline=None)</code></pre><br>Return or set the pen’s attributes x/y-stretchfactors and/or outline. Set resizemode to “user”. If and only if resizemode is set to “user”, the turtle will be displayed stretched according to its stretchfactors: stretch_wid is stretchfactor perpendicular to its orientation, stretch_len is stretchfactor in direction of its orientation, outline determines the width of the shapes’s outline.	https://docs.python.org/3.4/library/turtle.html#turtle.shapesize
turtle shearfactor	A							https://docs.python.org			<pre><code>
turtle.shearfactor(shear=None)</code></pre><br>Set or return the current shearfactor. Shear the turtleshape according to the given shearfactor shear, which is the tangent of the shear angle. Do not change the turtle’s heading (direction of movement). If shear is not given: return the current shearfactor, i. e. the tangent of the shear angle, by which lines parallel to the heading of the turtle are sheared.	https://docs.python.org/3.4/library/turtle.html#turtle.shearfactor
turtle tilt	A							https://docs.python.org			<pre><code>
turtle.tilt(angle)</code></pre><br>Rotate the turtleshape by angle from its current tilt-angle, but do not change the turtle’s heading (direction of movement).	https://docs.python.org/3.4/library/turtle.html#turtle.tilt
turtle settiltangle	A							https://docs.python.org			<pre><code>
turtle.settiltangle(angle)</code></pre><br>Rotate the turtleshape to point in the direction specified by angle, regardless of its current tilt-angle. Do not change the turtle’s heading (direction of movement).	https://docs.python.org/3.4/library/turtle.html#turtle.settiltangle
turtle tiltangle	A							https://docs.python.org			<pre><code>
turtle.tiltangle(angle=None)</code></pre><br>Set or return the current tilt-angle. If angle is given, rotate the turtleshape to point in the direction specified by angle, regardless of its current tilt-angle. Do not change the turtle’s heading (direction of movement). If angle is not given: return the current tilt-angle, i. e. the angle between the orientation of the turtleshape and the heading of the turtle (its direction of movement).	https://docs.python.org/3.4/library/turtle.html#turtle.tiltangle
turtle shapetransform	A							https://docs.python.org			<pre><code>
turtle.shapetransform(t11=None, t12=None, t21=None, t22=None)</code></pre><br>Set or return the current transformation matrix of the turtle shape.	https://docs.python.org/3.4/library/turtle.html#turtle.shapetransform
turtle get_shapepoly	A							https://docs.python.org			<pre><code>
turtle.get_shapepoly()</code></pre><br>Return the current shape polygon as tuple of coordinate pairs. This can be used to define a new shape or components of a compound shape.	https://docs.python.org/3.4/library/turtle.html#turtle.get_shapepoly
turtle onclick	A							https://docs.python.org			<pre><code>
turtle.onclick(fun, btn=1, add=None)</code></pre><br>Bind fun to mouse-click events on this turtle. If fun is None, existing bindings are removed. Example for the anonymous turtle, i.e. the procedural way:	https://docs.python.org/3.4/library/turtle.html#turtle.onclick
turtle onrelease	A							https://docs.python.org			<pre><code>
turtle.onrelease(fun, btn=1, add=None)</code></pre><br>Bind fun to mouse-button-release events on this turtle. If fun is None, existing bindings are removed.	https://docs.python.org/3.4/library/turtle.html#turtle.onrelease
turtle ondrag	A							https://docs.python.org			<pre><code>
turtle.ondrag(fun, btn=1, add=None)</code></pre><br>Bind fun to mouse-move events on this turtle. If fun is None, existing bindings are removed.	https://docs.python.org/3.4/library/turtle.html#turtle.ondrag
turtle begin_poly	A							https://docs.python.org			<pre><code>
turtle.begin_poly()</code></pre><br>Start recording the vertices of a polygon. Current turtle position is first vertex of polygon.	https://docs.python.org/3.4/library/turtle.html#turtle.begin_poly
turtle end_poly	A							https://docs.python.org			<pre><code>
turtle.end_poly()</code></pre><br>Stop recording the vertices of a polygon. Current turtle position is last vertex of polygon. This will be connected with the first vertex.	https://docs.python.org/3.4/library/turtle.html#turtle.end_poly
turtle get_poly	A							https://docs.python.org			<pre><code>
turtle.get_poly()</code></pre><br>Return the last recorded polygon.	https://docs.python.org/3.4/library/turtle.html#turtle.get_poly
turtle clone	A							https://docs.python.org			<pre><code>
turtle.clone()</code></pre><br>Create and return a clone of the turtle with same position, heading and turtle properties.	https://docs.python.org/3.4/library/turtle.html#turtle.clone
turtle getturtle	A							https://docs.python.org			<pre><code>
turtle.getturtle()</code></pre><br>Return the Turtle object itself. Only reasonable use: as a function to return the “anonymous turtle”:	https://docs.python.org/3.4/library/turtle.html#turtle.getturtle
turtle getscreen	A							https://docs.python.org			<pre><code>
turtle.getscreen()</code></pre><br>Return the TurtleScreen object the turtle is drawing on. TurtleScreen methods can then be called for that object.	https://docs.python.org/3.4/library/turtle.html#turtle.getscreen
turtle setundobuffer	A							https://docs.python.org			<pre><code>
turtle.setundobuffer(size)</code></pre><br>Set or disable undobuffer. If size is an integer an empty undobuffer of given size is installed. size gives the maximum number of turtle actions that can be undone by the undo() method/function. If size is None, the undobuffer is disabled.	https://docs.python.org/3.4/library/turtle.html#turtle.setundobuffer
turtle undobufferentries	A							https://docs.python.org			<pre><code>
turtle.undobufferentries()</code></pre><br>Return number of entries in the undobuffer.	https://docs.python.org/3.4/library/turtle.html#turtle.undobufferentries
turtle bgcolor	A							https://docs.python.org			<pre><code>
turtle.bgcolor(*args)</code></pre><br>Set or return background color of the TurtleScreen.	https://docs.python.org/3.4/library/turtle.html#turtle.bgcolor
turtle bgpic	A							https://docs.python.org			<pre><code>
turtle.bgpic(picname=None)</code></pre><br>Set background image or return name of current backgroundimage. If picname is a filename, set the corresponding image as background. If picname is "nopic", delete background image, if present. If picname is None, return the filename of the current backgroundimage.	https://docs.python.org/3.4/library/turtle.html#turtle.bgpic
turtle clear	A							https://docs.python.org			<pre><code>
turtle.clear()</code></pre><br>Delete all drawings and all turtles from the TurtleScreen. Reset the now empty TurtleScreen to its initial state: white background, no background image, no event bindings and tracing on.	https://docs.python.org/3.4/library/turtle.html#turtle.clearscreen
turtle reset	A							https://docs.python.org			<pre><code>
turtle.reset()</code></pre><br>Reset all Turtles on the Screen to their initial state.	https://docs.python.org/3.4/library/turtle.html#turtle.resetscreen
turtle screensize	A							https://docs.python.org			<pre><code>
turtle.screensize(canvwidth=None, canvheight=None, bg=None)</code></pre><br>If no arguments are given, return current (canvaswidth, canvasheight). Else resize the canvas the turtles are drawing on. Do not alter the drawing window. To observe hidden parts of the canvas, use the scrollbars. With this method, one can make visible those parts of a drawing which were outside the canvas before.	https://docs.python.org/3.4/library/turtle.html#turtle.screensize
turtle setworldcoordinates	A							https://docs.python.org			<pre><code>
turtle.setworldcoordinates(llx, lly, urx, ury)</code></pre><br>Set up user-defined coordinate system and switch to mode “world” if necessary. This performs a screen.reset(). If mode “world” is already active, all drawings are redrawn according to the new coordinates.	https://docs.python.org/3.4/library/turtle.html#turtle.setworldcoordinates
turtle delay	A							https://docs.python.org			<pre><code>
turtle.delay(delay=None)</code></pre><br>Set or return the drawing delay in milliseconds. (This is approximately the time interval between two consecutive canvas updates.) The longer the drawing delay, the slower the animation.	https://docs.python.org/3.4/library/turtle.html#turtle.delay
turtle tracer	A							https://docs.python.org			<pre><code>
turtle.tracer(n=None, delay=None)</code></pre><br>Turn turtle animation on/off and set delay for update drawings. If n is given, only each n-th regular screen update is really performed. (Can be used to accelerate the drawing of complex graphics.) When called without arguments, returns the currently stored value of n. Second argument sets delay value (see delay()).	https://docs.python.org/3.4/library/turtle.html#turtle.tracer
turtle update	A							https://docs.python.org			<pre><code>
turtle.update()</code></pre><br>Perform a TurtleScreen update. To be used when tracer is turned off.	https://docs.python.org/3.4/library/turtle.html#turtle.update
turtle listen	A							https://docs.python.org			<pre><code>
turtle.listen(xdummy=None, ydummy=None)</code></pre><br>Set focus on TurtleScreen (in order to collect key-events). Dummy arguments are provided in order to be able to pass listen() to the onclick method.	https://docs.python.org/3.4/library/turtle.html#turtle.listen
turtle onkey	A							https://docs.python.org			<pre><code>
turtle.onkey(fun, key)</code></pre><br>Bind fun to key-release event of key. If fun is None, event bindings are removed. Remark: in order to be able to register key-events, TurtleScreen must have the focus. (See method listen().)	https://docs.python.org/3.4/library/turtle.html#turtle.onkey
turtle onkeypress	A							https://docs.python.org			<pre><code>
turtle.onkeypress(fun, key=None)</code></pre><br>Bind fun to key-press event of key if key is given, or to any key-press-event if no key is given. Remark: in order to be able to register key-events, TurtleScreen must have focus. (See method listen().)	https://docs.python.org/3.4/library/turtle.html#turtle.onkeypress
turtle onclick	A							https://docs.python.org			<pre><code>
turtle.onclick(fun, btn=1, add=None)</code></pre><br>Bind fun to mouse-click events on this screen. If fun is None, existing bindings are removed.	https://docs.python.org/3.4/library/turtle.html#turtle.onscreenclick
turtle ontimer	A							https://docs.python.org			<pre><code>
turtle.ontimer(fun, t=0)</code></pre><br>Install a timer that calls fun after t milliseconds.	https://docs.python.org/3.4/library/turtle.html#turtle.ontimer
turtle mainloop	A							https://docs.python.org			<pre><code>
turtle.mainloop()</code></pre><br>Starts event loop - calling Tkinter’s mainloop function. Must be the last statement in a turtle graphics program. Must not be used if a script is run from within IDLE in -n mode (No subprocess) - for interactive use of turtle graphics.	https://docs.python.org/3.4/library/turtle.html#turtle.mainloop
turtle textinput	A							https://docs.python.org			<pre><code>
turtle.textinput(title, prompt)</code></pre><br>Pop up a dialog window for input of a string. Parameter title is the title of the dialog window, propmt is a text mostly describing what information to input. Return the string input. If the dialog is canceled, return None.	https://docs.python.org/3.4/library/turtle.html#turtle.textinput
turtle numinput	A							https://docs.python.org			<pre><code>
turtle.numinput(title, prompt, default=None, minval=None, maxval=None)</code></pre><br>Pop up a dialog window for input of a number. title is the title of the dialog window, prompt is a text mostly describing what numerical information to input. default: default value, minval: minimum value for input, maxval: maximum value for input The number input must be in the range minval .. maxval if these are given. If not, a hint is issued and the dialog remains open for correction. Return the number input. If the dialog is canceled, return None.	https://docs.python.org/3.4/library/turtle.html#turtle.numinput
turtle mode	A							https://docs.python.org			<pre><code>
turtle.mode(mode=None)</code></pre><br>Set turtle mode (“standard”, “logo” or “world”) and perform reset. If mode is not given, current mode is returned.	https://docs.python.org/3.4/library/turtle.html#turtle.mode
turtle colormode	A							https://docs.python.org			<pre><code>
turtle.colormode(cmode=None)</code></pre><br>Return the colormode or set it to 1.0 or 255. Subsequently r, g, b values of color triples have to be in the range 0..cmode.	https://docs.python.org/3.4/library/turtle.html#turtle.colormode
turtle getcanvas	A							https://docs.python.org			<pre><code>
turtle.getcanvas()</code></pre><br>Return the Canvas of this TurtleScreen. Useful for insiders who know what to do with a Tkinter Canvas.	https://docs.python.org/3.4/library/turtle.html#turtle.getcanvas
turtle getshapes	A							https://docs.python.org			<pre><code>
turtle.getshapes()</code></pre><br>Return a list of names of all currently available turtle shapes.	https://docs.python.org/3.4/library/turtle.html#turtle.getshapes
turtle register_shape	A							https://docs.python.org			<pre><code>
turtle.register_shape(name, shape=None)</code></pre><br>There are three different ways to call this function:	https://docs.python.org/3.4/library/turtle.html#turtle.register_shape
turtle turtles	A							https://docs.python.org			<pre><code>
turtle.turtles()</code></pre><br>Return the list of turtles on the screen.	https://docs.python.org/3.4/library/turtle.html#turtle.turtles
turtle window_height	A							https://docs.python.org			<pre><code>
turtle.window_height()</code></pre><br>Return the height of the turtle window.	https://docs.python.org/3.4/library/turtle.html#turtle.window_height
turtle window_width	A							https://docs.python.org			<pre><code>
turtle.window_width()</code></pre><br>Return the width of the turtle window.	https://docs.python.org/3.4/library/turtle.html#turtle.window_width
turtle bye	A							https://docs.python.org			<pre><code>
turtle.bye()</code></pre><br>Shut the turtlegraphics window.	https://docs.python.org/3.4/library/turtle.html#turtle.bye
turtle exitonclick	A							https://docs.python.org			<pre><code>
turtle.exitonclick()</code></pre><br>Bind bye() method to mouse clicks on the Screen.	https://docs.python.org/3.4/library/turtle.html#turtle.exitonclick
turtle setup	A							https://docs.python.org			<pre><code>
turtle.setup(width=_CFG["width"], height=_CFG["height"], startx=_CFG["leftright"], starty=_CFG["topbottom"])</code></pre><br>Set the size and position of the main window. Default values of arguments are stored in the configuration dictionary and can be changed via a turtle.cfg file.	https://docs.python.org/3.4/library/turtle.html#turtle.setup
turtle title	A							https://docs.python.org			<pre><code>
turtle.title(titlestring)</code></pre><br>Set title of turtle window to titlestring.	https://docs.python.org/3.4/library/turtle.html#turtle.title
turtle bgcolor	A							https://docs.python.org			<pre><code>
turtle.bgcolor(*args)</code></pre><br>Set or return background color of the TurtleScreen.	https://docs.python.org/3.4/library/turtle.html#turtle.bgcolor
turtle bgpic	A							https://docs.python.org			<pre><code>
turtle.bgpic(picname=None)</code></pre><br>Set background image or return name of current backgroundimage. If picname is a filename, set the corresponding image as background. If picname is "nopic", delete background image, if present. If picname is None, return the filename of the current backgroundimage.	https://docs.python.org/3.4/library/turtle.html#turtle.bgpic
turtle clear	A							https://docs.python.org			<pre><code>
turtle.clear()</code></pre><br>Delete all drawings and all turtles from the TurtleScreen. Reset the now empty TurtleScreen to its initial state: white background, no background image, no event bindings and tracing on.	https://docs.python.org/3.4/library/turtle.html#turtle.clearscreen
turtle reset	A							https://docs.python.org			<pre><code>
turtle.reset()</code></pre><br>Reset all Turtles on the Screen to their initial state.	https://docs.python.org/3.4/library/turtle.html#turtle.resetscreen
turtle screensize	A							https://docs.python.org			<pre><code>
turtle.screensize(canvwidth=None, canvheight=None, bg=None)</code></pre><br>If no arguments are given, return current (canvaswidth, canvasheight). Else resize the canvas the turtles are drawing on. Do not alter the drawing window. To observe hidden parts of the canvas, use the scrollbars. With this method, one can make visible those parts of a drawing which were outside the canvas before.	https://docs.python.org/3.4/library/turtle.html#turtle.screensize
turtle setworldcoordinates	A							https://docs.python.org			<pre><code>
turtle.setworldcoordinates(llx, lly, urx, ury)</code></pre><br>Set up user-defined coordinate system and switch to mode “world” if necessary. This performs a screen.reset(). If mode “world” is already active, all drawings are redrawn according to the new coordinates.	https://docs.python.org/3.4/library/turtle.html#turtle.setworldcoordinates
turtle delay	A							https://docs.python.org			<pre><code>
turtle.delay(delay=None)</code></pre><br>Set or return the drawing delay in milliseconds. (This is approximately the time interval between two consecutive canvas updates.) The longer the drawing delay, the slower the animation.	https://docs.python.org/3.4/library/turtle.html#turtle.delay
turtle tracer	A							https://docs.python.org			<pre><code>
turtle.tracer(n=None, delay=None)</code></pre><br>Turn turtle animation on/off and set delay for update drawings. If n is given, only each n-th regular screen update is really performed. (Can be used to accelerate the drawing of complex graphics.) When called without arguments, returns the currently stored value of n. Second argument sets delay value (see delay()).	https://docs.python.org/3.4/library/turtle.html#turtle.tracer
turtle update	A							https://docs.python.org			<pre><code>
turtle.update()</code></pre><br>Perform a TurtleScreen update. To be used when tracer is turned off.	https://docs.python.org/3.4/library/turtle.html#turtle.update
turtle listen	A							https://docs.python.org			<pre><code>
turtle.listen(xdummy=None, ydummy=None)</code></pre><br>Set focus on TurtleScreen (in order to collect key-events). Dummy arguments are provided in order to be able to pass listen() to the onclick method.	https://docs.python.org/3.4/library/turtle.html#turtle.listen
turtle onkey	A							https://docs.python.org			<pre><code>
turtle.onkey(fun, key)</code></pre><br>Bind fun to key-release event of key. If fun is None, event bindings are removed. Remark: in order to be able to register key-events, TurtleScreen must have the focus. (See method listen().)	https://docs.python.org/3.4/library/turtle.html#turtle.onkey
turtle onkeypress	A							https://docs.python.org			<pre><code>
turtle.onkeypress(fun, key=None)</code></pre><br>Bind fun to key-press event of key if key is given, or to any key-press-event if no key is given. Remark: in order to be able to register key-events, TurtleScreen must have focus. (See method listen().)	https://docs.python.org/3.4/library/turtle.html#turtle.onkeypress
turtle onclick	A							https://docs.python.org			<pre><code>
turtle.onclick(fun, btn=1, add=None)</code></pre><br>Bind fun to mouse-click events on this screen. If fun is None, existing bindings are removed.	https://docs.python.org/3.4/library/turtle.html#turtle.onscreenclick
turtle ontimer	A							https://docs.python.org			<pre><code>
turtle.ontimer(fun, t=0)</code></pre><br>Install a timer that calls fun after t milliseconds.	https://docs.python.org/3.4/library/turtle.html#turtle.ontimer
turtle mainloop	A							https://docs.python.org			<pre><code>
turtle.mainloop()</code></pre><br>Starts event loop - calling Tkinter’s mainloop function. Must be the last statement in a turtle graphics program. Must not be used if a script is run from within IDLE in -n mode (No subprocess) - for interactive use of turtle graphics.	https://docs.python.org/3.4/library/turtle.html#turtle.mainloop
turtle textinput	A							https://docs.python.org			<pre><code>
turtle.textinput(title, prompt)</code></pre><br>Pop up a dialog window for input of a string. Parameter title is the title of the dialog window, propmt is a text mostly describing what information to input. Return the string input. If the dialog is canceled, return None.	https://docs.python.org/3.4/library/turtle.html#turtle.textinput
turtle numinput	A							https://docs.python.org			<pre><code>
turtle.numinput(title, prompt, default=None, minval=None, maxval=None)</code></pre><br>Pop up a dialog window for input of a number. title is the title of the dialog window, prompt is a text mostly describing what numerical information to input. default: default value, minval: minimum value for input, maxval: maximum value for input The number input must be in the range minval .. maxval if these are given. If not, a hint is issued and the dialog remains open for correction. Return the number input. If the dialog is canceled, return None.	https://docs.python.org/3.4/library/turtle.html#turtle.numinput
turtle mode	A							https://docs.python.org			<pre><code>
turtle.mode(mode=None)</code></pre><br>Set turtle mode (“standard”, “logo” or “world”) and perform reset. If mode is not given, current mode is returned.	https://docs.python.org/3.4/library/turtle.html#turtle.mode
turtle colormode	A							https://docs.python.org			<pre><code>
turtle.colormode(cmode=None)</code></pre><br>Return the colormode or set it to 1.0 or 255. Subsequently r, g, b values of color triples have to be in the range 0..cmode.	https://docs.python.org/3.4/library/turtle.html#turtle.colormode
turtle getcanvas	A							https://docs.python.org			<pre><code>
turtle.getcanvas()</code></pre><br>Return the Canvas of this TurtleScreen. Useful for insiders who know what to do with a Tkinter Canvas.	https://docs.python.org/3.4/library/turtle.html#turtle.getcanvas
turtle getshapes	A							https://docs.python.org			<pre><code>
turtle.getshapes()</code></pre><br>Return a list of names of all currently available turtle shapes.	https://docs.python.org/3.4/library/turtle.html#turtle.getshapes
turtle register_shape	A							https://docs.python.org			<pre><code>
turtle.register_shape(name, shape=None)</code></pre><br>There are three different ways to call this function:	https://docs.python.org/3.4/library/turtle.html#turtle.register_shape
turtle turtles	A							https://docs.python.org			<pre><code>
turtle.turtles()</code></pre><br>Return the list of turtles on the screen.	https://docs.python.org/3.4/library/turtle.html#turtle.turtles
turtle window_height	A							https://docs.python.org			<pre><code>
turtle.window_height()</code></pre><br>Return the height of the turtle window.	https://docs.python.org/3.4/library/turtle.html#turtle.window_height
turtle window_width	A							https://docs.python.org			<pre><code>
turtle.window_width()</code></pre><br>Return the width of the turtle window.	https://docs.python.org/3.4/library/turtle.html#turtle.window_width
turtle bye	A							https://docs.python.org			<pre><code>
turtle.bye()</code></pre><br>Shut the turtlegraphics window.	https://docs.python.org/3.4/library/turtle.html#turtle.bye
turtle exitonclick	A							https://docs.python.org			<pre><code>
turtle.exitonclick()</code></pre><br>Bind bye() method to mouse clicks on the Screen.	https://docs.python.org/3.4/library/turtle.html#turtle.exitonclick
turtle setup	A							https://docs.python.org			<pre><code>
turtle.setup(width=_CFG["width"], height=_CFG["height"], startx=_CFG["leftright"], starty=_CFG["topbottom"])</code></pre><br>Set the size and position of the main window. Default values of arguments are stored in the configuration dictionary and can be changed via a turtle.cfg file.	https://docs.python.org/3.4/library/turtle.html#turtle.setup
turtle title	A							https://docs.python.org			<pre><code>
turtle.title(titlestring)</code></pre><br>Set title of turtle window to titlestring.	https://docs.python.org/3.4/library/turtle.html#turtle.title
turtle write_docstringdict	A							https://docs.python.org			<pre><code>
turtle.write_docstringdict(filename="turtle_docstringdict")</code></pre><br>Create and write docstring-dictionary to a Python script with the given filename. This function has to be called explicitly (it is not used by the turtle graphics classes). The docstring dictionary will be written to the Python script filename.py. It is intended to serve as a template for translation of the docstrings into different languages.	https://docs.python.org/3.4/library/turtle.html#turtle.write_docstringdict
turtle write_docstringdict	A							https://docs.python.org			<pre><code>
turtle.write_docstringdict(filename="turtle_docstringdict")</code></pre><br>Create and write docstring-dictionary to a Python script with the given filename. This function has to be called explicitly (it is not used by the turtle graphics classes). The docstring dictionary will be written to the Python script filename.py. It is intended to serve as a template for translation of the docstrings into different languages.	https://docs.python.org/3.4/library/turtle.html#turtle.write_docstringdict
types new_class	A							https://docs.python.org			<pre><code>
types.new_class(name, bases=(), kwds=None, exec_body=None)</code></pre><br>Creates a class object dynamically using the appropriate metaclass.	https://docs.python.org/3.4/library/types.html#types.new_class
types prepare_class	A							https://docs.python.org			<pre><code>
types.prepare_class(name, bases=(), kwds=None)</code></pre><br>Calculates the appropriate metaclass and creates the class namespace.	https://docs.python.org/3.4/library/types.html#types.prepare_class
types DynamicClassAttribute	A							https://docs.python.org			<pre><code>
types.DynamicClassAttribute(fget=None, fset=None, fdel=None, doc=None)</code></pre><br>Route attribute access on a class to __getattr__.	https://docs.python.org/3.4/library/types.html#types.DynamicClassAttribute
types new_class	A							https://docs.python.org			<pre><code>
types.new_class(name, bases=(), kwds=None, exec_body=None)</code></pre><br>Creates a class object dynamically using the appropriate metaclass.	https://docs.python.org/3.4/library/types.html#types.new_class
types prepare_class	A							https://docs.python.org			<pre><code>
types.prepare_class(name, bases=(), kwds=None)</code></pre><br>Calculates the appropriate metaclass and creates the class namespace.	https://docs.python.org/3.4/library/types.html#types.prepare_class
types DynamicClassAttribute	A							https://docs.python.org			<pre><code>
types.DynamicClassAttribute(fget=None, fset=None, fdel=None, doc=None)</code></pre><br>Route attribute access on a class to __getattr__.	https://docs.python.org/3.4/library/types.html#types.DynamicClassAttribute
unicodedata lookup	A							https://docs.python.org			<pre><code>
unicodedata.lookup(name)</code></pre><br>Look up character by name. If a character with the given name is found, return the corresponding character. If not found, KeyError is raised.	https://docs.python.org/3.4/library/unicodedata.html#unicodedata.lookup
unicodedata name	A							https://docs.python.org			<pre><code>
unicodedata.name(chr[, default])</code></pre><br>Returns the name assigned to the character chr as a string. If no name is defined, default is returned, or, if not given, ValueError is raised.	https://docs.python.org/3.4/library/unicodedata.html#unicodedata.name
unicodedata decimal	A							https://docs.python.org			<pre><code>
unicodedata.decimal(chr[, default])</code></pre><br>Returns the decimal value assigned to the character chr as integer. If no such value is defined, default is returned, or, if not given, ValueError is raised.	https://docs.python.org/3.4/library/unicodedata.html#unicodedata.decimal
unicodedata digit	A							https://docs.python.org			<pre><code>
unicodedata.digit(chr[, default])</code></pre><br>Returns the digit value assigned to the character chr as integer. If no such value is defined, default is returned, or, if not given, ValueError is raised.	https://docs.python.org/3.4/library/unicodedata.html#unicodedata.digit
unicodedata numeric	A							https://docs.python.org			<pre><code>
unicodedata.numeric(chr[, default])</code></pre><br>Returns the numeric value assigned to the character chr as float. If no such value is defined, default is returned, or, if not given, ValueError is raised.	https://docs.python.org/3.4/library/unicodedata.html#unicodedata.numeric
unicodedata category	A							https://docs.python.org			<pre><code>
unicodedata.category(chr)</code></pre><br>Returns the general category assigned to the character chr as string.	https://docs.python.org/3.4/library/unicodedata.html#unicodedata.category
unicodedata bidirectional	A							https://docs.python.org			<pre><code>
unicodedata.bidirectional(chr)</code></pre><br>Returns the bidirectional class assigned to the character chr as string. If no such value is defined, an empty string is returned.	https://docs.python.org/3.4/library/unicodedata.html#unicodedata.bidirectional
unicodedata combining	A							https://docs.python.org			<pre><code>
unicodedata.combining(chr)</code></pre><br>Returns the canonical combining class assigned to the character chr as integer. Returns 0 if no combining class is defined.	https://docs.python.org/3.4/library/unicodedata.html#unicodedata.combining
unicodedata east_asian_width	A							https://docs.python.org			<pre><code>
unicodedata.east_asian_width(chr)</code></pre><br>Returns the east asian width assigned to the character chr as string.	https://docs.python.org/3.4/library/unicodedata.html#unicodedata.east_asian_width
unicodedata mirrored	A							https://docs.python.org			<pre><code>
unicodedata.mirrored(chr)</code></pre><br>Returns the mirrored property assigned to the character chr as integer. Returns 1 if the character has been identified as a “mirrored” character in bidirectional text, 0 otherwise.	https://docs.python.org/3.4/library/unicodedata.html#unicodedata.mirrored
unicodedata decomposition	A							https://docs.python.org			<pre><code>
unicodedata.decomposition(chr)</code></pre><br>Returns the character decomposition mapping assigned to the character chr as string. An empty string is returned in case no such mapping is defined.	https://docs.python.org/3.4/library/unicodedata.html#unicodedata.decomposition
unicodedata normalize	A							https://docs.python.org			<pre><code>
unicodedata.normalize(form, unistr)</code></pre><br>Return the normal form form for the Unicode string unistr. Valid values for form are ‘NFC’, ‘NFKC’, ‘NFD’, and ‘NFKD’.	https://docs.python.org/3.4/library/unicodedata.html#unicodedata.normalize
@ skip	A							https://docs.python.org			<pre><code>
@unittest.skip(reason)</code></pre><br>Unconditionally skip the decorated test. reason should describe why the test is being skipped.	https://docs.python.org/3.4/library/unittest.html#unittest.skip
@ skipIf	A							https://docs.python.org			<pre><code>
@unittest.skipIf(condition, reason)</code></pre><br>Skip the decorated test if condition is true.	https://docs.python.org/3.4/library/unittest.html#unittest.skipIf
@ skipUnless	A							https://docs.python.org			<pre><code>
@unittest.skipUnless(condition, reason)</code></pre><br>Skip the decorated test unless condition is true.	https://docs.python.org/3.4/library/unittest.html#unittest.skipUnless
@ expectedFailure	A							https://docs.python.org			<pre><code>
@unittest.expectedFailure</code></pre><br>Mark the test as an expected failure. If the test fails when run, the test is not counted as a failure.	https://docs.python.org/3.4/library/unittest.html#unittest.expectedFailure
unittest main	A							https://docs.python.org			<pre><code>
unittest.main(module='__main__', defaultTest=None, argv=None, testRunner=None, testLoader=unittest.defaultTestLoader, exit=True, verbosity=1, failfast=None, catchbreak=None, buffer=None, warnings=None)</code></pre><br>A command-line program that loads a set of tests from module and runs them; this is primarily for making test modules conveniently executable. The simplest use for this function is to include the following line at the end of a test script:	https://docs.python.org/3.4/library/unittest.html#unittest.main
unittest installHandler	A							https://docs.python.org			<pre><code>
unittest.installHandler()</code></pre><br>Install the control-c handler. When a signal.SIGINT is received (usually in response to the user pressing control-c) all registered results have stop() called.	https://docs.python.org/3.4/library/unittest.html#unittest.installHandler
unittest registerResult	A							https://docs.python.org			<pre><code>
unittest.registerResult(result)</code></pre><br>Register a TestResult object for control-c handling. Registering a result stores a weak reference to it, so it doesn’t prevent the result from being garbage collected.	https://docs.python.org/3.4/library/unittest.html#unittest.registerResult
unittest removeResult	A							https://docs.python.org			<pre><code>
unittest.removeResult(result)</code></pre><br>Remove a registered result. Once a result has been removed then stop() will no longer be called on that result object in response to a control-c.	https://docs.python.org/3.4/library/unittest.html#unittest.removeResult
unittest removeHandler	A							https://docs.python.org			<pre><code>
unittest.removeHandler(function=None)</code></pre><br>When called without arguments this function removes the control-c handler if it has been installed. This function can also be used as a test decorator to temporarily remove the handler whilst the test is being executed:	https://docs.python.org/3.4/library/unittest.html#unittest.removeHandler
@ skip	A							https://docs.python.org			<pre><code>
@unittest.skip(reason)</code></pre><br>Unconditionally skip the decorated test. reason should describe why the test is being skipped.	https://docs.python.org/3.4/library/unittest.html#unittest.skip
@ skipIf	A							https://docs.python.org			<pre><code>
@unittest.skipIf(condition, reason)</code></pre><br>Skip the decorated test if condition is true.	https://docs.python.org/3.4/library/unittest.html#unittest.skipIf
@ skipUnless	A							https://docs.python.org			<pre><code>
@unittest.skipUnless(condition, reason)</code></pre><br>Skip the decorated test unless condition is true.	https://docs.python.org/3.4/library/unittest.html#unittest.skipUnless
@ expectedFailure	A							https://docs.python.org			<pre><code>
@unittest.expectedFailure</code></pre><br>Mark the test as an expected failure. If the test fails when run, the test is not counted as a failure.	https://docs.python.org/3.4/library/unittest.html#unittest.expectedFailure
unittest main	A							https://docs.python.org			<pre><code>
unittest.main(module='__main__', defaultTest=None, argv=None, testRunner=None, testLoader=unittest.defaultTestLoader, exit=True, verbosity=1, failfast=None, catchbreak=None, buffer=None, warnings=None)</code></pre><br>A command-line program that loads a set of tests from module and runs them; this is primarily for making test modules conveniently executable. The simplest use for this function is to include the following line at the end of a test script:	https://docs.python.org/3.4/library/unittest.html#unittest.main
unittest main	A							https://docs.python.org			<pre><code>
unittest.main(module='__main__', defaultTest=None, argv=None, testRunner=None, testLoader=unittest.defaultTestLoader, exit=True, verbosity=1, failfast=None, catchbreak=None, buffer=None, warnings=None)</code></pre><br>A command-line program that loads a set of tests from module and runs them; this is primarily for making test modules conveniently executable. The simplest use for this function is to include the following line at the end of a test script:	https://docs.python.org/3.4/library/unittest.html#unittest.main
unittest installHandler	A							https://docs.python.org			<pre><code>
unittest.installHandler()</code></pre><br>Install the control-c handler. When a signal.SIGINT is received (usually in response to the user pressing control-c) all registered results have stop() called.	https://docs.python.org/3.4/library/unittest.html#unittest.installHandler
unittest registerResult	A							https://docs.python.org			<pre><code>
unittest.registerResult(result)</code></pre><br>Register a TestResult object for control-c handling. Registering a result stores a weak reference to it, so it doesn’t prevent the result from being garbage collected.	https://docs.python.org/3.4/library/unittest.html#unittest.registerResult
unittest removeResult	A							https://docs.python.org			<pre><code>
unittest.removeResult(result)</code></pre><br>Remove a registered result. Once a result has been removed then stop() will no longer be called on that result object in response to a control-c.	https://docs.python.org/3.4/library/unittest.html#unittest.removeResult
unittest removeHandler	A							https://docs.python.org			<pre><code>
unittest.removeHandler(function=None)</code></pre><br>When called without arguments this function removes the control-c handler if it has been installed. This function can also be used as a test decorator to temporarily remove the handler whilst the test is being executed:	https://docs.python.org/3.4/library/unittest.html#unittest.removeHandler
unittest.mock patch	A							https://docs.python.org			<pre><code>
unittest.mock.patch(target, new=DEFAULT, spec=None, create=False, spec_set=None, autospec=None, new_callable=None, **kwargs)</code></pre><br>patch() acts as a function decorator, class decorator or a context manager. Inside the body of the function or with statement, the target is patched with a new object. When the function/with statement exits the patch is undone.	https://docs.python.org/3.4/library/unittest.mock.html#unittest.mock.patch
patch object	A							https://docs.python.org			<pre><code>
patch.object(target, attribute, new=DEFAULT, spec=None, create=False, spec_set=None, autospec=None, new_callable=None, **kwargs)</code></pre><br>patch the named member (attribute) on an object (target) with a mock object.	https://docs.python.org/3.4/library/unittest.mock.html#unittest.mock.patch.object
patch dict	A							https://docs.python.org			<pre><code>
patch.dict(in_dict, values=(), clear=False, **kwargs)</code></pre><br>Patch a dictionary, or dictionary like object, and restore the dictionary to its original state after the test.	https://docs.python.org/3.4/library/unittest.mock.html#unittest.mock.patch.dict
patch multiple	A							https://docs.python.org			<pre><code>
patch.multiple(target, spec=None, create=False, spec_set=None, autospec=None, new_callable=None, **kwargs)</code></pre><br>Perform multiple patches in a single call. It takes the object to be patched (either as an object or a string to fetch the object by importing) and keyword arguments for the patches:	https://docs.python.org/3.4/library/unittest.mock.html#unittest.mock.patch.multiple
patch stopall	A							https://docs.python.org			<pre><code>
patch.stopall()</code></pre><br>Stop all active patches. Only stops patches started with start.	https://docs.python.org/3.4/library/unittest.mock.html#unittest.mock.patch.stopall
unittest.mock call	A							https://docs.python.org			<pre><code>
unittest.mock.call(*args, **kwargs)</code></pre><br>call() is a helper object for making simpler assertions, for comparing with call_args, call_args_list, mock_calls and method_calls. call() can also be used with assert_has_calls().	https://docs.python.org/3.4/library/unittest.mock.html#unittest.mock.call
unittest.mock create_autospec	A							https://docs.python.org			<pre><code>
unittest.mock.create_autospec(spec, spec_set=False, instance=False, **kwargs)</code></pre><br>Create a mock object using another object as a spec. Attributes on the mock will use the corresponding attribute on the spec object as their spec.	https://docs.python.org/3.4/library/unittest.mock.html#unittest.mock.create_autospec
unittest.mock mock_open	A							https://docs.python.org			<pre><code>
unittest.mock.mock_open(mock=None, read_data=None)</code></pre><br>A helper function to create a mock to replace the use of open(). It works for open() called directly or used as a context manager.	https://docs.python.org/3.4/library/unittest.mock.html#unittest.mock.mock_open
unittest.mock patch	A							https://docs.python.org			<pre><code>
unittest.mock.patch(target, new=DEFAULT, spec=None, create=False, spec_set=None, autospec=None, new_callable=None, **kwargs)</code></pre><br>patch() acts as a function decorator, class decorator or a context manager. Inside the body of the function or with statement, the target is patched with a new object. When the function/with statement exits the patch is undone.	https://docs.python.org/3.4/library/unittest.mock.html#unittest.mock.patch
patch object	A							https://docs.python.org			<pre><code>
patch.object(target, attribute, new=DEFAULT, spec=None, create=False, spec_set=None, autospec=None, new_callable=None, **kwargs)</code></pre><br>patch the named member (attribute) on an object (target) with a mock object.	https://docs.python.org/3.4/library/unittest.mock.html#unittest.mock.patch.object
patch dict	A							https://docs.python.org			<pre><code>
patch.dict(in_dict, values=(), clear=False, **kwargs)</code></pre><br>Patch a dictionary, or dictionary like object, and restore the dictionary to its original state after the test.	https://docs.python.org/3.4/library/unittest.mock.html#unittest.mock.patch.dict
patch multiple	A							https://docs.python.org			<pre><code>
patch.multiple(target, spec=None, create=False, spec_set=None, autospec=None, new_callable=None, **kwargs)</code></pre><br>Perform multiple patches in a single call. It takes the object to be patched (either as an object or a string to fetch the object by importing) and keyword arguments for the patches:	https://docs.python.org/3.4/library/unittest.mock.html#unittest.mock.patch.multiple
patch stopall	A							https://docs.python.org			<pre><code>
patch.stopall()</code></pre><br>Stop all active patches. Only stops patches started with start.	https://docs.python.org/3.4/library/unittest.mock.html#unittest.mock.patch.stopall
unittest.mock patch	A							https://docs.python.org			<pre><code>
unittest.mock.patch(target, new=DEFAULT, spec=None, create=False, spec_set=None, autospec=None, new_callable=None, **kwargs)</code></pre><br>patch() acts as a function decorator, class decorator or a context manager. Inside the body of the function or with statement, the target is patched with a new object. When the function/with statement exits the patch is undone.	https://docs.python.org/3.4/library/unittest.mock.html#unittest.mock.patch
patch object	A							https://docs.python.org			<pre><code>
patch.object(target, attribute, new=DEFAULT, spec=None, create=False, spec_set=None, autospec=None, new_callable=None, **kwargs)</code></pre><br>patch the named member (attribute) on an object (target) with a mock object.	https://docs.python.org/3.4/library/unittest.mock.html#unittest.mock.patch.object
patch dict	A							https://docs.python.org			<pre><code>
patch.dict(in_dict, values=(), clear=False, **kwargs)</code></pre><br>Patch a dictionary, or dictionary like object, and restore the dictionary to its original state after the test.	https://docs.python.org/3.4/library/unittest.mock.html#unittest.mock.patch.dict
patch multiple	A							https://docs.python.org			<pre><code>
patch.multiple(target, spec=None, create=False, spec_set=None, autospec=None, new_callable=None, **kwargs)</code></pre><br>Perform multiple patches in a single call. It takes the object to be patched (either as an object or a string to fetch the object by importing) and keyword arguments for the patches:	https://docs.python.org/3.4/library/unittest.mock.html#unittest.mock.patch.multiple
patch stopall	A							https://docs.python.org			<pre><code>
patch.stopall()</code></pre><br>Stop all active patches. Only stops patches started with start.	https://docs.python.org/3.4/library/unittest.mock.html#unittest.mock.patch.stopall
unittest.mock call	A							https://docs.python.org			<pre><code>
unittest.mock.call(*args, **kwargs)</code></pre><br>call() is a helper object for making simpler assertions, for comparing with call_args, call_args_list, mock_calls and method_calls. call() can also be used with assert_has_calls().	https://docs.python.org/3.4/library/unittest.mock.html#unittest.mock.call
unittest.mock create_autospec	A							https://docs.python.org			<pre><code>
unittest.mock.create_autospec(spec, spec_set=False, instance=False, **kwargs)</code></pre><br>Create a mock object using another object as a spec. Attributes on the mock will use the corresponding attribute on the spec object as their spec.	https://docs.python.org/3.4/library/unittest.mock.html#unittest.mock.create_autospec
unittest.mock mock_open	A							https://docs.python.org			<pre><code>
unittest.mock.mock_open(mock=None, read_data=None)</code></pre><br>A helper function to create a mock to replace the use of open(). It works for open() called directly or used as a context manager.	https://docs.python.org/3.4/library/unittest.mock.html#unittest.mock.mock_open
unittest.mock call	A							https://docs.python.org			<pre><code>
unittest.mock.call(*args, **kwargs)</code></pre><br>call() is a helper object for making simpler assertions, for comparing with call_args, call_args_list, mock_calls and method_calls. call() can also be used with assert_has_calls().	https://docs.python.org/3.4/library/unittest.mock.html#unittest.mock.call
unittest.mock create_autospec	A							https://docs.python.org			<pre><code>
unittest.mock.create_autospec(spec, spec_set=False, instance=False, **kwargs)</code></pre><br>Create a mock object using another object as a spec. Attributes on the mock will use the corresponding attribute on the spec object as their spec.	https://docs.python.org/3.4/library/unittest.mock.html#unittest.mock.create_autospec
unittest.mock mock_open	A							https://docs.python.org			<pre><code>
unittest.mock.mock_open(mock=None, read_data=None)</code></pre><br>A helper function to create a mock to replace the use of open(). It works for open() called directly or used as a context manager.	https://docs.python.org/3.4/library/unittest.mock.html#unittest.mock.mock_open
urllib.parse urlparse	A							https://docs.python.org			<pre><code>
urllib.parse.urlparse(urlstring, scheme='', allow_fragments=True)</code></pre><br>Parse a URL into six components, returning a 6-tuple. This corresponds to the general structure of a URL: scheme://netloc/path;parameters?query#fragment. Each tuple item is a string, possibly empty. The components are not broken up in smaller parts (for example, the network location is a single string), and % escapes are not expanded. The delimiters as shown above are not part of the result, except for a leading slash in the path component, which is retained if present. For example:	https://docs.python.org/3.4/library/urllib.parse.html#urllib.parse.urlparse
urllib.parse parse_qs	A							https://docs.python.org			<pre><code>
urllib.parse.parse_qs(qs, keep_blank_values=False, strict_parsing=False, encoding='utf-8', errors='replace')</code></pre><br>Parse a query string given as a string argument (data of type application/x-www-form-urlencoded). Data are returned as a dictionary. The dictionary keys are the unique query variable names and the values are lists of values for each name.	https://docs.python.org/3.4/library/urllib.parse.html#urllib.parse.parse_qs
urllib.parse parse_qsl	A							https://docs.python.org			<pre><code>
urllib.parse.parse_qsl(qs, keep_blank_values=False, strict_parsing=False, encoding='utf-8', errors='replace')</code></pre><br>Parse a query string given as a string argument (data of type application/x-www-form-urlencoded). Data are returned as a list of name, value pairs.	https://docs.python.org/3.4/library/urllib.parse.html#urllib.parse.parse_qsl
urllib.parse urlunparse	A							https://docs.python.org			<pre><code>
urllib.parse.urlunparse(parts)</code></pre><br>Construct a URL from a tuple as returned by urlparse(). The parts argument can be any six-item iterable. This may result in a slightly different, but equivalent URL, if the URL that was parsed originally had unnecessary delimiters (for example, a ? with an empty query; the RFC states that these are equivalent).	https://docs.python.org/3.4/library/urllib.parse.html#urllib.parse.urlunparse
urllib.parse urlsplit	A							https://docs.python.org			<pre><code>
urllib.parse.urlsplit(urlstring, scheme='', allow_fragments=True)</code></pre><br>This is similar to urlparse(), but does not split the params from the URL. This should generally be used instead of urlparse() if the more recent URL syntax allowing parameters to be applied to each segment of the path portion of the URL (see RFC 2396) is wanted. A separate function is needed to separate the path segments and parameters. This function returns a 5-tuple: (addressing scheme, network location, path, query, fragment identifier).	https://docs.python.org/3.4/library/urllib.parse.html#urllib.parse.urlsplit
urllib.parse urlunsplit	A							https://docs.python.org			<pre><code>
urllib.parse.urlunsplit(parts)</code></pre><br>Combine the elements of a tuple as returned by urlsplit() into a complete URL as a string. The parts argument can be any five-item iterable. This may result in a slightly different, but equivalent URL, if the URL that was parsed originally had unnecessary delimiters (for example, a ? with an empty query; the RFC states that these are equivalent).	https://docs.python.org/3.4/library/urllib.parse.html#urllib.parse.urlunsplit
urllib.parse urljoin	A							https://docs.python.org			<pre><code>
urllib.parse.urljoin(base, url, allow_fragments=True)</code></pre><br>Construct a full (“absolute”) URL by combining a “base URL” (base) with another URL (url). Informally, this uses components of the base URL, in particular the addressing scheme, the network location and (part of) the path, to provide missing components in the relative URL. For example:	https://docs.python.org/3.4/library/urllib.parse.html#urllib.parse.urljoin
urllib.parse urldefrag	A							https://docs.python.org			<pre><code>
urllib.parse.urldefrag(url)</code></pre><br>If url contains a fragment identifier, return a modified version of url with no fragment identifier, and the fragment identifier as a separate string. If there is no fragment identifier in url, return url unmodified and an empty string.	https://docs.python.org/3.4/library/urllib.parse.html#urllib.parse.urldefrag
urllib.parse quote	A							https://docs.python.org			<pre><code>
urllib.parse.quote(string, safe='/', encoding=None, errors=None)</code></pre><br>Replace special characters in string using the %xx escape. Letters, digits, and the characters '_.-' are never quoted. By default, this function is intended for quoting the path section of URL. The optional safe parameter specifies additional ASCII characters that should not be quoted — its default value is '/'.	https://docs.python.org/3.4/library/urllib.parse.html#urllib.parse.quote
urllib.parse quote_plus	A							https://docs.python.org			<pre><code>
urllib.parse.quote_plus(string, safe='', encoding=None, errors=None)</code></pre><br>Like quote(), but also replace spaces by plus signs, as required for quoting HTML form values when building up a query string to go into a URL. Plus signs in the original string are escaped unless they are included in safe. It also does not have safe default to '/'.	https://docs.python.org/3.4/library/urllib.parse.html#urllib.parse.quote_plus
urllib.parse quote_from_bytes	A							https://docs.python.org			<pre><code>
urllib.parse.quote_from_bytes(bytes, safe='/')</code></pre><br>Like quote(), but accepts a bytes object rather than a str, and does not perform string-to-bytes encoding.	https://docs.python.org/3.4/library/urllib.parse.html#urllib.parse.quote_from_bytes
urllib.parse unquote	A							https://docs.python.org			<pre><code>
urllib.parse.unquote(string, encoding='utf-8', errors='replace')</code></pre><br>Replace %xx escapes by their single-character equivalent. The optional encoding and errors parameters specify how to decode percent-encoded sequences into Unicode characters, as accepted by the bytes.decode() method.	https://docs.python.org/3.4/library/urllib.parse.html#urllib.parse.unquote
urllib.parse unquote_plus	A							https://docs.python.org			<pre><code>
urllib.parse.unquote_plus(string, encoding='utf-8', errors='replace')</code></pre><br>Like unquote(), but also replace plus signs by spaces, as required for unquoting HTML form values.	https://docs.python.org/3.4/library/urllib.parse.html#urllib.parse.unquote_plus
urllib.parse unquote_to_bytes	A							https://docs.python.org			<pre><code>
urllib.parse.unquote_to_bytes(string)</code></pre><br>Replace %xx escapes by their single-octet equivalent, and return a bytes object.	https://docs.python.org/3.4/library/urllib.parse.html#urllib.parse.unquote_to_bytes
urllib.parse urlencode	A							https://docs.python.org			<pre><code>
urllib.parse.urlencode(query, doseq=False, safe='', encoding=None, errors=None)</code></pre><br>Convert a mapping object or a sequence of two-element tuples, which may contain str or bytes objects, to a percent-encoded ASCII text string. If the resultant string is to be used as a data for POST operation with the urlopen() function, then it should be encoded to bytes, otherwise it would result in a TypeError.	https://docs.python.org/3.4/library/urllib.parse.html#urllib.parse.urlencode
urllib.parse urlparse	A							https://docs.python.org			<pre><code>
urllib.parse.urlparse(urlstring, scheme='', allow_fragments=True)</code></pre><br>Parse a URL into six components, returning a 6-tuple. This corresponds to the general structure of a URL: scheme://netloc/path;parameters?query#fragment. Each tuple item is a string, possibly empty. The components are not broken up in smaller parts (for example, the network location is a single string), and % escapes are not expanded. The delimiters as shown above are not part of the result, except for a leading slash in the path component, which is retained if present. For example:	https://docs.python.org/3.4/library/urllib.parse.html#urllib.parse.urlparse
urllib.parse parse_qs	A							https://docs.python.org			<pre><code>
urllib.parse.parse_qs(qs, keep_blank_values=False, strict_parsing=False, encoding='utf-8', errors='replace')</code></pre><br>Parse a query string given as a string argument (data of type application/x-www-form-urlencoded). Data are returned as a dictionary. The dictionary keys are the unique query variable names and the values are lists of values for each name.	https://docs.python.org/3.4/library/urllib.parse.html#urllib.parse.parse_qs
urllib.parse parse_qsl	A							https://docs.python.org			<pre><code>
urllib.parse.parse_qsl(qs, keep_blank_values=False, strict_parsing=False, encoding='utf-8', errors='replace')</code></pre><br>Parse a query string given as a string argument (data of type application/x-www-form-urlencoded). Data are returned as a list of name, value pairs.	https://docs.python.org/3.4/library/urllib.parse.html#urllib.parse.parse_qsl
urllib.parse urlunparse	A							https://docs.python.org			<pre><code>
urllib.parse.urlunparse(parts)</code></pre><br>Construct a URL from a tuple as returned by urlparse(). The parts argument can be any six-item iterable. This may result in a slightly different, but equivalent URL, if the URL that was parsed originally had unnecessary delimiters (for example, a ? with an empty query; the RFC states that these are equivalent).	https://docs.python.org/3.4/library/urllib.parse.html#urllib.parse.urlunparse
urllib.parse urlsplit	A							https://docs.python.org			<pre><code>
urllib.parse.urlsplit(urlstring, scheme='', allow_fragments=True)</code></pre><br>This is similar to urlparse(), but does not split the params from the URL. This should generally be used instead of urlparse() if the more recent URL syntax allowing parameters to be applied to each segment of the path portion of the URL (see RFC 2396) is wanted. A separate function is needed to separate the path segments and parameters. This function returns a 5-tuple: (addressing scheme, network location, path, query, fragment identifier).	https://docs.python.org/3.4/library/urllib.parse.html#urllib.parse.urlsplit
urllib.parse urlunsplit	A							https://docs.python.org			<pre><code>
urllib.parse.urlunsplit(parts)</code></pre><br>Combine the elements of a tuple as returned by urlsplit() into a complete URL as a string. The parts argument can be any five-item iterable. This may result in a slightly different, but equivalent URL, if the URL that was parsed originally had unnecessary delimiters (for example, a ? with an empty query; the RFC states that these are equivalent).	https://docs.python.org/3.4/library/urllib.parse.html#urllib.parse.urlunsplit
urllib.parse urljoin	A							https://docs.python.org			<pre><code>
urllib.parse.urljoin(base, url, allow_fragments=True)</code></pre><br>Construct a full (“absolute”) URL by combining a “base URL” (base) with another URL (url). Informally, this uses components of the base URL, in particular the addressing scheme, the network location and (part of) the path, to provide missing components in the relative URL. For example:	https://docs.python.org/3.4/library/urllib.parse.html#urllib.parse.urljoin
urllib.parse urldefrag	A							https://docs.python.org			<pre><code>
urllib.parse.urldefrag(url)</code></pre><br>If url contains a fragment identifier, return a modified version of url with no fragment identifier, and the fragment identifier as a separate string. If there is no fragment identifier in url, return url unmodified and an empty string.	https://docs.python.org/3.4/library/urllib.parse.html#urllib.parse.urldefrag
urllib.parse quote	A							https://docs.python.org			<pre><code>
urllib.parse.quote(string, safe='/', encoding=None, errors=None)</code></pre><br>Replace special characters in string using the %xx escape. Letters, digits, and the characters '_.-' are never quoted. By default, this function is intended for quoting the path section of URL. The optional safe parameter specifies additional ASCII characters that should not be quoted — its default value is '/'.	https://docs.python.org/3.4/library/urllib.parse.html#urllib.parse.quote
urllib.parse quote_plus	A							https://docs.python.org			<pre><code>
urllib.parse.quote_plus(string, safe='', encoding=None, errors=None)</code></pre><br>Like quote(), but also replace spaces by plus signs, as required for quoting HTML form values when building up a query string to go into a URL. Plus signs in the original string are escaped unless they are included in safe. It also does not have safe default to '/'.	https://docs.python.org/3.4/library/urllib.parse.html#urllib.parse.quote_plus
urllib.parse quote_from_bytes	A							https://docs.python.org			<pre><code>
urllib.parse.quote_from_bytes(bytes, safe='/')</code></pre><br>Like quote(), but accepts a bytes object rather than a str, and does not perform string-to-bytes encoding.	https://docs.python.org/3.4/library/urllib.parse.html#urllib.parse.quote_from_bytes
urllib.parse unquote	A							https://docs.python.org			<pre><code>
urllib.parse.unquote(string, encoding='utf-8', errors='replace')</code></pre><br>Replace %xx escapes by their single-character equivalent. The optional encoding and errors parameters specify how to decode percent-encoded sequences into Unicode characters, as accepted by the bytes.decode() method.	https://docs.python.org/3.4/library/urllib.parse.html#urllib.parse.unquote
urllib.parse unquote_plus	A							https://docs.python.org			<pre><code>
urllib.parse.unquote_plus(string, encoding='utf-8', errors='replace')</code></pre><br>Like unquote(), but also replace plus signs by spaces, as required for unquoting HTML form values.	https://docs.python.org/3.4/library/urllib.parse.html#urllib.parse.unquote_plus
urllib.parse unquote_to_bytes	A							https://docs.python.org			<pre><code>
urllib.parse.unquote_to_bytes(string)</code></pre><br>Replace %xx escapes by their single-octet equivalent, and return a bytes object.	https://docs.python.org/3.4/library/urllib.parse.html#urllib.parse.unquote_to_bytes
urllib.parse urlencode	A							https://docs.python.org			<pre><code>
urllib.parse.urlencode(query, doseq=False, safe='', encoding=None, errors=None)</code></pre><br>Convert a mapping object or a sequence of two-element tuples, which may contain str or bytes objects, to a percent-encoded ASCII text string. If the resultant string is to be used as a data for POST operation with the urlopen() function, then it should be encoded to bytes, otherwise it would result in a TypeError.	https://docs.python.org/3.4/library/urllib.parse.html#urllib.parse.urlencode
urllib.request urlopen	A							https://docs.python.org			<pre><code>
urllib.request.urlopen(url, data=None, [timeout, ]*, cafile=None, capath=None, cadefault=False, context=None)</code></pre><br>Open the URL url, which can be either a string or a Request object.	https://docs.python.org/3.4/library/urllib.request.html#urllib.request.urlopen
urllib.request install_opener	A							https://docs.python.org			<pre><code>
urllib.request.install_opener(opener)</code></pre><br>Install an OpenerDirector instance as the default global opener. Installing an opener is only necessary if you want urlopen to use that opener; otherwise, simply call OpenerDirector.open() instead of urlopen(). The code does not check for a real OpenerDirector, and any class with the appropriate interface will work.	https://docs.python.org/3.4/library/urllib.request.html#urllib.request.install_opener
urllib.request build_opener	A							https://docs.python.org			<pre><code>
urllib.request.build_opener([handler, ...])</code></pre><br>Return an OpenerDirector instance, which chains the handlers in the order given. handlers can be either instances of BaseHandler, or subclasses of BaseHandler (in which case it must be possible to call the constructor without any parameters). Instances of the following classes will be in front of the handlers, unless the handlers contain them, instances of them or subclasses of them: ProxyHandler (if proxy settings are detected), UnknownHandler, HTTPHandler, HTTPDefaultErrorHandler, HTTPRedirectHandler, FTPHandler, FileHandler, HTTPErrorProcessor.	https://docs.python.org/3.4/library/urllib.request.html#urllib.request.build_opener
urllib.request pathname2url	A							https://docs.python.org			<pre><code>
urllib.request.pathname2url(path)</code></pre><br>Convert the pathname path from the local syntax for a path to the form used in the path component of a URL. This does not produce a complete URL. The return value will already be quoted using the quote() function.	https://docs.python.org/3.4/library/urllib.request.html#urllib.request.pathname2url
urllib.request url2pathname	A							https://docs.python.org			<pre><code>
urllib.request.url2pathname(path)</code></pre><br>Convert the path component path from a percent-encoded URL to the local syntax for a path. This does not accept a complete URL. This function uses unquote() to decode path.	https://docs.python.org/3.4/library/urllib.request.html#urllib.request.url2pathname
urllib.request getproxies	A							https://docs.python.org			<pre><code>
urllib.request.getproxies()</code></pre><br>This helper function returns a dictionary of scheme to proxy server URL mappings. It scans the environment for variables named <scheme>_proxy, in a case insensitive approach, for all operating systems first, and when it cannot find it, looks for proxy information from Mac OSX System Configuration for Mac OS X and Windows Systems Registry for Windows.	https://docs.python.org/3.4/library/urllib.request.html#urllib.request.getproxies
urllib.request urlretrieve	A							https://docs.python.org			<pre><code>
urllib.request.urlretrieve(url, filename=None, reporthook=None, data=None)</code></pre><br>Copy a network object denoted by a URL to a local file. If the URL points to a local file, the object will not be copied unless filename is supplied. Return a tuple (filename, headers) where filename is the local file name under which the object can be found, and headers is whatever the info() method of the object returned by urlopen() returned (for a remote object). Exceptions are the same as for urlopen().	https://docs.python.org/3.4/library/urllib.request.html#urllib.request.urlretrieve
urllib.request urlcleanup	A							https://docs.python.org			<pre><code>
urllib.request.urlcleanup()</code></pre><br>Cleans up temporary files that may have been left behind by previous calls to urlretrieve().	https://docs.python.org/3.4/library/urllib.request.html#urllib.request.urlcleanup
urllib.request urlretrieve	A							https://docs.python.org			<pre><code>
urllib.request.urlretrieve(url, filename=None, reporthook=None, data=None)</code></pre><br>Copy a network object denoted by a URL to a local file. If the URL points to a local file, the object will not be copied unless filename is supplied. Return a tuple (filename, headers) where filename is the local file name under which the object can be found, and headers is whatever the info() method of the object returned by urlopen() returned (for a remote object). Exceptions are the same as for urlopen().	https://docs.python.org/3.4/library/urllib.request.html#urllib.request.urlretrieve
urllib.request urlcleanup	A							https://docs.python.org			<pre><code>
urllib.request.urlcleanup()</code></pre><br>Cleans up temporary files that may have been left behind by previous calls to urlretrieve().	https://docs.python.org/3.4/library/urllib.request.html#urllib.request.urlcleanup
uu encode	A							https://docs.python.org			<pre><code>
uu.encode(in_file, out_file, name=None, mode=None)</code></pre><br>Uuencode file in_file into file out_file. The uuencoded file will have the header specifying name and mode as the defaults for the results of decoding the file. The default defaults are taken from in_file, or '-' and 0o666 respectively.	https://docs.python.org/3.4/library/uu.html#uu.encode
uu decode	A							https://docs.python.org			<pre><code>
uu.decode(in_file, out_file=None, mode=None, quiet=False)</code></pre><br>This call decodes uuencoded file in_file placing the result on file out_file. If out_file is a pathname, mode is used to set the permission bits if the file must be created. Defaults for out_file and mode are taken from the uuencode header. However, if the file specified in the header already exists, a uu.Error is raised.	https://docs.python.org/3.4/library/uu.html#uu.decode
uuid getnode	A							https://docs.python.org			<pre><code>
uuid.getnode()</code></pre><br>Get the hardware address as a 48-bit positive integer. The first time this runs, it may launch a separate program, which could be quite slow. If all attempts to obtain the hardware address fail, we choose a random 48-bit number with its eighth bit set to 1 as recommended in RFC 4122. “Hardware address” means the MAC address of a network interface, and on a machine with multiple network interfaces the MAC address of any one of them may be returned.	https://docs.python.org/3.4/library/uuid.html#uuid.getnode
uuid uuid1	A							https://docs.python.org			<pre><code>
uuid.uuid1(node=None, clock_seq=None)</code></pre><br>Generate a UUID from a host ID, sequence number, and the current time. If node is not given, getnode() is used to obtain the hardware address. If clock_seq is given, it is used as the sequence number; otherwise a random 14-bit sequence number is chosen.	https://docs.python.org/3.4/library/uuid.html#uuid.uuid1
uuid uuid3	A							https://docs.python.org			<pre><code>
uuid.uuid3(namespace, name)</code></pre><br>Generate a UUID based on the MD5 hash of a namespace identifier (which is a UUID) and a name (which is a string).	https://docs.python.org/3.4/library/uuid.html#uuid.uuid3
uuid uuid4	A							https://docs.python.org			<pre><code>
uuid.uuid4()</code></pre><br>Generate a random UUID.	https://docs.python.org/3.4/library/uuid.html#uuid.uuid4
uuid uuid5	A							https://docs.python.org			<pre><code>
uuid.uuid5(namespace, name)</code></pre><br>Generate a UUID based on the SHA-1 hash of a namespace identifier (which is a UUID) and a name (which is a string).	https://docs.python.org/3.4/library/uuid.html#uuid.uuid5
venv create	A							https://docs.python.org			<pre><code>
venv.create(env_dir, system_site_packages=False, clear=False, symlinks=False, with_pip=False)</code></pre><br>Create an EnvBuilder with the given keyword arguments, and call its create() method with the env_dir argument.	https://docs.python.org/3.4/library/venv.html#venv.create
venv create	A							https://docs.python.org			<pre><code>
venv.create(env_dir, system_site_packages=False, clear=False, symlinks=False, with_pip=False)</code></pre><br>Create an EnvBuilder with the given keyword arguments, and call its create() method with the env_dir argument.	https://docs.python.org/3.4/library/venv.html#venv.create
warnings warn	A							https://docs.python.org			<pre><code>
warnings.warn(message, category=None, stacklevel=1)</code></pre><br>Issue a warning, or maybe ignore it or raise an exception. The category argument, if given, must be a warning category class (see above); it defaults to UserWarning. Alternatively message can be a Warning instance, in which case category will be ignored and message.__class__ will be used. In this case the message text will be str(message). This function raises an exception if the particular warning issued is changed into an error by the warnings filter see above. The stacklevel argument can be used by wrapper functions written in Python, like this:	https://docs.python.org/3.4/library/warnings.html#warnings.warn
warnings warn_explicit	A							https://docs.python.org			<pre><code>
warnings.warn_explicit(message, category, filename, lineno, module=None, registry=None, module_globals=None)</code></pre><br>This is a low-level interface to the functionality of warn(), passing in explicitly the message, category, filename and line number, and optionally the module name and the registry (which should be the __warningregistry__ dictionary of the module). The module name defaults to the filename with .py stripped; if no registry is passed, the warning is never suppressed. message must be a string and category a subclass of Warning or message may be a Warning instance, in which case category will be ignored.	https://docs.python.org/3.4/library/warnings.html#warnings.warn_explicit
warnings showwarning	A							https://docs.python.org			<pre><code>
warnings.showwarning(message, category, filename, lineno, file=None, line=None)</code></pre><br>Write a warning to a file. The default implementation calls formatwarning(message, category, filename, lineno, line) and writes the resulting string to file, which defaults to sys.stderr. You may replace this function with any callable by assigning to warnings.showwarning. line is a line of source code to be included in the warning message; if line is not supplied, showwarning() will try to read the line specified by filename and lineno.	https://docs.python.org/3.4/library/warnings.html#warnings.showwarning
warnings formatwarning	A							https://docs.python.org			<pre><code>
warnings.formatwarning(message, category, filename, lineno, line=None)</code></pre><br>Format a warning the standard way. This returns a string which may contain embedded newlines and ends in a newline. line is a line of source code to be included in the warning message; if line is not supplied, formatwarning() will try to read the line specified by filename and lineno.	https://docs.python.org/3.4/library/warnings.html#warnings.formatwarning
warnings filterwarnings	A							https://docs.python.org			<pre><code>
warnings.filterwarnings(action, message='', category=Warning, module='', lineno=0, append=False)</code></pre><br>Insert an entry into the list of warnings filter specifications. The entry is inserted at the front by default; if append is true, it is inserted at the end. This checks the types of the arguments, compiles the message and module regular expressions, and inserts them as a tuple in the list of warnings filters. Entries closer to the front of the list override entries later in the list, if both match a particular warning. Omitted arguments default to a value that matches everything.	https://docs.python.org/3.4/library/warnings.html#warnings.filterwarnings
warnings simplefilter	A							https://docs.python.org			<pre><code>
warnings.simplefilter(action, category=Warning, lineno=0, append=False)</code></pre><br>Insert a simple entry into the list of warnings filter specifications. The meaning of the function parameters is as for filterwarnings(), but regular expressions are not needed as the filter inserted always matches any message in any module as long as the category and line number match.	https://docs.python.org/3.4/library/warnings.html#warnings.simplefilter
warnings resetwarnings	A							https://docs.python.org			<pre><code>
warnings.resetwarnings()</code></pre><br>Reset the warnings filter. This discards the effect of all previous calls to filterwarnings(), including that of the -W command line options and calls to simplefilter().	https://docs.python.org/3.4/library/warnings.html#warnings.resetwarnings
warnings warn	A							https://docs.python.org			<pre><code>
warnings.warn(message, category=None, stacklevel=1)</code></pre><br>Issue a warning, or maybe ignore it or raise an exception. The category argument, if given, must be a warning category class (see above); it defaults to UserWarning. Alternatively message can be a Warning instance, in which case category will be ignored and message.__class__ will be used. In this case the message text will be str(message). This function raises an exception if the particular warning issued is changed into an error by the warnings filter see above. The stacklevel argument can be used by wrapper functions written in Python, like this:	https://docs.python.org/3.4/library/warnings.html#warnings.warn
warnings warn_explicit	A							https://docs.python.org			<pre><code>
warnings.warn_explicit(message, category, filename, lineno, module=None, registry=None, module_globals=None)</code></pre><br>This is a low-level interface to the functionality of warn(), passing in explicitly the message, category, filename and line number, and optionally the module name and the registry (which should be the __warningregistry__ dictionary of the module). The module name defaults to the filename with .py stripped; if no registry is passed, the warning is never suppressed. message must be a string and category a subclass of Warning or message may be a Warning instance, in which case category will be ignored.	https://docs.python.org/3.4/library/warnings.html#warnings.warn_explicit
warnings showwarning	A							https://docs.python.org			<pre><code>
warnings.showwarning(message, category, filename, lineno, file=None, line=None)</code></pre><br>Write a warning to a file. The default implementation calls formatwarning(message, category, filename, lineno, line) and writes the resulting string to file, which defaults to sys.stderr. You may replace this function with any callable by assigning to warnings.showwarning. line is a line of source code to be included in the warning message; if line is not supplied, showwarning() will try to read the line specified by filename and lineno.	https://docs.python.org/3.4/library/warnings.html#warnings.showwarning
warnings formatwarning	A							https://docs.python.org			<pre><code>
warnings.formatwarning(message, category, filename, lineno, line=None)</code></pre><br>Format a warning the standard way. This returns a string which may contain embedded newlines and ends in a newline. line is a line of source code to be included in the warning message; if line is not supplied, formatwarning() will try to read the line specified by filename and lineno.	https://docs.python.org/3.4/library/warnings.html#warnings.formatwarning
warnings filterwarnings	A							https://docs.python.org			<pre><code>
warnings.filterwarnings(action, message='', category=Warning, module='', lineno=0, append=False)</code></pre><br>Insert an entry into the list of warnings filter specifications. The entry is inserted at the front by default; if append is true, it is inserted at the end. This checks the types of the arguments, compiles the message and module regular expressions, and inserts them as a tuple in the list of warnings filters. Entries closer to the front of the list override entries later in the list, if both match a particular warning. Omitted arguments default to a value that matches everything.	https://docs.python.org/3.4/library/warnings.html#warnings.filterwarnings
warnings simplefilter	A							https://docs.python.org			<pre><code>
warnings.simplefilter(action, category=Warning, lineno=0, append=False)</code></pre><br>Insert a simple entry into the list of warnings filter specifications. The meaning of the function parameters is as for filterwarnings(), but regular expressions are not needed as the filter inserted always matches any message in any module as long as the category and line number match.	https://docs.python.org/3.4/library/warnings.html#warnings.simplefilter
warnings resetwarnings	A							https://docs.python.org			<pre><code>
warnings.resetwarnings()</code></pre><br>Reset the warnings filter. This discards the effect of all previous calls to filterwarnings(), including that of the -W command line options and calls to simplefilter().	https://docs.python.org/3.4/library/warnings.html#warnings.resetwarnings
wave open	A							https://docs.python.org			<pre><code>
wave.open(file, mode=None)</code></pre><br>If file is a string, open the file by that name, otherwise treat it as a file-like object. mode can be:	https://docs.python.org/3.4/library/wave.html#wave.open
wave openfp	A							https://docs.python.org			<pre><code>
wave.openfp(file, mode)</code></pre><br>A synonym for open(), maintained for backwards compatibility.	https://docs.python.org/3.4/library/wave.html#wave.openfp
weakref proxy	A							https://docs.python.org			<pre><code>
weakref.proxy(object[, callback])</code></pre><br>Return a proxy to object which uses a weak reference. This supports use of the proxy in most contexts instead of requiring the explicit dereferencing used with weak reference objects. The returned object will have a type of either ProxyType or CallableProxyType, depending on whether object is callable. Proxy objects are not hashable regardless of the referent; this avoids a number of problems related to their fundamentally mutable nature, and prevent their use as dictionary keys. callback is the same as the parameter of the same name to the ref() function.	https://docs.python.org/3.4/library/weakref.html#weakref.proxy
weakref getweakrefcount	A							https://docs.python.org			<pre><code>
weakref.getweakrefcount(object)</code></pre><br>Return the number of weak references and proxies which refer to object.	https://docs.python.org/3.4/library/weakref.html#weakref.getweakrefcount
weakref getweakrefs	A							https://docs.python.org			<pre><code>
weakref.getweakrefs(object)</code></pre><br>Return a list of all weak reference and proxy objects which refer to object.	https://docs.python.org/3.4/library/weakref.html#weakref.getweakrefs
webbrowser open	A							https://docs.python.org			<pre><code>
webbrowser.open(url, new=0, autoraise=True)</code></pre><br>Display url using the default browser. If new is 0, the url is opened in the same browser window if possible. If new is 1, a new browser window is opened if possible. If new is 2, a new browser page (“tab”) is opened if possible. If autoraise is True, the window is raised if possible (note that under many window managers this will occur regardless of the setting of this variable).	https://docs.python.org/3.4/library/webbrowser.html#webbrowser.open
webbrowser open_new	A							https://docs.python.org			<pre><code>
webbrowser.open_new(url)</code></pre><br>Open url in a new window of the default browser, if possible, otherwise, open url in the only browser window.	https://docs.python.org/3.4/library/webbrowser.html#webbrowser.open_new
webbrowser open_new_tab	A							https://docs.python.org			<pre><code>
webbrowser.open_new_tab(url)</code></pre><br>Open url in a new page (“tab”) of the default browser, if possible, otherwise equivalent to open_new().	https://docs.python.org/3.4/library/webbrowser.html#webbrowser.open_new_tab
webbrowser get	A							https://docs.python.org			<pre><code>
webbrowser.get(using=None)</code></pre><br>Return a controller object for the browser type using. If using is None, return a controller for a default browser appropriate to the caller’s environment.	https://docs.python.org/3.4/library/webbrowser.html#webbrowser.get
webbrowser register	A							https://docs.python.org			<pre><code>
webbrowser.register(name, constructor, instance=None)</code></pre><br>Register the browser type name. Once a browser type is registered, the get() function can return a controller for that browser type. If instance is not provided, or is None, constructor will be called without parameters to create an instance when needed. If instance is provided, constructor will never be called, and may be None.	https://docs.python.org/3.4/library/webbrowser.html#webbrowser.register
winreg CloseKey	A							https://docs.python.org			<pre><code>
winreg.CloseKey(hkey)</code></pre><br>Closes a previously opened registry key. The hkey argument specifies a previously opened key.	https://docs.python.org/3.4/library/winreg.html#winreg.CloseKey
winreg ConnectRegistry	A							https://docs.python.org			<pre><code>
winreg.ConnectRegistry(computer_name, key)</code></pre><br>Establishes a connection to a predefined registry handle on another computer, and returns a handle object.	https://docs.python.org/3.4/library/winreg.html#winreg.ConnectRegistry
winreg CreateKey	A							https://docs.python.org			<pre><code>
winreg.CreateKey(key, sub_key)</code></pre><br>Creates or opens the specified key, returning a handle object.	https://docs.python.org/3.4/library/winreg.html#winreg.CreateKey
winreg CreateKeyEx	A							https://docs.python.org			<pre><code>
winreg.CreateKeyEx(key, sub_key, reserved=0, access=KEY_WRITE)</code></pre><br>Creates or opens the specified key, returning a handle object.	https://docs.python.org/3.4/library/winreg.html#winreg.CreateKeyEx
winreg DeleteKey	A							https://docs.python.org			<pre><code>
winreg.DeleteKey(key, sub_key)</code></pre><br>Deletes the specified key.	https://docs.python.org/3.4/library/winreg.html#winreg.DeleteKey
winreg DeleteKeyEx	A							https://docs.python.org			<pre><code>
winreg.DeleteKeyEx(key, sub_key, access=KEY_WOW64_64KEY, reserved=0)</code></pre><br>Deletes the specified key.	https://docs.python.org/3.4/library/winreg.html#winreg.DeleteKeyEx
winreg DeleteValue	A							https://docs.python.org			<pre><code>
winreg.DeleteValue(key, value)</code></pre><br>Removes a named value from a registry key.	https://docs.python.org/3.4/library/winreg.html#winreg.DeleteValue
winreg EnumKey	A							https://docs.python.org			<pre><code>
winreg.EnumKey(key, index)</code></pre><br>Enumerates subkeys of an open registry key, returning a string.	https://docs.python.org/3.4/library/winreg.html#winreg.EnumKey
winreg EnumValue	A							https://docs.python.org			<pre><code>
winreg.EnumValue(key, index)</code></pre><br>Enumerates values of an open registry key, returning a tuple.	https://docs.python.org/3.4/library/winreg.html#winreg.EnumValue
winreg ExpandEnvironmentStrings	A							https://docs.python.org			<pre><code>
winreg.ExpandEnvironmentStrings(str)</code></pre><br>Expands environment variable placeholders %NAME% in strings like REG_EXPAND_SZ:	https://docs.python.org/3.4/library/winreg.html#winreg.ExpandEnvironmentStrings
winreg FlushKey	A							https://docs.python.org			<pre><code>
winreg.FlushKey(key)</code></pre><br>Writes all the attributes of a key to the registry.	https://docs.python.org/3.4/library/winreg.html#winreg.FlushKey
winreg LoadKey	A							https://docs.python.org			<pre><code>
winreg.LoadKey(key, sub_key, file_name)</code></pre><br>Creates a subkey under the specified key and stores registration information from a specified file into that subkey.	https://docs.python.org/3.4/library/winreg.html#winreg.LoadKey
winreg OpenKey	A							https://docs.python.org			<pre><code>
winreg.OpenKey(key, sub_key, reserved=0, access=KEY_READ)</code></pre><br>Opens the specified key, returning a handle object.	https://docs.python.org/3.4/library/winreg.html#winreg.OpenKey
winreg QueryInfoKey	A							https://docs.python.org			<pre><code>
winreg.QueryInfoKey(key)</code></pre><br>Returns information about a key, as a tuple.	https://docs.python.org/3.4/library/winreg.html#winreg.QueryInfoKey
winreg QueryValue	A							https://docs.python.org			<pre><code>
winreg.QueryValue(key, sub_key)</code></pre><br>Retrieves the unnamed value for a key, as a string.	https://docs.python.org/3.4/library/winreg.html#winreg.QueryValue
winreg QueryValueEx	A							https://docs.python.org			<pre><code>
winreg.QueryValueEx(key, value_name)</code></pre><br>Retrieves the type and data for a specified value name associated with an open registry key.	https://docs.python.org/3.4/library/winreg.html#winreg.QueryValueEx
winreg SaveKey	A							https://docs.python.org			<pre><code>
winreg.SaveKey(key, file_name)</code></pre><br>Saves the specified key, and all its subkeys to the specified file.	https://docs.python.org/3.4/library/winreg.html#winreg.SaveKey
winreg SetValue	A							https://docs.python.org			<pre><code>
winreg.SetValue(key, sub_key, type, value)</code></pre><br>Associates a value with a specified key.	https://docs.python.org/3.4/library/winreg.html#winreg.SetValue
winreg SetValueEx	A							https://docs.python.org			<pre><code>
winreg.SetValueEx(key, value_name, reserved, type, value)</code></pre><br>Stores data in the value field of an open registry key.	https://docs.python.org/3.4/library/winreg.html#winreg.SetValueEx
winreg DisableReflectionKey	A							https://docs.python.org			<pre><code>
winreg.DisableReflectionKey(key)</code></pre><br>Disables registry reflection for 32-bit processes running on a 64-bit operating system.	https://docs.python.org/3.4/library/winreg.html#winreg.DisableReflectionKey
winreg EnableReflectionKey	A							https://docs.python.org			<pre><code>
winreg.EnableReflectionKey(key)</code></pre><br>Restores registry reflection for the specified disabled key.	https://docs.python.org/3.4/library/winreg.html#winreg.EnableReflectionKey
winreg QueryReflectionKey	A							https://docs.python.org			<pre><code>
winreg.QueryReflectionKey(key)</code></pre><br>Determines the reflection state for the specified key.	https://docs.python.org/3.4/library/winreg.html#winreg.QueryReflectionKey
winreg CloseKey	A							https://docs.python.org			<pre><code>
winreg.CloseKey(hkey)</code></pre><br>Closes a previously opened registry key. The hkey argument specifies a previously opened key.	https://docs.python.org/3.4/library/winreg.html#winreg.CloseKey
winreg ConnectRegistry	A							https://docs.python.org			<pre><code>
winreg.ConnectRegistry(computer_name, key)</code></pre><br>Establishes a connection to a predefined registry handle on another computer, and returns a handle object.	https://docs.python.org/3.4/library/winreg.html#winreg.ConnectRegistry
winreg CreateKey	A							https://docs.python.org			<pre><code>
winreg.CreateKey(key, sub_key)</code></pre><br>Creates or opens the specified key, returning a handle object.	https://docs.python.org/3.4/library/winreg.html#winreg.CreateKey
winreg CreateKeyEx	A							https://docs.python.org			<pre><code>
winreg.CreateKeyEx(key, sub_key, reserved=0, access=KEY_WRITE)</code></pre><br>Creates or opens the specified key, returning a handle object.	https://docs.python.org/3.4/library/winreg.html#winreg.CreateKeyEx
winreg DeleteKey	A							https://docs.python.org			<pre><code>
winreg.DeleteKey(key, sub_key)</code></pre><br>Deletes the specified key.	https://docs.python.org/3.4/library/winreg.html#winreg.DeleteKey
winreg DeleteKeyEx	A							https://docs.python.org			<pre><code>
winreg.DeleteKeyEx(key, sub_key, access=KEY_WOW64_64KEY, reserved=0)</code></pre><br>Deletes the specified key.	https://docs.python.org/3.4/library/winreg.html#winreg.DeleteKeyEx
winreg DeleteValue	A							https://docs.python.org			<pre><code>
winreg.DeleteValue(key, value)</code></pre><br>Removes a named value from a registry key.	https://docs.python.org/3.4/library/winreg.html#winreg.DeleteValue
winreg EnumKey	A							https://docs.python.org			<pre><code>
winreg.EnumKey(key, index)</code></pre><br>Enumerates subkeys of an open registry key, returning a string.	https://docs.python.org/3.4/library/winreg.html#winreg.EnumKey
winreg EnumValue	A							https://docs.python.org			<pre><code>
winreg.EnumValue(key, index)</code></pre><br>Enumerates values of an open registry key, returning a tuple.	https://docs.python.org/3.4/library/winreg.html#winreg.EnumValue
winreg ExpandEnvironmentStrings	A							https://docs.python.org			<pre><code>
winreg.ExpandEnvironmentStrings(str)</code></pre><br>Expands environment variable placeholders %NAME% in strings like REG_EXPAND_SZ:	https://docs.python.org/3.4/library/winreg.html#winreg.ExpandEnvironmentStrings
winreg FlushKey	A							https://docs.python.org			<pre><code>
winreg.FlushKey(key)</code></pre><br>Writes all the attributes of a key to the registry.	https://docs.python.org/3.4/library/winreg.html#winreg.FlushKey
winreg LoadKey	A							https://docs.python.org			<pre><code>
winreg.LoadKey(key, sub_key, file_name)</code></pre><br>Creates a subkey under the specified key and stores registration information from a specified file into that subkey.	https://docs.python.org/3.4/library/winreg.html#winreg.LoadKey
winreg OpenKey	A							https://docs.python.org			<pre><code>
winreg.OpenKey(key, sub_key, reserved=0, access=KEY_READ)</code></pre><br>Opens the specified key, returning a handle object.	https://docs.python.org/3.4/library/winreg.html#winreg.OpenKey
winreg QueryInfoKey	A							https://docs.python.org			<pre><code>
winreg.QueryInfoKey(key)</code></pre><br>Returns information about a key, as a tuple.	https://docs.python.org/3.4/library/winreg.html#winreg.QueryInfoKey
winreg QueryValue	A							https://docs.python.org			<pre><code>
winreg.QueryValue(key, sub_key)</code></pre><br>Retrieves the unnamed value for a key, as a string.	https://docs.python.org/3.4/library/winreg.html#winreg.QueryValue
winreg QueryValueEx	A							https://docs.python.org			<pre><code>
winreg.QueryValueEx(key, value_name)</code></pre><br>Retrieves the type and data for a specified value name associated with an open registry key.	https://docs.python.org/3.4/library/winreg.html#winreg.QueryValueEx
winreg SaveKey	A							https://docs.python.org			<pre><code>
winreg.SaveKey(key, file_name)</code></pre><br>Saves the specified key, and all its subkeys to the specified file.	https://docs.python.org/3.4/library/winreg.html#winreg.SaveKey
winreg SetValue	A							https://docs.python.org			<pre><code>
winreg.SetValue(key, sub_key, type, value)</code></pre><br>Associates a value with a specified key.	https://docs.python.org/3.4/library/winreg.html#winreg.SetValue
winreg SetValueEx	A							https://docs.python.org			<pre><code>
winreg.SetValueEx(key, value_name, reserved, type, value)</code></pre><br>Stores data in the value field of an open registry key.	https://docs.python.org/3.4/library/winreg.html#winreg.SetValueEx
winreg DisableReflectionKey	A							https://docs.python.org			<pre><code>
winreg.DisableReflectionKey(key)</code></pre><br>Disables registry reflection for 32-bit processes running on a 64-bit operating system.	https://docs.python.org/3.4/library/winreg.html#winreg.DisableReflectionKey
winreg EnableReflectionKey	A							https://docs.python.org			<pre><code>
winreg.EnableReflectionKey(key)</code></pre><br>Restores registry reflection for the specified disabled key.	https://docs.python.org/3.4/library/winreg.html#winreg.EnableReflectionKey
winreg QueryReflectionKey	A							https://docs.python.org			<pre><code>
winreg.QueryReflectionKey(key)</code></pre><br>Determines the reflection state for the specified key.	https://docs.python.org/3.4/library/winreg.html#winreg.QueryReflectionKey
winsound Beep	A							https://docs.python.org			<pre><code>
winsound.Beep(frequency, duration)</code></pre><br>Beep the PC’s speaker. The frequency parameter specifies frequency, in hertz, of the sound, and must be in the range 37 through 32,767. The duration parameter specifies the number of milliseconds the sound should last. If the system is not able to beep the speaker, RuntimeError is raised.	https://docs.python.org/3.4/library/winsound.html#winsound.Beep
winsound PlaySound	A							https://docs.python.org			<pre><code>
winsound.PlaySound(sound, flags)</code></pre><br>Call the underlying PlaySound() function from the Platform API. The sound parameter may be a filename, audio data as a string, or None. Its interpretation depends on the value of flags, which can be a bitwise ORed combination of the constants described below. If the sound parameter is None, any currently playing waveform sound is stopped. If the system indicates an error, RuntimeError is raised.	https://docs.python.org/3.4/library/winsound.html#winsound.PlaySound
winsound MessageBeep	A							https://docs.python.org			<pre><code>
winsound.MessageBeep(type=MB_OK)</code></pre><br>Call the underlying MessageBeep() function from the Platform API. This plays a sound as specified in the registry. The type argument specifies which sound to play; possible values are -1, MB_ICONASTERISK, MB_ICONEXCLAMATION, MB_ICONHAND, MB_ICONQUESTION, and MB_OK, all described below. The value -1 produces a “simple beep”; this is the final fallback if a sound cannot be played otherwise.	https://docs.python.org/3.4/library/winsound.html#winsound.MessageBeep
wsgiref.util guess_scheme	A							https://docs.python.org			<pre><code>
wsgiref.util.guess_scheme(environ)</code></pre><br>Return a guess for whether wsgi.url_scheme should be “http” or “https”, by checking for a HTTPS environment variable in the environ dictionary. The return value is a string.	https://docs.python.org/3.4/library/wsgiref.html#wsgiref.util.guess_scheme
wsgiref.util request_uri	A							https://docs.python.org			<pre><code>
wsgiref.util.request_uri(environ, include_query=True)</code></pre><br>Return the full request URI, optionally including the query string, using the algorithm found in the “URL Reconstruction” section of PEP 3333. If include_query is false, the query string is not included in the resulting URI.	https://docs.python.org/3.4/library/wsgiref.html#wsgiref.util.request_uri
wsgiref.util application_uri	A							https://docs.python.org			<pre><code>
wsgiref.util.application_uri(environ)</code></pre><br>Similar to request_uri(), except that the PATH_INFO and QUERY_STRING variables are ignored. The result is the base URI of the application object addressed by the request.	https://docs.python.org/3.4/library/wsgiref.html#wsgiref.util.application_uri
wsgiref.util shift_path_info	A							https://docs.python.org			<pre><code>
wsgiref.util.shift_path_info(environ)</code></pre><br>Shift a single name from PATH_INFO to SCRIPT_NAME and return the name. The environ dictionary is modified in-place; use a copy if you need to keep the original PATH_INFO or SCRIPT_NAME intact.	https://docs.python.org/3.4/library/wsgiref.html#wsgiref.util.shift_path_info
wsgiref.util setup_testing_defaults	A							https://docs.python.org			<pre><code>
wsgiref.util.setup_testing_defaults(environ)</code></pre><br>Update environ with trivial defaults for testing purposes.	https://docs.python.org/3.4/library/wsgiref.html#wsgiref.util.setup_testing_defaults
wsgiref.util is_hop_by_hop	A							https://docs.python.org			<pre><code>
wsgiref.util.is_hop_by_hop(header_name)</code></pre><br>Return true if ‘header_name’ is an HTTP/1.1 “Hop-by-Hop” header, as defined by RFC 2616.	https://docs.python.org/3.4/library/wsgiref.html#wsgiref.util.is_hop_by_hop
wsgiref.simple_server make_server	A							https://docs.python.org			<pre><code>
wsgiref.simple_server.make_server(host, port, app, server_class=WSGIServer, handler_class=WSGIRequestHandler)</code></pre><br>Create a new WSGI server listening on host and port, accepting connections for app. The return value is an instance of the supplied server_class, and will process requests using the specified handler_class. app must be a WSGI application object, as defined by PEP 3333.	https://docs.python.org/3.4/library/wsgiref.html#wsgiref.simple_server.make_server
wsgiref.simple_server demo_app	A							https://docs.python.org			<pre><code>
wsgiref.simple_server.demo_app(environ, start_response)</code></pre><br>This function is a small but complete WSGI application that returns a text page containing the message “Hello world!” and a list of the key/value pairs provided in the environ parameter. It’s useful for verifying that a WSGI server (such as wsgiref.simple_server) is able to run a simple WSGI application correctly.	https://docs.python.org/3.4/library/wsgiref.html#wsgiref.simple_server.demo_app
wsgiref.validate validator	A							https://docs.python.org			<pre><code>
wsgiref.validate.validator(application)</code></pre><br>Wrap application and return a new WSGI application object. The returned application will forward all requests to the original application, and will check that both the application and the server invoking it are conforming to the WSGI specification and to RFC 2616.	https://docs.python.org/3.4/library/wsgiref.html#wsgiref.validate.validator
wsgiref.handlers read_environ	A							https://docs.python.org			<pre><code>
wsgiref.handlers.read_environ()</code></pre><br>Transcode CGI variables from os.environ to PEP 3333 “bytes in unicode” strings, returning a new dictionary. This function is used by CGIHandler and IISCGIHandler in place of directly using os.environ, which is not necessarily WSGI-compliant on all platforms and web servers using Python 3 – specifically, ones where the OS’s actual environment is Unicode (i.e. Windows), or ones where the environment is bytes, but the system encoding used by Python to decode it is anything other than ISO-8859-1 (e.g. Unix systems using UTF-8).	https://docs.python.org/3.4/library/wsgiref.html#wsgiref.handlers.read_environ
wsgiref.util guess_scheme	A							https://docs.python.org			<pre><code>
wsgiref.util.guess_scheme(environ)</code></pre><br>Return a guess for whether wsgi.url_scheme should be “http” or “https”, by checking for a HTTPS environment variable in the environ dictionary. The return value is a string.	https://docs.python.org/3.4/library/wsgiref.html#wsgiref.util.guess_scheme
wsgiref.util request_uri	A							https://docs.python.org			<pre><code>
wsgiref.util.request_uri(environ, include_query=True)</code></pre><br>Return the full request URI, optionally including the query string, using the algorithm found in the “URL Reconstruction” section of PEP 3333. If include_query is false, the query string is not included in the resulting URI.	https://docs.python.org/3.4/library/wsgiref.html#wsgiref.util.request_uri
wsgiref.util application_uri	A							https://docs.python.org			<pre><code>
wsgiref.util.application_uri(environ)</code></pre><br>Similar to request_uri(), except that the PATH_INFO and QUERY_STRING variables are ignored. The result is the base URI of the application object addressed by the request.	https://docs.python.org/3.4/library/wsgiref.html#wsgiref.util.application_uri
wsgiref.util shift_path_info	A							https://docs.python.org			<pre><code>
wsgiref.util.shift_path_info(environ)</code></pre><br>Shift a single name from PATH_INFO to SCRIPT_NAME and return the name. The environ dictionary is modified in-place; use a copy if you need to keep the original PATH_INFO or SCRIPT_NAME intact.	https://docs.python.org/3.4/library/wsgiref.html#wsgiref.util.shift_path_info
wsgiref.util setup_testing_defaults	A							https://docs.python.org			<pre><code>
wsgiref.util.setup_testing_defaults(environ)</code></pre><br>Update environ with trivial defaults for testing purposes.	https://docs.python.org/3.4/library/wsgiref.html#wsgiref.util.setup_testing_defaults
wsgiref.util is_hop_by_hop	A							https://docs.python.org			<pre><code>
wsgiref.util.is_hop_by_hop(header_name)</code></pre><br>Return true if ‘header_name’ is an HTTP/1.1 “Hop-by-Hop” header, as defined by RFC 2616.	https://docs.python.org/3.4/library/wsgiref.html#wsgiref.util.is_hop_by_hop
wsgiref.simple_server make_server	A							https://docs.python.org			<pre><code>
wsgiref.simple_server.make_server(host, port, app, server_class=WSGIServer, handler_class=WSGIRequestHandler)</code></pre><br>Create a new WSGI server listening on host and port, accepting connections for app. The return value is an instance of the supplied server_class, and will process requests using the specified handler_class. app must be a WSGI application object, as defined by PEP 3333.	https://docs.python.org/3.4/library/wsgiref.html#wsgiref.simple_server.make_server
wsgiref.simple_server demo_app	A							https://docs.python.org			<pre><code>
wsgiref.simple_server.demo_app(environ, start_response)</code></pre><br>This function is a small but complete WSGI application that returns a text page containing the message “Hello world!” and a list of the key/value pairs provided in the environ parameter. It’s useful for verifying that a WSGI server (such as wsgiref.simple_server) is able to run a simple WSGI application correctly.	https://docs.python.org/3.4/library/wsgiref.html#wsgiref.simple_server.demo_app
wsgiref.validate validator	A							https://docs.python.org			<pre><code>
wsgiref.validate.validator(application)</code></pre><br>Wrap application and return a new WSGI application object. The returned application will forward all requests to the original application, and will check that both the application and the server invoking it are conforming to the WSGI specification and to RFC 2616.	https://docs.python.org/3.4/library/wsgiref.html#wsgiref.validate.validator
wsgiref.handlers read_environ	A							https://docs.python.org			<pre><code>
wsgiref.handlers.read_environ()</code></pre><br>Transcode CGI variables from os.environ to PEP 3333 “bytes in unicode” strings, returning a new dictionary. This function is used by CGIHandler and IISCGIHandler in place of directly using os.environ, which is not necessarily WSGI-compliant on all platforms and web servers using Python 3 – specifically, ones where the OS’s actual environment is Unicode (i.e. Windows), or ones where the environment is bytes, but the system encoding used by Python to decode it is anything other than ISO-8859-1 (e.g. Unix systems using UTF-8).	https://docs.python.org/3.4/library/wsgiref.html#wsgiref.handlers.read_environ
xml.dom registerDOMImplementation	A							https://docs.python.org			<pre><code>
xml.dom.registerDOMImplementation(name, factory)</code></pre><br>Register the factory function with the name name. The factory function should return an object which implements the DOMImplementation interface. The factory function can return the same object every time, or a new one for each call, as appropriate for the specific implementation (e.g. if that implementation supports some customization).	https://docs.python.org/3.4/library/xml.dom.html#xml.dom.registerDOMImplementation
xml.dom getDOMImplementation	A							https://docs.python.org			<pre><code>
xml.dom.getDOMImplementation(name=None, features=())</code></pre><br>Return a suitable DOM implementation. The name is either well-known, the module name of a DOM implementation, or None. If it is not None, imports the corresponding module and returns a DOMImplementation object if the import succeeds. If no name is given, and if the environment variable PYTHON_DOM is set, this variable is used to find the implementation.	https://docs.python.org/3.4/library/xml.dom.html#xml.dom.getDOMImplementation
xml.dom registerDOMImplementation	A							https://docs.python.org			<pre><code>
xml.dom.registerDOMImplementation(name, factory)</code></pre><br>Register the factory function with the name name. The factory function should return an object which implements the DOMImplementation interface. The factory function can return the same object every time, or a new one for each call, as appropriate for the specific implementation (e.g. if that implementation supports some customization).	https://docs.python.org/3.4/library/xml.dom.html#xml.dom.registerDOMImplementation
xml.dom getDOMImplementation	A							https://docs.python.org			<pre><code>
xml.dom.getDOMImplementation(name=None, features=())</code></pre><br>Return a suitable DOM implementation. The name is either well-known, the module name of a DOM implementation, or None. If it is not None, imports the corresponding module and returns a DOMImplementation object if the import succeeds. If no name is given, and if the environment variable PYTHON_DOM is set, this variable is used to find the implementation.	https://docs.python.org/3.4/library/xml.dom.html#xml.dom.getDOMImplementation
xml.dom.minidom parse	A							https://docs.python.org			<pre><code>
xml.dom.minidom.parse(filename_or_file, parser=None, bufsize=None)</code></pre><br>Return a Document from the given input. filename_or_file may be either a file name, or a file-like object. parser, if given, must be a SAX2 parser object. This function will change the document handler of the parser and activate namespace support; other parser configuration (like setting an entity resolver) must have been done in advance.	https://docs.python.org/3.4/library/xml.dom.minidom.html#xml.dom.minidom.parse
xml.dom.minidom parseString	A							https://docs.python.org			<pre><code>
xml.dom.minidom.parseString(string, parser=None)</code></pre><br>Return a Document that represents the string. This method creates an io.StringIO object for the string and passes that on to parse().	https://docs.python.org/3.4/library/xml.dom.minidom.html#xml.dom.minidom.parseString
xml.dom.pulldom parse	A							https://docs.python.org			<pre><code>
xml.dom.pulldom.parse(stream_or_string, parser=None, bufsize=None)</code></pre><br>Return a DOMEventStream from the given input. stream_or_string may be either a file name, or a file-like object. parser, if given, must be a XMLReader object. This function will change the document handler of the parser and activate namespace support; other parser configuration (like setting an entity resolver) must have been done in advance.	https://docs.python.org/3.4/library/xml.dom.pulldom.html#xml.dom.pulldom.parse
xml.dom.pulldom parseString	A							https://docs.python.org			<pre><code>
xml.dom.pulldom.parseString(string, parser=None)</code></pre><br>Return a DOMEventStream that represents the (Unicode) string.	https://docs.python.org/3.4/library/xml.dom.pulldom.html#xml.dom.pulldom.parseString
xml.etree.ElementTree Comment	A							https://docs.python.org			<pre><code>
xml.etree.ElementTree.Comment(text=None)</code></pre><br>Comment element factory. This factory function creates a special element that will be serialized as an XML comment by the standard serializer. The comment string can be either a bytestring or a Unicode string. text is a string containing the comment string. Returns an element instance representing a comment.	https://docs.python.org/3.4/library/xml.etree.elementtree.html#xml.etree.ElementTree.Comment
xml.etree.ElementTree dump	A							https://docs.python.org			<pre><code>
xml.etree.ElementTree.dump(elem)</code></pre><br>Writes an element tree or element structure to sys.stdout. This function should be used for debugging only.	https://docs.python.org/3.4/library/xml.etree.elementtree.html#xml.etree.ElementTree.dump
xml.etree.ElementTree fromstring	A							https://docs.python.org			<pre><code>
xml.etree.ElementTree.fromstring(text)</code></pre><br>Parses an XML section from a string constant. Same as XML(). text is a string containing XML data. Returns an Element instance.	https://docs.python.org/3.4/library/xml.etree.elementtree.html#xml.etree.ElementTree.fromstring
xml.etree.ElementTree fromstringlist	A							https://docs.python.org			<pre><code>
xml.etree.ElementTree.fromstringlist(sequence, parser=None)</code></pre><br>Parses an XML document from a sequence of string fragments. sequence is a list or other sequence containing XML data fragments. parser is an optional parser instance. If not given, the standard XMLParser parser is used. Returns an Element instance.	https://docs.python.org/3.4/library/xml.etree.elementtree.html#xml.etree.ElementTree.fromstringlist
xml.etree.ElementTree iselement	A							https://docs.python.org			<pre><code>
xml.etree.ElementTree.iselement(element)</code></pre><br>Checks if an object appears to be a valid element object. element is an element instance. Returns a true value if this is an element object.	https://docs.python.org/3.4/library/xml.etree.elementtree.html#xml.etree.ElementTree.iselement
xml.etree.ElementTree iterparse	A							https://docs.python.org			<pre><code>
xml.etree.ElementTree.iterparse(source, events=None, parser=None)</code></pre><br>Parses an XML section into an element tree incrementally, and reports what’s going on to the user. source is a filename or file object containing XML data. events is a sequence of events to report back. The supported events are the strings "start", "end", "start-ns" and "end-ns" (the “ns” events are used to get detailed namespace information). If events is omitted, only "end" events are reported. parser is an optional parser instance. If not given, the standard XMLParser parser is used. parser must be a subclass of XMLParser and can only use the default TreeBuilder as a target. Returns an iterator providing (event, elem) pairs.	https://docs.python.org/3.4/library/xml.etree.elementtree.html#xml.etree.ElementTree.iterparse
xml.etree.ElementTree parse	A							https://docs.python.org			<pre><code>
xml.etree.ElementTree.parse(source, parser=None)</code></pre><br>Parses an XML section into an element tree. source is a filename or file object containing XML data. parser is an optional parser instance. If not given, the standard XMLParser parser is used. Returns an ElementTree instance.	https://docs.python.org/3.4/library/xml.etree.elementtree.html#xml.etree.ElementTree.parse
xml.etree.ElementTree ProcessingInstruction	A							https://docs.python.org			<pre><code>
xml.etree.ElementTree.ProcessingInstruction(target, text=None)</code></pre><br>PI element factory. This factory function creates a special element that will be serialized as an XML processing instruction. target is a string containing the PI target. text is a string containing the PI contents, if given. Returns an element instance, representing a processing instruction.	https://docs.python.org/3.4/library/xml.etree.elementtree.html#xml.etree.ElementTree.ProcessingInstruction
xml.etree.ElementTree register_namespace	A							https://docs.python.org			<pre><code>
xml.etree.ElementTree.register_namespace(prefix, uri)</code></pre><br>Registers a namespace prefix. The registry is global, and any existing mapping for either the given prefix or the namespace URI will be removed. prefix is a namespace prefix. uri is a namespace uri. Tags and attributes in this namespace will be serialized with the given prefix, if at all possible.	https://docs.python.org/3.4/library/xml.etree.elementtree.html#xml.etree.ElementTree.register_namespace
xml.etree.ElementTree SubElement	A							https://docs.python.org			<pre><code>
xml.etree.ElementTree.SubElement(parent, tag, attrib={}, **extra)</code></pre><br>Subelement factory. This function creates an element instance, and appends it to an existing element.	https://docs.python.org/3.4/library/xml.etree.elementtree.html#xml.etree.ElementTree.SubElement
xml.etree.ElementTree tostring	A							https://docs.python.org			<pre><code>
xml.etree.ElementTree.tostring(element, encoding="us-ascii", method="xml", *, short_empty_elements=True)</code></pre><br>Generates a string representation of an XML element, including all subelements. element is an Element instance. encoding [1] is the output encoding (default is US-ASCII). Use encoding="unicode" to generate a Unicode string (otherwise, a bytestring is generated). method is either "xml", "html" or "text" (default is "xml"). short_empty_elements has the same meaning as in ElementTree.write(). Returns an (optionally) encoded string containing the XML data.	https://docs.python.org/3.4/library/xml.etree.elementtree.html#xml.etree.ElementTree.tostring
xml.etree.ElementTree tostringlist	A							https://docs.python.org			<pre><code>
xml.etree.ElementTree.tostringlist(element, encoding="us-ascii", method="xml", *, short_empty_elements=True)</code></pre><br>Generates a string representation of an XML element, including all subelements. element is an Element instance. encoding [1] is the output encoding (default is US-ASCII). Use encoding="unicode" to generate a Unicode string (otherwise, a bytestring is generated). method is either "xml", "html" or "text" (default is "xml"). short_empty_elements has the same meaning as in ElementTree.write(). Returns a list of (optionally) encoded strings containing the XML data. It does not guarantee any specific sequence, except that b"".join(tostringlist(element)) == tostring(element).	https://docs.python.org/3.4/library/xml.etree.elementtree.html#xml.etree.ElementTree.tostringlist
xml.etree.ElementTree XML	A							https://docs.python.org			<pre><code>
xml.etree.ElementTree.XML(text, parser=None)</code></pre><br>Parses an XML section from a string constant. This function can be used to embed “XML literals” in Python code. text is a string containing XML data. parser is an optional parser instance. If not given, the standard XMLParser parser is used. Returns an Element instance.	https://docs.python.org/3.4/library/xml.etree.elementtree.html#xml.etree.ElementTree.XML
xml.etree.ElementTree XMLID	A							https://docs.python.org			<pre><code>
xml.etree.ElementTree.XMLID(text, parser=None)</code></pre><br>Parses an XML section from a string constant, and also returns a dictionary which maps from element id:s to elements. text is a string containing XML data. parser is an optional parser instance. If not given, the standard XMLParser parser is used. Returns a tuple containing an Element instance and a dictionary.	https://docs.python.org/3.4/library/xml.etree.elementtree.html#xml.etree.ElementTree.XMLID
xml.etree.ElementTree Comment	A							https://docs.python.org			<pre><code>
xml.etree.ElementTree.Comment(text=None)</code></pre><br>Comment element factory. This factory function creates a special element that will be serialized as an XML comment by the standard serializer. The comment string can be either a bytestring or a Unicode string. text is a string containing the comment string. Returns an element instance representing a comment.	https://docs.python.org/3.4/library/xml.etree.elementtree.html#xml.etree.ElementTree.Comment
xml.etree.ElementTree dump	A							https://docs.python.org			<pre><code>
xml.etree.ElementTree.dump(elem)</code></pre><br>Writes an element tree or element structure to sys.stdout. This function should be used for debugging only.	https://docs.python.org/3.4/library/xml.etree.elementtree.html#xml.etree.ElementTree.dump
xml.etree.ElementTree fromstring	A							https://docs.python.org			<pre><code>
xml.etree.ElementTree.fromstring(text)</code></pre><br>Parses an XML section from a string constant. Same as XML(). text is a string containing XML data. Returns an Element instance.	https://docs.python.org/3.4/library/xml.etree.elementtree.html#xml.etree.ElementTree.fromstring
xml.etree.ElementTree fromstringlist	A							https://docs.python.org			<pre><code>
xml.etree.ElementTree.fromstringlist(sequence, parser=None)</code></pre><br>Parses an XML document from a sequence of string fragments. sequence is a list or other sequence containing XML data fragments. parser is an optional parser instance. If not given, the standard XMLParser parser is used. Returns an Element instance.	https://docs.python.org/3.4/library/xml.etree.elementtree.html#xml.etree.ElementTree.fromstringlist
xml.etree.ElementTree iselement	A							https://docs.python.org			<pre><code>
xml.etree.ElementTree.iselement(element)</code></pre><br>Checks if an object appears to be a valid element object. element is an element instance. Returns a true value if this is an element object.	https://docs.python.org/3.4/library/xml.etree.elementtree.html#xml.etree.ElementTree.iselement
xml.etree.ElementTree iterparse	A							https://docs.python.org			<pre><code>
xml.etree.ElementTree.iterparse(source, events=None, parser=None)</code></pre><br>Parses an XML section into an element tree incrementally, and reports what’s going on to the user. source is a filename or file object containing XML data. events is a sequence of events to report back. The supported events are the strings "start", "end", "start-ns" and "end-ns" (the “ns” events are used to get detailed namespace information). If events is omitted, only "end" events are reported. parser is an optional parser instance. If not given, the standard XMLParser parser is used. parser must be a subclass of XMLParser and can only use the default TreeBuilder as a target. Returns an iterator providing (event, elem) pairs.	https://docs.python.org/3.4/library/xml.etree.elementtree.html#xml.etree.ElementTree.iterparse
xml.etree.ElementTree parse	A							https://docs.python.org			<pre><code>
xml.etree.ElementTree.parse(source, parser=None)</code></pre><br>Parses an XML section into an element tree. source is a filename or file object containing XML data. parser is an optional parser instance. If not given, the standard XMLParser parser is used. Returns an ElementTree instance.	https://docs.python.org/3.4/library/xml.etree.elementtree.html#xml.etree.ElementTree.parse
xml.etree.ElementTree ProcessingInstruction	A							https://docs.python.org			<pre><code>
xml.etree.ElementTree.ProcessingInstruction(target, text=None)</code></pre><br>PI element factory. This factory function creates a special element that will be serialized as an XML processing instruction. target is a string containing the PI target. text is a string containing the PI contents, if given. Returns an element instance, representing a processing instruction.	https://docs.python.org/3.4/library/xml.etree.elementtree.html#xml.etree.ElementTree.ProcessingInstruction
xml.etree.ElementTree register_namespace	A							https://docs.python.org			<pre><code>
xml.etree.ElementTree.register_namespace(prefix, uri)</code></pre><br>Registers a namespace prefix. The registry is global, and any existing mapping for either the given prefix or the namespace URI will be removed. prefix is a namespace prefix. uri is a namespace uri. Tags and attributes in this namespace will be serialized with the given prefix, if at all possible.	https://docs.python.org/3.4/library/xml.etree.elementtree.html#xml.etree.ElementTree.register_namespace
xml.etree.ElementTree SubElement	A							https://docs.python.org			<pre><code>
xml.etree.ElementTree.SubElement(parent, tag, attrib={}, **extra)</code></pre><br>Subelement factory. This function creates an element instance, and appends it to an existing element.	https://docs.python.org/3.4/library/xml.etree.elementtree.html#xml.etree.ElementTree.SubElement
xml.etree.ElementTree tostring	A							https://docs.python.org			<pre><code>
xml.etree.ElementTree.tostring(element, encoding="us-ascii", method="xml", *, short_empty_elements=True)</code></pre><br>Generates a string representation of an XML element, including all subelements. element is an Element instance. encoding [1] is the output encoding (default is US-ASCII). Use encoding="unicode" to generate a Unicode string (otherwise, a bytestring is generated). method is either "xml", "html" or "text" (default is "xml"). short_empty_elements has the same meaning as in ElementTree.write(). Returns an (optionally) encoded string containing the XML data.	https://docs.python.org/3.4/library/xml.etree.elementtree.html#xml.etree.ElementTree.tostring
xml.etree.ElementTree tostringlist	A							https://docs.python.org			<pre><code>
xml.etree.ElementTree.tostringlist(element, encoding="us-ascii", method="xml", *, short_empty_elements=True)</code></pre><br>Generates a string representation of an XML element, including all subelements. element is an Element instance. encoding [1] is the output encoding (default is US-ASCII). Use encoding="unicode" to generate a Unicode string (otherwise, a bytestring is generated). method is either "xml", "html" or "text" (default is "xml"). short_empty_elements has the same meaning as in ElementTree.write(). Returns a list of (optionally) encoded strings containing the XML data. It does not guarantee any specific sequence, except that b"".join(tostringlist(element)) == tostring(element).	https://docs.python.org/3.4/library/xml.etree.elementtree.html#xml.etree.ElementTree.tostringlist
xml.etree.ElementTree XML	A							https://docs.python.org			<pre><code>
xml.etree.ElementTree.XML(text, parser=None)</code></pre><br>Parses an XML section from a string constant. This function can be used to embed “XML literals” in Python code. text is a string containing XML data. parser is an optional parser instance. If not given, the standard XMLParser parser is used. Returns an Element instance.	https://docs.python.org/3.4/library/xml.etree.elementtree.html#xml.etree.ElementTree.XML
xml.etree.ElementTree XMLID	A							https://docs.python.org			<pre><code>
xml.etree.ElementTree.XMLID(text, parser=None)</code></pre><br>Parses an XML section from a string constant, and also returns a dictionary which maps from element id:s to elements. text is a string containing XML data. parser is an optional parser instance. If not given, the standard XMLParser parser is used. Returns a tuple containing an Element instance and a dictionary.	https://docs.python.org/3.4/library/xml.etree.elementtree.html#xml.etree.ElementTree.XMLID
xml.etree.ElementTree Comment	A							https://docs.python.org			<pre><code>
xml.etree.ElementTree.Comment(text=None)</code></pre><br>Comment element factory. This factory function creates a special element that will be serialized as an XML comment by the standard serializer. The comment string can be either a bytestring or a Unicode string. text is a string containing the comment string. Returns an element instance representing a comment.	https://docs.python.org/3.4/library/xml.etree.elementtree.html#xml.etree.ElementTree.Comment
xml.etree.ElementTree dump	A							https://docs.python.org			<pre><code>
xml.etree.ElementTree.dump(elem)</code></pre><br>Writes an element tree or element structure to sys.stdout. This function should be used for debugging only.	https://docs.python.org/3.4/library/xml.etree.elementtree.html#xml.etree.ElementTree.dump
xml.etree.ElementTree fromstring	A							https://docs.python.org			<pre><code>
xml.etree.ElementTree.fromstring(text)</code></pre><br>Parses an XML section from a string constant. Same as XML(). text is a string containing XML data. Returns an Element instance.	https://docs.python.org/3.4/library/xml.etree.elementtree.html#xml.etree.ElementTree.fromstring
xml.etree.ElementTree fromstringlist	A							https://docs.python.org			<pre><code>
xml.etree.ElementTree.fromstringlist(sequence, parser=None)</code></pre><br>Parses an XML document from a sequence of string fragments. sequence is a list or other sequence containing XML data fragments. parser is an optional parser instance. If not given, the standard XMLParser parser is used. Returns an Element instance.	https://docs.python.org/3.4/library/xml.etree.elementtree.html#xml.etree.ElementTree.fromstringlist
xml.etree.ElementTree iselement	A							https://docs.python.org			<pre><code>
xml.etree.ElementTree.iselement(element)</code></pre><br>Checks if an object appears to be a valid element object. element is an element instance. Returns a true value if this is an element object.	https://docs.python.org/3.4/library/xml.etree.elementtree.html#xml.etree.ElementTree.iselement
xml.etree.ElementTree iterparse	A							https://docs.python.org			<pre><code>
xml.etree.ElementTree.iterparse(source, events=None, parser=None)</code></pre><br>Parses an XML section into an element tree incrementally, and reports what’s going on to the user. source is a filename or file object containing XML data. events is a sequence of events to report back. The supported events are the strings "start", "end", "start-ns" and "end-ns" (the “ns” events are used to get detailed namespace information). If events is omitted, only "end" events are reported. parser is an optional parser instance. If not given, the standard XMLParser parser is used. parser must be a subclass of XMLParser and can only use the default TreeBuilder as a target. Returns an iterator providing (event, elem) pairs.	https://docs.python.org/3.4/library/xml.etree.elementtree.html#xml.etree.ElementTree.iterparse
xml.etree.ElementTree parse	A							https://docs.python.org			<pre><code>
xml.etree.ElementTree.parse(source, parser=None)</code></pre><br>Parses an XML section into an element tree. source is a filename or file object containing XML data. parser is an optional parser instance. If not given, the standard XMLParser parser is used. Returns an ElementTree instance.	https://docs.python.org/3.4/library/xml.etree.elementtree.html#xml.etree.ElementTree.parse
xml.etree.ElementTree ProcessingInstruction	A							https://docs.python.org			<pre><code>
xml.etree.ElementTree.ProcessingInstruction(target, text=None)</code></pre><br>PI element factory. This factory function creates a special element that will be serialized as an XML processing instruction. target is a string containing the PI target. text is a string containing the PI contents, if given. Returns an element instance, representing a processing instruction.	https://docs.python.org/3.4/library/xml.etree.elementtree.html#xml.etree.ElementTree.ProcessingInstruction
xml.etree.ElementTree register_namespace	A							https://docs.python.org			<pre><code>
xml.etree.ElementTree.register_namespace(prefix, uri)</code></pre><br>Registers a namespace prefix. The registry is global, and any existing mapping for either the given prefix or the namespace URI will be removed. prefix is a namespace prefix. uri is a namespace uri. Tags and attributes in this namespace will be serialized with the given prefix, if at all possible.	https://docs.python.org/3.4/library/xml.etree.elementtree.html#xml.etree.ElementTree.register_namespace
xml.etree.ElementTree SubElement	A							https://docs.python.org			<pre><code>
xml.etree.ElementTree.SubElement(parent, tag, attrib={}, **extra)</code></pre><br>Subelement factory. This function creates an element instance, and appends it to an existing element.	https://docs.python.org/3.4/library/xml.etree.elementtree.html#xml.etree.ElementTree.SubElement
xml.etree.ElementTree tostring	A							https://docs.python.org			<pre><code>
xml.etree.ElementTree.tostring(element, encoding="us-ascii", method="xml", *, short_empty_elements=True)</code></pre><br>Generates a string representation of an XML element, including all subelements. element is an Element instance. encoding [1] is the output encoding (default is US-ASCII). Use encoding="unicode" to generate a Unicode string (otherwise, a bytestring is generated). method is either "xml", "html" or "text" (default is "xml"). short_empty_elements has the same meaning as in ElementTree.write(). Returns an (optionally) encoded string containing the XML data.	https://docs.python.org/3.4/library/xml.etree.elementtree.html#xml.etree.ElementTree.tostring
xml.etree.ElementTree tostringlist	A							https://docs.python.org			<pre><code>
xml.etree.ElementTree.tostringlist(element, encoding="us-ascii", method="xml", *, short_empty_elements=True)</code></pre><br>Generates a string representation of an XML element, including all subelements. element is an Element instance. encoding [1] is the output encoding (default is US-ASCII). Use encoding="unicode" to generate a Unicode string (otherwise, a bytestring is generated). method is either "xml", "html" or "text" (default is "xml"). short_empty_elements has the same meaning as in ElementTree.write(). Returns a list of (optionally) encoded strings containing the XML data. It does not guarantee any specific sequence, except that b"".join(tostringlist(element)) == tostring(element).	https://docs.python.org/3.4/library/xml.etree.elementtree.html#xml.etree.ElementTree.tostringlist
xml.etree.ElementTree XML	A							https://docs.python.org			<pre><code>
xml.etree.ElementTree.XML(text, parser=None)</code></pre><br>Parses an XML section from a string constant. This function can be used to embed “XML literals” in Python code. text is a string containing XML data. parser is an optional parser instance. If not given, the standard XMLParser parser is used. Returns an Element instance.	https://docs.python.org/3.4/library/xml.etree.elementtree.html#xml.etree.ElementTree.XML
xml.etree.ElementTree XMLID	A							https://docs.python.org			<pre><code>
xml.etree.ElementTree.XMLID(text, parser=None)</code></pre><br>Parses an XML section from a string constant, and also returns a dictionary which maps from element id:s to elements. text is a string containing XML data. parser is an optional parser instance. If not given, the standard XMLParser parser is used. Returns a tuple containing an Element instance and a dictionary.	https://docs.python.org/3.4/library/xml.etree.elementtree.html#xml.etree.ElementTree.XMLID
xml.sax make_parser	A							https://docs.python.org			<pre><code>
xml.sax.make_parser(parser_list=[])</code></pre><br>Create and return a SAX XMLReader object. The first parser found will be used. If parser_list is provided, it must be a sequence of strings which name modules that have a function named create_parser(). Modules listed in parser_list will be used before modules in the default list of parsers.	https://docs.python.org/3.4/library/xml.sax.html#xml.sax.make_parser
xml.sax parse	A							https://docs.python.org			<pre><code>
xml.sax.parse(filename_or_stream, handler, error_handler=handler.ErrorHandler())</code></pre><br>Create a SAX parser and use it to parse a document. The document, passed in as filename_or_stream, can be a filename or a file object. The handler parameter needs to be a SAX ContentHandler instance. If error_handler is given, it must be a SAX ErrorHandler instance; if omitted, SAXParseException will be raised on all errors. There is no return value; all work must be done by the handler passed in.	https://docs.python.org/3.4/library/xml.sax.html#xml.sax.parse
xml.sax parseString	A							https://docs.python.org			<pre><code>
xml.sax.parseString(string, handler, error_handler=handler.ErrorHandler())</code></pre><br>Similar to parse(), but parses from a buffer string received as a parameter.	https://docs.python.org/3.4/library/xml.sax.html#xml.sax.parseString
xml.sax.saxutils escape	A							https://docs.python.org			<pre><code>
xml.sax.saxutils.escape(data, entities={})</code></pre><br>Escape '&', '<', and '>' in a string of data.	https://docs.python.org/3.4/library/xml.sax.utils.html#xml.sax.saxutils.escape
xml.sax.saxutils unescape	A							https://docs.python.org			<pre><code>
xml.sax.saxutils.unescape(data, entities={})</code></pre><br>Unescape '&amp;', '&lt;', and '&gt;' in a string of data.	https://docs.python.org/3.4/library/xml.sax.utils.html#xml.sax.saxutils.unescape
xml.sax.saxutils quoteattr	A							https://docs.python.org			<pre><code>
xml.sax.saxutils.quoteattr(data, entities={})</code></pre><br>Similar to escape(), but also prepares data to be used as an attribute value. The return value is a quoted version of data with any additional required replacements. quoteattr() will select a quote character based on the content of data, attempting to avoid encoding any quote characters in the string. If both single- and double-quote characters are already in data, the double-quote characters will be encoded and data will be wrapped in double-quotes. The resulting string can be used directly as an attribute value:	https://docs.python.org/3.4/library/xml.sax.utils.html#xml.sax.saxutils.quoteattr
xml.sax.saxutils prepare_input_source	A							https://docs.python.org			<pre><code>
xml.sax.saxutils.prepare_input_source(source, base='')</code></pre><br>This function takes an input source and an optional base URL and returns a fully resolved InputSource object ready for reading. The input source can be given as a string, a file-like object, or an InputSource object; parsers will use this function to implement the polymorphic source argument to their parse() method.	https://docs.python.org/3.4/library/xml.sax.utils.html#xml.sax.saxutils.prepare_input_source
xmlrpc.client dumps	A							https://docs.python.org			<pre><code>
xmlrpc.client.dumps(params, methodname=None, methodresponse=None, encoding=None, allow_none=False)</code></pre><br>Convert params into an XML-RPC request. or into a response if methodresponse is true. params can be either a tuple of arguments or an instance of the Fault exception class. If methodresponse is true, only a single value can be returned, meaning that params must be of length 1. encoding, if supplied, is the encoding to use in the generated XML; the default is UTF-8. Python’s None value cannot be used in standard XML-RPC; to allow using it via an extension, provide a true value for allow_none.	https://docs.python.org/3.4/library/xmlrpc.client.html#xmlrpc.client.dumps
xmlrpc.client loads	A							https://docs.python.org			<pre><code>
xmlrpc.client.loads(data, use_datetime=False, use_builtin_types=False)</code></pre><br>Convert an XML-RPC request or response into Python objects, a (params, methodname). params is a tuple of argument; methodname is a string, or None if no method name is present in the packet. If the XML-RPC packet represents a fault condition, this function will raise a Fault exception. The use_builtin_types flag can be used to cause date/time values to be presented as datetime.datetime objects and binary data to be presented as bytes objects; this flag is false by default.	https://docs.python.org/3.4/library/xmlrpc.client.html#xmlrpc.client.loads
xmlrpc.client dumps	A							https://docs.python.org			<pre><code>
xmlrpc.client.dumps(params, methodname=None, methodresponse=None, encoding=None, allow_none=False)</code></pre><br>Convert params into an XML-RPC request. or into a response if methodresponse is true. params can be either a tuple of arguments or an instance of the Fault exception class. If methodresponse is true, only a single value can be returned, meaning that params must be of length 1. encoding, if supplied, is the encoding to use in the generated XML; the default is UTF-8. Python’s None value cannot be used in standard XML-RPC; to allow using it via an extension, provide a true value for allow_none.	https://docs.python.org/3.4/library/xmlrpc.client.html#xmlrpc.client.dumps
xmlrpc.client loads	A							https://docs.python.org			<pre><code>
xmlrpc.client.loads(data, use_datetime=False, use_builtin_types=False)</code></pre><br>Convert an XML-RPC request or response into Python objects, a (params, methodname). params is a tuple of argument; methodname is a string, or None if no method name is present in the packet. If the XML-RPC packet represents a fault condition, this function will raise a Fault exception. The use_builtin_types flag can be used to cause date/time values to be presented as datetime.datetime objects and binary data to be presented as bytes objects; this flag is false by default.	https://docs.python.org/3.4/library/xmlrpc.client.html#xmlrpc.client.loads
zipfile is_zipfile	A							https://docs.python.org			<pre><code>
zipfile.is_zipfile(filename)</code></pre><br>Returns True if filename is a valid ZIP file based on its magic number, otherwise returns False. filename may be a file or file-like object too.	https://docs.python.org/3.4/library/zipfile.html#zipfile.is_zipfile
zlib adler32	A							https://docs.python.org			<pre><code>
zlib.adler32(data[, value])</code></pre><br>Computes an Adler-32 checksum of data. (An Adler-32 checksum is almost as reliable as a CRC32 but can be computed much more quickly.) If value is present, it is used as the starting value of the checksum; otherwise, a fixed default value is used. This allows computing a running checksum over the concatenation of several inputs. The algorithm is not cryptographically strong, and should not be used for authentication or digital signatures. Since the algorithm is designed for use as a checksum algorithm, it is not suitable for use as a general hash algorithm.	https://docs.python.org/3.4/library/zlib.html#zlib.adler32
zlib compress	A							https://docs.python.org			<pre><code>
zlib.compress(data[, level])</code></pre><br>Compresses the bytes in data, returning a bytes object containing compressed data. level is an integer from 0 to 9 controlling the level of compression; 1 is fastest and produces the least compression, 9 is slowest and produces the most. 0 is no compression. The default value is 6. Raises the error exception if any error occurs.	https://docs.python.org/3.4/library/zlib.html#zlib.compress
zlib compressobj	A							https://docs.python.org			<pre><code>
zlib.compressobj(level=-1, method=DEFLATED, wbits=15, memLevel=8, strategy=Z_DEFAULT_STRATEGY[, zdict])</code></pre><br>Returns a compression object, to be used for compressing data streams that won’t fit into memory at once.	https://docs.python.org/3.4/library/zlib.html#zlib.compressobj
zlib crc32	A							https://docs.python.org			<pre><code>
zlib.crc32(data[, value])</code></pre><br>Computes a CRC (Cyclic Redundancy Check) checksum of data. If value is present, it is used as the starting value of the checksum; otherwise, a fixed default value is used. This allows computing a running checksum over the concatenation of several inputs. The algorithm is not cryptographically strong, and should not be used for authentication or digital signatures. Since the algorithm is designed for use as a checksum algorithm, it is not suitable for use as a general hash algorithm.	https://docs.python.org/3.4/library/zlib.html#zlib.crc32
zlib decompress	A							https://docs.python.org			<pre><code>
zlib.decompress(data[, wbits[, bufsize]])</code></pre><br>Decompresses the bytes in data, returning a bytes object containing the uncompressed data. The wbits parameter controls the size of the window buffer, and is discussed further below. If bufsize is given, it is used as the initial size of the output buffer. Raises the error exception if any error occurs.	https://docs.python.org/3.4/library/zlib.html#zlib.decompress
zlib decompressobj	A							https://docs.python.org			<pre><code>
zlib.decompressobj(wbits=15[, zdict])</code></pre><br>Returns a decompression object, to be used for decompressing data streams that won’t fit into memory at once.	https://docs.python.org/3.4/library/zlib.html#zlib.decompressobj
