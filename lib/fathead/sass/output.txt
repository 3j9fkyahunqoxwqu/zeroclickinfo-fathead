rgb	A			functions							<pre><code>rgb($red, $green, $blue)</code></pre><br>Creates a Color from red, green, and blue values.<br><h5>Parameters</h5><ul><li>$red - <p>The amount of red in the color. Must be between 0 and 255 inclusive, or between <code>0%</code> and <code>100%</code> inclusive</p></li><li>$green - <p>The amount of green in the color. Must be between 0 and 255 inclusive, or between <code>0%</code> and <code>100%</code> inclusive</p></li><li>$blue - <p>The amount of blue in the color. Must be between 0 and 255 inclusive, or between <code>0%</code> and <code>100%</code> inclusive</p></li></ul>	http://sass-lang.com/documentation/Sass/Script/Functions.html#rgb-instance_method
rgba	A			functions							<pre><code>rgba($red, $green, $blue, $alpha)</code></pre><br>Creates a Color from red, green, blue, and alpha values.<br><h5>Examples</h5><pre class="example code"><code>rgba(#102030, 0.5) =&gt; rgba(16, 32, 48, 0.5)\nrgba(blue, 0.2)    =&gt; rgba(0, 0, 255, 0.2)</code></pre><br><h5>Parameters</h5><ul><li>$red - <p>The amount of red in the color. Must be between 0 and 255 inclusive or 0% and 100% inclusive</p></li><li>$green - <p>The amount of green in the color. Must be between 0 and 255 inclusive or 0% and 100% inclusive</p></li><li>$blue - <p>The amount of blue in the color. Must be between 0 and 255 inclusive or 0% and 100% inclusive</p></li><li>$alpha - <p>The opacity of the color. Must be between 0 and 1 inclusive</p></li></ul>	http://sass-lang.com/documentation/Sass/Script/Functions.html#rgba-instance_method
red	A			functions							<pre><code>red($color)</code></pre><br>Gets the red component of a color.<br><h5>Parameters</h5><ul><li>$color</li></ul>	http://sass-lang.com/documentation/Sass/Script/Functions.html#red-instance_method
green	A			functions							<pre><code>green($color)</code></pre><br>Gets the green component of a color.<br><h5>Parameters</h5><ul><li>$color</li></ul>	http://sass-lang.com/documentation/Sass/Script/Functions.html#green-instance_method
blue	A			functions							<pre><code>blue($color)</code></pre><br>Gets the blue component of a color.<br><h5>Parameters</h5><ul><li>$color</li></ul>	http://sass-lang.com/documentation/Sass/Script/Functions.html#blue-instance_method
mix	A			functions							<pre><code>mix($color1, $color2, [$weight])</code></pre><br>Mixes two colors together.<br><h5>Examples</h5><pre class="example code"><code>mix(#f00, #00f) =&gt; #7f007f\nmix(#f00, #00f, 25%) =&gt; #3f00bf\nmix(rgba(255, 0, 0, 0.5), #00f) =&gt; rgba(63, 0, 191, 0.75)</code></pre><br><h5>Parameters</h5><ul><li>$color1</li><li>$color2</li><li>$weight - <p>The relative weight of each color. Closer to <code>0%</code> gives more weight to <code>$color1</code>, closer to <code>100%</code> gives more weight to <code>$color2</code></p></li></ul>	http://sass-lang.com/documentation/Sass/Script/Functions.html#mix-instance_method
hsl	A			functions							<pre><code>hsl($hue, $saturation, $lightness)</code></pre><br>Creates a Color from hue, saturation, and lightness values.<br><h5>Parameters</h5><ul><li>$hue - <p>The hue of the color. Should be between 0 and 360 degrees, inclusive</p></li><li>$saturation - <p>The saturation of the color. Must be between <code>0%</code> and <code>100%</code>, inclusive</p></li><li>$lightness - <p>The lightness of the color. Must be between <code>0%</code> and <code>100%</code>, inclusive</p></li></ul>	http://sass-lang.com/documentation/Sass/Script/Functions.html#hsl-instance_method
hsla	A			functions							<pre><code>hsla($hue, $saturation, $lightness, $alpha)</code></pre><br>Creates a Color from hue, saturation, lightness, and alpha values.<br><h5>Parameters</h5><ul><li>$hue - <p>The hue of the color. Should be between 0 and 360 degrees, inclusive</p></li><li>$saturation - <p>The saturation of the color. Must be between <code>0%</code> and <code>100%</code>, inclusive</p></li><li>$lightness - <p>The lightness of the color. Must be between <code>0%</code> and <code>100%</code>, inclusive</p></li><li>$alpha - <p>The opacity of the color. Must be between 0 and 1, inclusive</p></li></ul>	http://sass-lang.com/documentation/Sass/Script/Functions.html#hsla-instance_method
hue	A			functions							<pre><code>hue($color)</code></pre><br>Gets the hue component of a color.<br><h5>Parameters</h5><ul><li>$color</li></ul>	http://sass-lang.com/documentation/Sass/Script/Functions.html#hue-instance_method
saturation	A			functions							<pre><code>saturation($color)</code></pre><br>Gets the saturation component of a color.<br><h5>Parameters</h5><ul><li>$color</li></ul>	http://sass-lang.com/documentation/Sass/Script/Functions.html#saturation-instance_method
lightness	A			functions							<pre><code>lightness($color)</code></pre><br>Gets the lightness component of a color.<br><h5>Parameters</h5><ul><li>$color</li></ul>	http://sass-lang.com/documentation/Sass/Script/Functions.html#lightness-instance_method
adjust-hue	A			functions							<pre><code>adjust-hue($color, $degrees)</code></pre><br>Changes the hue of a color.<br><h5>Examples</h5><pre class="example code"><code>adjust-hue(hsl(120, 30%, 90%), 60deg) =&gt; hsl(180, 30%, 90%)\nadjust-hue(hsl(120, 30%, 90%), -60deg) =&gt; hsl(60, 30%, 90%)\nadjust-hue(#811, 45deg) =&gt; #886a11</code></pre><br><h5>Parameters</h5><ul><li>$color</li><li>$degrees - <p>The number of degrees to rotate the hue</p></li></ul>	http://sass-lang.com/documentation/Sass/Script/Functions.html#adjust_hue-instance_method
lighten	A			functions							<pre><code>lighten($color, $amount)</code></pre><br>Makes a color lighter.<br><h5>Examples</h5><pre class="example code"><code>lighten(hsl(0, 0%, 0%), 30%) =&gt; hsl(0, 0, 30)\nlighten(#800, 20%) =&gt; #e00</code></pre><br><h5>Parameters</h5><ul><li>$color</li><li>$amount - <p>The amount to increase the lightness by, between <code>0%</code> and <code>100%</code></p></li></ul>	http://sass-lang.com/documentation/Sass/Script/Functions.html#lighten-instance_method
darken	A			functions							<pre><code>darken($color, $amount)</code></pre><br>Makes a color darker.<br><h5>Examples</h5><pre class="example code"><code>darken(hsl(25, 100%, 80%), 30%) =&gt; hsl(25, 100%, 50%)\ndarken(#800, 20%) =&gt; #200</code></pre><br><h5>Parameters</h5><ul><li>$color</li><li>$amount - <p>The amount to decrease the lightness by, between <code>0%</code> and <code>100%</code></p></li></ul>	http://sass-lang.com/documentation/Sass/Script/Functions.html#darken-instance_method
saturate	A			functions							<pre><code>saturate($color, $amount)</code></pre><br>Makes a color more saturated.<br><h5>Examples</h5><pre class="example code"><code>saturate(hsl(120, 30%, 90%), 20%) =&gt; hsl(120, 50%, 90%)\nsaturate(#855, 20%) =&gt; #9e3f3f</code></pre><br><h5>Parameters</h5><ul><li>$color</li><li>$amount - <p>The amount to increase the saturation by, between <code>0%</code> and <code>100%</code></p></li></ul>	http://sass-lang.com/documentation/Sass/Script/Functions.html#saturate-instance_method
desaturate	A			functions							<pre><code>desaturate($color, $amount)</code></pre><br>Makes a color less saturated.<br><h5>Examples</h5><pre class="example code"><code>desaturate(hsl(120, 30%, 90%), 20%) =&gt; hsl(120, 10%, 90%)\ndesaturate(#855, 20%) =&gt; #726b6b</code></pre><br><h5>Parameters</h5><ul><li>$color</li><li>$amount - <p>The amount to decrease the saturation by, between <code>0%</code> and <code>100%</code></p></li></ul>	http://sass-lang.com/documentation/Sass/Script/Functions.html#desaturate-instance_method
grayscale	A			functions							<pre><code>grayscale($color)</code></pre><br>Converts a color to grayscale.<br><h5>Parameters</h5><ul><li>$color</li></ul>	http://sass-lang.com/documentation/Sass/Script/Functions.html#grayscale-instance_method
complement	A			functions							<pre><code>complement($color)</code></pre><br>Returns the complement of a color.<br><h5>Parameters</h5><ul><li>$color</li></ul>	http://sass-lang.com/documentation/Sass/Script/Functions.html#complement-instance_method
invert	A			functions							<pre><code>invert($color)</code></pre><br>Returns the inverse of a color.<br><h5>Parameters</h5><ul><li>$color</li></ul>	http://sass-lang.com/documentation/Sass/Script/Functions.html#invert-instance_method
alpha	A			functions							<pre><code>alpha($color)</code></pre><br>Gets the alpha component (opacity) of a color.<br><h5>Parameters</h5><ul><li>$color</li></ul>	http://sass-lang.com/documentation/Sass/Script/Functions.html#alpha-instance_method
rgba	A			functions							<pre><code>rgba($color, $alpha)</code></pre><br>Changes the alpha component for a color.<br><h5>Examples</h5><pre class="example code"><code>rgba(#102030, 0.5) =&gt; rgba(16, 32, 48, 0.5)\nrgba(blue, 0.2)    =&gt; rgba(0, 0, 255, 0.2)</code></pre><br><h5>Parameters</h5><ul><li>$red - <p>The amount of red in the color. Must be between 0 and 255 inclusive or 0% and 100% inclusive</p></li><li>$green - <p>The amount of green in the color. Must be between 0 and 255 inclusive or 0% and 100% inclusive</p></li><li>$blue - <p>The amount of blue in the color. Must be between 0 and 255 inclusive or 0% and 100% inclusive</p></li><li>$alpha - <p>The opacity of the color. Must be between 0 and 1 inclusive</p></li></ul>	http://sass-lang.com/documentation/Sass/Script/Functions.html#rgba-instance_method
opacify	A			functions							<pre><code>opacify($color, $amount)</code></pre><br>Makes a color more opaque.<br><h5>Examples</h5><pre class="example code"><code>opacify(rgba(0, 0, 0, 0.5), 0.1) =&gt; rgba(0, 0, 0, 0.6)\nopacify(rgba(0, 0, 17, 0.8), 0.2) =&gt; #001</code></pre><br><h5>Parameters</h5><ul><li>$color</li><li>$amount - <p>The amount to increase the opacity by, between 0 and 1</p></li></ul>	http://sass-lang.com/documentation/Sass/Script/Functions.html#opacify-instance_method
transparentize	A			functions							<pre><code>transparentize($color, $amount)</code></pre><br>Makes a color more transparent.<br><h5>Examples</h5><pre class="example code"><code>transparentize(rgba(0, 0, 0, 0.5), 0.1) =&gt; rgba(0, 0, 0, 0.4)\ntransparentize(rgba(0, 0, 0, 0.8), 0.2) =&gt; rgba(0, 0, 0, 0.6)</code></pre><br><h5>Parameters</h5><ul><li>$color</li><li>$amount - <p>The amount to decrease the opacity by, between 0 and 1</p></li></ul>	http://sass-lang.com/documentation/Sass/Script/Functions.html#transparentize-instance_method
adjust-color	A			functions							<pre><code>adjust-color($color, [$red], [$green], [$blue], [$hue], [$saturation], [$lightness], [$alpha])</code></pre><br>Increases or decreases one or more components of a color.<br><h5>Examples</h5><pre class="example code"><code>adjust-color(#102030, $blue: 5) =&gt; #102035\nadjust-color(#102030, $red: -5, $blue: 5) =&gt; #0b2035\nadjust-color(hsl(25, 100%, 80%), $lightness: -30%, $alpha: -0.4) =&gt; hsla(25, 100%, 50%, 0.6)</code></pre><br><h5>Parameters</h5><ul><li>$color</li><li>$red - <p>The adjustment to make on the red component, between -255 and 255 inclusive</p></li><li>$green - <p>The adjustment to make on the green component, between -255 and 255 inclusive</p></li><li>$blue - <p>The adjustment to make on the blue component, between -255 and 255 inclusive</p></li><li>$hue - <p>The adjustment to make on the hue component, in degrees</p></li><li>$saturation - <p>The adjustment to make on the saturation component, between <code>-100%</code> and <code>100%</code> inclusive</p></li><li>$lightness - <p>The adjustment to make on the lightness component, between <code>-100%</code> and <code>100%</code> inclusive</p></li><li>$alpha - <p>The adjustment to make on the alpha component, between -1 and 1 inclusive</p></li></ul>	http://sass-lang.com/documentation/Sass/Script/Functions.html#adjust_color-instance_method
scale-color	A			functions							<pre><code>scale-color($color, [$red], [$green], [$blue], [$saturation], [$lightness], [$alpha])</code></pre><br>Fluidly scales one or more properties of a color.<br><h5>Examples</h5><pre class="example code"><code>scale-color(hsl(120, 70%, 80%), $lightness: 50%) =&gt; hsl(120, 70%, 90%)\nscale-color(rgb(200, 150%, 170%), $green: -40%, $blue: 70%) =&gt; rgb(200, 90, 229)\nscale-color(hsl(200, 70%, 80%), $saturation: -90%, $alpha: -30%) =&gt; hsla(200, 7%, 80%, 0.7)</code></pre><br><h5>Parameters</h5><ul><li>$color</li><li>$red</li><li>$green</li><li>$blue</li><li>$saturation</li><li>$lightness</li><li>$alpha</li></ul>	http://sass-lang.com/documentation/Sass/Script/Functions.html#scale_color-instance_method
change-color	A			functions							<pre><code>change-color($color, [$red], [$green], [$blue], [$hue], [$saturation], [$lightness], [$alpha])</code></pre><br>Changes one or more properties of a color.<br><h5>Examples</h5><pre class="example code"><code>change-color(#102030, $blue: 5) =&gt; #102005\nchange-color(#102030, $red: 120, $blue: 5) =&gt; #782005\nchange-color(hsl(25, 100%, 80%), $lightness: 40%, $alpha: 0.8) =&gt; hsla(25, 100%, 40%, 0.8)</code></pre><br><h5>Parameters</h5><ul><li>$color</li><li>$red - <p>The new red component for the color, within 0 and 255 inclusive</p></li><li>$green - <p>The new green component for the color, within 0 and 255 inclusive</p></li><li>$blue - <p>The new blue component for the color, within 0 and 255 inclusive</p></li><li>$hue - <p>The new hue component for the color, in degrees</p></li><li>$saturation - <p>The new saturation component for the color, between <code>0%</code> and <code>100%</code> inclusive</p></li><li>$lightness - <p>The new lightness component for the color, within <code>0%</code> and <code>100%</code> inclusive</p></li><li>$alpha - <p>The new alpha component for the color, within 0 and 1 inclusive</p></li></ul>	http://sass-lang.com/documentation/Sass/Script/Functions.html#change_color-instance_method
ie-hex-str	A			functions							<pre><code>ie-hex-str($color)</code></pre><br>Converts a color into the format understood by IE filters.<br><h5>Examples</h5><pre class="example code"><code>ie-hex-str(#abc) =&gt; #FFAABBCC\nie-hex-str(#3322BB) =&gt; #FF3322BB\nie-hex-str(rgba(0, 255, 0, 0.5)) =&gt; #8000FF00</code></pre><br><h5>Parameters</h5><ul><li>$color</li></ul>	http://sass-lang.com/documentation/Sass/Script/Functions.html#ie_hex_str-instance_method
unquote	A			functions							<pre><code>unquote($string)</code></pre><br>Removes quotes from a string.<br><h5>Examples</h5><pre class="example code"><code>unquote("foo") =&gt; foo\nunquote(foo) =&gt; foo</code></pre><br><h5>Parameters</h5><ul><li>$string</li></ul>	http://sass-lang.com/documentation/Sass/Script/Functions.html#unquote-instance_method
quote	A			functions							<pre><code>quote($string)</code></pre><br>Adds quotes to a string.<br><h5>Examples</h5><pre class="example code"><code>quote("foo") =&gt; "foo"\nquote(foo) =&gt; "foo"</code></pre><br><h5>Parameters</h5><ul><li>$string</li></ul>	http://sass-lang.com/documentation/Sass/Script/Functions.html#quote-instance_method
str-length	A			functions							<pre><code>str-length($string)</code></pre><br>Returns the number of characters in a string.<br><h5>Examples</h5><pre class="example code"><code>str-length("foo") =&gt; 3</code></pre><br><h5>Parameters</h5><ul><li>$string</li></ul>	http://sass-lang.com/documentation/Sass/Script/Functions.html#str_length-instance_method
str-insert	A			functions							<pre><code>str-insert($string, $insert, $index)</code></pre><br>Inserts $insert into $string at $index.<br><h5>Examples</h5><pre class="example code"><code>str-insert("abcd", "X", 1) =&gt; "Xabcd"\nstr-insert("abcd", "X", 4) =&gt; "abcXd"\nstr-insert("abcd", "X", 5) =&gt; "abcdX"</code></pre><br><h5>Parameters</h5><ul><li>$string</li><li>$insert</li><li>$index - <p>The position at which <code>$insert</code> will be inserted. Negative indices count from the end of <code>$string</code>. An index that&#39;s outside the bounds of the string will insert <code>$insert</code> at the front or back of the string</p></li></ul>	http://sass-lang.com/documentation/Sass/Script/Functions.html#str_insert-instance_method
str-index	A			functions							<pre><code>str-index($string, $substring)</code></pre><br>Returns the index of the first occurrence of $substring in $string.<br><h5>Examples</h5><pre class="example code"><code>str-index(abcd, a)  =&gt; 1\nstr-index(abcd, ab) =&gt; 1\nstr-index(abcd, X)  =&gt; null\nstr-index(abcd, c)  =&gt; 3</code></pre><br><h5>Parameters</h5><ul><li>$string</li><li>$substring</li></ul>	http://sass-lang.com/documentation/Sass/Script/Functions.html#str_index-instance_method
str-slice	A			functions							<pre><code>str-slice($string, $start-at, [$end-at])</code></pre><br>Extracts a substring from $string.<br><h5>Examples</h5><pre class="example code"><code>str-slice("abcd", 2, 3)   =&gt; "bc"\nstr-slice("abcd", 2)      =&gt; "bcd"\nstr-slice("abcd", -3, -2) =&gt; "bc"\nstr-slice("abcd", 2, -2)  =&gt; "bc"</code></pre><br><h5>Parameters</h5><ul><li>$start-at - <p>The index of the first character of the substring. If this is negative, it counts from the end of <code>$string</code></p></li><li>$end-before - <p>The index of the last character of the substring. If this is negative, it counts from the end of <code>$string</code>. Defaults to -1</p></li></ul>	http://sass-lang.com/documentation/Sass/Script/Functions.html#str_slice-instance_method
to-upper-case	A			functions							<pre><code>to-upper-case($string)</code></pre><br>Converts a string to upper case.<br><h5>Examples</h5><pre class="example code"><code>to-upper-case(abcd) =&gt; ABCD</code></pre><br><h5>Parameters</h5><ul><li>$string</li></ul>	http://sass-lang.com/documentation/Sass/Script/Functions.html#to_upper_case-instance_method
to-lower-case	A			functions							<pre><code>to-lower-case($string)</code></pre><br>Converts a string to lower case.<br><h5>Examples</h5><pre class="example code"><code>to-lower-case(ABCD) =&gt; abcd</code></pre><br><h5>Parameters</h5><ul><li>$string</li></ul>	http://sass-lang.com/documentation/Sass/Script/Functions.html#to_lower_case-instance_method
percentage	A			functions							<pre><code>percentage($number)</code></pre><br>Converts a unitless number to a percentage.<br><h5>Examples</h5><pre class="example code"><code>percentage(0.2) =&gt; 20%\npercentage(100px / 50px) =&gt; 200%</code></pre><br><h5>Parameters</h5><ul><li>$number</li></ul>	http://sass-lang.com/documentation/Sass/Script/Functions.html#percentage-instance_method
round	A			functions							<pre><code>round($number)</code></pre><br>Rounds a number to the nearest whole number.<br><h5>Examples</h5><pre class="example code"><code>round(10.4px) =&gt; 10px\nround(10.6px) =&gt; 11px</code></pre><br><h5>Parameters</h5><ul><li>$number</li></ul>	http://sass-lang.com/documentation/Sass/Script/Functions.html#round-instance_method
ceil	A			functions							<pre><code>ceil($number)</code></pre><br>Rounds a number up to the next whole number.<br><h5>Examples</h5><pre class="example code"><code>ceil(10.4px) =&gt; 11px\nceil(10.6px) =&gt; 11px</code></pre><br><h5>Parameters</h5><ul><li>$number</li></ul>	http://sass-lang.com/documentation/Sass/Script/Functions.html#ceil-instance_method
floor	A			functions							<pre><code>floor($number)</code></pre><br>Rounds a number down to the previous whole number.<br><h5>Examples</h5><pre class="example code"><code>floor(10.4px) =&gt; 10px\nfloor(10.6px) =&gt; 10px</code></pre><br><h5>Parameters</h5><ul><li>$number</li></ul>	http://sass-lang.com/documentation/Sass/Script/Functions.html#floor-instance_method
abs	A			functions							<pre><code>abs($number)</code></pre><br>Returns the absolute value of a number.<br><h5>Examples</h5><pre class="example code"><code>abs(10px) =&gt; 10px\nabs(-10px) =&gt; 10px</code></pre><br><h5>Parameters</h5><ul><li>$number</li></ul>	http://sass-lang.com/documentation/Sass/Script/Functions.html#abs-instance_method
min	A			functions							<pre><code>min($numbers…)</code></pre><br>Finds the minimum of several numbers.<br><h5>Examples</h5><pre class="example code"><code>min(1px, 4px) =&gt; 1px\nmin(5em, 3em, 4em) =&gt; 3em</code></pre><br><h5>Parameters</h5><ul><li>$numbers</li></ul>	http://sass-lang.com/documentation/Sass/Script/Functions.html#min-instance_method
max	A			functions							<pre><code>max($numbers…)</code></pre><br>Finds the maximum of several numbers.<br><h5>Examples</h5><pre class="example code"><code>max(1px, 4px) =&gt; 4px\nmax(5em, 3em, 4em) =&gt; 5em</code></pre><br><h5>Parameters</h5><ul><li>$numbers</li></ul>	http://sass-lang.com/documentation/Sass/Script/Functions.html#max-instance_method
random	A			functions							<pre><code>random([$limit])</code></pre><br>Returns a random number.<br><h5>Parameters</h5><ul><li>$limit - <p>The maximum of the random integer to be returned, a positive integer.</p></li></ul>	http://sass-lang.com/documentation/Sass/Script/Functions.html#random-instance_method
length	A			functions							<pre><code>length($list)</code></pre><br>Returns the length of a list.<br><h5>Examples</h5><pre class="example code"><code>length(10px) =&gt; 1\nlength(10px 20px 30px) =&gt; 3\nlength((width: 10px, height: 20px)) =&gt; 2</code></pre><br><h5>Parameters</h5><ul><li>$list</li></ul>	http://sass-lang.com/documentation/Sass/Script/Functions.html#length-instance_method
nth	A			functions							<pre><code>nth($list, $n)</code></pre><br>Returns a specific item in a list.<br><h5>Examples</h5><pre class="example code"><code>nth(10px 20px 30px, 1) =&gt; 10px\nnth((Helvetica, Arial, sans-serif), 3) =&gt; sans-serif\nnth((width: 10px, length: 20px), 2) =&gt; length, 20px</code></pre><br><h5>Parameters</h5><ul><li>$list</li><li>$n - <p>The index of the item to get. Negative indices count from the end of the list.</p></li></ul>	http://sass-lang.com/documentation/Sass/Script/Functions.html#nth-instance_method
join	A			functions							<pre><code>join($list1, $list2, [$separator])</code></pre><br>Joins together two lists into one.<br><h5>Examples</h5><pre class="example code"><code>join(10px 20px, 30px 40px) =&gt; 10px 20px 30px 40px\njoin((blue, red), (#abc, #def)) =&gt; blue, red, #abc, #def\njoin(10px, 20px) =&gt; 10px 20px\njoin(10px, 20px, comma) =&gt; 10px, 20px\njoin((blue, red), (#abc, #def), space) =&gt; blue red #abc #def</code></pre><br><h5>Parameters</h5><ul><li>$list1</li><li>$list2</li><li>$separator - <p>The list separator to use. If this is <code>comma</code> or <code>space</code>, that separator will be used. If this is <code>auto</code> (the default), the separator is determined as explained above.</p></li></ul>	http://sass-lang.com/documentation/Sass/Script/Functions.html#join-instance_method
append	A			functions							<pre><code>append($list1, $val, [$separator])</code></pre><br>Appends a single value onto the end of a list.<br><h5>Examples</h5><pre class="example code"><code>append(10px 20px, 30px) =&gt; 10px 20px 30px\nappend((blue, red), green) =&gt; blue, red, green\nappend(10px 20px, 30px 40px) =&gt; 10px 20px (30px 40px)\nappend(10px, 20px, comma) =&gt; 10px, 20px\nappend((blue, red), green, space) =&gt; blue red green</code></pre><br><h5>Parameters</h5><ul><li>$list</li><li>$val</li><li>$separator - <p>The list separator to use. If this is <code>comma</code> or <code>space</code>, that separator will be used. If this is <code>auto</code> (the default), the separator is determined as explained above.</p></li></ul>	http://sass-lang.com/documentation/Sass/Script/Functions.html#append-instance_method
zip	A			functions							<pre><code>zip($lists…)</code></pre><br>Combines several lists into a single multidimensional list.<br><h5>Examples</h5><pre class="example code"><code>zip(1px 1px 3px, solid dashed solid, red green blue)\n=&gt; 1px solid red, 1px dashed green, 3px solid blue</code></pre><br><h5>Parameters</h5><ul><li>$lists</li></ul>	http://sass-lang.com/documentation/Sass/Script/Functions.html#zip-instance_method
index	A			functions							<pre><code>index($list, $value)</code></pre><br>Returns the position of a value within a list.<br><h5>Examples</h5><pre class="example code"><code>index(1px solid red, solid) =&gt; 2\nindex(1px solid red, dashed) =&gt; null\nindex((width: 10px, height: 20px), (height 20px)) =&gt; 2</code></pre><br><h5>Parameters</h5><ul><li>$list</li><li>$value</li></ul>	http://sass-lang.com/documentation/Sass/Script/Functions.html#index-instance_method
list-separator	A			functions							<pre><code>list-separator($list)</code></pre><br>Returns the separator of a list.<br><h5>Examples</h5><pre class="example code"><code>list-separator(1px 2px 3px) =&gt; space\nlist-separator(1px, 2px, 3px) =&gt; comma\nlist-separator('foo') =&gt; space</code></pre><br><h5>Parameters</h5><ul><li>$list</li></ul>	http://sass-lang.com/documentation/Sass/Script/Functions.html#list_separator-instance_method
map-get	A			functions							<pre><code>map-get($map, $key)</code></pre><br>Returns the value in a map associated with a given key.<br><h5>Examples</h5><pre class="example code"><code>map-get(("foo": 1, "bar": 2), "foo") =&gt; 1\nmap-get(("foo": 1, "bar": 2), "bar") =&gt; 2\nmap-get(("foo": 1, "bar": 2), "baz") =&gt; null</code></pre><br><h5>Parameters</h5><ul><li>$map</li><li>$key</li></ul>	http://sass-lang.com/documentation/Sass/Script/Functions.html#map_get-instance_method
map-merge	A			functions							<pre><code>map-merge($map1, $map2)</code></pre><br>Merges two maps together into a new map.<br><h5>Examples</h5><pre class="example code"><code>map-merge(("foo": 1), ("bar": 2)) =&gt; ("foo": 1, "bar": 2)\nmap-merge(("foo": 1, "bar": 2), ("bar": 3)) =&gt; ("foo": 1, "bar": 3)</code></pre><br><h5>Parameters</h5><ul><li>$map1</li><li>$map2</li></ul>	http://sass-lang.com/documentation/Sass/Script/Functions.html#map_merge-instance_method
map-remove	A			functions							<pre><code>map-remove($map, $keys…)</code></pre><br>Returns a new map with keys removed.<br><h5>Examples</h5><pre class="example code"><code>map-remove(("foo": 1, "bar": 2), "bar") =&gt; ("foo": 1)\nmap-remove(("foo": 1, "bar": 2, "baz": 3), "bar", "baz") =&gt; ("foo": 1)\nmap-remove(("foo": 1, "bar": 2), "baz") =&gt; ("foo": 1, "bar": 2)</code></pre><br><h5>Parameters</h5><ul><li>$map</li><li>$keys</li></ul>	http://sass-lang.com/documentation/Sass/Script/Functions.html#map_remove-instance_method
map-keys	A			functions							<pre><code>map-keys($map)</code></pre><br>Returns a list of all keys in a map.<br><h5>Examples</h5><pre class="example code"><code>map-keys(("foo": 1, "bar": 2)) =&gt; "foo", "bar"</code></pre><br><h5>Parameters</h5><ul><li>$map</li></ul>	http://sass-lang.com/documentation/Sass/Script/Functions.html#map_keys-instance_method
map-values	A			functions							<pre><code>map-values($map)</code></pre><br>Returns a list of all values in a map.<br><h5>Examples</h5><pre class="example code"><code>map-values(("foo": 1, "bar": 2)) =&gt; 1, 2\nmap-values(("foo": 1, "bar": 2, "baz": 1)) =&gt; 1, 2, 1</code></pre><br><h5>Parameters</h5><ul><li>$map</li></ul>	http://sass-lang.com/documentation/Sass/Script/Functions.html#map_values-instance_method
map-has-key	A			functions							<pre><code>map-has-key($map, $key)</code></pre><br>Returns whether a map has a value associated with a given key.<br><h5>Examples</h5><pre class="example code"><code>map-has-key(("foo": 1, "bar": 2), "foo") =&gt; true\nmap-has-key(("foo": 1, "bar": 2), "baz") =&gt; false</code></pre><br><h5>Parameters</h5><ul><li>$map</li><li>$key</li></ul>	http://sass-lang.com/documentation/Sass/Script/Functions.html#map_has_key-instance_method
keywords	A			functions							<pre><code>keywords($args)</code></pre><br>Returns the keywords passed to a function that takes variable arguments.<br><h5>Examples</h5><pre class="example code"><code>@mixin foo($args...) {\n  @debug keywords($args); //=&gt; (arg1: val, arg2: val)\n}\n\n@include foo($arg1: val, $arg2: val);</code></pre><br><h5>Parameters</h5><ul><li>$args</li></ul>	http://sass-lang.com/documentation/Sass/Script/Functions.html#keywords-instance_method
selector-nest	A			functions							<pre><code>selector-nest($selectors…)</code></pre><br>Nests selector beneath one another like they would be nested in the stylesheet.<br><h5>Examples</h5><pre class="example code"><code>selector-nest(".foo", ".bar", ".baz") =&gt; .foo .bar .baz\nselector-nest(".a .foo", ".b .bar") =&gt; .a .foo .b .bar\nselector-nest(".foo", "&amp;.bar") =&gt; .foo.bar</code></pre><br><h5>Parameters</h5><ul><li>$selectors - <p>The selectors to nest. At least one selector must be passed. Each of these can be either a string, a list of strings, or a list of lists of strings as returned by <code>&amp;</code>.</p></li></ul>	http://sass-lang.com/documentation/Sass/Script/Functions.html#selector_nest-instance_method
selector-append	A			functions							<pre><code>selector-append($selectors…)</code></pre><br>Appends selectors to one another without spaces in between.<br><h5>Examples</h5><pre class="example code"><code>selector-append(".foo", ".bar", ".baz") =&gt; .foo.bar.baz\nselector-append(".a .foo", ".b .bar") =&gt; "a .foo.b .bar"\nselector-append(".foo", "-suffix") =&gt; ".foo-suffix"</code></pre><br><h5>Parameters</h5><ul><li>$selectors - <p>The selectors to append. At least one selector must be passed. Each of these can be either a string, a list of strings, or a list of lists of strings as returned by <code>&amp;</code>.</p></li></ul>	http://sass-lang.com/documentation/Sass/Script/Functions.html#selector_append-instance_method
selector-extend	A			functions							<pre><code>selector-extend($selector, $extendee, $extender)</code></pre><br>Extends $extendee with $extender within $selector.<br><h5>Examples</h5><pre class="example code"><code>selector-extend(".a .b", ".b", ".foo .bar") =&gt; .a .b, .a .foo .bar, .foo .a .bar</code></pre><br><h5>Parameters</h5><ul><li>$selector - <p>The selector within which <code>$extendee</code> is extended with <code>$extender</code>. This can be either a string, a list of strings, or a list of lists of strings as returned by <code>&amp;</code>.</p></li><li>$extendee - <p>The selector being extended. This can be either a string, a list of strings, or a list of lists of strings as returned by <code>&amp;</code>.</p></li><li>$extender - <p>The selector being injected into <code>$selector</code>. This can be either a string, a list of strings, or a list of lists of strings as returned by <code>&amp;</code>.</p></li></ul>	http://sass-lang.com/documentation/Sass/Script/Functions.html#selector_extend-instance_method
selector-replace	A			functions							<pre><code>selector-replace($selector, $original, $replacement)</code></pre><br>Replaces $original with $replacement within $selector.<br><h5>Examples</h5><pre class="example code"><code>selector-replace(".foo .bar", ".bar", ".baz") =&gt; ".foo .baz"\nselector-replace(".foo.bar.baz", ".foo.baz", ".qux") =&gt; ".bar.qux"</code></pre><br><h5>Parameters</h5><ul><li>$selector - <p>The selector within which <code>$original</code> is replaced with <code>$replacement</code>. This can be either a string, a list of strings, or a list of lists of strings as returned by <code>&amp;</code>.</p></li><li>$original - <p>The selector being replaced. This can be either a string, a list of strings, or a list of lists of strings as returned by <code>&amp;</code>.</p></li><li>$replacement - <p>The selector that <code>$original</code> is being replaced with. This can be either a string, a list of strings, or a list of lists of strings as returned by <code>&amp;</code>.</p></li></ul>	http://sass-lang.com/documentation/Sass/Script/Functions.html#selector_replace-instance_method
selector-unify	A			functions							<pre><code>selector-unify($selector1, $selector2)</code></pre><br>Unifies two selectors to produce a selector that matches elements matched by both.<br><h5>Examples</h5><pre class="example code"><code>selector-unify(".a", ".b") =&gt; .a.b\nselector-unify(".a .b", ".x .y") =&gt; .a .x .b.y, .x .a .b.y\nselector-unify(".a.b", ".b.c") =&gt; .a.b.c\nselector-unify("#a", "#b") =&gt; null</code></pre><br><h5>Parameters</h5><ul><li>$selector1 - <p>The first selector to be unified. This can be either a string, a list of strings, or a list of lists of strings as returned by <code>&amp;</code>.</p></li><li>$selector2 - <p>The second selector to be unified. This can be either a string, a list of strings, or a list of lists of strings as returned by <code>&amp;</code>.</p></li></ul>	http://sass-lang.com/documentation/Sass/Script/Functions.html#selector_unify-instance_method
is-superselector	A			functions							<pre><code>is-superselector($super, $sub)</code></pre><br>Returns whether $super matches all the elements $sub does, and possibly more.<br><h5>Examples</h5><pre class="example code"><code>is-superselector(".foo", ".foo.bar") =&gt; true\nis-superselector(".foo.bar", ".foo") =&gt; false\nis-superselector(".bar", ".foo .bar") =&gt; true\nis-superselector(".foo .bar", ".bar") =&gt; false</code></pre><br><h5>Parameters</h5><ul><li>$super - <p>The potential superselector. This can be either a string, a list of strings, or a list of lists of strings as returned by <code>&amp;</code>.</p></li><li>$sub - <p>The potential subselector. This can be either a string, a list of strings, or a list of lists of strings as returned by <code>&amp;</code>.</p></li></ul>	http://sass-lang.com/documentation/Sass/Script/Functions.html#is_superselector-instance_method
simple-selectors	A			functions							<pre><code>simple-selectors($selector)</code></pre><br>Returns the simple selectors that comprise a compound selector.<br><h5>Examples</h5><pre class="example code"><code>simple-selectors(".foo.bar") =&gt; ".foo", ".bar"\nsimple-selectors(".foo.bar.baz") =&gt; ".foo", ".bar", ".baz"</code></pre><br><h5>Parameters</h5><ul><li>$selector - <p>The compound selector whose simple selectors will be extracted.</p></li></ul>	http://sass-lang.com/documentation/Sass/Script/Functions.html#simple_selectors-instance_method
selector-parse	A			functions							<pre><code>selector-parse($selector)</code></pre><br>Parses a selector into the format returned by &.<br><h5>Examples</h5><pre class="example code"><code>selector-parse(".foo .bar, .baz .bang") =&gt; ('.foo' '.bar', '.baz' '.bang')</code></pre><br><h5>Parameters</h5><ul><li>$selector - <p>The selector to parse. This can be either a string, a list of strings, or a list of lists of strings as returned by <code>&amp;</code>.</p></li></ul>	http://sass-lang.com/documentation/Sass/Script/Functions.html#selector_parse-instance_method
feature-exists	A			functions							<pre><code>feature-exists($feature)</code></pre><br>Returns whether a feature exists in the current Sass runtime.<br><h5>Examples</h5><pre class="example code"><code>feature-exists(some-feature-that-exists) =&gt; true\nfeature-exists(what-is-this-i-dont-know) =&gt; false</code></pre><br><h5>Parameters</h5><ul><li>$feature - <p>The name of the feature</p></li></ul>	http://sass-lang.com/documentation/Sass/Script/Functions.html#feature_exists-instance_method
variable-exists	A			functions							<pre><code>variable-exists($name)</code></pre><br>Returns whether a variable with the given name exists in the current scope.<br><h5>Examples</h5><pre class="example code"><code>$a-false-value: false;\nvariable-exists(a-false-value) =&gt; true\n\nvariable-exists(nonexistent) =&gt; false</code></pre><br><h5>Parameters</h5><ul><li>$name - <p>The name of the variable to check. The name should not include the <code>$</code>.</p></li></ul>	http://sass-lang.com/documentation/Sass/Script/Functions.html#variable_exists-instance_method
global-variable-exists	A			functions							<pre><code>global-variable-exists($name)</code></pre><br>Returns whether a variable with the given name exists in the global scope.<br><h5>Examples</h5><pre class="example code"><code>$a-false-value: false;\nglobal-variable-exists(a-false-value) =&gt; true\n\n.foo {\n  $some-var: false;\n  @if global-variable-exists(some-var) { /* false, doesn't run */ }\n}</code></pre><br><h5>Parameters</h5><ul><li>$name - <p>The name of the variable to check. The name should not include the <code>$</code>.</p></li></ul>	http://sass-lang.com/documentation/Sass/Script/Functions.html#global_variable_exists-instance_method
function-exists	A			functions							<pre><code>function-exists($name)</code></pre><br>Returns whether a function with the given name exists.<br><h5>Examples</h5><pre class="example code"><code>function-exists(lighten) =&gt; true\n\n@function myfunc { @return "something"; }\nfunction-exists(myfunc) =&gt; true</code></pre><br><h5>Parameters</h5><ul><li>name - <p>The name of the function to check.</p></li></ul>	http://sass-lang.com/documentation/Sass/Script/Functions.html#function_exists-instance_method
mixin-exists	A			functions							<pre><code>mixin-exists($name)</code></pre><br>Returns whether a mixin with the given name exists.<br><h5>Examples</h5><pre class="example code"><code>mixin-exists(nonexistent) =&gt; false\n\n@mixin red-text { color: red; }\nmixin-exists(red-text) =&gt; true</code></pre><br><h5>Parameters</h5><ul><li>name - <p>The name of the mixin to check.</p></li></ul>	http://sass-lang.com/documentation/Sass/Script/Functions.html#mixin_exists-instance_method
inspect	A			functions							<pre><code>inspect($value)</code></pre><br>Returns the string representation of a value as it would be represented in Sass.<br><h5>Parameters</h5><ul><li>$value - <p>The value to inspect.</p></li></ul>	http://sass-lang.com/documentation/Sass/Script/Functions.html#inspect-instance_method
type-of	A			functions							<pre><code>type-of($value)</code></pre><br>Returns the type of a value.<br><h5>Examples</h5><pre class="example code"><code>type-of(100px)  =&gt; number\ntype-of(asdf)   =&gt; string\ntype-of("asdf") =&gt; string\ntype-of(true)   =&gt; bool\ntype-of(#fff)   =&gt; color\ntype-of(blue)   =&gt; color</code></pre><br><h5>Parameters</h5><ul><li>$value - <p>The value to inspect</p></li></ul>	http://sass-lang.com/documentation/Sass/Script/Functions.html#type_of-instance_method
unit	A			functions							<pre><code>unit($number)</code></pre><br>Returns the unit(s) associated with a number.<br><h5>Examples</h5><pre class="example code"><code>unit(100) =&gt; ""\nunit(100px) =&gt; "px"\nunit(3em) =&gt; "em"\nunit(10px * 5em) =&gt; "em*px"\nunit(10px * 5em / 30cm / 1rem) =&gt; "em*px/cm*rem"</code></pre><br><h5>Parameters</h5><ul><li>$number</li></ul>	http://sass-lang.com/documentation/Sass/Script/Functions.html#unit-instance_method
unitless	A			functions							<pre><code>unitless($number)</code></pre><br>Returns whether a number has units.<br><h5>Examples</h5><pre class="example code"><code>unitless(100) =&gt; true\nunitless(100px) =&gt; false</code></pre><br><h5>Parameters</h5><ul><li>$number</li></ul>	http://sass-lang.com/documentation/Sass/Script/Functions.html#unitless-instance_method
comparable	A			functions							<pre><code>comparable($number1, $number2)</code></pre><br>Returns whether two numbers can be added, subtracted, or compared.<br><h5>Examples</h5><pre class="example code"><code>comparable(2px, 1px) =&gt; true\ncomparable(100px, 3em) =&gt; false\ncomparable(10cm, 3mm) =&gt; true</code></pre><br><h5>Parameters</h5><ul><li>$number1</li><li>$number2</li></ul>	http://sass-lang.com/documentation/Sass/Script/Functions.html#comparable-instance_method
call	A			functions							<pre><code>call($name, $args…)</code></pre><br>Dynamically calls a Sass function.<br><h5>Examples</h5><pre class="example code"><code>call(rgb, 10, 100, 255) =&gt; #0a64ff\ncall(scale-color, #0a64ff, $lightness: -10%) =&gt; #0058ef\n\n$fn: nth;\ncall($fn, (a b c), 2) =&gt; b</code></pre><br><h5>Parameters</h5><ul><li>$name - <p>The name of the function to call.</p></li></ul>	http://sass-lang.com/documentation/Sass/Script/Functions.html#call-instance_method
if	A			functions							<pre><code>if($condition, $if-true, $if-false)</code></pre><br>Returns one of two values, depending on whether or not $condition is true.<br><h5>Examples</h5><pre class="example code"><code>if(true, 1px, 2px) =&gt; 1px\nif(false, 1px, 2px) =&gt; 2px</code></pre><br><h5>Parameters</h5><ul><li>$condition - <p>Whether the <code>$if-true</code> or <code>$if-false</code> will be returned</p></li><li>$if-true</li><li>$if-false</li></ul>	http://sass-lang.com/documentation/Sass/Script/Functions.html#if-instance_method
unique-id	A			functions							<pre><code>unique-id()</code></pre><br>Returns a unique CSS identifier.	http://sass-lang.com/documentation/Sass/Script/Functions.html#unique_id-instance_method
