rgb	A	rgb function		sass functions							<pre><code>rgb($red, $green, $blue)</code></pre><br>Creates a Color from red, green, and blue values.<br><h5>Parameters</h5><ul><li>$red - <p>The amount of red in the color. Must be between 0 and 255 inclusive, or between <code>0%</code> and <code>100%</code> inclusive</p></li><li>$green - <p>The amount of green in the color. Must be between 0 and 255 inclusive, or between <code>0%</code> and <code>100%</code> inclusive</p></li><li>$blue - <p>The amount of blue in the color. Must be between 0 and 255 inclusive, or between <code>0%</code> and <code>100%</code> inclusive</p></li></ul>	http://sass-lang.com/documentation/Sass/Script/Functions.html#rgb-instance_method
rgba	A	rgba function		sass functions							<pre><code>rgba($red, $green, $blue, $alpha)</code></pre><br>Creates a Color from red, green, blue, and alpha values.<br><h5>Parameters</h5><ul><li>$red - <p>The amount of red in the color. Must be between 0 and 255 inclusive or 0% and 100% inclusive</p></li><li>$green - <p>The amount of green in the color. Must be between 0 and 255 inclusive or 0% and 100% inclusive</p></li><li>$blue - <p>The amount of blue in the color. Must be between 0 and 255 inclusive or 0% and 100% inclusive</p></li><li>$alpha - <p>The opacity of the color. Must be between 0 and 1 inclusive</p></li></ul><pre><code>rgba($color, $alpha)</code></pre><br>Changes the alpha component for a color.<br><h5>Parameters</h5><ul><li>$red - <p>The amount of red in the color. Must be between 0 and 255 inclusive or 0% and 100% inclusive</p></li><li>$green - <p>The amount of green in the color. Must be between 0 and 255 inclusive or 0% and 100% inclusive</p></li><li>$blue - <p>The amount of blue in the color. Must be between 0 and 255 inclusive or 0% and 100% inclusive</p></li><li>$alpha - <p>The opacity of the color. Must be between 0 and 1 inclusive</p></li></ul>	http://sass-lang.com/documentation/Sass/Script/Functions.html#rgba-instance_method
red	A	red function		sass functions							<pre><code>red($color)</code></pre><br>Gets the red component of a color.<br><h5>Parameters</h5><ul><li>$color</li></ul>	http://sass-lang.com/documentation/Sass/Script/Functions.html#red-instance_method
green	A	green function		sass functions							<pre><code>green($color)</code></pre><br>Gets the green component of a color.<br><h5>Parameters</h5><ul><li>$color</li></ul>	http://sass-lang.com/documentation/Sass/Script/Functions.html#green-instance_method
blue	A	blue function		sass functions							<pre><code>blue($color)</code></pre><br>Gets the blue component of a color.<br><h5>Parameters</h5><ul><li>$color</li></ul>	http://sass-lang.com/documentation/Sass/Script/Functions.html#blue-instance_method
mix	A	mix function		sass functions							<pre><code>mix($color1, $color2, [$weight])</code></pre><br>Mixes two colors together.<br><h5>Parameters</h5><ul><li>$color1</li><li>$color2</li><li>$weight - <p>The relative weight of each color. Closer to <code>0%</code> gives more weight to <code>$color1</code>, closer to <code>100%</code> gives more weight to <code>$color2</code></p></li></ul>	http://sass-lang.com/documentation/Sass/Script/Functions.html#mix-instance_method
hsl	A	hsl function		sass functions							<pre><code>hsl($hue, $saturation, $lightness)</code></pre><br>Creates a Color from hue, saturation, and lightness values.<br><h5>Parameters</h5><ul><li>$hue - <p>The hue of the color. Should be between 0 and 360 degrees, inclusive</p></li><li>$saturation - <p>The saturation of the color. Must be between <code>0%</code> and <code>100%</code>, inclusive</p></li><li>$lightness - <p>The lightness of the color. Must be between <code>0%</code> and <code>100%</code>, inclusive</p></li></ul>	http://sass-lang.com/documentation/Sass/Script/Functions.html#hsl-instance_method
hsla	A	hsla function		sass functions							<pre><code>hsla($hue, $saturation, $lightness, $alpha)</code></pre><br>Creates a Color from hue, saturation, lightness, and alpha values.<br><h5>Parameters</h5><ul><li>$hue - <p>The hue of the color. Should be between 0 and 360 degrees, inclusive</p></li><li>$saturation - <p>The saturation of the color. Must be between <code>0%</code> and <code>100%</code>, inclusive</p></li><li>$lightness - <p>The lightness of the color. Must be between <code>0%</code> and <code>100%</code>, inclusive</p></li><li>$alpha - <p>The opacity of the color. Must be between 0 and 1, inclusive</p></li></ul>	http://sass-lang.com/documentation/Sass/Script/Functions.html#hsla-instance_method
hue	A	hue function		sass functions							<pre><code>hue($color)</code></pre><br>Gets the hue component of a color.<br><h5>Parameters</h5><ul><li>$color</li></ul>	http://sass-lang.com/documentation/Sass/Script/Functions.html#hue-instance_method
saturation	A	saturation function		sass functions							<pre><code>saturation($color)</code></pre><br>Gets the saturation component of a color.<br><h5>Parameters</h5><ul><li>$color</li></ul>	http://sass-lang.com/documentation/Sass/Script/Functions.html#saturation-instance_method
lightness	A	lightness function		sass functions							<pre><code>lightness($color)</code></pre><br>Gets the lightness component of a color.<br><h5>Parameters</h5><ul><li>$color</li></ul>	http://sass-lang.com/documentation/Sass/Script/Functions.html#lightness-instance_method
adjust-hue	A	adjust-hue function		sass functions							<pre><code>adjust-hue($color, $degrees)</code></pre><br>Changes the hue of a color.<br><h5>Parameters</h5><ul><li>$color</li><li>$degrees - <p>The number of degrees to rotate the hue</p></li></ul>	http://sass-lang.com/documentation/Sass/Script/Functions.html#adjust_hue-instance_method
lighten	A	lighten function		sass functions							<pre><code>lighten($color, $amount)</code></pre><br>Makes a color lighter.<br><h5>Parameters</h5><ul><li>$color</li><li>$amount - <p>The amount to increase the lightness by, between <code>0%</code> and <code>100%</code></p></li></ul>	http://sass-lang.com/documentation/Sass/Script/Functions.html#lighten-instance_method
darken	A	darken function		sass functions							<pre><code>darken($color, $amount)</code></pre><br>Makes a color darker.<br><h5>Parameters</h5><ul><li>$color</li><li>$amount - <p>The amount to decrease the lightness by, between <code>0%</code> and <code>100%</code></p></li></ul>	http://sass-lang.com/documentation/Sass/Script/Functions.html#darken-instance_method
saturate	A	saturate function		sass functions							<pre><code>saturate($color, $amount)</code></pre><br>Makes a color more saturated.<br><h5>Parameters</h5><ul><li>$color</li><li>$amount - <p>The amount to increase the saturation by, between <code>0%</code> and <code>100%</code></p></li></ul>	http://sass-lang.com/documentation/Sass/Script/Functions.html#saturate-instance_method
desaturate	A	desaturate function		sass functions							<pre><code>desaturate($color, $amount)</code></pre><br>Makes a color less saturated.<br><h5>Parameters</h5><ul><li>$color</li><li>$amount - <p>The amount to decrease the saturation by, between <code>0%</code> and <code>100%</code></p></li></ul>	http://sass-lang.com/documentation/Sass/Script/Functions.html#desaturate-instance_method
grayscale	A	grayscale function		sass functions							<pre><code>grayscale($color)</code></pre><br>Converts a color to grayscale.<br><h5>Parameters</h5><ul><li>$color</li></ul>	http://sass-lang.com/documentation/Sass/Script/Functions.html#grayscale-instance_method
complement	A	complement function		sass functions							<pre><code>complement($color)</code></pre><br>Returns the complement of a color.<br><h5>Parameters</h5><ul><li>$color</li></ul>	http://sass-lang.com/documentation/Sass/Script/Functions.html#complement-instance_method
invert	A	invert function		sass functions							<pre><code>invert($color)</code></pre><br>Returns the inverse of a color.<br><h5>Parameters</h5><ul><li>$color</li></ul>	http://sass-lang.com/documentation/Sass/Script/Functions.html#invert-instance_method
alpha	A	alpha function		sass functions							<pre><code>alpha($color)</code></pre><br>Gets the alpha component (opacity) of a color.<br><h5>Parameters</h5><ul><li>$color</li></ul>	http://sass-lang.com/documentation/Sass/Script/Functions.html#alpha-instance_method
opacify	A	opacify function		sass functions							<pre><code>opacify($color, $amount)</code></pre><br>Makes a color more opaque.<br><h5>Parameters</h5><ul><li>$color</li><li>$amount - <p>The amount to increase the opacity by, between 0 and 1</p></li></ul>	http://sass-lang.com/documentation/Sass/Script/Functions.html#opacify-instance_method
transparentize	A	transparentize function		sass functions							<pre><code>transparentize($color, $amount)</code></pre><br>Makes a color more transparent.<br><h5>Parameters</h5><ul><li>$color</li><li>$amount - <p>The amount to decrease the opacity by, between 0 and 1</p></li></ul>	http://sass-lang.com/documentation/Sass/Script/Functions.html#transparentize-instance_method
adjust-color	A	adjust-color function		sass functions							<pre><code>adjust-color($color, [$red], [$green], [$blue], [$hue], [$saturation], [$lightness], [$alpha])</code></pre><br>Increases or decreases one or more components of a color.<br><h5>Parameters</h5><ul><li>$color</li><li>$red - <p>The adjustment to make on the red component, between -255 and 255 inclusive</p></li><li>$green - <p>The adjustment to make on the green component, between -255 and 255 inclusive</p></li><li>$blue - <p>The adjustment to make on the blue component, between -255 and 255 inclusive</p></li><li>$hue - <p>The adjustment to make on the hue component, in degrees</p></li><li>$saturation - <p>The adjustment to make on the saturation component, between <code>-100%</code> and <code>100%</code> inclusive</p></li><li>$lightness - <p>The adjustment to make on the lightness component, between <code>-100%</code> and <code>100%</code> inclusive</p></li><li>$alpha - <p>The adjustment to make on the alpha component, between -1 and 1 inclusive</p></li></ul>	http://sass-lang.com/documentation/Sass/Script/Functions.html#adjust_color-instance_method
scale-color	A	scale-color function		sass functions							<pre><code>scale-color($color, [$red], [$green], [$blue], [$saturation], [$lightness], [$alpha])</code></pre><br>Fluidly scales one or more properties of a color.<br><h5>Parameters</h5><ul><li>$color</li><li>$red</li><li>$green</li><li>$blue</li><li>$saturation</li><li>$lightness</li><li>$alpha</li></ul>	http://sass-lang.com/documentation/Sass/Script/Functions.html#scale_color-instance_method
change-color	A	change-color function		sass functions							<pre><code>change-color($color, [$red], [$green], [$blue], [$hue], [$saturation], [$lightness], [$alpha])</code></pre><br>Changes one or more properties of a color.<br><h5>Parameters</h5><ul><li>$color</li><li>$red - <p>The new red component for the color, within 0 and 255 inclusive</p></li><li>$green - <p>The new green component for the color, within 0 and 255 inclusive</p></li><li>$blue - <p>The new blue component for the color, within 0 and 255 inclusive</p></li><li>$hue - <p>The new hue component for the color, in degrees</p></li><li>$saturation - <p>The new saturation component for the color, between <code>0%</code> and <code>100%</code> inclusive</p></li><li>$lightness - <p>The new lightness component for the color, within <code>0%</code> and <code>100%</code> inclusive</p></li><li>$alpha - <p>The new alpha component for the color, within 0 and 1 inclusive</p></li></ul>	http://sass-lang.com/documentation/Sass/Script/Functions.html#change_color-instance_method
ie-hex-str	A	ie-hex-str function		sass functions							<pre><code>ie-hex-str($color)</code></pre><br>Converts a color into the format understood by IE filters.<br><h5>Parameters</h5><ul><li>$color</li></ul>	http://sass-lang.com/documentation/Sass/Script/Functions.html#ie_hex_str-instance_method
unquote	A	unquote function		sass functions							<pre><code>unquote($string)</code></pre><br>Removes quotes from a string.<br><h5>Parameters</h5><ul><li>$string</li></ul>	http://sass-lang.com/documentation/Sass/Script/Functions.html#unquote-instance_method
quote	A	quote function		sass functions							<pre><code>quote($string)</code></pre><br>Adds quotes to a string.<br><h5>Parameters</h5><ul><li>$string</li></ul>	http://sass-lang.com/documentation/Sass/Script/Functions.html#quote-instance_method
str-length	A	str-length function		sass functions							<pre><code>str-length($string)</code></pre><br>Returns the number of characters in a string.<br><h5>Parameters</h5><ul><li>$string</li></ul>	http://sass-lang.com/documentation/Sass/Script/Functions.html#str_length-instance_method
str-insert	A	str-insert function		sass functions							<pre><code>str-insert($string, $insert, $index)</code></pre><br>Inserts $insert into $string at $index.<br><h5>Parameters</h5><ul><li>$string</li><li>$insert</li><li>$index - <p>The position at which <code>$insert</code> will be inserted. Negative indices count from the end of <code>$string</code>. An index that&#39;s outside the bounds of the string will insert <code>$insert</code> at the front or back of the string</p></li></ul>	http://sass-lang.com/documentation/Sass/Script/Functions.html#str_insert-instance_method
str-index	A	str-index function		sass functions							<pre><code>str-index($string, $substring)</code></pre><br>Returns the index of the first occurrence of $substring in $string.<br><h5>Parameters</h5><ul><li>$string</li><li>$substring</li></ul>	http://sass-lang.com/documentation/Sass/Script/Functions.html#str_index-instance_method
str-slice	A	str-slice function		sass functions							<pre><code>str-slice($string, $start-at, [$end-at])</code></pre><br>Extracts a substring from $string.<br><h5>Parameters</h5><ul><li>$start-at - <p>The index of the first character of the substring. If this is negative, it counts from the end of <code>$string</code></p></li><li>$end-before - <p>The index of the last character of the substring. If this is negative, it counts from the end of <code>$string</code>. Defaults to -1</p></li></ul>	http://sass-lang.com/documentation/Sass/Script/Functions.html#str_slice-instance_method
to-upper-case	A	to-upper-case function		sass functions							<pre><code>to-upper-case($string)</code></pre><br>Converts a string to upper case.<br><h5>Parameters</h5><ul><li>$string</li></ul>	http://sass-lang.com/documentation/Sass/Script/Functions.html#to_upper_case-instance_method
to-lower-case	A	to-lower-case function		sass functions							<pre><code>to-lower-case($string)</code></pre><br>Converts a string to lower case.<br><h5>Parameters</h5><ul><li>$string</li></ul>	http://sass-lang.com/documentation/Sass/Script/Functions.html#to_lower_case-instance_method
percentage	A	percentage function		sass functions							<pre><code>percentage($number)</code></pre><br>Converts a unitless number to a percentage.<br><h5>Parameters</h5><ul><li>$number</li></ul>	http://sass-lang.com/documentation/Sass/Script/Functions.html#percentage-instance_method
round	A	round function		sass functions							<pre><code>round($number)</code></pre><br>Rounds a number to the nearest whole number.<br><h5>Parameters</h5><ul><li>$number</li></ul>	http://sass-lang.com/documentation/Sass/Script/Functions.html#round-instance_method
ceil	A	ceil function		sass functions							<pre><code>ceil($number)</code></pre><br>Rounds a number up to the next whole number.<br><h5>Parameters</h5><ul><li>$number</li></ul>	http://sass-lang.com/documentation/Sass/Script/Functions.html#ceil-instance_method
floor	A	floor function		sass functions							<pre><code>floor($number)</code></pre><br>Rounds a number down to the previous whole number.<br><h5>Parameters</h5><ul><li>$number</li></ul>	http://sass-lang.com/documentation/Sass/Script/Functions.html#floor-instance_method
abs	A	abs function		sass functions							<pre><code>abs($number)</code></pre><br>Returns the absolute value of a number.<br><h5>Parameters</h5><ul><li>$number</li></ul>	http://sass-lang.com/documentation/Sass/Script/Functions.html#abs-instance_method
min	A	min function		sass functions							<pre><code>min($numbers…)</code></pre><br>Finds the minimum of several numbers.<br><h5>Parameters</h5><ul><li>$numbers</li></ul>	http://sass-lang.com/documentation/Sass/Script/Functions.html#min-instance_method
max	A	max function		sass functions							<pre><code>max($numbers…)</code></pre><br>Finds the maximum of several numbers.<br><h5>Parameters</h5><ul><li>$numbers</li></ul>	http://sass-lang.com/documentation/Sass/Script/Functions.html#max-instance_method
random	A	random function		sass functions							<pre><code>random([$limit])</code></pre><br>Returns a random number.<br><h5>Parameters</h5><ul><li>$limit - <p>The maximum of the random integer to be returned, a positive integer.</p></li></ul>	http://sass-lang.com/documentation/Sass/Script/Functions.html#random-instance_method
length	A	length function		sass functions							<pre><code>length($list)</code></pre><br>Returns the length of a list.<br><h5>Parameters</h5><ul><li>$list</li></ul>	http://sass-lang.com/documentation/Sass/Script/Functions.html#length-instance_method
nth	A	nth function		sass functions							<pre><code>nth($list, $n)</code></pre><br>Returns a specific item in a list.<br><h5>Parameters</h5><ul><li>$list</li><li>$n - <p>The index of the item to get. Negative indices count from the end of the list.</p></li></ul>	http://sass-lang.com/documentation/Sass/Script/Functions.html#nth-instance_method
join	A	join function		sass functions							<pre><code>join($list1, $list2, [$separator])</code></pre><br>Joins together two lists into one.<br><h5>Parameters</h5><ul><li>$list1</li><li>$list2</li><li>$separator - <p>The list separator to use. If this is <code>comma</code> or <code>space</code>, that separator will be used. If this is <code>auto</code> (the default), the separator is determined as explained above.</p></li></ul>	http://sass-lang.com/documentation/Sass/Script/Functions.html#join-instance_method
append	A	append function		sass functions							<pre><code>append($list1, $val, [$separator])</code></pre><br>Appends a single value onto the end of a list.<br><h5>Parameters</h5><ul><li>$list</li><li>$val</li><li>$separator - <p>The list separator to use. If this is <code>comma</code> or <code>space</code>, that separator will be used. If this is <code>auto</code> (the default), the separator is determined as explained above.</p></li></ul>	http://sass-lang.com/documentation/Sass/Script/Functions.html#append-instance_method
zip	A	zip function		sass functions							<pre><code>zip($lists…)</code></pre><br>Combines several lists into a single multidimensional list.<br><h5>Parameters</h5><ul><li>$lists</li></ul>	http://sass-lang.com/documentation/Sass/Script/Functions.html#zip-instance_method
index	A	index function		sass functions							<pre><code>index($list, $value)</code></pre><br>Returns the position of a value within a list.<br><h5>Parameters</h5><ul><li>$list</li><li>$value</li></ul>	http://sass-lang.com/documentation/Sass/Script/Functions.html#index-instance_method
list-separator	A	list-separator function		sass functions							<pre><code>list-separator($list)</code></pre><br>Returns the separator of a list.<br><h5>Parameters</h5><ul><li>$list</li></ul>	http://sass-lang.com/documentation/Sass/Script/Functions.html#list_separator-instance_method
map-get	A	map-get function		sass functions							<pre><code>map-get($map, $key)</code></pre><br>Returns the value in a map associated with a given key.<br><h5>Parameters</h5><ul><li>$map</li><li>$key</li></ul>	http://sass-lang.com/documentation/Sass/Script/Functions.html#map_get-instance_method
map-merge	A	map-merge function		sass functions							<pre><code>map-merge($map1, $map2)</code></pre><br>Merges two maps together into a new map.<br><h5>Parameters</h5><ul><li>$map1</li><li>$map2</li></ul>	http://sass-lang.com/documentation/Sass/Script/Functions.html#map_merge-instance_method
map-remove	A	map-remove function		sass functions							<pre><code>map-remove($map, $keys…)</code></pre><br>Returns a new map with keys removed.<br><h5>Parameters</h5><ul><li>$map</li><li>$keys</li></ul>	http://sass-lang.com/documentation/Sass/Script/Functions.html#map_remove-instance_method
map-keys	A	map-keys function		sass functions							<pre><code>map-keys($map)</code></pre><br>Returns a list of all keys in a map.<br><h5>Parameters</h5><ul><li>$map</li></ul>	http://sass-lang.com/documentation/Sass/Script/Functions.html#map_keys-instance_method
map-values	A	map-values function		sass functions							<pre><code>map-values($map)</code></pre><br>Returns a list of all values in a map.<br><h5>Parameters</h5><ul><li>$map</li></ul>	http://sass-lang.com/documentation/Sass/Script/Functions.html#map_values-instance_method
map-has-key	A	map-has-key function		sass functions							<pre><code>map-has-key($map, $key)</code></pre><br>Returns whether a map has a value associated with a given key.<br><h5>Parameters</h5><ul><li>$map</li><li>$key</li></ul>	http://sass-lang.com/documentation/Sass/Script/Functions.html#map_has_key-instance_method
keywords	A	keywords function		sass functions							<pre><code>keywords($args)</code></pre><br>Returns the keywords passed to a function that takes variable arguments.<br><h5>Parameters</h5><ul><li>$args</li></ul>	http://sass-lang.com/documentation/Sass/Script/Functions.html#keywords-instance_method
selector-nest	A	selector-nest function		sass functions							<pre><code>selector-nest($selectors…)</code></pre><br>Nests selector beneath one another like they would be nested in the stylesheet.<br><h5>Parameters</h5><ul><li>$selectors - <p>The selectors to nest. At least one selector must be passed. Each of these can be either a string, a list of strings, or a list of lists of strings as returned by <code>&amp;</code>.</p></li></ul>	http://sass-lang.com/documentation/Sass/Script/Functions.html#selector_nest-instance_method
selector-append	A	selector-append function		sass functions							<pre><code>selector-append($selectors…)</code></pre><br>Appends selectors to one another without spaces in between.<br><h5>Parameters</h5><ul><li>$selectors - <p>The selectors to append. At least one selector must be passed. Each of these can be either a string, a list of strings, or a list of lists of strings as returned by <code>&amp;</code>.</p></li></ul>	http://sass-lang.com/documentation/Sass/Script/Functions.html#selector_append-instance_method
selector-extend	A	selector-extend function		sass functions							<pre><code>selector-extend($selector, $extendee, $extender)</code></pre><br>Extends $extendee with $extender within $selector.<br><h5>Parameters</h5><ul><li>$selector - <p>The selector within which <code>$extendee</code> is extended with <code>$extender</code>. This can be either a string, a list of strings, or a list of lists of strings as returned by <code>&amp;</code>.</p></li><li>$extendee - <p>The selector being extended. This can be either a string, a list of strings, or a list of lists of strings as returned by <code>&amp;</code>.</p></li><li>$extender - <p>The selector being injected into <code>$selector</code>. This can be either a string, a list of strings, or a list of lists of strings as returned by <code>&amp;</code>.</p></li></ul>	http://sass-lang.com/documentation/Sass/Script/Functions.html#selector_extend-instance_method
selector-replace	A	selector-replace function		sass functions							<pre><code>selector-replace($selector, $original, $replacement)</code></pre><br>Replaces $original with $replacement within $selector.<br><h5>Parameters</h5><ul><li>$selector - <p>The selector within which <code>$original</code> is replaced with <code>$replacement</code>. This can be either a string, a list of strings, or a list of lists of strings as returned by <code>&amp;</code>.</p></li><li>$original - <p>The selector being replaced. This can be either a string, a list of strings, or a list of lists of strings as returned by <code>&amp;</code>.</p></li><li>$replacement - <p>The selector that <code>$original</code> is being replaced with. This can be either a string, a list of strings, or a list of lists of strings as returned by <code>&amp;</code>.</p></li></ul>	http://sass-lang.com/documentation/Sass/Script/Functions.html#selector_replace-instance_method
selector-unify	A	selector-unify function		sass functions							<pre><code>selector-unify($selector1, $selector2)</code></pre><br>Unifies two selectors to produce a selector that matches elements matched by both.<br><h5>Parameters</h5><ul><li>$selector1 - <p>The first selector to be unified. This can be either a string, a list of strings, or a list of lists of strings as returned by <code>&amp;</code>.</p></li><li>$selector2 - <p>The second selector to be unified. This can be either a string, a list of strings, or a list of lists of strings as returned by <code>&amp;</code>.</p></li></ul>	http://sass-lang.com/documentation/Sass/Script/Functions.html#selector_unify-instance_method
is-superselector	A	is-superselector function		sass functions							<pre><code>is-superselector($super, $sub)</code></pre><br>Returns whether $super matches all the elements $sub does, and possibly more.<br><h5>Parameters</h5><ul><li>$super - <p>The potential superselector. This can be either a string, a list of strings, or a list of lists of strings as returned by <code>&amp;</code>.</p></li><li>$sub - <p>The potential subselector. This can be either a string, a list of strings, or a list of lists of strings as returned by <code>&amp;</code>.</p></li></ul>	http://sass-lang.com/documentation/Sass/Script/Functions.html#is_superselector-instance_method
simple-selectors	A	simple-selectors function		sass functions							<pre><code>simple-selectors($selector)</code></pre><br>Returns the simple selectors that comprise a compound selector.<br><h5>Parameters</h5><ul><li>$selector - <p>The compound selector whose simple selectors will be extracted.</p></li></ul>	http://sass-lang.com/documentation/Sass/Script/Functions.html#simple_selectors-instance_method
selector-parse	A	selector-parse function		sass functions							<pre><code>selector-parse($selector)</code></pre><br>Parses a selector into the format returned by &.<br><h5>Parameters</h5><ul><li>$selector - <p>The selector to parse. This can be either a string, a list of strings, or a list of lists of strings as returned by <code>&amp;</code>.</p></li></ul>	http://sass-lang.com/documentation/Sass/Script/Functions.html#selector_parse-instance_method
feature-exists	A	feature-exists function		sass functions							<pre><code>feature-exists($feature)</code></pre><br>Returns whether a feature exists in the current Sass runtime.<br><h5>Parameters</h5><ul><li>$feature - <p>The name of the feature</p></li></ul>	http://sass-lang.com/documentation/Sass/Script/Functions.html#feature_exists-instance_method
variable-exists	A	variable-exists function		sass functions							<pre><code>variable-exists($name)</code></pre><br>Returns whether a variable with the given name exists in the current scope.<br><h5>Parameters</h5><ul><li>$name - <p>The name of the variable to check. The name should not include the <code>$</code>.</p></li></ul>	http://sass-lang.com/documentation/Sass/Script/Functions.html#variable_exists-instance_method
global-variable-exists	A	global-variable-exists function		sass functions							<pre><code>global-variable-exists($name)</code></pre><br>Returns whether a variable with the given name exists in the global scope.<br><h5>Parameters</h5><ul><li>$name - <p>The name of the variable to check. The name should not include the <code>$</code>.</p></li></ul>	http://sass-lang.com/documentation/Sass/Script/Functions.html#global_variable_exists-instance_method
function-exists	A	function-exists function		sass functions							<pre><code>function-exists($name)</code></pre><br>Returns whether a function with the given name exists.<br><h5>Parameters</h5><ul><li>name - <p>The name of the function to check.</p></li></ul>	http://sass-lang.com/documentation/Sass/Script/Functions.html#function_exists-instance_method
mixin-exists	A	mixin-exists function		sass functions							<pre><code>mixin-exists($name)</code></pre><br>Returns whether a mixin with the given name exists.<br><h5>Parameters</h5><ul><li>name - <p>The name of the mixin to check.</p></li></ul>	http://sass-lang.com/documentation/Sass/Script/Functions.html#mixin_exists-instance_method
inspect	A	inspect function		sass functions							<pre><code>inspect($value)</code></pre><br>Returns the string representation of a value as it would be represented in Sass.<br><h5>Parameters</h5><ul><li>$value - <p>The value to inspect.</p></li></ul>	http://sass-lang.com/documentation/Sass/Script/Functions.html#inspect-instance_method
type-of	A	type-of function		sass functions							<pre><code>type-of($value)</code></pre><br>Returns the type of a value.<br><h5>Parameters</h5><ul><li>$value - <p>The value to inspect</p></li></ul>	http://sass-lang.com/documentation/Sass/Script/Functions.html#type_of-instance_method
unit	A	unit function		sass functions							<pre><code>unit($number)</code></pre><br>Returns the unit(s) associated with a number.<br><h5>Parameters</h5><ul><li>$number</li></ul>	http://sass-lang.com/documentation/Sass/Script/Functions.html#unit-instance_method
unitless	A	unitless function		sass functions							<pre><code>unitless($number)</code></pre><br>Returns whether a number has units.<br><h5>Parameters</h5><ul><li>$number</li></ul>	http://sass-lang.com/documentation/Sass/Script/Functions.html#unitless-instance_method
comparable	A	comparable function		sass functions							<pre><code>comparable($number1, $number2)</code></pre><br>Returns whether two numbers can be added, subtracted, or compared.<br><h5>Parameters</h5><ul><li>$number1</li><li>$number2</li></ul>	http://sass-lang.com/documentation/Sass/Script/Functions.html#comparable-instance_method
call	A	call function		sass functions							<pre><code>call($name, $args…)</code></pre><br>Dynamically calls a Sass function.<br><h5>Parameters</h5><ul><li>$name - <p>The name of the function to call.</p></li></ul>	http://sass-lang.com/documentation/Sass/Script/Functions.html#call-instance_method
if	A	if function		sass functions							<pre><code>if($condition, $if-true, $if-false)</code></pre><br>Returns one of two values, depending on whether or not $condition is true.<br><h5>Parameters</h5><ul><li>$condition - <p>Whether the <code>$if-true</code> or <code>$if-false</code> will be returned</p></li><li>$if-true</li><li>$if-false</li></ul>	http://sass-lang.com/documentation/Sass/Script/Functions.html#if-instance_method
unique-id	A	unique-id function		sass functions							<pre><code>unique-id()</code></pre><br>Returns a unique CSS identifier.	http://sass-lang.com/documentation/Sass/Script/Functions.html#unique_id-instance_method
Features	A										There are two syntaxes available for Sass. The first, known as SCSS (Sassy CSS) and used throughout this reference, is an extension of the syntax of CSS. This means that every valid CSS stylesheet is a valid SCSS file with the same meaning. In addition, SCSS understands most CSS hacks and vendor-specific syntax, such as IE’s old filter syntax. This syntax is enhanced with the Sass features described below. Files using this syntax have the .scss extension.	http://sass-lang.com/documentation/file.SASS_REFERENCE.html#features
Syntax	A										There are two syntaxes available for Sass. The first, known as SCSS (Sassy CSS) and used throughout this reference, is an extension of the syntax of CSS. This means that every valid CSS stylesheet is a valid SCSS file with the same meaning. In addition, SCSS understands most CSS hacks and vendor-specific syntax, such as IE’s old filter syntax. This syntax is enhanced with the Sass features described below. Files using this syntax have the .scss extension.	http://sass-lang.com/documentation/file.SASS_REFERENCE.html#syntax
Using Sass	A										Sass can be used in three ways: as a command-line tool, as a standalone Ruby module, and as a plugin for any Rack-enabled framework, including Ruby on Rails and Merb. The first step for all of these is to install the Sass gem:<pre class="code ruby"><code class="ruby">gem install sass</code></pre>	http://sass-lang.com/documentation/file.SASS_REFERENCE.html#using_sass
Rack/Rails/Merb Plugin	A										To enable Sass in Rails versions before Rails 3, add the following line to environment.rb:<pre class="code ruby"><code class="ruby">config.gem "sass"</code></pre>	http://sass-lang.com/documentation/file.SASS_REFERENCE.html#rackrailsmerb_plugin
Caching	A										By default, Sass caches compiled templates and partials. This dramatically speeds up re-compilation of large collections of Sass files, and works best if the Sass templates are split up into separate files that are all @imported into one large file.	http://sass-lang.com/documentation/file.SASS_REFERENCE.html#caching
Options	A										Options can be set by setting the Sass::Plugin#options hash in environment.rb in Rails or config.ru in Rack…<pre class="code ruby"><code class="ruby">Sass::Plugin.options[:style] = :compact</code></pre>	http://sass-lang.com/documentation/file.SASS_REFERENCE.html#options
Syntax Selection	A										The Sass command-line tool will use the file extension to determine which syntax you are using, but there’s not always a filename. The sass command-line program defaults to the indented syntax but you can pass the --scss option to it if the input should be interpreted as SCSS syntax. Alternatively, you can use the scss command-line program which is exactly like the sass program but it defaults to assuming the syntax is SCSS.	http://sass-lang.com/documentation/file.SASS_REFERENCE.html#syntax_selection
Encodings	A										When running on Ruby 1.9 and later, Sass is aware of the character encoding of documents. Sass follows the CSS spec to determine the encoding of a stylesheet, and falls back to the Ruby string encoding. This means that it first checks the Unicode byte order mark, then the @charset declaration, then the Ruby string encoding. If none of these are set, it will assume the document is in UTF-8.	http://sass-lang.com/documentation/file.SASS_REFERENCE.html#encodings
CSS Extensions	A										Sass allows CSS rules to be nested within one another. The inner rule then only applies within the outer rule’s selector. For example:<pre class="code ruby"><code class="ruby">#main p {\n  color: #00ff00;\n  width: 97%;\n\n  .redbox {\n    background-color: #ff0000;\n    color: #000000;\n  }\n}</code></pre>	http://sass-lang.com/documentation/file.SASS_REFERENCE.html#css_extensions
Nested Rules	A										Sass allows CSS rules to be nested within one another. The inner rule then only applies within the outer rule’s selector. For example:<pre class="code ruby"><code class="ruby">#main p {\n  color: #00ff00;\n  width: 97%;\n\n  .redbox {\n    background-color: #ff0000;\n    color: #000000;\n  }\n}</code></pre>	http://sass-lang.com/documentation/file.SASS_REFERENCE.html#nested_rules
Referencing Parent Selectors &	A										Sometimes it’s useful to use a nested rule’s parent selector in other ways than the default. For instance, you might want to have special styles for when that selector is hovered over or for when the body element has a certain class. In these cases, you can explicitly specify where the parent selector should be inserted using the & character. For example:<pre class="code ruby"><code class="ruby">a {\n  font-weight: bold;\n  text-decoration: none;\n  &amp;:hover { text-decoration: underline; }\n  body.firefox &amp; { font-weight: normal; }\n}</code></pre>	http://sass-lang.com/documentation/file.SASS_REFERENCE.html#parent-selector
Nested Properties	A										CSS has quite a few properties that are in “namespaces;” for instance, font-family, font-size, and font-weight are all in the font namespace. In CSS, if you want to set a bunch of properties in the same namespace, you have to type it out each time. Sass provides a shortcut for this: just write the namespace once, then nest each of the sub-properties within it. For example:<pre class="code ruby"><code class="ruby">.funky {\n  font: {\n    family: fantasy;\n    size: 30em;\n    weight: bold;\n  }\n}</code></pre>	http://sass-lang.com/documentation/file.SASS_REFERENCE.html#nested_properties
Placeholder Selectors %foo	A										Sass supports a special type of selector called a “placeholder selector”. These look like class and id selectors, except the # or . is replaced by %. They’re meant to be used with the @extend directive; for more information see @extend-Only Selectors.	http://sass-lang.com/documentation/file.SASS_REFERENCE.html#placeholder_selectors_
Comments /* */ and //	A										Sass supports standard multiline CSS comments with /* */, as well as single-line comments with //. The multiline comments are preserved in the CSS output where possible, while the single-line comments are removed. For example:<pre class="code ruby"><code class="ruby">/* This comment is\n * several lines long.\n * since it uses the CSS comment syntax,\n * it will appear in the CSS output. */\nbody { color: black; }\n\n// These comments are only one line long each.\n// They won't appear in the CSS output,\n// since they use the single-line comment syntax.\na { color: green; }</code></pre>	http://sass-lang.com/documentation/file.SASS_REFERENCE.html#comments
SassScript	A										In addition to the plain CSS property syntax, Sass supports a small set of extensions called SassScript. SassScript allows properties to use variables, arithmetic, and extra functions. SassScript can be used in any property value.	http://sass-lang.com/documentation/file.SASS_REFERENCE.html#sassscript
Interactive Shell	A										You can easily experiment with SassScript using the interactive shell. To launch the shell run the sass command-line with the -i option. At the prompt, enter any legal SassScript expression to have it evaluated and the result printed out for you:<pre class="code ruby"><code class="ruby">$ sass -i\n&gt;&gt; "Hello, Sassy World!"\n"Hello, Sassy World!"\n&gt;&gt; 1px + 1px + 1px\n3px\n&gt;&gt; #777 + #777\n#eeeeee\n&gt;&gt; #777 + #888\nwhite</code></pre>	http://sass-lang.com/documentation/file.SASS_REFERENCE.html#interactive_shell
Variables $	A										The most straightforward way to use SassScript is to use variables. Variables begin with dollar signs, and are set like CSS properties:<pre class="code ruby"><code class="ruby">$width: 5em;</code></pre>	http://sass-lang.com/documentation/file.SASS_REFERENCE.html#variables_
Data Types	A										SassScript supports seven main data types:	http://sass-lang.com/documentation/file.SASS_REFERENCE.html#data_types
Strings	A										CSS specifies two kinds of strings: those with quotes, such as "Lucida Grande" or 'http://sass-lang.com', and those without quotes, such as sans-serif or bold. SassScript recognizes both kinds, and in general if one kind of string is used in the Sass document, that kind of string will be used in the resulting CSS.	http://sass-lang.com/documentation/file.SASS_REFERENCE.html#sass-script-strings
Lists	A										Lists are how Sass represents the values of CSS declarations like margin: 10px 15px 0 0 or font-face: Helvetica, Arial, sans-serif. Lists are just a series of other values, separated by either spaces or commas. In fact, individual values count as lists, too: they’re just lists with one item.	http://sass-lang.com/documentation/file.SASS_REFERENCE.html#lists
Maps	A										Maps represent an association between keys and values, where keys are used to look up values. They make it easy to collect values into named groups and access those groups dynamically. They have no direct parallel in CSS, although they’re syntactically similar to media query expressions:<pre class="code ruby"><code class="ruby">$map: (key1: value1, key2: value2, key3: value3);</code></pre>	http://sass-lang.com/documentation/file.SASS_REFERENCE.html#maps
Colors	A										Any CSS color expression returns a SassScript Color value. This includes a large number of named colors which are indistinguishable from unquoted strings.	http://sass-lang.com/documentation/file.SASS_REFERENCE.html#colors
Operations	A										All types support equality operations (== and !=). In addition, each type has its own operations that it has special support for.	http://sass-lang.com/documentation/file.SASS_REFERENCE.html#operations
Number Operations	A										SassScript supports the standard arithmetic operations on numbers (addition +, subtraction -, multiplication *, division /, and modulo %). Sass math functions preserve units during arithmetic operations. This means that, just like in real life, you cannot work on numbers with incompatible units (such as adding a number with px and em) and two numbers with the same unit that are multiplied together will produce square units (10px * 10px == 100px * px). Be Aware that px * px is an invalid CSS unit and you will get an error from Sass for attempting to use invalid units in CSS.	http://sass-lang.com/documentation/file.SASS_REFERENCE.html#number_operations
Division and /	A										CSS allows / to appear in property values as a way of separating numbers. Since SassScript is an extension of the CSS property syntax, it must support this, while also allowing / to be used for division. This means that by default, if two numbers are separated by / in SassScript, then they will appear that way in the resulting CSS.	http://sass-lang.com/documentation/file.SASS_REFERENCE.html#division-and-slash
Subtraction, Negative Numbers, and 	A										There are a number of different things - can mean in CSS and in Sass. It can be a subtraction operator (as in 5px - 3px), the beginning of a negative number (as in -3px), a unary negation operator (as in -$var), or part of an identifier (as in font-weight). Most of the time, it’s clear which is which, but there are some tricky cases. As a general rule, you’re safest if:	http://sass-lang.com/documentation/file.SASS_REFERENCE.html#subtraction
Color Operations	A										All arithmetic operations are supported for color values, where they work piecewise. This means that the operation is performed on the red, green, and blue components in turn. For example:<pre class="code ruby"><code class="ruby">p {\n  color: #010203 + #040506;\n}</code></pre>	http://sass-lang.com/documentation/file.SASS_REFERENCE.html#color_operations
String Operations	A										The + operation can be used to concatenate strings:<pre class="code ruby"><code class="ruby">p {\n  cursor: e + -resize;\n}</code></pre>	http://sass-lang.com/documentation/file.SASS_REFERENCE.html#string_operations
Boolean Operations	A										SassScript supports and, or, and not operators for boolean values.	http://sass-lang.com/documentation/file.SASS_REFERENCE.html#boolean_operations
List Operations	A										Lists don’t support any special operations. Instead, they’re manipulated using the list functions.	http://sass-lang.com/documentation/file.SASS_REFERENCE.html#list_operations
Parentheses	A										Parentheses can be used to affect the order of operations:<pre class="code ruby"><code class="ruby">p {\n  width: 1em + (2em * 3);\n}</code></pre>	http://sass-lang.com/documentation/file.SASS_REFERENCE.html#parentheses
Functions	A										SassScript defines some useful functions that are called using the normal CSS function syntax:<pre class="code ruby"><code class="ruby">p {\n  color: hsl(0, 100%, 50%);\n}</code></pre>	http://sass-lang.com/documentation/file.SASS_REFERENCE.html#functions
Keyword Arguments	A										Sass functions can also be called using explicit keyword arguments. The above example can also be written as:<pre class="code ruby"><code class="ruby">p {\n  color: hsl($hue: 0, $saturation: 100%, $lightness: 50%);\n}</code></pre>Mixins can also be included using explicit keyword arguments. For instance, the above example could be written as:<pre class="code ruby"><code class="ruby">p { @include sexy-border($color: blue); }\nh1 { @include sexy-border($color: blue, $width: 2in); }</code></pre>	http://sass-lang.com/documentation/file.SASS_REFERENCE.html#keyword_arguments
Interpolation #{}	A										You can also use SassScript variables in selectors and property names using #{} interpolation syntax:<pre class="code ruby"><code class="ruby">$name: foo;\n$attr: border;\np.#{$name} {\n  #{$attr}-color: blue;\n}</code></pre>	http://sass-lang.com/documentation/file.SASS_REFERENCE.html#interpolation_
& in SassScript	A										Just like when it’s used in selectors, & in SassScript refers to the current parent selector. It’s a comma-separated list of space-separated lists. For example:<pre class="code ruby"><code class="ruby">.foo.bar .baz.bang, .bip.qux {\n  $selector: &amp;;\n}</code></pre>	http://sass-lang.com/documentation/file.SASS_REFERENCE.html#parent-script
Variable Defaults !default	A										You can assign to variables if they aren’t already assigned by adding the !default flag to the end of the value. This means that if the variable has already been assigned to, it won’t be re-assigned, but if it doesn’t have a value yet, it will be given one.	http://sass-lang.com/documentation/file.SASS_REFERENCE.html#variable_defaults_
Rules and Directives	A										Sass supports all CSS3 @-rules, as well as some additional Sass-specific ones known as “directives.” These have various effects in Sass, detailed below. See also control directives and mixin directives.	http://sass-lang.com/documentation/file.SASS_REFERENCE.html#directives
import	A										Sass extends the CSS @import rule to allow it to import SCSS and Sass files. All imported SCSS and Sass files will be merged together into a single CSS output file. In addition, any variables or mixins defined in imported files can be used in the main file.	http://sass-lang.com/documentation/file.SASS_REFERENCE.html#import
Partials	A										If you have a SCSS or Sass file that you want to import but don’t want to compile to a CSS file, you can add an underscore to the beginning of the filename. This will tell Sass not to compile it to a normal CSS file. You can then import these files without using the underscore.	http://sass-lang.com/documentation/file.SASS_REFERENCE.html#partials
Nested import	A										Although most of the time it’s most useful to just have @imports at the top level of the document, it is possible to include them within CSS rules and @media rules. Like a base-level @import, this includes the contents of the @imported file. However, the imported rules will be nested in the same place as the original @import.	http://sass-lang.com/documentation/file.SASS_REFERENCE.html#nested-import
media	A										@media directives in Sass behave just like they do in plain CSS, with one extra capability: they can be nested in CSS rules. If a @media directive appears within a CSS rule, it will be bubbled up to the top level of the stylesheet, putting all the selectors on the way inside the rule. This makes it easy to add media-specific styles without having to repeat selectors or break the flow of the stylesheet. For example:<pre class="code ruby"><code class="ruby">.sidebar {\n  width: 300px;\n  @media screen and (orientation: landscape) {\n    width: 500px;\n  }\n}</code></pre>	http://sass-lang.com/documentation/file.SASS_REFERENCE.html#media
extend	A										There are often cases when designing a page when one class should have all the styles of another class, as well as its own specific styles. The most common way of handling this is to use both the more general class and the more specific class in the HTML. For example, suppose we have a design for a normal error and also for a serious error. We might write our markup like so:<pre class="code ruby"><code class="ruby">&lt;div class="error seriousError"&gt;\n  Oh no! You've been hacked!\n&lt;/div&gt;</code></pre>	http://sass-lang.com/documentation/file.SASS_REFERENCE.html#extend
How it Works	A										@extend works by inserting the extending selector (e.g. .seriousError) anywhere in the stylesheet that the extended selector (.e.g .error) appears. Thus the example above:<pre class="code ruby"><code class="ruby">.error {\n  border: 1px #f00;\n  background-color: #fdd;\n}\n.error.intrusion {\n  background-image: url("/image/hacked.png");\n}\n.seriousError {\n  @extend .error;\n  border-width: 3px;\n}</code></pre>	http://sass-lang.com/documentation/file.SASS_REFERENCE.html#how_it_works
Extending Complex Selectors	A										Class selectors aren’t the only things that can be extended. It’s possible to extend any selector involving only a single element, such as .special.cool, a:hover, or a.user[href^="http://"]. For example:<pre class="code ruby"><code class="ruby">.hoverlink {\n  @extend a:hover;\n}</code></pre>	http://sass-lang.com/documentation/file.SASS_REFERENCE.html#extending_complex_selectors
Multiple Extends	A										A single selector can extend more than one selector. This means that it inherits the styles of all the extended selectors. For example:<pre class="code ruby"><code class="ruby">.error {\n  border: 1px #f00;\n  background-color: #fdd;\n}\n.attention {\n  font-size: 3em;\n  background-color: #ff0;\n}\n.seriousError {\n  @extend .error;\n  @extend .attention;\n  border-width: 3px;\n}</code></pre>	http://sass-lang.com/documentation/file.SASS_REFERENCE.html#multiple_extends
Chaining Extends	A										It’s possible for one selector to extend another selector that in turn extends a third. For example:<pre class="code ruby"><code class="ruby">.error {\n  border: 1px #f00;\n  background-color: #fdd;\n}\n.seriousError {\n  @extend .error;\n  border-width: 3px;\n}\n.criticalError {\n  @extend .seriousError;\n  position: fixed;\n  top: 10%;\n  bottom: 10%;\n  left: 10%;\n  right: 10%;\n}</code></pre>	http://sass-lang.com/documentation/file.SASS_REFERENCE.html#chaining_extends
Selector Sequences	A										Selector sequences, such as .foo .bar or .foo + .bar, currently can’t be extended. However, it is possible for nested selectors themselves to use @extend. For example:<pre class="code ruby"><code class="ruby">#fake-links .link {\n  @extend a;\n}\n\na {\n  color: blue;\n  &amp;:hover {\n    text-decoration: underline;\n  }\n}</code></pre>	http://sass-lang.com/documentation/file.SASS_REFERENCE.html#selector_sequences
Merging Selector Sequences	A										Sometimes a selector sequence extends another selector that appears in another sequence. In this case, the two sequences need to be merged. For example:<pre class="code ruby"><code class="ruby">#admin .tabbar a {\n  font-weight: bold;\n}\n#demo .overview .fakelink {\n  @extend a;\n}</code></pre>	http://sass-lang.com/documentation/file.SASS_REFERENCE.html#merging_selector_sequences
extendOnly Selectors	A										Sometimes you’ll write styles for a class that you only ever want to @extend, and never want to use directly in your HTML. This is especially true when writing a Sass library, where you may provide styles for users to @extend if they need and ignore if they don’t.	http://sass-lang.com/documentation/file.SASS_REFERENCE.html#placeholders
The !optional Flag	A										Normally when you extend a selector, it’s an error if that @extend doesn’t work. For example, if you write a.important {@extend .notice}, it’s an error if there are no selectors that contain .notice. It’s also an error if the only selector containing .notice is h1.notice, since h1 conflicts with a and so no new selector would be generated.	http://sass-lang.com/documentation/file.SASS_REFERENCE.html#the__flag
extend in Directives	A										There are some restrictions on the use of @extend within directives such as @media. Sass is unable to make CSS rules outside of the @media block apply to selectors inside it without creating a huge amount of stylesheet bloat by copying styles all over the place. This means that if you use @extend within @media (or other CSS directives), you may only extend selectors that appear within the same directive block.	http://sass-lang.com/documentation/file.SASS_REFERENCE.html#_in_directives
atroot	A										The @at-root directive causes one or more rules to be emitted at the root of the document, rather than being nested beneath their parent selectors. It can either be used with a single inline selector:<pre class="code ruby"><code class="ruby">.parent {\n  ...\n  @at-root .child { ... }\n}</code></pre>	http://sass-lang.com/documentation/file.SASS_REFERENCE.html#at-root
atroot without  and atroot with 	A										By default, @at-root just excludes selectors. However, it’s also possible to use @at-root to move outside of nested directives such as @media as well. For example:<pre class="code ruby"><code class="ruby">@media print {\n  .page {\n    width: 8in;\n    @at-root (without: media) {\n      color: red;\n    }\n  }\n}</code></pre>	http://sass-lang.com/documentation/file.SASS_REFERENCE.html#_and_
debug	A										The @debug directive prints the value of a SassScript expression to the standard error output stream. It’s useful for debugging Sass files that have complicated SassScript going on. For example:<pre class="code ruby"><code class="ruby">@debug 10em + 12em;</code></pre>	http://sass-lang.com/documentation/file.SASS_REFERENCE.html#_5
warn	A										The @warn directive prints the value of a SassScript expression to the standard error output stream. It’s useful for libraries that need to warn users of deprecations or recovering from minor mixin usage mistakes. There are two major distinctions between @warn and @debug:	http://sass-lang.com/documentation/file.SASS_REFERENCE.html#_6
error	A										The @error directive throws the value of a SassScript expression as a fatal error, including a nice stack trace. It’s useful for validating arguments to mixins and functions. For example:<pre class="code ruby"><code class="ruby">@mixin adjust-location($x, $y) {\n  @if unitless($x) {\n    @error "$x may not be unitless, was #{$x}.";\n  }\n  @if unitless($y) {\n    @error "$y may not be unitless, was #{$y}.";\n  }\n  position: relative; left: $x; top: $y;\n}</code></pre>	http://sass-lang.com/documentation/file.SASS_REFERENCE.html#_7
Control Directives & Expressions	A										SassScript supports basic control directives and expressions for including styles only under some conditions or including the same style several times with variations.	http://sass-lang.com/documentation/file.SASS_REFERENCE.html#control_directives__expressions
if	A										The built-in if() function allows you to branch on a condition and returns only one of two possible outcomes. It can be used in any script context. The if function only evaluates the argument corresponding to the one that it will return – this allows you to refer to variables that may not be defined or to have calculations that would otherwise cause an error (E.g. divide by zero).<pre class="code ruby"><code class="ruby">if(true, 1px, 2px) =&gt; 1px\nif(false, 1px, 2px) =&gt; 2px</code></pre>The @if directive takes a SassScript expression and uses the styles nested beneath it if the expression returns anything other than false or null:<pre class="code ruby"><code class="ruby">p {\n  @if 1 + 1 == 2 { border: 1px solid;  }\n  @if 5 &lt; 3      { border: 2px dotted; }\n  @if null       { border: 3px double; }\n}</code></pre>	http://sass-lang.com/documentation/file.SASS_REFERENCE.html#_8
for	A										The @for directive repeatedly outputs a set of styles. For each repetition, a counter variable is used to adjust the output. The directive has two forms: @for $var from <start> through <end> and @for $var from <start> to <end>. Note the difference in the keywords through and to. $var can be any variable name, like $i; <start> and <end> are SassScript expressions that should return integers. When <start> is greater than <end> the counter will decrement instead of increment.	http://sass-lang.com/documentation/file.SASS_REFERENCE.html#_10
each	A										The @each directive usually has the form @each $var in <list or map>. $var can be any variable name, like $length or $name, and <list or map> is a SassScript expression that returns a list or a map.	http://sass-lang.com/documentation/file.SASS_REFERENCE.html#each-directive
Multiple Assignment	A										The @each directive can also use multiple variables, as in @each $var1, $var2, ... in <list>. If <list> is a list of lists, each element of the sub-lists is assigned to the respective variable. For example:<pre class="code ruby"><code class="ruby">@each $animal, $color, $cursor in (puma, black, default),\n                                  (sea-slug, blue, pointer),\n                                  (egret, white, move) {\n  .#{$animal}-icon {\n    background-image: url('/images/#{$animal}.png');\n    border: 2px solid $color;\n    cursor: $cursor;\n  }\n}</code></pre>	http://sass-lang.com/documentation/file.SASS_REFERENCE.html#each-multi-assign
while	A										The @while directive takes a SassScript expression and repeatedly outputs the nested styles until the statement evaluates to false. This can be used to achieve more complex looping than the @for statement is capable of, although this is rarely necessary. For example:<pre class="code ruby"><code class="ruby">$i: 6;\n@while $i &gt; 0 {\n  .item-#{$i} { width: 2em * $i; }\n  $i: $i - 2;\n}</code></pre>	http://sass-lang.com/documentation/file.SASS_REFERENCE.html#_12
Mixin Directives	A										Mixins allow you to define styles that can be re-used throughout the stylesheet without needing to resort to non-semantic classes like .float-left. Mixins can also contain full CSS rules, and anything else allowed elsewhere in a Sass document. They can even take arguments which allows you to produce a wide variety of styles with very few mixins.	http://sass-lang.com/documentation/file.SASS_REFERENCE.html#mixins
Defining a Mixin mixin	A										Mixins are defined with the @mixin directive. It’s followed by the name of the mixin and optionally the arguments, and a block containing the contents of the mixin. For example, the large-text mixin is defined as follows:<pre class="code ruby"><code class="ruby">@mixin large-text {\n  font: {\n    family: Arial;\n    size: 20px;\n    weight: bold;\n  }\n  color: #ff0000;\n}</code></pre>	http://sass-lang.com/documentation/file.SASS_REFERENCE.html#defining_a_mixin
Including a Mixin include	A										Mixins are included in the document with the @include directive. This takes the name of a mixin and optionally arguments to pass to it, and includes the styles defined by that mixin into the current rule. For example:<pre class="code ruby"><code class="ruby">.page-title {\n  @include large-text;\n  padding: 4px;\n  margin-top: 10px;\n}</code></pre>	http://sass-lang.com/documentation/file.SASS_REFERENCE.html#including_a_mixin
Arguments	A										Mixins can take SassScript values as arguments, which are given when the mixin is included and made available within the mixin as variables.	http://sass-lang.com/documentation/file.SASS_REFERENCE.html#mixin-arguments
Variable Arguments	A										Sometimes it makes sense for a mixin or function to take an unknown number of arguments. For example, a mixin for creating box shadows might take any number of shadows as arguments. For these situations, Sass supports “variable arguments,” which are arguments at the end of a mixin or function declaration that take all leftover arguments and package them up as a list. These arguments look just like normal arguments, but are followed by .... For example:<pre class="code ruby"><code class="ruby">@mixin box-shadow($shadows...) {\n  -moz-box-shadow: $shadows;\n  -webkit-box-shadow: $shadows;\n  box-shadow: $shadows;\n}\n\n.shadows {\n  @include box-shadow(0px 4px 5px #666, 2px 6px 10px #999);\n}</code></pre>	http://sass-lang.com/documentation/file.SASS_REFERENCE.html#variable_arguments
Passing Content Blocks to a Mixin	A										It is possible to pass a block of styles to the mixin for placement within the styles included by the mixin. The styles will appear at the location of any @content directives found within the mixin. This makes it possible to define abstractions relating to the construction of selectors and directives.	http://sass-lang.com/documentation/file.SASS_REFERENCE.html#mixin-content
Variable Scope and Content Blocks	A										The block of content passed to a mixin are evaluated in the scope where the block is defined, not in the scope of the mixin. This means that variables local to the mixin cannot be used within the passed style block and variables will resolve to the global value:<pre class="code ruby"><code class="ruby">$color: white;\n@mixin colors($color: blue) {\n  background-color: $color;\n  @content;\n  border-color: $color;\n}\n.colors {\n  @include colors { color: $color; }\n}</code></pre>	http://sass-lang.com/documentation/file.SASS_REFERENCE.html#variable_scope_and_content_blocks
Function Directives	A										It is possible to define your own functions in sass and use them in any value or script context. For example:<pre class="code ruby"><code class="ruby">$grid-width: 40px;\n$gutter-width: 10px;\n\n@function grid-width($n) {\n  @return $n * $grid-width + ($n - 1) * $gutter-width;\n}\n\n#sidebar { width: grid-width(5); }</code></pre>	http://sass-lang.com/documentation/file.SASS_REFERENCE.html#function_directives
Output Style	A										Although the default CSS style that Sass outputs is very nice and reflects the structure of the document, tastes and needs vary and so Sass supports several other styles.	http://sass-lang.com/documentation/file.SASS_REFERENCE.html#output_style
nested	A										Nested style is the default Sass style, because it reflects the structure of the CSS styles and the HTML document they’re styling. Each property has its own line, but the indentation isn’t constant. Each rule is indented based on how deeply it’s nested. For example:<pre class="code ruby"><code class="ruby">#main {\n  color: #fff;\n  background-color: #000; }\n  #main p {\n    width: 10em; }\n\n.huge {\n  font-size: 10em;\n  font-weight: bold;\n  text-decoration: underline; }</code></pre>	http://sass-lang.com/documentation/file.SASS_REFERENCE.html#_13
expanded	A										Expanded is a more typical human-made CSS style, with each property and rule taking up one line. Properties are indented within the rules, but the rules aren’t indented in any special way. For example:<pre class="code ruby"><code class="ruby">#main {\n  color: #fff;\n  background-color: #000;\n}\n#main p {\n  width: 10em;\n}\n\n.huge {\n  font-size: 10em;\n  font-weight: bold;\n  text-decoration: underline;\n}</code></pre>	http://sass-lang.com/documentation/file.SASS_REFERENCE.html#_14
compact	A										Compact style takes up less space than Nested or Expanded. It also draws the focus more to the selectors than to their properties. Each CSS rule takes up only one line, with every property defined on that line. Nested rules are placed next to each other with no newline, while separate groups of rules have newlines between them. For example:<pre class="code ruby"><code class="ruby">#main { color: #fff; background-color: #000; }\n#main p { width: 10em; }\n\n.huge { font-size: 10em; font-weight: bold; text-decoration: underline; }</code></pre>	http://sass-lang.com/documentation/file.SASS_REFERENCE.html#_15
compressed	A										Compressed style takes up the minimum amount of space possible, having no whitespace except that necessary to separate selectors and a newline at the end of the file. It also includes some other minor compressions, such as choosing the smallest representation for colors. It’s not meant to be human-readable. For example:<pre class="code ruby"><code class="ruby">#main{color:#fff;background-color:#000}#main p{width:10em}.huge{font-size:10em;font-weight:bold;text-decoration:underline}</code></pre>	http://sass-lang.com/documentation/file.SASS_REFERENCE.html#_16
Extending Sass	A										Sass provides a number of advanced customizations for users with unique requirements. Using these features requires a strong understanding of Ruby.	http://sass-lang.com/documentation/file.SASS_REFERENCE.html#extending_sass
Defining Custom Sass Functions	A										Users can define their own Sass functions using the Ruby API. For more information, see the source documentation.	http://sass-lang.com/documentation/file.SASS_REFERENCE.html#defining_custom_sass_functions
Cache Stores	A										Sass caches parsed documents so that they can be reused without parsing them again unless they have changed. By default, Sass will write these cache files to a location on the filesystem indicated by :cache_location. If you cannot write to the filesystem or need to share cache across ruby processes or machines, then you can define your own cache store and set the:cache_store option. For details on creating your own cache store, please see the source documentation.	http://sass-lang.com/documentation/file.SASS_REFERENCE.html#cache_stores
Custom Importers	A										Sass importers are in charge of taking paths passed to @import and finding the appropriate Sass code for those paths. By default, this code is loaded from the filesystem, but importers could be added to load from a database, over HTTP, or use a different file naming scheme than what Sass expects.	http://sass-lang.com/documentation/file.SASS_REFERENCE.html#custom_importers
